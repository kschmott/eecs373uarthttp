
eecs373uarthttp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1ec  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  0800b3b0  0800b3b0  0000c3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be90  0800be90  0000d240  2**0
                  CONTENTS
  4 .ARM          00000008  0800be90  0800be90  0000ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be98  0800be98  0000d240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be98  0800be98  0000ce98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be9c  0800be9c  0000ce9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800bea0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000240  0800c0e0  0000d240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  0800c0e0  0000d7d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fda  00000000  00000000  0000d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d85  00000000  00000000  0002624a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00028fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ce  00000000  00000000  0002a648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c590  00000000  00000000  0002b816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b66d  00000000  00000000  00057da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fa35  00000000  00000000  00073413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071ec  00000000  00000000  00182e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000240 	.word	0x20000240
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b394 	.word	0x0800b394

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000244 	.word	0x20000244
 80001fc:	0800b394 	.word	0x0800b394

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <FoodOrder_Init>:
    char name[20];
    uint8_t valid;
    int id;
    int box; // 0 when it has not been delivered
} FoodOrder;
void FoodOrder_Init(FoodOrder* order) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    order->valid = 0;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	751a      	strb	r2, [r3, #20]
    order->box = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
    for(int i = 0; i < 20; ++i){
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e007      	b.n	8000f12 <FoodOrder_Init+0x2a>
    	order->name[i] = '\0';
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 20; ++i){
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b13      	cmp	r3, #19
 8000f16:	ddf4      	ble.n	8000f02 <FoodOrder_Init+0x1a>
    }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <big>:
    0x01, 0x01, 0x1E, 0x00, 0x19, 0x1D, 0x17, 0x12, 0x00, 0x3C, 0x3C, 0x3C,
    0x3C, 0x00, 0x00, 0x00, 0x00, 0x00 // #255 NBSP
};

// convert a little endian 16 bit number to big endian
uint16_t big(uint16_t original) {
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	80fb      	strh	r3, [r7, #6]
	uint16_t result = original << 8;
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	81fb      	strh	r3, [r7, #14]
	result |= original >> 8;
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	81fb      	strh	r3, [r7, #14]
	return result;
 8000f42:	89fb      	ldrh	r3, [r7, #14]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <sendCommand>:

// send an SPI command in the correct format
void sendCommand(SPI_HandleTypeDef* spi, uint8_t commandByte, uint8_t *dataBytes, uint16_t numDataBytes) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	72fb      	strb	r3, [r7, #11]
 8000f60:	4613      	mov	r3, r2
 8000f62:	813b      	strh	r3, [r7, #8]
	//printf("Sending command: cmd %x, args %d\r\n", commandByte, numDataBytes);

	// first send the command byte
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET); // pull DC low
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <sendCommand+0x50>)
 8000f6c:	f002 f8a0 	bl	80030b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &commandByte, 1, 100); // write the byte
 8000f70:	f107 010b 	add.w	r1, r7, #11
 8000f74:	2364      	movs	r3, #100	@ 0x64
 8000f76:	2201      	movs	r2, #1
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f004 fbec 	bl	8005756 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET); // pull DC back high
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f84:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <sendCommand+0x50>)
 8000f86:	f002 f893 	bl	80030b0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spi, dataBytes, numDataBytes, 100);
 8000f8a:	893a      	ldrh	r2, [r7, #8]
 8000f8c:	2364      	movs	r3, #100	@ 0x64
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f004 fbe0 	bl	8005756 <HAL_SPI_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	48001400 	.word	0x48001400

08000fa4 <sendBlock>:

// x1 <= x2, y1 <= y2
void sendBlock(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t value) {
 8000fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fa8:	b08f      	sub	sp, #60	@ 0x3c
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	4608      	mov	r0, r1
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	817b      	strh	r3, [r7, #10]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	813b      	strh	r3, [r7, #8]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	466b      	mov	r3, sp
 8000fc2:	461e      	mov	r6, r3
	uint32_t amount = (uint32_t)(x2-x1+1) * (uint32_t)(y2-y1+1); // amount of pixels to send
 8000fc4:	893a      	ldrh	r2, [r7, #8]
 8000fc6:	897b      	ldrh	r3, [r7, #10]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	fb01 f303 	mul.w	r3, r1, r3
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t widthSpan[2] = {big(x1), big(x2)};
 8000fde:	897b      	ldrh	r3, [r7, #10]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ffa0 	bl	8000f26 <big>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	82bb      	strh	r3, [r7, #20]
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff9a 	bl	8000f26 <big>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	82fb      	strh	r3, [r7, #22]
	uint16_t heightSpan[2] = {big(y1), big(y2)};
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff94 	bl	8000f26 <big>
 8000ffe:	4603      	mov	r3, r0
 8001000:	823b      	strh	r3, [r7, #16]
 8001002:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff8d 	bl	8000f26 <big>
 800100c:	4603      	mov	r3, r0
 800100e:	827b      	strh	r3, [r7, #18]
	sendCommand(spi, HX8357_CASET, (uint8_t*)widthSpan, 4);
 8001010:	f107 0214 	add.w	r2, r7, #20
 8001014:	2304      	movs	r3, #4
 8001016:	212a      	movs	r1, #42	@ 0x2a
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff ff99 	bl	8000f50 <sendCommand>
	sendCommand(spi, HX8357_PASET, (uint8_t*)heightSpan, 4);
 800101e:	f107 0210 	add.w	r2, r7, #16
 8001022:	2304      	movs	r3, #4
 8001024:	212b      	movs	r1, #43	@ 0x2b
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f7ff ff92 	bl	8000f50 <sendCommand>
	// This sends the pixels. There are likely more than 2^16 to send,
	// however the HAL SPI can only send 2^16 at a time, so break up the
	// transaction into chunks of 2^16. Don't send one at a time because that
	// is much much slower. It is still fairly slow so in the future I
	// could try to optimize it.
	sendCommand(spi, HX8357_RAMWR, NULL, 0);
 800102c:	2300      	movs	r3, #0
 800102e:	2200      	movs	r2, #0
 8001030:	212c      	movs	r1, #44	@ 0x2c
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ff8c 	bl	8000f50 <sendCommand>
	uint16_t fullLength = 32767; // maximum amount of pixels that can be sent at once
 8001038:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800103c:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t buffer[fullLength];
 800103e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001040:	460b      	mov	r3, r1
 8001042:	3b01      	subs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
 8001046:	b28b      	uxth	r3, r1
 8001048:	2200      	movs	r2, #0
 800104a:	4698      	mov	r8, r3
 800104c:	4691      	mov	r9, r2
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800105a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800105e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001062:	b28b      	uxth	r3, r1
 8001064:	2200      	movs	r2, #0
 8001066:	461c      	mov	r4, r3
 8001068:	4615      	mov	r5, r2
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	012b      	lsls	r3, r5, #4
 8001074:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001078:	0122      	lsls	r2, r4, #4
 800107a:	460b      	mov	r3, r1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	3307      	adds	r3, #7
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	ebad 0d03 	sub.w	sp, sp, r3
 8001088:	466b      	mov	r3, sp
 800108a:	3301      	adds	r3, #1
 800108c:	085b      	lsrs	r3, r3, #1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	623b      	str	r3, [r7, #32]
	for (uint16_t i = 0; i < fullLength; i++) buffer[i] = big(value); // fill the buffer
 8001092:	2300      	movs	r3, #0
 8001094:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001096:	e00d      	b.n	80010b4 <sendBlock+0x110>
 8001098:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 800109a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff41 	bl	8000f26 <big>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 80010ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80010b0:	3301      	adds	r3, #1
 80010b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80010b4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80010b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3ed      	bcc.n	8001098 <sendBlock+0xf4>
	uint32_t fullTransactions = amount / fullLength; // amount of full transactions to send
 80010bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c4:	61fb      	str	r3, [r7, #28]
	uint16_t weirdLength = amount % fullLength; // one transaction will be a different amount
 80010c6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80010c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80010ce:	fb01 f202 	mul.w	r2, r1, r2
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	837b      	strh	r3, [r7, #26]
	if (weirdLength != 0) {
 80010d6:	8b7b      	ldrh	r3, [r7, #26]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <sendBlock+0x148>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, weirdLength * 2, 100);
 80010dc:	8b7b      	ldrh	r3, [r7, #26]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	2364      	movs	r3, #100	@ 0x64
 80010e4:	6a39      	ldr	r1, [r7, #32]
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f004 fb35 	bl	8005756 <HAL_SPI_Transmit>
	}
	for (uint32_t i = 0; i < fullTransactions; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80010f0:	e00a      	b.n	8001108 <sendBlock+0x164>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, fullLength * 2, 100);
 80010f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	2364      	movs	r3, #100	@ 0x64
 80010fa:	6a39      	ldr	r1, [r7, #32]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f004 fb2a 	bl	8005756 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < fullTransactions; i++) {
 8001102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001104:	3301      	adds	r3, #1
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
 8001108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3f0      	bcc.n	80010f2 <sendBlock+0x14e>
 8001110:	46b5      	mov	sp, r6
	}
}
 8001112:	bf00      	nop
 8001114:	373c      	adds	r7, #60	@ 0x3c
 8001116:	46bd      	mov	sp, r7
 8001118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800111c <sendCharacter>:

// (x, y) is the bottom left corner of the character
// size_x, size_y is magnification factor
void sendCharacter(SPI_HandleTypeDef* spi, uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size_x, uint8_t size_y) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af02      	add	r7, sp, #8
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	4608      	mov	r0, r1
 8001126:	4611      	mov	r1, r2
 8001128:	461a      	mov	r2, r3
 800112a:	4603      	mov	r3, r0
 800112c:	817b      	strh	r3, [r7, #10]
 800112e:	460b      	mov	r3, r1
 8001130:	813b      	strh	r3, [r7, #8]
 8001132:	4613      	mov	r3, r2
 8001134:	71fb      	strb	r3, [r7, #7]
	// taken from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp#L1150-L1166
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001136:	2300      	movs	r3, #0
 8001138:	77fb      	strb	r3, [r7, #31]
 800113a:	e060      	b.n	80011fe <sendCharacter+0xe2>
    	uint8_t line = font[c * 5 + i];
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	441a      	add	r2, r3
 8001144:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001148:	4413      	add	r3, r2
 800114a:	4a31      	ldr	r2, [pc, #196]	@ (8001210 <sendCharacter+0xf4>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	77bb      	strb	r3, [r7, #30]
    	for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001150:	2300      	movs	r3, #0
 8001152:	777b      	strb	r3, [r7, #29]
 8001154:	e049      	b.n	80011ea <sendCharacter+0xce>
    		if (line & 1) {
 8001156:	7fbb      	ldrb	r3, [r7, #30]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d03b      	beq.n	80011d8 <sendCharacter+0xbc>
    			uint16_t x1 = x + 7 * size_x - j * size_x;
 8001160:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001164:	b29b      	uxth	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	00d2      	lsls	r2, r2, #3
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b29a      	uxth	r2, r3
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	4413      	add	r3, r2
 8001172:	b29a      	uxth	r2, r3
 8001174:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001178:	b299      	uxth	r1, r3
 800117a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800117e:	b29b      	uxth	r3, r3
 8001180:	fb11 f303 	smulbb	r3, r1, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	837b      	strh	r3, [r7, #26]
    			uint16_t y1 = y + i * size_y;
 800118a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800118e:	b29a      	uxth	r2, r3
 8001190:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001194:	b29b      	uxth	r3, r3
 8001196:	fb12 f303 	smulbb	r3, r2, r3
 800119a:	b29a      	uxth	r2, r3
 800119c:	893b      	ldrh	r3, [r7, #8]
 800119e:	4413      	add	r3, r2
 80011a0:	833b      	strh	r3, [r7, #24]
    			uint16_t x2 = x1 + size_x - 1;
 80011a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	8b7b      	ldrh	r3, [r7, #26]
 80011aa:	4413      	add	r3, r2
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3b01      	subs	r3, #1
 80011b0:	82fb      	strh	r3, [r7, #22]
    			uint16_t y2 = y1 + size_y - 1;
 80011b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	8b3b      	ldrh	r3, [r7, #24]
 80011ba:	4413      	add	r3, r2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3b01      	subs	r3, #1
 80011c0:	82bb      	strh	r3, [r7, #20]
    			sendBlock(spi, x1, x2, y1, y2, color);
 80011c2:	8b38      	ldrh	r0, [r7, #24]
 80011c4:	8afa      	ldrh	r2, [r7, #22]
 80011c6:	8b79      	ldrh	r1, [r7, #26]
 80011c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	8abb      	ldrh	r3, [r7, #20]
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	4603      	mov	r3, r0
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff fee6 	bl	8000fa4 <sendBlock>
    	for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80011d8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	777b      	strb	r3, [r7, #29]
 80011e4:	7fbb      	ldrb	r3, [r7, #30]
 80011e6:	085b      	lsrs	r3, r3, #1
 80011e8:	77bb      	strb	r3, [r7, #30]
 80011ea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	ddb1      	ble.n	8001156 <sendCharacter+0x3a>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80011f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	77fb      	strb	r3, [r7, #31]
 80011fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001202:	2b04      	cmp	r3, #4
 8001204:	dd9a      	ble.n	800113c <sendCharacter+0x20>
    		}
    	}
    }
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	0800b5b0 	.word	0x0800b5b0

08001214 <sendString>:

void sendString(SPI_HandleTypeDef* spi, uint16_t x, uint16_t y, char* s, uint16_t color, uint8_t size_x, uint8_t size_y) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af04      	add	r7, sp, #16
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	817b      	strh	r3, [r7, #10]
 8001222:	4613      	mov	r3, r2
 8001224:	813b      	strh	r3, [r7, #8]
	uint16_t width = (5 + 1) * size_y; // because character has 5 columns, +1 to add space between characters
 8001226:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	0052      	lsls	r2, r2, #1
 8001230:	4413      	add	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; s[i] != 0; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
 800123a:	e023      	b.n	8001284 <sendString+0x70>
		uint16_t offset = y + i * width;
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	b29b      	uxth	r3, r3
 8001240:	8aba      	ldrh	r2, [r7, #20]
 8001242:	fb12 f303 	smulbb	r3, r2, r3
 8001246:	b29a      	uxth	r2, r3
 8001248:	893b      	ldrh	r3, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	827b      	strh	r3, [r7, #18]
		if (offset + width > 479) return; // off the end of the screen
 800124e:	8a7a      	ldrh	r2, [r7, #18]
 8001250:	8abb      	ldrh	r3, [r7, #20]
 8001252:	4413      	add	r3, r2
 8001254:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001258:	da1b      	bge.n	8001292 <sendString+0x7e>
		sendCharacter(spi, x, offset, s[i], color, size_x, size_y);
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	7818      	ldrb	r0, [r3, #0]
 8001262:	8a7a      	ldrh	r2, [r7, #18]
 8001264:	8979      	ldrh	r1, [r7, #10]
 8001266:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	8c3b      	ldrh	r3, [r7, #32]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	4603      	mov	r3, r0
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ff4f 	bl	800111c <sendCharacter>
	for (uint8_t i = 0; s[i] != 0; i++) {
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	3301      	adds	r3, #1
 8001282:	75fb      	strb	r3, [r7, #23]
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1d5      	bne.n	800123c <sendString+0x28>
 8001290:	e000      	b.n	8001294 <sendString+0x80>
		if (offset + width > 479) return; // off the end of the screen
 8001292:	bf00      	nop
	}
}
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <initialize_screen>:

void initialize_screen(SPI_HandleTypeDef* spi) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	printf("Starting initialization.\r\n");
 80012a4:	4827      	ldr	r0, [pc, #156]	@ (8001344 <initialize_screen+0xa8>)
 80012a6:	f008 f8fd 	bl	80094a4 <puts>

	// hardware reset the display
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012b0:	4825      	ldr	r0, [pc, #148]	@ (8001348 <initialize_screen+0xac>)
 80012b2:	f001 fefd 	bl	80030b0 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80012b6:	20fa      	movs	r0, #250	@ 0xfa
 80012b8:	f001 fb78 	bl	80029ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012c2:	4821      	ldr	r0, [pc, #132]	@ (8001348 <initialize_screen+0xac>)
 80012c4:	f001 fef4 	bl	80030b0 <HAL_GPIO_WritePin>

	uint8_t *addr = initd;
 80012c8:	4b20      	ldr	r3, [pc, #128]	@ (800134c <initialize_screen+0xb0>)
 80012ca:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 80012cc:	e02c      	b.n	8001328 <initialize_screen+0x8c>
		x = *(addr++);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60fa      	str	r2, [r7, #12]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	72bb      	strb	r3, [r7, #10]
		numArgs = x & 0x7F;
 80012d8:	7abb      	ldrb	r3, [r7, #10]
 80012da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012de:	727b      	strb	r3, [r7, #9]
		if (cmd != 0xFF) { // '255' is ignored
 80012e0:	7afb      	ldrb	r3, [r7, #11]
 80012e2:	2bff      	cmp	r3, #255	@ 0xff
 80012e4:	d015      	beq.n	8001312 <initialize_screen+0x76>
		  if (x & 0x80) {  // If high bit set, numArgs is a delay time
 80012e6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da06      	bge.n	80012fc <initialize_screen+0x60>
			sendCommand(spi, cmd, NULL, 0);
 80012ee:	7af9      	ldrb	r1, [r7, #11]
 80012f0:	2300      	movs	r3, #0
 80012f2:	2200      	movs	r2, #0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fe2b 	bl	8000f50 <sendCommand>
 80012fa:	e00a      	b.n	8001312 <initialize_screen+0x76>
		  } else {
			sendCommand(spi, cmd, addr, numArgs);
 80012fc:	7a7b      	ldrb	r3, [r7, #9]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	7af9      	ldrb	r1, [r7, #11]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fe23 	bl	8000f50 <sendCommand>
			addr += numArgs;
 800130a:	7a7b      	ldrb	r3, [r7, #9]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
		  }
		}
		if (x & 0x80) {       // If high bit set...
 8001312:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001316:	2b00      	cmp	r3, #0
 8001318:	da06      	bge.n	8001328 <initialize_screen+0x8c>
		  HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800131a:	7a7a      	ldrb	r2, [r7, #9]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fb42 	bl	80029ac <HAL_Delay>
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60fa      	str	r2, [r7, #12]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	72fb      	strb	r3, [r7, #11]
 8001332:	7afb      	ldrb	r3, [r7, #11]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ca      	bne.n	80012ce <initialize_screen+0x32>
		}
	}
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800b3b0 	.word	0x0800b3b0
 8001348:	48001400 	.word	0x48001400
 800134c:	20000000 	.word	0x20000000

08001350 <draw>:

void draw(SPI_HandleTypeDef* spi) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af04      	add	r7, sp, #16
 8001356:	6078      	str	r0, [r7, #4]
	printf("Sending pixels.\r\n");
 8001358:	482b      	ldr	r0, [pc, #172]	@ (8001408 <draw+0xb8>)
 800135a:	f008 f8a3 	bl	80094a4 <puts>

	const uint16_t yend = 479;
 800135e:	f240 13df 	movw	r3, #479	@ 0x1df
 8001362:	81fb      	strh	r3, [r7, #14]
	const uint16_t xend = 319;
 8001364:	f240 133f 	movw	r3, #319	@ 0x13f
 8001368:	81bb      	strh	r3, [r7, #12]

	// use https://rgbcolorpicker.com/565 to find pixel values
	sendBlock(spi, 0, xend, 0, yend, 0);
 800136a:	89ba      	ldrh	r2, [r7, #12]
 800136c:	2300      	movs	r3, #0
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	2100      	movs	r1, #0
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fe13 	bl	8000fa4 <sendBlock>
	sendBlock(spi, 25, 25+75, 50, yend-50, 0x2dab);
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	3b32      	subs	r3, #50	@ 0x32
 8001382:	b29b      	uxth	r3, r3
 8001384:	f642 52ab 	movw	r2, #11691	@ 0x2dab
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2332      	movs	r3, #50	@ 0x32
 800138e:	2264      	movs	r2, #100	@ 0x64
 8001390:	2119      	movs	r1, #25
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fe06 	bl	8000fa4 <sendBlock>
	sendBlock(spi, 25+75+25, 25+75+25+75, 50, yend-50, 0x2dab);
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	3b32      	subs	r3, #50	@ 0x32
 800139c:	b29b      	uxth	r3, r3
 800139e:	f642 52ab 	movw	r2, #11691	@ 0x2dab
 80013a2:	9201      	str	r2, [sp, #4]
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2332      	movs	r3, #50	@ 0x32
 80013a8:	22c8      	movs	r2, #200	@ 0xc8
 80013aa:	217d      	movs	r1, #125	@ 0x7d
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fdf9 	bl	8000fa4 <sendBlock>

	sendString(spi, xend-70, 20, "Delivering for?", 0xffff, 2, 2);
 80013b2:	89bb      	ldrh	r3, [r7, #12]
 80013b4:	3b46      	subs	r3, #70	@ 0x46
 80013b6:	b299      	uxth	r1, r3
 80013b8:	2302      	movs	r3, #2
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	2302      	movs	r3, #2
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <draw+0xbc>)
 80013c8:	2214      	movs	r2, #20
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff22 	bl	8001214 <sendString>
	sendString(spi, 25+75+25 + 10, 50 + 10, "B. Obama", 0x0, 2, 2);
 80013d0:	2302      	movs	r3, #2
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	2302      	movs	r3, #2
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	2300      	movs	r3, #0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <draw+0xc0>)
 80013de:	223c      	movs	r2, #60	@ 0x3c
 80013e0:	2187      	movs	r1, #135	@ 0x87
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff16 	bl	8001214 <sendString>
	sendString(spi, 25 + 10, 50 + 10, "Benton E.", 0x0, 5, 5);
 80013e8:	2305      	movs	r3, #5
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2305      	movs	r3, #5
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <draw+0xc4>)
 80013f6:	223c      	movs	r2, #60	@ 0x3c
 80013f8:	2123      	movs	r1, #35	@ 0x23
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ff0a 	bl	8001214 <sendString>
	//sendBlock(spi, 0, 0, 0, 0, 0x17e0);
	//sendBlock(spi, xend, xend, yend, yend, 0xf880);
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	0800b3cc 	.word	0x0800b3cc
 800140c:	0800b3e0 	.word	0x0800b3e0
 8001410:	0800b3f0 	.word	0x0800b3f0
 8001414:	0800b3fc 	.word	0x0800b3fc

08001418 <writeRegister8>:
#include "touch-defines.h"

// plan is to try stmpe. if it flops, switch to manual
// i2c1_sda is PB9, i2c1_scl is PB8

void writeRegister8(I2C_HandleTypeDef* i2c, uint8_t reg, uint8_t value){
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af02      	add	r7, sp, #8
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
 8001424:	4613      	mov	r3, r2
 8001426:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {reg, value};
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	733b      	strb	r3, [r7, #12]
 800142c:	78bb      	ldrb	r3, [r7, #2]
 800142e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, buffer, 2, 1000);
 8001430:	f107 020c 	add.w	r2, r7, #12
 8001434:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2302      	movs	r3, #2
 800143c:	2182      	movs	r1, #130	@ 0x82
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f001 feea 	bl	8003218 <HAL_I2C_Master_Transmit>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <writeRegister8+0x40>
		printf("I2C write to STMPE failed with %d.\r\n", status);
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	4619      	mov	r1, r3
 8001452:	4803      	ldr	r0, [pc, #12]	@ (8001460 <writeRegister8+0x48>)
 8001454:	f007 ffbe 	bl	80093d4 <iprintf>
	}
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0800b408 	.word	0x0800b408

08001464 <readRegister8>:

uint8_t readRegister8(I2C_HandleTypeDef* i2c, uint8_t reg) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
	// problem is don't know what restart is
	// You are supposed to i2c write the address, then do an empty i2c read
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, &reg, 1, 1000);
 8001470:	1cfa      	adds	r2, r7, #3
 8001472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	2182      	movs	r1, #130	@ 0x82
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f001 fecb 	bl	8003218 <HAL_I2C_Master_Transmit>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <readRegister8+0x32>
		printf("I2C write (for the purpose of reading) to STMPE failed with %d.\r\n", status);
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4619      	mov	r1, r3
 8001490:	480f      	ldr	r0, [pc, #60]	@ (80014d0 <readRegister8+0x6c>)
 8001492:	f007 ff9f 	bl	80093d4 <iprintf>
	}

	uint8_t result = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	73bb      	strb	r3, [r7, #14]
	// TODO: maybe the byte value here should be 1
	status = HAL_I2C_Master_Receive(i2c, (STMPE_ADDR << 1) | 1, &result, 1, 1000);
 800149a:	f107 020e 	add.w	r2, r7, #14
 800149e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	2183      	movs	r1, #131	@ 0x83
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f001 ffcd 	bl	8003448 <HAL_I2C_Master_Receive>
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <readRegister8+0x62>
		printf("I2C read from STMPE failed with %d.\r\n", status);
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <readRegister8+0x70>)
 80014be:	f007 ff89 	bl	80093d4 <iprintf>
		return 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <readRegister8+0x64>
	}
	return result;
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	0800b430 	.word	0x0800b430
 80014d4:	0800b474 	.word	0x0800b474

080014d8 <initialize_touch>:
	} else {
		//printf("Touched nothing.\r\n");
	}
}

void initialize_touch(I2C_HandleTypeDef* i2c) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	// TODO: only thing I can think of is that you need to read the version here for some reason
	// the problem is that I need to do some sort of request response thing, for read
	// it is a write then request

	printf("Initializing touch.\r\n");
 80014e0:	483c      	ldr	r0, [pc, #240]	@ (80015d4 <initialize_touch+0xfc>)
 80014e2:	f007 ffdf 	bl	80094a4 <puts>

	  uint16_t v;
	  v = readRegister8(i2c, 0);
 80014e6:	2100      	movs	r1, #0
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ffbb 	bl	8001464 <readRegister8>
 80014ee:	4603      	mov	r3, r0
 80014f0:	81bb      	strh	r3, [r7, #12]
	  v <<= 8;
 80014f2:	89bb      	ldrh	r3, [r7, #12]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	81bb      	strh	r3, [r7, #12]
	  v |= readRegister8(i2c, 1);
 80014f8:	2101      	movs	r1, #1
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffb2 	bl	8001464 <readRegister8>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	89bb      	ldrh	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	81bb      	strh	r3, [r7, #12]
	  printf("STMPE version is 0x%x\r\n", v);
 800150a:	89bb      	ldrh	r3, [r7, #12]
 800150c:	4619      	mov	r1, r3
 800150e:	4832      	ldr	r0, [pc, #200]	@ (80015d8 <initialize_touch+0x100>)
 8001510:	f007 ff60 	bl	80093d4 <iprintf>

	  writeRegister8(i2c, STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
 8001514:	2202      	movs	r2, #2
 8001516:	2103      	movs	r1, #3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff7d 	bl	8001418 <writeRegister8>

	  HAL_Delay(1000);
 800151e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001522:	f001 fa43 	bl	80029ac <HAL_Delay>

	  for (uint8_t i = 0; i < 65; i++) {
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e007      	b.n	800153c <initialize_touch+0x64>
	    readRegister8(i2c, i);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	4619      	mov	r1, r3
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff97 	bl	8001464 <readRegister8>
	  for (uint8_t i = 0; i < 65; i++) {
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b40      	cmp	r3, #64	@ 0x40
 8001540:	d9f4      	bls.n	800152c <initialize_touch+0x54>
	  }

	  writeRegister8(i2c, STMPE_SYS_CTRL2, 0x0); // turn on clocks!
 8001542:	2200      	movs	r2, #0
 8001544:	2104      	movs	r1, #4
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ff66 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CTRL,
 800154c:	2201      	movs	r2, #1
 800154e:	2140      	movs	r1, #64	@ 0x40
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff61 	bl	8001418 <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(i2c, STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
 8001556:	2201      	movs	r2, #1
 8001558:	210a      	movs	r1, #10
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff5c 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
 8001560:	2260      	movs	r2, #96	@ 0x60
 8001562:	2120      	movs	r1, #32
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff57 	bl	8001418 <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(i2c, STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
 800156a:	2202      	movs	r2, #2
 800156c:	2121      	movs	r1, #33	@ 0x21
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff52 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
 8001574:	22a4      	movs	r2, #164	@ 0xa4
 8001576:	2141      	movs	r1, #65	@ 0x41
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff4d 	bl	8001418 <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(i2c, STMPE_TSC_FRACTION_Z, 0x6);
 800157e:	2206      	movs	r2, #6
 8001580:	2156      	movs	r1, #86	@ 0x56
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff48 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_TH, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	214a      	movs	r1, #74	@ 0x4a
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff43 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
 8001592:	2201      	movs	r2, #1
 8001594:	214b      	movs	r1, #75	@ 0x4b
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff3e 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, 0); // unreset
 800159c:	2200      	movs	r2, #0
 800159e:	214b      	movs	r1, #75	@ 0x4b
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff39 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2158      	movs	r1, #88	@ 0x58
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff34 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_STA, 0xFF); // reset all ints
 80015b0:	22ff      	movs	r2, #255	@ 0xff
 80015b2:	210b      	movs	r1, #11
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2f 	bl	8001418 <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_CTRL,
 80015ba:	2203      	movs	r2, #3
 80015bc:	2109      	movs	r1, #9
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff2a 	bl	8001418 <writeRegister8>
	                 STMPE_INT_CTRL_POL_LOW | STMPE_INT_CTRL_EDGE | STMPE_INT_CTRL_ENABLE);

	  printf("Finished touch setup.\r\n");
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <initialize_touch+0x104>)
 80015c6:	f007 ff6d 	bl	80094a4 <puts>
//			  readPosition(i2c, &x, &y, &z);
//			  //printf("yes touch: (%d, %d, %d)\r", x, y, z);
//			  //printf("no  touch: \r");
//		  }
//	  }
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800b500 	.word	0x0800b500
 80015d8:	0800b518 	.word	0x0800b518
 80015dc:	0800b530 	.word	0x0800b530

080015e0 <openDoor>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void uartSend (char *str);
int prevIdCode = -1;
void openDoor(int id){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	printf("Open The door signal sent with id %d\r\n", id);
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <openDoor+0x18>)
 80015ec:	f007 fef2 	bl	80093d4 <iprintf>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	0800b548 	.word	0x0800b548

080015fc <readTinyCodeData>:

void readTinyCodeData(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0c4      	sub	sp, #272	@ 0x110
 8001600:	af02      	add	r7, sp, #8
    uint8_t readBuffer[256]; // Buffer to store the read data
    uint16_t contentLength = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106

    // First, read the content length
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, READ_LEN, HAL_MAX_DELAY);
 8001608:	463a      	mov	r2, r7
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	2118      	movs	r1, #24
 8001614:	4831      	ldr	r0, [pc, #196]	@ (80016dc <readTinyCodeData+0xe0>)
 8001616:	f001 ff17 	bl	8003448 <HAL_I2C_Master_Receive>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
    if(status != HAL_OK) {
 8001620:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8001624:	2b00      	cmp	r3, #0
 8001626:	d155      	bne.n	80016d4 <readTinyCodeData+0xd8>
        // Handle communication error
    } else {
        // If read is successful, parse the content length
        contentLength = readBuffer[0] | (readBuffer[1] << 8);
 8001628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800162c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b21a      	sxth	r2, r3
 8001634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
        if(contentLength == 0){
 800164a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03d      	beq.n	80016ce <readTinyCodeData+0xd2>
        	return;
        }
        if(contentLength > 0 && contentLength <= 254) {
 8001652:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03c      	beq.n	80016d4 <readTinyCodeData+0xd8>
 800165a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800165e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001660:	d838      	bhi.n	80016d4 <readTinyCodeData+0xd8>
            // Now, read the actual content based on the content length
            status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, contentLength + 2, HAL_MAX_DELAY);
 8001662:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001666:	3302      	adds	r3, #2
 8001668:	b29b      	uxth	r3, r3
 800166a:	463a      	mov	r2, r7
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	9100      	str	r1, [sp, #0]
 8001672:	2118      	movs	r1, #24
 8001674:	4819      	ldr	r0, [pc, #100]	@ (80016dc <readTinyCodeData+0xe0>)
 8001676:	f001 fee7 	bl	8003448 <HAL_I2C_Master_Receive>
 800167a:	4603      	mov	r3, r0
 800167c:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
            if(status != HAL_OK) {
 8001680:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8001684:	2b00      	cmp	r3, #0
 8001686:	d125      	bne.n	80016d4 <readTinyCodeData+0xd8>
                // Handle communication error
            } else {
                // Data is now in readBuffer[2] to readBuffer[contentLength+1], process it as needed
                // Remember to handle non-UTF-8 or other data safely
            	readBuffer[contentLength + 3] = '\0';
 8001688:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800168c:	3303      	adds	r3, #3
 800168e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001692:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001696:	2100      	movs	r1, #0
 8001698:	54d1      	strb	r1, [r2, r3]
//            	for(int i =0; i < contentLength; ++i){
//            		printf("%c",readBuffer[2 + i]);
//            	}

            	int parsedId = atoi((char *)readBuffer + 2);
 800169a:	463b      	mov	r3, r7
 800169c:	3302      	adds	r3, #2
 800169e:	4618      	mov	r0, r3
 80016a0:	f007 f8f6 	bl	8008890 <atoi>
 80016a4:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
            	if(parsedId == 0){
 80016a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d010      	beq.n	80016d2 <readTinyCodeData+0xd6>
                       return;
                        	}
            	if (parsedId != prevIdCode){
 80016b0:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <readTinyCodeData+0xe4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d00b      	beq.n	80016d4 <readTinyCodeData+0xd8>
            		prevIdCode = parsedId;
 80016bc:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <readTinyCodeData+0xe4>)
 80016be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80016c2:	6013      	str	r3, [r2, #0]
            		openDoor(parsedId);
 80016c4:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80016c8:	f7ff ff8a 	bl	80015e0 <openDoor>
 80016cc:	e002      	b.n	80016d4 <readTinyCodeData+0xd8>
        	return;
 80016ce:	bf00      	nop
 80016d0:	e000      	b.n	80016d4 <readTinyCodeData+0xd8>
                       return;
 80016d2:	bf00      	nop
            }
        } else {
            // No content or content length invalid
        }
    }
}
 80016d4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200002b0 	.word	0x200002b0
 80016e0:	20000068 	.word	0x20000068

080016e4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10d      	bne.n	8001712 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  uartSend("LIST\n");
 80016f6:	480a      	ldr	r0, [pc, #40]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80016f8:	f000 f8da 	bl	80018b0 <uartSend>
		  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 80016fc:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001706:	4413      	add	r3, r2
 8001708:	2201      	movs	r2, #1
 800170a:	4619      	mov	r1, r3
 800170c:	4807      	ldr	r0, [pc, #28]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800170e:	f005 f86f 	bl	80067f0 <HAL_UART_Receive_IT>
	}
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40012c00 	.word	0x40012c00
 8001720:	0800b570 	.word	0x0800b570
 8001724:	2000067c 	.word	0x2000067c
 8001728:	200004dc 	.word	0x200004dc
 800172c:	20000398 	.word	0x20000398

08001730 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a06      	ldr	r2, [pc, #24]	@ (8001758 <HAL_UART_RxCpltCallback+0x28>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d104      	bne.n	800174c <HAL_UART_RxCpltCallback+0x1c>
		 ++i;
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_UART_RxCpltCallback+0x2c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_UART_RxCpltCallback+0x2c>)
 800174a:	6013      	str	r3, [r2, #0]
	}

}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40004800 	.word	0x40004800
 800175c:	20000680 	.word	0x20000680

08001760 <processReceivedData>:
void setBox(int id, int box){
	 char command[10];
	 sprintf(command, "PUT%d%d\n", box, id);
	 uartSend(command);
}
void processReceivedData(char* data) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if(strcmp(data, "DATA") != 0){
 8001768:	494c      	ldr	r1, [pc, #304]	@ (800189c <processReceivedData+0x13c>)
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7fe fd48 	bl	8000200 <strcmp>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 808c 	bne.w	8001890 <processReceivedData+0x130>
		return;
	}
  data += 5;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3305      	adds	r3, #5
 800177c:	607b      	str	r3, [r7, #4]
    int totalOrders = atoi(data);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f007 f886 	bl	8008890 <atoi>
 8001784:	60b8      	str	r0, [r7, #8]
    data += 3;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3303      	adds	r3, #3
 800178a:	607b      	str	r3, [r7, #4]
    int processedOrders = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	e009      	b.n	80017aa <processReceivedData+0x4a>
          		FoodOrder_Init(&foodOrders[i]);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	4a41      	ldr	r2, [pc, #260]	@ (80018a0 <processReceivedData+0x140>)
 800179c:	4413      	add	r3, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fba2 	bl	8000ee8 <FoodOrder_Init>
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	3301      	adds	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	ddf2      	ble.n	8001796 <processReceivedData+0x36>
          	}
    if(totalOrders == 0){
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d06e      	beq.n	8001894 <processReceivedData+0x134>
    	return;
    }

    while(processedOrders < totalOrders){
 80017b6:	e036      	b.n	8001826 <processReceivedData+0xc6>

    	foodOrders[processedOrders].id = atoi(data);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f007 f869 	bl	8008890 <atoi>
 80017be:	4602      	mov	r2, r0
 80017c0:	4937      	ldr	r1, [pc, #220]	@ (80018a0 <processReceivedData+0x140>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	440b      	add	r3, r1
 80017c8:	3318      	adds	r3, #24
 80017ca:	601a      	str	r2, [r3, #0]
    	data += 11;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	330b      	adds	r3, #11
 80017d0:	607b      	str	r3, [r7, #4]
    	strcpy(foodOrders[processedOrders].name, data);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	015b      	lsls	r3, r3, #5
 80017d6:	4a32      	ldr	r2, [pc, #200]	@ (80018a0 <processReceivedData+0x140>)
 80017d8:	4413      	add	r3, r2
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	f007 ffc0 	bl	8009762 <strcpy>
    	while(*data != '\0'){
 80017e2:	e002      	b.n	80017ea <processReceivedData+0x8a>
    		++data;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	607b      	str	r3, [r7, #4]
    	while(*data != '\0'){
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f8      	bne.n	80017e4 <processReceivedData+0x84>
    	}
    	++data;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3301      	adds	r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
    	foodOrders[processedOrders].box = atoi(data);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f007 f849 	bl	8008890 <atoi>
 80017fe:	4602      	mov	r2, r0
 8001800:	4927      	ldr	r1, [pc, #156]	@ (80018a0 <processReceivedData+0x140>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	015b      	lsls	r3, r3, #5
 8001806:	440b      	add	r3, r1
 8001808:	331c      	adds	r3, #28
 800180a:	601a      	str	r2, [r3, #0]
    	data += 2;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3302      	adds	r3, #2
 8001810:	607b      	str	r3, [r7, #4]
    	foodOrders[processedOrders].valid = 1;
 8001812:	4a23      	ldr	r2, [pc, #140]	@ (80018a0 <processReceivedData+0x140>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	015b      	lsls	r3, r3, #5
 8001818:	4413      	add	r3, r2
 800181a:	3314      	adds	r3, #20
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
    	++processedOrders;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
    while(processedOrders < totalOrders){
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	429a      	cmp	r2, r3
 800182c:	dbc4      	blt.n	80017b8 <processReceivedData+0x58>
    }
    for(int i = 0; i < processedOrders; ++i){
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	e028      	b.n	8001886 <processReceivedData+0x126>
    	if(!foodOrders[i].valid) continue;
 8001834:	4a1a      	ldr	r2, [pc, #104]	@ (80018a0 <processReceivedData+0x140>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	015b      	lsls	r3, r3, #5
 800183a:	4413      	add	r3, r2
 800183c:	3314      	adds	r3, #20
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01c      	beq.n	800187e <processReceivedData+0x11e>
    	printf("Name: %s\r\n", foodOrders[i].name);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	015b      	lsls	r3, r3, #5
 8001848:	4a15      	ldr	r2, [pc, #84]	@ (80018a0 <processReceivedData+0x140>)
 800184a:	4413      	add	r3, r2
 800184c:	4619      	mov	r1, r3
 800184e:	4815      	ldr	r0, [pc, #84]	@ (80018a4 <processReceivedData+0x144>)
 8001850:	f007 fdc0 	bl	80093d4 <iprintf>
    	printf("id: %d\r\n", foodOrders[i].id);
 8001854:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <processReceivedData+0x140>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	015b      	lsls	r3, r3, #5
 800185a:	4413      	add	r3, r2
 800185c:	3318      	adds	r3, #24
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <processReceivedData+0x148>)
 8001864:	f007 fdb6 	bl	80093d4 <iprintf>
    	printf("box: %d\r\n", foodOrders[i].box);
 8001868:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <processReceivedData+0x140>)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	4413      	add	r3, r2
 8001870:	331c      	adds	r3, #28
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	480d      	ldr	r0, [pc, #52]	@ (80018ac <processReceivedData+0x14c>)
 8001878:	f007 fdac 	bl	80093d4 <iprintf>
 800187c:	e000      	b.n	8001880 <processReceivedData+0x120>
    	if(!foodOrders[i].valid) continue;
 800187e:	bf00      	nop
    for(int i = 0; i < processedOrders; ++i){
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbd2      	blt.n	8001834 <processReceivedData+0xd4>
 800188e:	e002      	b.n	8001896 <processReceivedData+0x136>
		return;
 8001890:	bf00      	nop
 8001892:	e000      	b.n	8001896 <processReceivedData+0x136>
    	return;
 8001894:	bf00      	nop
    }
}
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	0800b584 	.word	0x0800b584
 80018a0:	200005dc 	.word	0x200005dc
 80018a4:	0800b58c 	.word	0x0800b58c
 80018a8:	0800b598 	.word	0x0800b598
 80018ac:	0800b5a4 	.word	0x0800b5a4

080018b0 <uartSend>:
static void uartSend (char *str)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen (str), 1000);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7fe fd01 	bl	80002c0 <strlen>
 80018be:	4603      	mov	r3, r0
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <uartSend+0x28>)
 80018ca:	f004 ff03 	bl	80066d4 <HAL_UART_Transmit>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000398 	.word	0x20000398

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	e009      	b.n	80018fc <main+0x20>
		FoodOrder_Init(&foodOrders[i]);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	015b      	lsls	r3, r3, #5
 80018ec:	4a35      	ldr	r2, [pc, #212]	@ (80019c4 <main+0xe8>)
 80018ee:	4413      	add	r3, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff faf9 	bl	8000ee8 <FoodOrder_Init>
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3301      	adds	r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b04      	cmp	r3, #4
 8001900:	ddf2      	ble.n	80018e8 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001902:	f000 ffde 	bl	80028c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001906:	f000 f86d 	bl	80019e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190a:	f000 fa67 	bl	8001ddc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800190e:	f000 f987 	bl	8001c20 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001912:	f000 f939 	bl	8001b88 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001916:	f000 fa0d 	bl	8001d34 <MX_TIM1_Init>
  MX_I2C2_Init();
 800191a:	f000 f8f5 	bl	8001b08 <MX_I2C2_Init>
  MX_SPI1_Init();
 800191e:	f000 f9cb 	bl	8001cb8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001922:	f000 f8b1 	bl	8001a88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8001926:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <main+0xec>)
 8001928:	f004 fa46 	bl	8005db8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  initialize_touch(&hi2c2);
 800192c:	4827      	ldr	r0, [pc, #156]	@ (80019cc <main+0xf0>)
 800192e:	f7ff fdd3 	bl	80014d8 <initialize_touch>
  initialize_screen(&hspi1);
 8001932:	4827      	ldr	r0, [pc, #156]	@ (80019d0 <main+0xf4>)
 8001934:	f7ff fcb2 	bl	800129c <initialize_screen>
  draw(&hspi1);
 8001938:	4825      	ldr	r0, [pc, #148]	@ (80019d0 <main+0xf4>)
 800193a:	f7ff fd09 	bl	8001350 <draw>

  while (1)
  {

	  while(i > 0){
 800193e:	e039      	b.n	80019b4 <main+0xd8>
//		  printf("%c", rxBuffer[rxIndex]);
	 	if (rxBuffer[rxIndex] == '\n' || rxIndex >= RX_BUFFER_SIZE - 1 ||rxBuffer[rxIndex] == '\r' ) {
 8001940:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <main+0xf8>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <main+0xfc>)
 800194a:	5c9b      	ldrb	r3, [r3, r2]
 800194c:	2b0a      	cmp	r3, #10
 800194e:	d00c      	beq.n	800196a <main+0x8e>
 8001950:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <main+0xf8>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	2bfe      	cmp	r3, #254	@ 0xfe
 8001958:	d807      	bhi.n	800196a <main+0x8e>
 800195a:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <main+0xf8>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <main+0xfc>)
 8001964:	5c9b      	ldrb	r3, [r3, r2]
 8001966:	2b0d      	cmp	r3, #13
 8001968:	d10d      	bne.n	8001986 <main+0xaa>
	 		// Null-terminate the string
	 		rxBuffer[rxIndex] = '\0';
 800196a:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <main+0xf8>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <main+0xfc>)
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]

	 		// Process received data
	 		processReceivedData(rxBuffer);
 8001978:	4817      	ldr	r0, [pc, #92]	@ (80019d8 <main+0xfc>)
 800197a:	f7ff fef1 	bl	8001760 <processReceivedData>

	 		// Reset index
	 		rxIndex = 0;
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <main+0xf8>)
 8001980:	2200      	movs	r2, #0
 8001982:	801a      	strh	r2, [r3, #0]
 8001984:	e006      	b.n	8001994 <main+0xb8>
	 		} else {
	 		// Increment index to receive the next byte
	 		rxIndex++;
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <main+0xf8>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <main+0xf8>)
 8001992:	801a      	strh	r2, [r3, #0]
	 	}
	 		// Prepare to receive the next byte
	 		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <main+0xf8>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <main+0xfc>)
 800199e:	4413      	add	r3, r2
 80019a0:	2201      	movs	r2, #1
 80019a2:	4619      	mov	r1, r3
 80019a4:	480d      	ldr	r0, [pc, #52]	@ (80019dc <main+0x100>)
 80019a6:	f004 ff23 	bl	80067f0 <HAL_UART_Receive_IT>

	 		  --i;
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <main+0x104>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <main+0x104>)
 80019b2:	6013      	str	r3, [r2, #0]
	  while(i > 0){
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <main+0x104>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1c1      	bne.n	8001940 <main+0x64>
	 	  }
	  readTinyCodeData();
 80019bc:	f7ff fe1e 	bl	80015fc <readTinyCodeData>
	  while(i > 0){
 80019c0:	e7f8      	b.n	80019b4 <main+0xd8>
 80019c2:	bf00      	nop
 80019c4:	200005dc 	.word	0x200005dc
 80019c8:	20000490 	.word	0x20000490
 80019cc:	200002b0 	.word	0x200002b0
 80019d0:	2000042c 	.word	0x2000042c
 80019d4:	2000067c 	.word	0x2000067c
 80019d8:	200004dc 	.word	0x200004dc
 80019dc:	20000398 	.word	0x20000398
 80019e0:	20000680 	.word	0x20000680

080019e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b096      	sub	sp, #88	@ 0x58
 80019e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	2244      	movs	r2, #68	@ 0x44
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fe36 	bl	8009664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a0a:	f002 f95d 	bl	8003cc8 <HAL_PWREx_ControlVoltageScaling>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a14:	f000 fbf4 	bl	8002200 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a24:	2360      	movs	r3, #96	@ 0x60
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001a34:	2320      	movs	r3, #32
 8001a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a40:	2302      	movs	r3, #2
 8001a42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 f9f1 	bl	8003e30 <HAL_RCC_OscConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a54:	f000 fbd4 	bl	8002200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a58:	230f      	movs	r3, #15
 8001a5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2103      	movs	r1, #3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fdf7 	bl	8004664 <HAL_RCC_ClockConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a7c:	f000 fbc0 	bl	8002200 <Error_Handler>
  }
}
 8001a80:	bf00      	nop
 8001a82:	3758      	adds	r7, #88	@ 0x58
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <MX_I2C1_Init+0x78>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001a94:	4a1b      	ldr	r2, [pc, #108]	@ (8001b04 <MX_I2C1_Init+0x7c>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a98:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac2:	480e      	ldr	r0, [pc, #56]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ac4:	f001 fb0c 	bl	80030e0 <HAL_I2C_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ace:	f000 fb97 	bl	8002200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4809      	ldr	r0, [pc, #36]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ad6:	f002 f83f 	bl	8003b58 <HAL_I2CEx_ConfigAnalogFilter>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ae0:	f000 fb8e 	bl	8002200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ae8:	f002 f881 	bl	8003bee <HAL_I2CEx_ConfigDigitalFilter>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001af2:	f000 fb85 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000025c 	.word	0x2000025c
 8001b00:	40005400 	.word	0x40005400
 8001b04:	10707dbc 	.word	0x10707dbc

08001b08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <MX_I2C2_Init+0x78>)
 8001b10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b14:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <MX_I2C2_Init+0x7c>)
 8001b16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b24:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b42:	480e      	ldr	r0, [pc, #56]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b44:	f001 facc 	bl	80030e0 <HAL_I2C_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b4e:	f000 fb57 	bl	8002200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4809      	ldr	r0, [pc, #36]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b56:	f001 ffff 	bl	8003b58 <HAL_I2CEx_ConfigAnalogFilter>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b60:	f000 fb4e 	bl	8002200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b64:	2100      	movs	r1, #0
 8001b66:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <MX_I2C2_Init+0x74>)
 8001b68:	f002 f841 	bl	8003bee <HAL_I2CEx_ConfigDigitalFilter>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b72:	f000 fb45 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200002b0 	.word	0x200002b0
 8001b80:	40005800 	.word	0x40005800
 8001b84:	10707dbc 	.word	0x10707dbc

08001b88 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b8c:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001b8e:	4a23      	ldr	r2, [pc, #140]	@ (8001c1c <MX_LPUART1_UART_Init+0x94>)
 8001b90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b92:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001bca:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bd0:	4811      	ldr	r0, [pc, #68]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001bd2:	f004 fd2f 	bl	8006634 <HAL_UART_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bdc:	f000 fb10 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be0:	2100      	movs	r1, #0
 8001be2:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001be4:	f006 fd89 	bl	80086fa <HAL_UARTEx_SetTxFifoThreshold>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bee:	f000 fb07 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4808      	ldr	r0, [pc, #32]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001bf6:	f006 fdbe 	bl	8008776 <HAL_UARTEx_SetRxFifoThreshold>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c00:	f000 fafe 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <MX_LPUART1_UART_Init+0x90>)
 8001c06:	f006 fd3f 	bl	8008688 <HAL_UARTEx_DisableFifoMode>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c10:	f000 faf6 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000304 	.word	0x20000304
 8001c1c:	40008000 	.word	0x40008000

08001c20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c24:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c26:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <MX_USART3_UART_Init+0x94>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c56:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c68:	4811      	ldr	r0, [pc, #68]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c6a:	f004 fce3 	bl	8006634 <HAL_UART_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c74:	f000 fac4 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c7c:	f006 fd3d 	bl	80086fa <HAL_UARTEx_SetTxFifoThreshold>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c86:	f000 fabb 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4808      	ldr	r0, [pc, #32]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c8e:	f006 fd72 	bl	8008776 <HAL_UARTEx_SetRxFifoThreshold>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c98:	f000 fab2 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c9c:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <MX_USART3_UART_Init+0x90>)
 8001c9e:	f006 fcf3 	bl	8008688 <HAL_UARTEx_DisableFifoMode>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ca8:	f000 faaa 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000398 	.word	0x20000398
 8001cb4:	40004800 	.word	0x40004800

08001cb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d30 <MX_SPI1_Init+0x78>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001cc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001cd2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001cd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001ce6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001cea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001cee:	2208      	movs	r2, #8
 8001cf0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001d06:	2207      	movs	r2, #7
 8001d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001d12:	2208      	movs	r2, #8
 8001d14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_SPI1_Init+0x74>)
 8001d18:	f003 fc7a 	bl	8005610 <HAL_SPI_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d22:	f000 fa6d 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000042c 	.word	0x2000042c
 8001d30:	40013000 	.word	0x40013000

08001d34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d52:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d54:	4a20      	ldr	r2, [pc, #128]	@ (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30000;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d5a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001d5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001d66:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d68:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001d6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d74:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d80:	4814      	ldr	r0, [pc, #80]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d82:	f003 ffc1 	bl	8005d08 <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001d8c:	f000 fa38 	bl	8002200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480d      	ldr	r0, [pc, #52]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d9e:	f004 f97d 	bl	800609c <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001da8:	f000 fa2a 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MX_TIM1_Init+0xa0>)
 8001dbe:	f004 fb93 	bl	80064e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001dc8:	f000 fa1a 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000490 	.word	0x20000490
 8001dd8:	40012c00 	.word	0x40012c00

08001ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	@ 0x38
 8001de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df2:	4bb2      	ldr	r3, [pc, #712]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	4ab1      	ldr	r2, [pc, #708]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfe:	4baf      	ldr	r3, [pc, #700]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	4bac      	ldr	r3, [pc, #688]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	4aab      	ldr	r2, [pc, #684]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e16:	4ba9      	ldr	r3, [pc, #676]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e22:	4ba6      	ldr	r3, [pc, #664]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	4aa5      	ldr	r2, [pc, #660]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e28:	f043 0320 	orr.w	r3, r3, #32
 8001e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2e:	4ba3      	ldr	r3, [pc, #652]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	4ba0      	ldr	r3, [pc, #640]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	4a9f      	ldr	r2, [pc, #636]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e46:	4b9d      	ldr	r3, [pc, #628]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b9a      	ldr	r3, [pc, #616]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	4a99      	ldr	r2, [pc, #612]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5e:	4b97      	ldr	r3, [pc, #604]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	4b94      	ldr	r3, [pc, #592]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a93      	ldr	r2, [pc, #588]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b91      	ldr	r3, [pc, #580]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e82:	4b8e      	ldr	r3, [pc, #568]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	4a8d      	ldr	r2, [pc, #564]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e9a:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	4a87      	ldr	r2, [pc, #540]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea6:	4b85      	ldr	r3, [pc, #532]	@ (80020bc <MX_GPIO_Init+0x2e0>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001eb2:	f001 ffad 	bl	8003e10 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001ebc:	4880      	ldr	r0, [pc, #512]	@ (80020c0 <MX_GPIO_Init+0x2e4>)
 8001ebe:	f001 f8f7 	bl	80030b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001ed2:	230d      	movs	r3, #13
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4879      	ldr	r0, [pc, #484]	@ (80020c4 <MX_GPIO_Init+0x2e8>)
 8001ede:	f000 ff55 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001ef2:	230d      	movs	r3, #13
 8001ef4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efa:	4619      	mov	r1, r3
 8001efc:	4870      	ldr	r0, [pc, #448]	@ (80020c0 <MX_GPIO_Init+0x2e4>)
 8001efe:	f000 ff45 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f02:	230f      	movs	r3, #15
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f06:	230b      	movs	r3, #11
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	486c      	ldr	r0, [pc, #432]	@ (80020c8 <MX_GPIO_Init+0x2ec>)
 8001f16:	f000 ff39 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f38:	f000 ff28 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f40:	230b      	movs	r3, #11
 8001f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f52:	f000 ff1b 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f56:	2301      	movs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f66:	2302      	movs	r3, #2
 8001f68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4856      	ldr	r0, [pc, #344]	@ (80020cc <MX_GPIO_Init+0x2f0>)
 8001f72:	f000 ff0b 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f76:	2302      	movs	r3, #2
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f7a:	230b      	movs	r3, #11
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	4850      	ldr	r0, [pc, #320]	@ (80020cc <MX_GPIO_Init+0x2f0>)
 8001f8a:	f000 feff 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001f8e:	2344      	movs	r3, #68	@ 0x44
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	484a      	ldr	r0, [pc, #296]	@ (80020cc <MX_GPIO_Init+0x2f0>)
 8001fa2:	f000 fef3 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001fa6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4840      	ldr	r0, [pc, #256]	@ (80020c0 <MX_GPIO_Init+0x2e4>)
 8001fc0:	f000 fee4 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4839      	ldr	r0, [pc, #228]	@ (80020c0 <MX_GPIO_Init+0x2e4>)
 8001fdc:	f000 fed6 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4833      	ldr	r0, [pc, #204]	@ (80020cc <MX_GPIO_Init+0x2f0>)
 8001ffe:	f000 fec5 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002002:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002014:	230d      	movs	r3, #13
 8002016:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	482b      	ldr	r0, [pc, #172]	@ (80020cc <MX_GPIO_Init+0x2f0>)
 8002020:	f000 feb4 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002024:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002036:	230e      	movs	r3, #14
 8002038:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203e:	4619      	mov	r1, r3
 8002040:	4822      	ldr	r0, [pc, #136]	@ (80020cc <MX_GPIO_Init+0x2f0>)
 8002042:	f000 fea3 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002046:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002058:	2302      	movs	r3, #2
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	481b      	ldr	r0, [pc, #108]	@ (80020d0 <MX_GPIO_Init+0x2f4>)
 8002064:	f000 fe92 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002068:	2340      	movs	r3, #64	@ 0x40
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002078:	230d      	movs	r3, #13
 800207a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002080:	4619      	mov	r1, r3
 8002082:	4811      	ldr	r0, [pc, #68]	@ (80020c8 <MX_GPIO_Init+0x2ec>)
 8002084:	f000 fe82 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002098:	2302      	movs	r3, #2
 800209a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	4809      	ldr	r0, [pc, #36]	@ (80020c8 <MX_GPIO_Init+0x2ec>)
 80020a4:	f000 fe72 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020a8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ba:	e00b      	b.n	80020d4 <MX_GPIO_Init+0x2f8>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	48001400 	.word	0x48001400
 80020c4:	48001000 	.word	0x48001000
 80020c8:	48000800 	.word	0x48000800
 80020cc:	48000400 	.word	0x48000400
 80020d0:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020d4:	230c      	movs	r3, #12
 80020d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	483b      	ldr	r0, [pc, #236]	@ (80021cc <MX_GPIO_Init+0x3f0>)
 80020e0:	f000 fe54 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80020e4:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020f6:	230a      	movs	r3, #10
 80020f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002104:	f000 fe42 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210e:	2300      	movs	r3, #0
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002120:	f000 fe34 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002124:	2301      	movs	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002134:	2309      	movs	r3, #9
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4824      	ldr	r0, [pc, #144]	@ (80021d0 <MX_GPIO_Init+0x3f4>)
 8002140:	f000 fe24 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002144:	2304      	movs	r3, #4
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002154:	230c      	movs	r3, #12
 8002156:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215c:	4619      	mov	r1, r3
 800215e:	481c      	ldr	r0, [pc, #112]	@ (80021d0 <MX_GPIO_Init+0x3f4>)
 8002160:	f000 fe14 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002164:	2378      	movs	r3, #120	@ 0x78
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002174:	2307      	movs	r3, #7
 8002176:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800217c:	4619      	mov	r1, r3
 800217e:	4814      	ldr	r0, [pc, #80]	@ (80021d0 <MX_GPIO_Init+0x3f4>)
 8002180:	f000 fe04 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002184:	2338      	movs	r3, #56	@ 0x38
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002194:	2306      	movs	r3, #6
 8002196:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	480d      	ldr	r0, [pc, #52]	@ (80021d4 <MX_GPIO_Init+0x3f8>)
 80021a0:	f000 fdf4 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021a4:	2301      	movs	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021b4:	2302      	movs	r3, #2
 80021b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	@ (80021d8 <MX_GPIO_Init+0x3fc>)
 80021c0:	f000 fde4 	bl	8002d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021c4:	bf00      	nop
 80021c6:	3738      	adds	r7, #56	@ 0x38
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	48000800 	.word	0x48000800
 80021d0:	48000c00 	.word	0x48000c00
 80021d4:	48000400 	.word	0x48000400
 80021d8:	48001000 	.word	0x48001000

080021dc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80021e4:	1d39      	adds	r1, r7, #4
 80021e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021ea:	2201      	movs	r2, #1
 80021ec:	4803      	ldr	r0, [pc, #12]	@ (80021fc <__io_putchar+0x20>)
 80021ee:	f004 fa71 	bl	80066d4 <HAL_UART_Transmit>
  return ch;
 80021f2:	687b      	ldr	r3, [r7, #4]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000304 	.word	0x20000304

08002200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <Error_Handler+0x8>

0800220c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	4b0f      	ldr	r3, [pc, #60]	@ (8002250 <HAL_MspInit+0x44>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002216:	4a0e      	ldr	r2, [pc, #56]	@ (8002250 <HAL_MspInit+0x44>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6613      	str	r3, [r2, #96]	@ 0x60
 800221e:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_MspInit+0x44>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <HAL_MspInit+0x44>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <HAL_MspInit+0x44>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6593      	str	r3, [r2, #88]	@ 0x58
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_MspInit+0x44>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0b0      	sub	sp, #192	@ 0xc0
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800226c:	f107 0318 	add.w	r3, r7, #24
 8002270:	2294      	movs	r2, #148	@ 0x94
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f007 f9f5 	bl	8009664 <memset>
  if(hi2c->Instance==I2C1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a42      	ldr	r2, [pc, #264]	@ (8002388 <HAL_I2C_MspInit+0x134>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d13c      	bne.n	80022fe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002284:	2340      	movs	r3, #64	@ 0x40
 8002286:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002288:	2300      	movs	r3, #0
 800228a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228c:	f107 0318 	add.w	r3, r7, #24
 8002290:	4618      	mov	r0, r3
 8002292:	f002 fca5 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800229c:	f7ff ffb0 	bl	8002200 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	4b3a      	ldr	r3, [pc, #232]	@ (800238c <HAL_I2C_MspInit+0x138>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a4:	4a39      	ldr	r2, [pc, #228]	@ (800238c <HAL_I2C_MspInit+0x138>)
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ac:	4b37      	ldr	r3, [pc, #220]	@ (800238c <HAL_I2C_MspInit+0x138>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c0:	2312      	movs	r3, #18
 80022c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022d2:	2304      	movs	r3, #4
 80022d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80022dc:	4619      	mov	r1, r3
 80022de:	482c      	ldr	r0, [pc, #176]	@ (8002390 <HAL_I2C_MspInit+0x13c>)
 80022e0:	f000 fd54 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022e4:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_I2C_MspInit+0x138>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	4a28      	ldr	r2, [pc, #160]	@ (800238c <HAL_I2C_MspInit+0x138>)
 80022ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f0:	4b26      	ldr	r3, [pc, #152]	@ (800238c <HAL_I2C_MspInit+0x138>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022fc:	e03f      	b.n	800237e <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a24      	ldr	r2, [pc, #144]	@ (8002394 <HAL_I2C_MspInit+0x140>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d13a      	bne.n	800237e <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800230c:	2300      	movs	r3, #0
 800230e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002310:	f107 0318 	add.w	r3, r7, #24
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fc63 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002320:	f7ff ff6e 	bl	8002200 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_I2C_MspInit+0x138>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002328:	4a18      	ldr	r2, [pc, #96]	@ (800238c <HAL_I2C_MspInit+0x138>)
 800232a:	f043 0320 	orr.w	r3, r3, #32
 800232e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <HAL_I2C_MspInit+0x138>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800233c:	2307      	movs	r3, #7
 800233e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002342:	2312      	movs	r3, #18
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002354:	2304      	movs	r3, #4
 8002356:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800235a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800235e:	4619      	mov	r1, r3
 8002360:	480d      	ldr	r0, [pc, #52]	@ (8002398 <HAL_I2C_MspInit+0x144>)
 8002362:	f000 fd13 	bl	8002d8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_I2C_MspInit+0x138>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	4a08      	ldr	r2, [pc, #32]	@ (800238c <HAL_I2C_MspInit+0x138>)
 800236c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002370:	6593      	str	r3, [r2, #88]	@ 0x58
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_I2C_MspInit+0x138>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
}
 800237e:	bf00      	nop
 8002380:	37c0      	adds	r7, #192	@ 0xc0
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40005400 	.word	0x40005400
 800238c:	40021000 	.word	0x40021000
 8002390:	48000400 	.word	0x48000400
 8002394:	40005800 	.word	0x40005800
 8002398:	48001400 	.word	0x48001400

0800239c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b0b0      	sub	sp, #192	@ 0xc0
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b4:	f107 0318 	add.w	r3, r7, #24
 80023b8:	2294      	movs	r2, #148	@ 0x94
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f007 f951 	bl	8009664 <memset>
  if(huart->Instance==LPUART1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a47      	ldr	r2, [pc, #284]	@ (80024e4 <HAL_UART_MspInit+0x148>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d13e      	bne.n	800244a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023cc:	2320      	movs	r3, #32
 80023ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d4:	f107 0318 	add.w	r3, r7, #24
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fc01 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023e4:	f7ff ff0c 	bl	8002200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023e8:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 80023ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ec:	4a3e      	ldr	r2, [pc, #248]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80023f4:	4b3c      	ldr	r3, [pc, #240]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 80023f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002400:	4b39      	ldr	r3, [pc, #228]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002404:	4a38      	ldr	r2, [pc, #224]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 8002406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800240a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800240c:	4b36      	ldr	r3, [pc, #216]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 800240e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8002418:	f001 fcfa 	bl	8003e10 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800241c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002436:	2308      	movs	r3, #8
 8002438:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800243c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002440:	4619      	mov	r1, r3
 8002442:	482a      	ldr	r0, [pc, #168]	@ (80024ec <HAL_UART_MspInit+0x150>)
 8002444:	f000 fca2 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002448:	e047      	b.n	80024da <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a28      	ldr	r2, [pc, #160]	@ (80024f0 <HAL_UART_MspInit+0x154>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d142      	bne.n	80024da <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002454:	2304      	movs	r3, #4
 8002456:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002458:	2300      	movs	r3, #0
 800245a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245c:	f107 0318 	add.w	r3, r7, #24
 8002460:	4618      	mov	r0, r3
 8002462:	f002 fbbd 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800246c:	f7ff fec8 	bl	8002200 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002470:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002474:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 8002476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800247a:	6593      	str	r3, [r2, #88]	@ 0x58
 800247c:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002488:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248c:	4a16      	ldr	r2, [pc, #88]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <HAL_UART_MspInit+0x14c>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024a0:	2330      	movs	r3, #48	@ 0x30
 80024a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b8:	2307      	movs	r3, #7
 80024ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024be:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024c2:	4619      	mov	r1, r3
 80024c4:	480b      	ldr	r0, [pc, #44]	@ (80024f4 <HAL_UART_MspInit+0x158>)
 80024c6:	f000 fc61 	bl	8002d8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2027      	movs	r0, #39	@ 0x27
 80024d0:	f000 fb6b 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024d4:	2027      	movs	r0, #39	@ 0x27
 80024d6:	f000 fb84 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	37c0      	adds	r7, #192	@ 0xc0
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40008000 	.word	0x40008000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	48001800 	.word	0x48001800
 80024f0:	40004800 	.word	0x40004800
 80024f4:	48000800 	.word	0x48000800

080024f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <HAL_SPI_MspInit+0x7c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d128      	bne.n	800256c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <HAL_SPI_MspInit+0x80>)
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	4a16      	ldr	r2, [pc, #88]	@ (8002578 <HAL_SPI_MspInit+0x80>)
 8002520:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002524:	6613      	str	r3, [r2, #96]	@ 0x60
 8002526:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <HAL_SPI_MspInit+0x80>)
 8002528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <HAL_SPI_MspInit+0x80>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002536:	4a10      	ldr	r2, [pc, #64]	@ (8002578 <HAL_SPI_MspInit+0x80>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <HAL_SPI_MspInit+0x80>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800254a:	23f0      	movs	r3, #240	@ 0xf0
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800255a:	2305      	movs	r3, #5
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002568:	f000 fc10 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	@ 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40013000 	.word	0x40013000
 8002578:	40021000 	.word	0x40021000

0800257c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	@ 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a24      	ldr	r2, [pc, #144]	@ (800262c <HAL_TIM_Base_MspInit+0xb0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d141      	bne.n	8002622 <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_TIM_Base_MspInit+0xb4>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a2:	4a23      	ldr	r2, [pc, #140]	@ (8002630 <HAL_TIM_Base_MspInit+0xb4>)
 80025a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025aa:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_TIM_Base_MspInit+0xb4>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <HAL_TIM_Base_MspInit+0xb4>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002630 <HAL_TIM_Base_MspInit+0xb4>)
 80025bc:	f043 0310 	orr.w	r3, r3, #16
 80025c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <HAL_TIM_Base_MspInit+0xb4>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80025ce:	f44f 532a 	mov.w	r3, #10880	@ 0x2a80
 80025d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	4812      	ldr	r0, [pc, #72]	@ (8002634 <HAL_TIM_Base_MspInit+0xb8>)
 80025ec:	f000 fbce 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002602:	2303      	movs	r3, #3
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	4809      	ldr	r0, [pc, #36]	@ (8002634 <HAL_TIM_Base_MspInit+0xb8>)
 800260e:	f000 fbbd 	bl	8002d8c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	2019      	movs	r0, #25
 8002618:	f000 fac7 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800261c:	2019      	movs	r0, #25
 800261e:	f000 fae0 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	@ 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40012c00 	.word	0x40012c00
 8002630:	40021000 	.word	0x40021000
 8002634:	48001000 	.word	0x48001000

08002638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <NMI_Handler+0x4>

08002640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <MemManage_Handler+0x4>

08002650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <BusFault_Handler+0x4>

08002658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <UsageFault_Handler+0x4>

08002660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800268e:	f000 f96d 	bl	800296c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800269e:	f003 fbfb 	bl	8005e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000490 	.word	0x20000490

080026ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <USART3_IRQHandler+0x10>)
 80026b2:	f004 f8e9 	bl	8006888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000398 	.word	0x20000398

080026c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return 1;
 80026c4:	2301      	movs	r3, #1
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_kill>:

int _kill(int pid, int sig)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026da:	f007 f815 	bl	8009708 <__errno>
 80026de:	4603      	mov	r3, r0
 80026e0:	2216      	movs	r2, #22
 80026e2:	601a      	str	r2, [r3, #0]
  return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_exit>:

void _exit (int status)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ffe7 	bl	80026d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002702:	bf00      	nop
 8002704:	e7fd      	b.n	8002702 <_exit+0x12>

08002706 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e00a      	b.n	800272e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002718:	f3af 8000 	nop.w
 800271c:	4601      	mov	r1, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	60ba      	str	r2, [r7, #8]
 8002724:	b2ca      	uxtb	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3301      	adds	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	dbf0      	blt.n	8002718 <_read+0x12>
  }

  return len;
 8002736:	687b      	ldr	r3, [r7, #4]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	e009      	b.n	8002766 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	60ba      	str	r2, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fd3e 	bl	80021dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3301      	adds	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	dbf1      	blt.n	8002752 <_write+0x12>
  }
  return len;
 800276e:	687b      	ldr	r3, [r7, #4]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_close>:

int _close(int file)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027a0:	605a      	str	r2, [r3, #4]
  return 0;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_isatty>:

int _isatty(int file)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	@ (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f006 ff7a 	bl	8009708 <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	@ (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200a0000 	.word	0x200a0000
 8002840:	00000400 	.word	0x00000400
 8002844:	20000684 	.word	0x20000684
 8002848:	200007d8 	.word	0x200007d8

0800284c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <SystemInit+0x20>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	4a05      	ldr	r2, [pc, #20]	@ (800286c <SystemInit+0x20>)
 8002858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800285c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002874:	f7ff ffea 	bl	800284c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002878:	480c      	ldr	r0, [pc, #48]	@ (80028ac <LoopForever+0x6>)
  ldr r1, =_edata
 800287a:	490d      	ldr	r1, [pc, #52]	@ (80028b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800287c:	4a0d      	ldr	r2, [pc, #52]	@ (80028b4 <LoopForever+0xe>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002880:	e002      	b.n	8002888 <LoopCopyDataInit>

08002882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002886:	3304      	adds	r3, #4

08002888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800288c:	d3f9      	bcc.n	8002882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288e:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002890:	4c0a      	ldr	r4, [pc, #40]	@ (80028bc <LoopForever+0x16>)
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002894:	e001      	b.n	800289a <LoopFillZerobss>

08002896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002898:	3204      	adds	r2, #4

0800289a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800289c:	d3fb      	bcc.n	8002896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800289e:	f006 ff39 	bl	8009714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028a2:	f7ff f81b 	bl	80018dc <main>

080028a6 <LoopForever>:

LoopForever:
    b LoopForever
 80028a6:	e7fe      	b.n	80028a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028a8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80028ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b0:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80028b4:	0800bea0 	.word	0x0800bea0
  ldr r2, =_sbss
 80028b8:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80028bc:	200007d8 	.word	0x200007d8

080028c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c0:	e7fe      	b.n	80028c0 <ADC1_IRQHandler>

080028c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028cc:	2003      	movs	r0, #3
 80028ce:	f000 f961 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d2:	2000      	movs	r0, #0
 80028d4:	f000 f80e 	bl	80028f4 <HAL_InitTick>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	71fb      	strb	r3, [r7, #7]
 80028e2:	e001      	b.n	80028e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028e4:	f7ff fc92 	bl	800220c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028e8:	79fb      	ldrb	r3, [r7, #7]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002900:	4b17      	ldr	r3, [pc, #92]	@ (8002960 <HAL_InitTick+0x6c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <HAL_InitTick+0x70>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <HAL_InitTick+0x6c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002916:	fbb3 f3f1 	udiv	r3, r3, r1
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f96d 	bl	8002bfe <HAL_SYSTICK_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b0f      	cmp	r3, #15
 800292e:	d809      	bhi.n	8002944 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002930:	2200      	movs	r2, #0
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f000 f937 	bl	8002baa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800293c:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <HAL_InitTick+0x74>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e007      	b.n	8002954 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e004      	b.n	8002954 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e001      	b.n	8002954 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000074 	.word	0x20000074
 8002964:	2000006c 	.word	0x2000006c
 8002968:	20000070 	.word	0x20000070

0800296c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_IncTick+0x20>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_IncTick+0x24>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4413      	add	r3, r2
 800297c:	4a04      	ldr	r2, [pc, #16]	@ (8002990 <HAL_IncTick+0x24>)
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000074 	.word	0x20000074
 8002990:	20000688 	.word	0x20000688

08002994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return uwTick;
 8002998:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <HAL_GetTick+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000688 	.word	0x20000688

080029ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff ffee 	bl	8002994 <HAL_GetTick>
 80029b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d005      	beq.n	80029d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <HAL_Delay+0x44>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029d2:	bf00      	nop
 80029d4:	f7ff ffde 	bl	8002994 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d8f7      	bhi.n	80029d4 <HAL_Delay+0x28>
  {
  }
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000074 	.word	0x20000074

080029f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a04:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a26:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a40:	4b04      	ldr	r3, [pc, #16]	@ (8002a54 <__NVIC_GetPriorityGrouping+0x18>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	f003 0307 	and.w	r3, r3, #7
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db0b      	blt.n	8002a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4907      	ldr	r1, [pc, #28]	@ (8002a90 <__NVIC_EnableIRQ+0x38>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2001      	movs	r0, #1
 8002a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db0a      	blt.n	8002abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	490c      	ldr	r1, [pc, #48]	@ (8002ae0 <__NVIC_SetPriority+0x4c>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002abc:	e00a      	b.n	8002ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4908      	ldr	r1, [pc, #32]	@ (8002ae4 <__NVIC_SetPriority+0x50>)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	3b04      	subs	r3, #4
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	761a      	strb	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	@ 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f1c3 0307 	rsb	r3, r3, #7
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf28      	it	cs
 8002b06:	2304      	movcs	r3, #4
 8002b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d902      	bls.n	8002b18 <NVIC_EncodePriority+0x30>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	e000      	b.n	8002b1a <NVIC_EncodePriority+0x32>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	4313      	orrs	r3, r2
         );
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	@ 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff8e 	bl	8002a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff29 	bl	80029f4 <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff3e 	bl	8002a3c <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff8e 	bl	8002ae8 <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5d 	bl	8002a94 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff31 	bl	8002a58 <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa2 	bl	8002b50 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d008      	beq.n	8002c40 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e040      	b.n	8002cc2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 020e 	bic.w	r2, r2, #14
 8002c4e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c5e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c74:	f003 021c 	and.w	r2, r3, #28
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c82:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d005      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e047      	b.n	8002d82 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 020e 	bic.w	r2, r2, #14
 8002d00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	f003 021c 	and.w	r2, r3, #28
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d60:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
    }
  }
  return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9a:	e166      	b.n	800306a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8158 	beq.w	8003064 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d005      	beq.n	8002dcc <HAL_GPIO_Init+0x40>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d130      	bne.n	8002e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e02:	2201      	movs	r2, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0201 	and.w	r2, r3, #1
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d017      	beq.n	8002e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d123      	bne.n	8002ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	6939      	ldr	r1, [r7, #16]
 8002eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80b2 	beq.w	8003064 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f00:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <HAL_GPIO_Init+0x2fc>)
 8002f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f04:	4a60      	ldr	r2, [pc, #384]	@ (8003088 <HAL_GPIO_Init+0x2fc>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003088 <HAL_GPIO_Init+0x2fc>)
 8002f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f18:	4a5c      	ldr	r2, [pc, #368]	@ (800308c <HAL_GPIO_Init+0x300>)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	220f      	movs	r2, #15
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f42:	d02b      	beq.n	8002f9c <HAL_GPIO_Init+0x210>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a52      	ldr	r2, [pc, #328]	@ (8003090 <HAL_GPIO_Init+0x304>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d025      	beq.n	8002f98 <HAL_GPIO_Init+0x20c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a51      	ldr	r2, [pc, #324]	@ (8003094 <HAL_GPIO_Init+0x308>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d01f      	beq.n	8002f94 <HAL_GPIO_Init+0x208>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a50      	ldr	r2, [pc, #320]	@ (8003098 <HAL_GPIO_Init+0x30c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d019      	beq.n	8002f90 <HAL_GPIO_Init+0x204>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a4f      	ldr	r2, [pc, #316]	@ (800309c <HAL_GPIO_Init+0x310>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <HAL_GPIO_Init+0x200>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a4e      	ldr	r2, [pc, #312]	@ (80030a0 <HAL_GPIO_Init+0x314>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00d      	beq.n	8002f88 <HAL_GPIO_Init+0x1fc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a4d      	ldr	r2, [pc, #308]	@ (80030a4 <HAL_GPIO_Init+0x318>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <HAL_GPIO_Init+0x1f8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a4c      	ldr	r2, [pc, #304]	@ (80030a8 <HAL_GPIO_Init+0x31c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_GPIO_Init+0x1f4>
 8002f7c:	2307      	movs	r3, #7
 8002f7e:	e00e      	b.n	8002f9e <HAL_GPIO_Init+0x212>
 8002f80:	2308      	movs	r3, #8
 8002f82:	e00c      	b.n	8002f9e <HAL_GPIO_Init+0x212>
 8002f84:	2306      	movs	r3, #6
 8002f86:	e00a      	b.n	8002f9e <HAL_GPIO_Init+0x212>
 8002f88:	2305      	movs	r3, #5
 8002f8a:	e008      	b.n	8002f9e <HAL_GPIO_Init+0x212>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	e006      	b.n	8002f9e <HAL_GPIO_Init+0x212>
 8002f90:	2303      	movs	r3, #3
 8002f92:	e004      	b.n	8002f9e <HAL_GPIO_Init+0x212>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e002      	b.n	8002f9e <HAL_GPIO_Init+0x212>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_GPIO_Init+0x212>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	f002 0203 	and.w	r2, r2, #3
 8002fa4:	0092      	lsls	r2, r2, #2
 8002fa6:	4093      	lsls	r3, r2
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fae:	4937      	ldr	r1, [pc, #220]	@ (800308c <HAL_GPIO_Init+0x300>)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80030ac <HAL_GPIO_Init+0x320>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fe0:	4a32      	ldr	r2, [pc, #200]	@ (80030ac <HAL_GPIO_Init+0x320>)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fe6:	4b31      	ldr	r3, [pc, #196]	@ (80030ac <HAL_GPIO_Init+0x320>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800300a:	4a28      	ldr	r2, [pc, #160]	@ (80030ac <HAL_GPIO_Init+0x320>)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003010:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <HAL_GPIO_Init+0x320>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	43db      	mvns	r3, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003034:	4a1d      	ldr	r2, [pc, #116]	@ (80030ac <HAL_GPIO_Init+0x320>)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800303a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <HAL_GPIO_Init+0x320>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	43db      	mvns	r3, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800305e:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <HAL_GPIO_Init+0x320>)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	3301      	adds	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	f47f ae91 	bne.w	8002d9c <HAL_GPIO_Init+0x10>
  }
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	40021000 	.word	0x40021000
 800308c:	40010000 	.word	0x40010000
 8003090:	48000400 	.word	0x48000400
 8003094:	48000800 	.word	0x48000800
 8003098:	48000c00 	.word	0x48000c00
 800309c:	48001000 	.word	0x48001000
 80030a0:	48001400 	.word	0x48001400
 80030a4:	48001800 	.word	0x48001800
 80030a8:	48001c00 	.word	0x48001c00
 80030ac:	40010400 	.word	0x40010400

080030b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
 80030bc:	4613      	mov	r3, r2
 80030be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c0:	787b      	ldrb	r3, [r7, #1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030cc:	e002      	b.n	80030d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e08d      	b.n	800320e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff f8a4 	bl	8002254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	@ 0x24
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	e006      	b.n	8003168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d108      	bne.n	8003182 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	e007      	b.n	8003192 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003190:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69d9      	ldr	r1, [r3, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	461a      	mov	r2, r3
 8003224:	460b      	mov	r3, r1
 8003226:	817b      	strh	r3, [r7, #10]
 8003228:	4613      	mov	r3, r2
 800322a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	f040 80fd 	bne.w	8003434 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_I2C_Master_Transmit+0x30>
 8003244:	2302      	movs	r3, #2
 8003246:	e0f6      	b.n	8003436 <HAL_I2C_Master_Transmit+0x21e>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003250:	f7ff fba0 	bl	8002994 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	2319      	movs	r3, #25
 800325c:	2201      	movs	r2, #1
 800325e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fa0a 	bl	800367c <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0e1      	b.n	8003436 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2221      	movs	r2, #33	@ 0x21
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2210      	movs	r2, #16
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	893a      	ldrh	r2, [r7, #8]
 8003292:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2bff      	cmp	r3, #255	@ 0xff
 80032a2:	d906      	bls.n	80032b2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	22ff      	movs	r2, #255	@ 0xff
 80032a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80032aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e007      	b.n	80032c2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032c0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d024      	beq.n	8003314 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	8979      	ldrh	r1, [r7, #10]
 8003306:	4b4e      	ldr	r3, [pc, #312]	@ (8003440 <HAL_I2C_Master_Transmit+0x228>)
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fbf1 	bl	8003af4 <I2C_TransferConfig>
 8003312:	e066      	b.n	80033e2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	b2da      	uxtb	r2, r3
 800331a:	8979      	ldrh	r1, [r7, #10]
 800331c:	4b48      	ldr	r3, [pc, #288]	@ (8003440 <HAL_I2C_Master_Transmit+0x228>)
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fbe6 	bl	8003af4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003328:	e05b      	b.n	80033e2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	6a39      	ldr	r1, [r7, #32]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f9f3 	bl	800371a <I2C_WaitOnTXISFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07b      	b.n	8003436 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d034      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0x1ca>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d130      	bne.n	80033e2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2200      	movs	r2, #0
 8003388:	2180      	movs	r1, #128	@ 0x80
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f976 	bl	800367c <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e04d      	b.n	8003436 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2bff      	cmp	r3, #255	@ 0xff
 80033a2:	d90e      	bls.n	80033c2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	22ff      	movs	r2, #255	@ 0xff
 80033a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	8979      	ldrh	r1, [r7, #10]
 80033b2:	2300      	movs	r3, #0
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fb9a 	bl	8003af4 <I2C_TransferConfig>
 80033c0:	e00f      	b.n	80033e2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	2300      	movs	r3, #0
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fb89 	bl	8003af4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d19e      	bne.n	800332a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f9d9 	bl	80037a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01a      	b.n	8003436 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2220      	movs	r2, #32
 8003406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_I2C_Master_Transmit+0x22c>)
 8003414:	400b      	ands	r3, r1
 8003416:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	80002000 	.word	0x80002000
 8003444:	fe00e800 	.word	0xfe00e800

08003448 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	461a      	mov	r2, r3
 8003454:	460b      	mov	r3, r1
 8003456:	817b      	strh	r3, [r7, #10]
 8003458:	4613      	mov	r3, r2
 800345a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b20      	cmp	r3, #32
 8003466:	f040 80db 	bne.w	8003620 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_I2C_Master_Receive+0x30>
 8003474:	2302      	movs	r3, #2
 8003476:	e0d4      	b.n	8003622 <HAL_I2C_Master_Receive+0x1da>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003480:	f7ff fa88 	bl	8002994 <HAL_GetTick>
 8003484:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2319      	movs	r3, #25
 800348c:	2201      	movs	r2, #1
 800348e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f8f2 	bl	800367c <I2C_WaitOnFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0bf      	b.n	8003622 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2222      	movs	r2, #34	@ 0x22
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2bff      	cmp	r3, #255	@ 0xff
 80034d2:	d90e      	bls.n	80034f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	22ff      	movs	r2, #255	@ 0xff
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	8979      	ldrh	r1, [r7, #10]
 80034e2:	4b52      	ldr	r3, [pc, #328]	@ (800362c <HAL_I2C_Master_Receive+0x1e4>)
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fb02 	bl	8003af4 <I2C_TransferConfig>
 80034f0:	e06d      	b.n	80035ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	b2da      	uxtb	r2, r3
 8003502:	8979      	ldrh	r1, [r7, #10]
 8003504:	4b49      	ldr	r3, [pc, #292]	@ (800362c <HAL_I2C_Master_Receive+0x1e4>)
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 faf1 	bl	8003af4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003512:	e05c      	b.n	80035ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	6a39      	ldr	r1, [r7, #32]
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f989 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e07c      	b.n	8003622 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d034      	beq.n	80035ce <HAL_I2C_Master_Receive+0x186>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	d130      	bne.n	80035ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2200      	movs	r2, #0
 8003574:	2180      	movs	r1, #128	@ 0x80
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f880 	bl	800367c <I2C_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e04d      	b.n	8003622 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	2bff      	cmp	r3, #255	@ 0xff
 800358e:	d90e      	bls.n	80035ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	22ff      	movs	r2, #255	@ 0xff
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 faa4 	bl	8003af4 <I2C_TransferConfig>
 80035ac:	e00f      	b.n	80035ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	8979      	ldrh	r1, [r7, #10]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fa93 	bl	8003af4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d19d      	bne.n	8003514 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	6a39      	ldr	r1, [r7, #32]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f8e3 	bl	80037a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e01a      	b.n	8003622 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2220      	movs	r2, #32
 80035f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <HAL_I2C_Master_Receive+0x1e8>)
 8003600:	400b      	ands	r3, r1
 8003602:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e000      	b.n	8003622 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	80002400 	.word	0x80002400
 8003630:	fe00e800 	.word	0xfe00e800

08003634 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d103      	bne.n	8003652 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d007      	beq.n	8003670 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	619a      	str	r2, [r3, #24]
  }
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368c:	e031      	b.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d02d      	beq.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003696:	f7ff f97d 	bl	8002994 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d122      	bne.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4013      	ands	r3, r2
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d113      	bne.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00f      	b.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	429a      	cmp	r2, r3
 800370e:	d0be      	beq.n	800368e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003726:	e033      	b.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f901 	bl	8003934 <I2C_IsErrorOccurred>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e031      	b.n	80037a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d025      	beq.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7ff f926 	bl	8002994 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11a      	bne.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b02      	cmp	r3, #2
 8003766:	d013      	beq.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e007      	b.n	80037a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d1c4      	bne.n	8003728 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b4:	e02f      	b.n	8003816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f8ba 	bl	8003934 <I2C_IsErrorOccurred>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e02d      	b.n	8003826 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7ff f8e3 	bl	8002994 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11a      	bne.n	8003816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d013      	beq.n	8003816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e007      	b.n	8003826 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b20      	cmp	r3, #32
 8003822:	d1c8      	bne.n	80037b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800383c:	e06b      	b.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f876 	bl	8003934 <I2C_IsErrorOccurred>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e069      	b.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b20      	cmp	r3, #32
 800385e:	d138      	bne.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b04      	cmp	r3, #4
 800386c:	d105      	bne.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e055      	b.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d107      	bne.n	8003898 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2210      	movs	r2, #16
 800388e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2204      	movs	r2, #4
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
 8003896:	e002      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2220      	movs	r2, #32
 80038a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003930 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80038b2:	400b      	ands	r3, r1
 80038b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e029      	b.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d2:	f7ff f85f 	bl	8002994 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d116      	bne.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d00f      	beq.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fa:	f043 0220 	orr.w	r2, r3, #32
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e007      	b.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d18c      	bne.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	fe00e800 	.word	0xfe00e800

08003934 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	@ 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d068      	beq.n	8003a32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2210      	movs	r2, #16
 8003966:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003968:	e049      	b.n	80039fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d045      	beq.n	80039fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7ff f80f 	bl	8002994 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_IsErrorOccurred+0x54>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d13a      	bne.n	80039fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003992:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800399a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039aa:	d121      	bne.n	80039f0 <I2C_IsErrorOccurred+0xbc>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039b2:	d01d      	beq.n	80039f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d01a      	beq.n	80039f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039ca:	f7fe ffe3 	bl	8002994 <HAL_GetTick>
 80039ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d0:	e00e      	b.n	80039f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039d2:	f7fe ffdf 	bl	8002994 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b19      	cmp	r3, #25
 80039de:	d907      	bls.n	80039f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f043 0320 	orr.w	r3, r3, #32
 80039e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80039ee:	e006      	b.n	80039fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d1e9      	bne.n	80039d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d003      	beq.n	8003a14 <I2C_IsErrorOccurred+0xe0>
 8003a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0aa      	beq.n	800396a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d103      	bne.n	8003a24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2220      	movs	r2, #32
 8003a22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f043 0308 	orr.w	r3, r3, #8
 8003a6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f043 0302 	orr.w	r3, r3, #2
 8003a8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01c      	beq.n	8003ae2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7ff fdc3 	bl	8003634 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8003af0 <I2C_IsErrorOccurred+0x1bc>)
 8003aba:	400b      	ands	r3, r1
 8003abc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3728      	adds	r7, #40	@ 0x28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	fe00e800 	.word	0xfe00e800

08003af4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	4613      	mov	r3, r2
 8003b04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b0c:	7a7b      	ldrb	r3, [r7, #9]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	0d5b      	lsrs	r3, r3, #21
 8003b2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b32:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <I2C_TransferConfig+0x60>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	43db      	mvns	r3, r3
 8003b38:	ea02 0103 	and.w	r1, r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	03ff63ff 	.word	0x03ff63ff

08003b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d138      	bne.n	8003be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e032      	b.n	8003be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	@ 0x24
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d139      	bne.n	8003c78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e033      	b.n	8003c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2224      	movs	r2, #36	@ 0x24
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d102      	bne.n	8003ca0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c9e:	e00b      	b.n	8003cb8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003ca0:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cae:	d102      	bne.n	8003cb6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cb4:	e000      	b.n	8003cb8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003cb6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40007000 	.word	0x40007000

08003cc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d141      	bne.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce2:	d131      	bne.n	8003d48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ce4:	4b47      	ldr	r3, [pc, #284]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cea:	4a46      	ldr	r2, [pc, #280]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cf4:	4b43      	ldr	r3, [pc, #268]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cfc:	4a41      	ldr	r2, [pc, #260]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d04:	4b40      	ldr	r3, [pc, #256]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2232      	movs	r2, #50	@ 0x32
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	0c9b      	lsrs	r3, r3, #18
 8003d16:	3301      	adds	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d1a:	e002      	b.n	8003d22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d22:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2e:	d102      	bne.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f2      	bne.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d36:	4b33      	ldr	r3, [pc, #204]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d42:	d158      	bne.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e057      	b.n	8003df8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d48:	4b2e      	ldr	r3, [pc, #184]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d58:	e04d      	b.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d60:	d141      	bne.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d62:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6e:	d131      	bne.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d70:	4b24      	ldr	r3, [pc, #144]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d76:	4a23      	ldr	r2, [pc, #140]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d80:	4b20      	ldr	r3, [pc, #128]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d88:	4a1e      	ldr	r2, [pc, #120]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2232      	movs	r2, #50	@ 0x32
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	0c9b      	lsrs	r3, r3, #18
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da6:	e002      	b.n	8003dae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dae:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	d102      	bne.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f2      	bne.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dc2:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dce:	d112      	bne.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e011      	b.n	8003df8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003de4:	e007      	b.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003de6:	4b07      	ldr	r3, [pc, #28]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dee:	4a05      	ldr	r2, [pc, #20]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003df4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40007000 	.word	0x40007000
 8003e08:	2000006c 	.word	0x2000006c
 8003e0c:	431bde83 	.word	0x431bde83

08003e10 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a04      	ldr	r2, [pc, #16]	@ (8003e2c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e1e:	6053      	str	r3, [r2, #4]
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40007000 	.word	0x40007000

08003e30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f000 bc08 	b.w	8004654 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e44:	4b96      	ldr	r3, [pc, #600]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 030c 	and.w	r3, r3, #12
 8003e4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4e:	4b94      	ldr	r3, [pc, #592]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80e4 	beq.w	800402e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4c>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	f040 808b 	bne.w	8003f8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	f040 8087 	bne.w	8003f8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e7c:	4b88      	ldr	r3, [pc, #544]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_OscConfig+0x64>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e3df      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1a      	ldr	r2, [r3, #32]
 8003e98:	4b81      	ldr	r3, [pc, #516]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_RCC_OscConfig+0x7e>
 8003ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eac:	e005      	b.n	8003eba <HAL_RCC_OscConfig+0x8a>
 8003eae:	4b7c      	ldr	r3, [pc, #496]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d223      	bcs.n	8003f06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fdcc 	bl	8004a60 <RCC_SetFlashLatencyFromMSIRange>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e3c0      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed2:	4b73      	ldr	r3, [pc, #460]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a72      	ldr	r2, [pc, #456]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b70      	ldr	r3, [pc, #448]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	496d      	ldr	r1, [pc, #436]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	4968      	ldr	r1, [pc, #416]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e025      	b.n	8003f52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f06:	4b66      	ldr	r3, [pc, #408]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a65      	ldr	r2, [pc, #404]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b63      	ldr	r3, [pc, #396]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4960      	ldr	r1, [pc, #384]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f24:	4b5e      	ldr	r3, [pc, #376]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	495b      	ldr	r1, [pc, #364]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fd8c 	bl	8004a60 <RCC_SetFlashLatencyFromMSIRange>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e380      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f52:	f000 fcc1 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b51      	ldr	r3, [pc, #324]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	4950      	ldr	r1, [pc, #320]	@ (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f64:	5ccb      	ldrb	r3, [r1, r3]
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	4a4e      	ldr	r2, [pc, #312]	@ (80040a8 <HAL_RCC_OscConfig+0x278>)
 8003f70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f72:	4b4e      	ldr	r3, [pc, #312]	@ (80040ac <HAL_RCC_OscConfig+0x27c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fcbc 	bl	80028f4 <HAL_InitTick>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d052      	beq.n	800402c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	e364      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d032      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f92:	4b43      	ldr	r3, [pc, #268]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a42      	ldr	r2, [pc, #264]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe fcf9 	bl	8002994 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fa6:	f7fe fcf5 	bl	8002994 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e34d      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fb8:	4b39      	ldr	r3, [pc, #228]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc4:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a35      	ldr	r2, [pc, #212]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fca:	f043 0308 	orr.w	r3, r3, #8
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b33      	ldr	r3, [pc, #204]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4930      	ldr	r1, [pc, #192]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	492b      	ldr	r1, [pc, #172]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
 8003ff6:	e01a      	b.n	800402e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ff8:	4b29      	ldr	r3, [pc, #164]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a28      	ldr	r2, [pc, #160]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004004:	f7fe fcc6 	bl	8002994 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800400c:	f7fe fcc2 	bl	8002994 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e31a      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800401e:	4b20      	ldr	r3, [pc, #128]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x1dc>
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800402c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d073      	beq.n	8004122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d005      	beq.n	800404c <HAL_RCC_OscConfig+0x21c>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d10e      	bne.n	8004064 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d10b      	bne.n	8004064 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404c:	4b14      	ldr	r3, [pc, #80]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d063      	beq.n	8004120 <HAL_RCC_OscConfig+0x2f0>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d15f      	bne.n	8004120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e2f7      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800406c:	d106      	bne.n	800407c <HAL_RCC_OscConfig+0x24c>
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a0b      	ldr	r2, [pc, #44]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e025      	b.n	80040c8 <HAL_RCC_OscConfig+0x298>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004084:	d114      	bne.n	80040b0 <HAL_RCC_OscConfig+0x280>
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 800408c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b03      	ldr	r3, [pc, #12]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a02      	ldr	r2, [pc, #8]	@ (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e013      	b.n	80040c8 <HAL_RCC_OscConfig+0x298>
 80040a0:	40021000 	.word	0x40021000
 80040a4:	0800bab0 	.word	0x0800bab0
 80040a8:	2000006c 	.word	0x2000006c
 80040ac:	20000070 	.word	0x20000070
 80040b0:	4ba0      	ldr	r3, [pc, #640]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a9f      	ldr	r2, [pc, #636]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80040b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b9d      	ldr	r3, [pc, #628]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a9c      	ldr	r2, [pc, #624]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80040c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe fc60 	bl	8002994 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fe fc5c 	bl	8002994 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	@ 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e2b4      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ea:	4b92      	ldr	r3, [pc, #584]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2a8>
 80040f6:	e014      	b.n	8004122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fe fc4c 	bl	8002994 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fe fc48 	bl	8002994 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e2a0      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004112:	4b88      	ldr	r3, [pc, #544]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x2d0>
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d060      	beq.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d005      	beq.n	8004140 <HAL_RCC_OscConfig+0x310>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d119      	bne.n	800416e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d116      	bne.n	800416e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004140:	4b7c      	ldr	r3, [pc, #496]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_OscConfig+0x328>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e27d      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b76      	ldr	r3, [pc, #472]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	4973      	ldr	r1, [pc, #460]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416c:	e040      	b.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d023      	beq.n	80041be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004176:	4b6f      	ldr	r3, [pc, #444]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6e      	ldr	r2, [pc, #440]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004182:	f7fe fc07 	bl	8002994 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418a:	f7fe fc03 	bl	8002994 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e25b      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419c:	4b65      	ldr	r3, [pc, #404]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a8:	4b62      	ldr	r3, [pc, #392]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	495f      	ldr	r1, [pc, #380]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
 80041bc:	e018      	b.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041be:	4b5d      	ldr	r3, [pc, #372]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a5c      	ldr	r2, [pc, #368]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80041c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7fe fbe3 	bl	8002994 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d2:	f7fe fbdf 	bl	8002994 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e237      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e4:	4b53      	ldr	r3, [pc, #332]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d03c      	beq.n	8004276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01c      	beq.n	800423e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004204:	4b4b      	ldr	r3, [pc, #300]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420a:	4a4a      	ldr	r2, [pc, #296]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fe fbbe 	bl	8002994 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421c:	f7fe fbba 	bl	8002994 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e212      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800422e:	4b41      	ldr	r3, [pc, #260]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ef      	beq.n	800421c <HAL_RCC_OscConfig+0x3ec>
 800423c:	e01b      	b.n	8004276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800423e:	4b3d      	ldr	r3, [pc, #244]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004244:	4a3b      	ldr	r2, [pc, #236]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fe fba1 	bl	8002994 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004256:	f7fe fb9d 	bl	8002994 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e1f5      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004268:	4b32      	ldr	r3, [pc, #200]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1ef      	bne.n	8004256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80a6 	beq.w	80043d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004284:	2300      	movs	r3, #0
 8004286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004288:	4b2a      	ldr	r3, [pc, #168]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10d      	bne.n	80042b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004294:	4b27      	ldr	r3, [pc, #156]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004298:	4a26      	ldr	r2, [pc, #152]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 800429a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429e:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a0:	4b24      	ldr	r3, [pc, #144]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ac:	2301      	movs	r3, #1
 80042ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b0:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <HAL_RCC_OscConfig+0x508>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d118      	bne.n	80042ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004338 <HAL_RCC_OscConfig+0x508>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004338 <HAL_RCC_OscConfig+0x508>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c8:	f7fe fb64 	bl	8002994 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d0:	f7fe fb60 	bl	8002994 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1b8      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e2:	4b15      	ldr	r3, [pc, #84]	@ (8004338 <HAL_RCC_OscConfig+0x508>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d108      	bne.n	8004308 <HAL_RCC_OscConfig+0x4d8>
 80042f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004306:	e029      	b.n	800435c <HAL_RCC_OscConfig+0x52c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b05      	cmp	r3, #5
 800430e:	d115      	bne.n	800433c <HAL_RCC_OscConfig+0x50c>
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	4a07      	ldr	r2, [pc, #28]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004320:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004326:	4a03      	ldr	r2, [pc, #12]	@ (8004334 <HAL_RCC_OscConfig+0x504>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x52c>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	40007000 	.word	0x40007000
 800433c:	4b9d      	ldr	r3, [pc, #628]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004342:	4a9c      	ldr	r2, [pc, #624]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800434c:	4b99      	ldr	r3, [pc, #612]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004352:	4a98      	ldr	r2, [pc, #608]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d016      	beq.n	8004392 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fe fb16 	bl	8002994 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fe fb12 	bl	8002994 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e168      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004382:	4b8c      	ldr	r3, [pc, #560]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ed      	beq.n	800436c <HAL_RCC_OscConfig+0x53c>
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fe faff 	bl	8002994 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fe fafb 	bl	8002994 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e151      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b0:	4b80      	ldr	r3, [pc, #512]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1ed      	bne.n	800439a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043be:	7ffb      	ldrb	r3, [r7, #31]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d105      	bne.n	80043d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c4:	4b7b      	ldr	r3, [pc, #492]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c8:	4a7a      	ldr	r2, [pc, #488]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03c      	beq.n	8004456 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01c      	beq.n	800441e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043e4:	4b73      	ldr	r3, [pc, #460]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80043e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043ea:	4a72      	ldr	r2, [pc, #456]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fe face 	bl	8002994 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043fc:	f7fe faca 	bl	8002994 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e122      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800440e:	4b69      	ldr	r3, [pc, #420]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ef      	beq.n	80043fc <HAL_RCC_OscConfig+0x5cc>
 800441c:	e01b      	b.n	8004456 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800441e:	4b65      	ldr	r3, [pc, #404]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004424:	4a63      	ldr	r2, [pc, #396]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442e:	f7fe fab1 	bl	8002994 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004436:	f7fe faad 	bl	8002994 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e105      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004448:	4b5a      	ldr	r3, [pc, #360]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 800444a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ef      	bne.n	8004436 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80f9 	beq.w	8004652 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	2b02      	cmp	r3, #2
 8004466:	f040 80cf 	bne.w	8004608 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800446a:	4b52      	ldr	r3, [pc, #328]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f003 0203 	and.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	429a      	cmp	r2, r3
 800447c:	d12c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	3b01      	subs	r3, #1
 800448a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d123      	bne.n	80044d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d11b      	bne.n	80044d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d113      	bne.n	80044d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	3b01      	subs	r3, #1
 80044be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d109      	bne.n	80044d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	3b01      	subs	r3, #1
 80044d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d071      	beq.n	80045bc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d068      	beq.n	80045b0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044de:	4b35      	ldr	r3, [pc, #212]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044ea:	4b32      	ldr	r3, [pc, #200]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0ac      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044fa:	4b2e      	ldr	r3, [pc, #184]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2d      	ldr	r2, [pc, #180]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004500:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004504:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004506:	f7fe fa45 	bl	8002994 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fe fa41 	bl	8002994 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e099      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004520:	4b24      	ldr	r3, [pc, #144]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452c:	4b21      	ldr	r3, [pc, #132]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	4b21      	ldr	r3, [pc, #132]	@ (80045b8 <HAL_RCC_OscConfig+0x788>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800453c:	3a01      	subs	r2, #1
 800453e:	0112      	lsls	r2, r2, #4
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004546:	0212      	lsls	r2, r2, #8
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800454e:	0852      	lsrs	r2, r2, #1
 8004550:	3a01      	subs	r2, #1
 8004552:	0552      	lsls	r2, r2, #21
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800455a:	0852      	lsrs	r2, r2, #1
 800455c:	3a01      	subs	r2, #1
 800455e:	0652      	lsls	r2, r2, #25
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004566:	06d2      	lsls	r2, r2, #27
 8004568:	430a      	orrs	r2, r1
 800456a:	4912      	ldr	r1, [pc, #72]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 800456c:	4313      	orrs	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004570:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0f      	ldr	r2, [pc, #60]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800457c:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004586:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004588:	f7fe fa04 	bl	8002994 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fe fa00 	bl	8002994 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e058      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	4b04      	ldr	r3, [pc, #16]	@ (80045b4 <HAL_RCC_OscConfig+0x784>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ae:	e050      	b.n	8004652 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e04f      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
 80045b4:	40021000 	.word	0x40021000
 80045b8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045bc:	4b27      	ldr	r3, [pc, #156]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d144      	bne.n	8004652 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045c8:	4b24      	ldr	r3, [pc, #144]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a23      	ldr	r2, [pc, #140]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 80045ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d4:	4b21      	ldr	r3, [pc, #132]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4a20      	ldr	r2, [pc, #128]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 80045da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045e0:	f7fe f9d8 	bl	8002994 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e8:	f7fe f9d4 	bl	8002994 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e02c      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fa:	4b18      	ldr	r3, [pc, #96]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x7b8>
 8004606:	e024      	b.n	8004652 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d01f      	beq.n	800464e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b13      	ldr	r3, [pc, #76]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a12      	ldr	r2, [pc, #72]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 8004614:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fe f9bb 	bl	8002994 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004622:	f7fe f9b7 	bl	8002994 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e00f      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004634:	4b09      	ldr	r3, [pc, #36]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004640:	4b06      	ldr	r3, [pc, #24]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	4905      	ldr	r1, [pc, #20]	@ (800465c <HAL_RCC_OscConfig+0x82c>)
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <HAL_RCC_OscConfig+0x830>)
 8004648:	4013      	ands	r3, r2
 800464a:	60cb      	str	r3, [r1, #12]
 800464c:	e001      	b.n	8004652 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40021000 	.word	0x40021000
 8004660:	feeefffc 	.word	0xfeeefffc

08004664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e11d      	b.n	80048b8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800467c:	4b90      	ldr	r3, [pc, #576]	@ (80048c0 <HAL_RCC_ClockConfig+0x25c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d910      	bls.n	80046ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b8d      	ldr	r3, [pc, #564]	@ (80048c0 <HAL_RCC_ClockConfig+0x25c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 020f 	bic.w	r2, r3, #15
 8004692:	498b      	ldr	r1, [pc, #556]	@ (80048c0 <HAL_RCC_ClockConfig+0x25c>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b89      	ldr	r3, [pc, #548]	@ (80048c0 <HAL_RCC_ClockConfig+0x25c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e105      	b.n	80048b8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d010      	beq.n	80046da <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	4b81      	ldr	r3, [pc, #516]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d908      	bls.n	80046da <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c8:	4b7e      	ldr	r3, [pc, #504]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	497b      	ldr	r1, [pc, #492]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d079      	beq.n	80047da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d11e      	bne.n	800472c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	4b75      	ldr	r3, [pc, #468]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e0dc      	b.n	80048b8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046fe:	f000 fa09 	bl	8004b14 <RCC_GetSysClockFreqFromPLLSource>
 8004702:	4603      	mov	r3, r0
 8004704:	4a70      	ldr	r2, [pc, #448]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d946      	bls.n	8004798 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800470a:	4b6e      	ldr	r3, [pc, #440]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d140      	bne.n	8004798 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004716:	4b6b      	ldr	r3, [pc, #428]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800471e:	4a69      	ldr	r2, [pc, #420]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004724:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004726:	2380      	movs	r3, #128	@ 0x80
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	e035      	b.n	8004798 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d107      	bne.n	8004744 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004734:	4b63      	ldr	r3, [pc, #396]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d115      	bne.n	800476c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0b9      	b.n	80048b8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800474c:	4b5d      	ldr	r3, [pc, #372]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0ad      	b.n	80048b8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800475c:	4b59      	ldr	r3, [pc, #356]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0a5      	b.n	80048b8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800476c:	f000 f8b4 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8004770:	4603      	mov	r3, r0
 8004772:	4a55      	ldr	r2, [pc, #340]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d90f      	bls.n	8004798 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004778:	4b52      	ldr	r3, [pc, #328]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004784:	4b4f      	ldr	r3, [pc, #316]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800478c:	4a4d      	ldr	r2, [pc, #308]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800478e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004792:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004794:	2380      	movs	r3, #128	@ 0x80
 8004796:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004798:	4b4a      	ldr	r3, [pc, #296]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 0203 	bic.w	r2, r3, #3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4947      	ldr	r1, [pc, #284]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fe f8f3 	bl	8002994 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b2:	f7fe f8ef 	bl	8002994 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e077      	b.n	80048b8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c8:	4b3e      	ldr	r3, [pc, #248]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 020c 	and.w	r2, r3, #12
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d1eb      	bne.n	80047b2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b80      	cmp	r3, #128	@ 0x80
 80047de:	d105      	bne.n	80047ec <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047e0:	4b38      	ldr	r3, [pc, #224]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a37      	ldr	r2, [pc, #220]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80047e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ea:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	4b31      	ldr	r3, [pc, #196]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004804:	429a      	cmp	r2, r3
 8004806:	d208      	bcs.n	800481a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b2e      	ldr	r3, [pc, #184]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	492b      	ldr	r1, [pc, #172]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800481a:	4b29      	ldr	r3, [pc, #164]	@ (80048c0 <HAL_RCC_ClockConfig+0x25c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d210      	bcs.n	800484a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004828:	4b25      	ldr	r3, [pc, #148]	@ (80048c0 <HAL_RCC_ClockConfig+0x25c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 020f 	bic.w	r2, r3, #15
 8004830:	4923      	ldr	r1, [pc, #140]	@ (80048c0 <HAL_RCC_ClockConfig+0x25c>)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4313      	orrs	r3, r2
 8004836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004838:	4b21      	ldr	r3, [pc, #132]	@ (80048c0 <HAL_RCC_ClockConfig+0x25c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d001      	beq.n	800484a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e036      	b.n	80048b8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004856:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4918      	ldr	r1, [pc, #96]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004874:	4b13      	ldr	r3, [pc, #76]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4910      	ldr	r1, [pc, #64]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004888:	f000 f826 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	490c      	ldr	r1, [pc, #48]	@ (80048cc <HAL_RCC_ClockConfig+0x268>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	4a0a      	ldr	r2, [pc, #40]	@ (80048d0 <HAL_RCC_ClockConfig+0x26c>)
 80048a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048a8:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <HAL_RCC_ClockConfig+0x270>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe f821 	bl	80028f4 <HAL_InitTick>
 80048b2:	4603      	mov	r3, r0
 80048b4:	73fb      	strb	r3, [r7, #15]

  return status;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40021000 	.word	0x40021000
 80048c8:	04c4b400 	.word	0x04c4b400
 80048cc:	0800bab0 	.word	0x0800bab0
 80048d0:	2000006c 	.word	0x2000006c
 80048d4:	20000070 	.word	0x20000070

080048d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	b089      	sub	sp, #36	@ 0x24
 80048dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e6:	4b3e      	ldr	r3, [pc, #248]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f0:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x34>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b0c      	cmp	r3, #12
 8004904:	d121      	bne.n	800494a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d11e      	bne.n	800494a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800490c:	4b34      	ldr	r3, [pc, #208]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004918:	4b31      	ldr	r3, [pc, #196]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800491a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e005      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004928:	4b2d      	ldr	r3, [pc, #180]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004934:	4a2b      	ldr	r2, [pc, #172]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10d      	bne.n	8004960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004948:	e00a      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b04      	cmp	r3, #4
 800494e:	d102      	bne.n	8004956 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004950:	4b25      	ldr	r3, [pc, #148]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e004      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d101      	bne.n	8004960 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800495c:	4b23      	ldr	r3, [pc, #140]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x114>)
 800495e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b0c      	cmp	r3, #12
 8004964:	d134      	bne.n	80049d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004966:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d003      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0xa6>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d003      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0xac>
 800497c:	e005      	b.n	800498a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800497e:	4b1a      	ldr	r3, [pc, #104]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004980:	617b      	str	r3, [r7, #20]
      break;
 8004982:	e005      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004984:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004986:	617b      	str	r3, [r7, #20]
      break;
 8004988:	e002      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	617b      	str	r3, [r7, #20]
      break;
 800498e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004990:	4b13      	ldr	r3, [pc, #76]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	3301      	adds	r3, #1
 800499c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800499e:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	0a1b      	lsrs	r3, r3, #8
 80049a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	fb03 f202 	mul.w	r2, r3, r2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049b6:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	0e5b      	lsrs	r3, r3, #25
 80049bc:	f003 0303 	and.w	r3, r3, #3
 80049c0:	3301      	adds	r3, #1
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049d0:	69bb      	ldr	r3, [r7, #24]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3724      	adds	r7, #36	@ 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	0800bac8 	.word	0x0800bac8
 80049e8:	00f42400 	.word	0x00f42400
 80049ec:	007a1200 	.word	0x007a1200

080049f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b03      	ldr	r3, [pc, #12]	@ (8004a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	2000006c 	.word	0x2000006c

08004a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a0c:	f7ff fff0 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4904      	ldr	r1, [pc, #16]	@ (8004a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	0800bac0 	.word	0x0800bac0

08004a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a38:	f7ff ffda 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	0adb      	lsrs	r3, r3, #11
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	4904      	ldr	r1, [pc, #16]	@ (8004a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	0800bac0 	.word	0x0800bac0

08004a60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a6c:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a78:	f7ff f906 	bl	8003c88 <HAL_PWREx_GetVoltageRange>
 8004a7c:	6178      	str	r0, [r7, #20]
 8004a7e:	e014      	b.n	8004aaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a80:	4b22      	ldr	r3, [pc, #136]	@ (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a98:	f7ff f8f6 	bl	8003c88 <HAL_PWREx_GetVoltageRange>
 8004a9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab0:	d10b      	bne.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b80      	cmp	r3, #128	@ 0x80
 8004ab6:	d913      	bls.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2ba0      	cmp	r3, #160	@ 0xa0
 8004abc:	d902      	bls.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004abe:	2302      	movs	r3, #2
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e00d      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e00a      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ace:	d902      	bls.n	8004ad6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	e004      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b70      	cmp	r3, #112	@ 0x70
 8004ada:	d101      	bne.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004adc:	2301      	movs	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f023 020f 	bic.w	r2, r3, #15
 8004ae8:	4909      	ldr	r1, [pc, #36]	@ (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004af0:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d001      	beq.n	8004b02 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40022000 	.word	0x40022000

08004b14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d00b      	beq.n	8004b42 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d825      	bhi.n	8004b7c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d008      	beq.n	8004b48 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d11f      	bne.n	8004b7c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b3c:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b3e:	613b      	str	r3, [r7, #16]
    break;
 8004b40:	e01f      	b.n	8004b82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b42:	4b25      	ldr	r3, [pc, #148]	@ (8004bd8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b44:	613b      	str	r3, [r7, #16]
    break;
 8004b46:	e01c      	b.n	8004b82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b48:	4b21      	ldr	r3, [pc, #132]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d107      	bne.n	8004b64 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b54:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e005      	b.n	8004b70 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b64:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004b70:	4a1a      	ldr	r2, [pc, #104]	@ (8004bdc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b78:	613b      	str	r3, [r7, #16]
    break;
 8004b7a:	e002      	b.n	8004b82 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]
    break;
 8004b80:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b82:	4b13      	ldr	r3, [pc, #76]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b90:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	fb03 f202 	mul.w	r2, r3, r2
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ba8:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	0e5b      	lsrs	r3, r3, #25
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004bc2:	683b      	ldr	r3, [r7, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	007a1200 	.word	0x007a1200
 8004bdc:	0800bac8 	.word	0x0800bac8

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be8:	2300      	movs	r3, #0
 8004bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bec:	2300      	movs	r3, #0
 8004bee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d040      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c00:	2b80      	cmp	r3, #128	@ 0x80
 8004c02:	d02a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c04:	2b80      	cmp	r3, #128	@ 0x80
 8004c06:	d825      	bhi.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c08:	2b60      	cmp	r3, #96	@ 0x60
 8004c0a:	d026      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c0c:	2b60      	cmp	r3, #96	@ 0x60
 8004c0e:	d821      	bhi.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d006      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004c14:	2b40      	cmp	r3, #64	@ 0x40
 8004c16:	d81d      	bhi.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c20:	e018      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c22:	4b89      	ldr	r3, [pc, #548]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4a88      	ldr	r2, [pc, #544]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c2c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c2e:	e015      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	2100      	movs	r1, #0
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fb02 	bl	8005240 <RCCEx_PLLSAI1_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c40:	e00c      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3320      	adds	r3, #32
 8004c46:	2100      	movs	r1, #0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fbed 	bl	8005428 <RCCEx_PLLSAI2_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c52:	e003      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	74fb      	strb	r3, [r7, #19]
      break;
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c62:	4b79      	ldr	r3, [pc, #484]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c68:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c70:	4975      	ldr	r1, [pc, #468]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004c78:	e001      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7a:	7cfb      	ldrb	r3, [r7, #19]
 8004c7c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d047      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c92:	d030      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c98:	d82a      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c9e:	d02a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ca0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca4:	d824      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004caa:	d008      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb0:	d81e      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cba:	d010      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cbe:	4b62      	ldr	r3, [pc, #392]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	4a61      	ldr	r2, [pc, #388]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cca:	e015      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fab4 	bl	8005240 <RCCEx_PLLSAI1_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cdc:	e00c      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3320      	adds	r3, #32
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fb9f 	bl	8005428 <RCCEx_PLLSAI2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cee:	e003      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	74fb      	strb	r3, [r7, #19]
      break;
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cfe:	4b52      	ldr	r3, [pc, #328]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0c:	494e      	ldr	r1, [pc, #312]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004d14:	e001      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 809f 	beq.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d2c:	4b46      	ldr	r3, [pc, #280]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d46:	4a40      	ldr	r2, [pc, #256]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3a      	ldr	r2, [pc, #232]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d6a:	f7fd fe13 	bl	8002994 <HAL_GetTick>
 8004d6e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d70:	e009      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d72:	f7fd fe0f 	bl	8002994 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d902      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	74fb      	strb	r3, [r7, #19]
        break;
 8004d84:	e005      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d86:	4b31      	ldr	r3, [pc, #196]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0ef      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d15b      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d98:	4b2b      	ldr	r3, [pc, #172]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01f      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d019      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004db6:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dc2:	4b21      	ldr	r3, [pc, #132]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004de2:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d016      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd fdce 	bl	8002994 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fdca 	bl	8002994 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d902      	bls.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	74fb      	strb	r3, [r7, #19]
            break;
 8004e12:	e006      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e14:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ec      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e22:	7cfb      	ldrb	r3, [r7, #19]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e28:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e38:	4903      	ldr	r1, [pc, #12]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e40:	e008      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	74bb      	strb	r3, [r7, #18]
 8004e46:	e005      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e54:	7c7b      	ldrb	r3, [r7, #17]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d105      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5a:	4ba0      	ldr	r3, [pc, #640]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	4a9f      	ldr	r2, [pc, #636]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e72:	4b9a      	ldr	r3, [pc, #616]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e78:	f023 0203 	bic.w	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e80:	4996      	ldr	r1, [pc, #600]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e94:	4b91      	ldr	r3, [pc, #580]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9a:	f023 020c 	bic.w	r2, r3, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	498e      	ldr	r1, [pc, #568]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eb6:	4b89      	ldr	r3, [pc, #548]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec4:	4985      	ldr	r1, [pc, #532]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ed8:	4b80      	ldr	r3, [pc, #512]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ede:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee6:	497d      	ldr	r1, [pc, #500]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004efa:	4b78      	ldr	r3, [pc, #480]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f08:	4974      	ldr	r1, [pc, #464]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2a:	496c      	ldr	r1, [pc, #432]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3e:	4b67      	ldr	r3, [pc, #412]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f4c:	4963      	ldr	r1, [pc, #396]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f60:	4b5e      	ldr	r3, [pc, #376]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f6e:	495b      	ldr	r1, [pc, #364]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f82:	4b56      	ldr	r3, [pc, #344]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	4952      	ldr	r1, [pc, #328]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb2:	494a      	ldr	r1, [pc, #296]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fc6:	4b45      	ldr	r3, [pc, #276]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd4:	4941      	ldr	r1, [pc, #260]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fee:	f023 0203 	bic.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff6:	4939      	ldr	r1, [pc, #228]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d028      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800500a:	4b34      	ldr	r3, [pc, #208]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005010:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005018:	4930      	ldr	r1, [pc, #192]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005028:	d106      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800502a:	4b2c      	ldr	r3, [pc, #176]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	4a2b      	ldr	r2, [pc, #172]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005034:	60d3      	str	r3, [r2, #12]
 8005036:	e011      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005040:	d10c      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	2101      	movs	r1, #1
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f8f9 	bl	8005240 <RCCEx_PLLSAI1_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005052:	7cfb      	ldrb	r3, [r7, #19]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d04d      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800506c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005070:	d108      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005072:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005074:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005078:	4a18      	ldr	r2, [pc, #96]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800507a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800507e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005082:	e012      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005084:	4b15      	ldr	r3, [pc, #84]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005086:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800508a:	4a14      	ldr	r2, [pc, #80]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005090:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005094:	4b11      	ldr	r3, [pc, #68]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050a2:	490e      	ldr	r1, [pc, #56]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050b2:	d106      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b4:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4a08      	ldr	r2, [pc, #32]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050be:	60d3      	str	r3, [r2, #12]
 80050c0:	e020      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050ca:	d109      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050cc:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a02      	ldr	r2, [pc, #8]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d6:	60d3      	str	r3, [r2, #12]
 80050d8:	e014      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050e8:	d10c      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3304      	adds	r3, #4
 80050ee:	2101      	movs	r1, #1
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 f8a5 	bl	8005240 <RCCEx_PLLSAI1_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050fa:	7cfb      	ldrb	r3, [r7, #19]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d028      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005110:	4b4a      	ldr	r3, [pc, #296]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005116:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800511e:	4947      	ldr	r1, [pc, #284]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800512a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800512e:	d106      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005130:	4b42      	ldr	r3, [pc, #264]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4a41      	ldr	r2, [pc, #260]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800513a:	60d3      	str	r3, [r2, #12]
 800513c:	e011      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005142:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005146:	d10c      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	2101      	movs	r1, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f876 	bl	8005240 <RCCEx_PLLSAI1_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800515e:	7cfb      	ldrb	r3, [r7, #19]
 8005160:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01e      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800516e:	4b33      	ldr	r3, [pc, #204]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005174:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800517e:	492f      	ldr	r1, [pc, #188]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005190:	d10c      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	2102      	movs	r1, #2
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f851 	bl	8005240 <RCCEx_PLLSAI1_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051a2:	7cfb      	ldrb	r3, [r7, #19]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051be:	f023 0204 	bic.w	r2, r3, #4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c8:	491c      	ldr	r1, [pc, #112]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00b      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051dc:	4b17      	ldr	r3, [pc, #92]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051e2:	f023 0218 	bic.w	r2, r3, #24
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	4913      	ldr	r1, [pc, #76]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d017      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005200:	4b0e      	ldr	r3, [pc, #56]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005206:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005210:	490a      	ldr	r1, [pc, #40]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800521e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005222:	d105      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a04      	ldr	r2, [pc, #16]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800522a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800522e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005230:	7cbb      	ldrb	r3, [r7, #18]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000

08005240 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800524e:	4b72      	ldr	r3, [pc, #456]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800525a:	4b6f      	ldr	r3, [pc, #444]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0203 	and.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d103      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
       ||
 800526e:	2b00      	cmp	r3, #0
 8005270:	d142      	bne.n	80052f8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e03f      	b.n	80052f8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d018      	beq.n	80052b2 <RCCEx_PLLSAI1_Config+0x72>
 8005280:	2b03      	cmp	r3, #3
 8005282:	d825      	bhi.n	80052d0 <RCCEx_PLLSAI1_Config+0x90>
 8005284:	2b01      	cmp	r3, #1
 8005286:	d002      	beq.n	800528e <RCCEx_PLLSAI1_Config+0x4e>
 8005288:	2b02      	cmp	r3, #2
 800528a:	d009      	beq.n	80052a0 <RCCEx_PLLSAI1_Config+0x60>
 800528c:	e020      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800528e:	4b62      	ldr	r3, [pc, #392]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11d      	bne.n	80052d6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529e:	e01a      	b.n	80052d6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052a0:	4b5d      	ldr	r3, [pc, #372]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d116      	bne.n	80052da <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b0:	e013      	b.n	80052da <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052b2:	4b59      	ldr	r3, [pc, #356]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10f      	bne.n	80052de <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052be:	4b56      	ldr	r3, [pc, #344]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ce:	e006      	b.n	80052de <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      break;
 80052d4:	e004      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052de:	bf00      	nop
    }

    if(status == HAL_OK)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d108      	bne.n	80052f8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80052e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f023 0203 	bic.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4949      	ldr	r1, [pc, #292]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f040 8086 	bne.w	800540c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005300:	4b45      	ldr	r3, [pc, #276]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a44      	ldr	r2, [pc, #272]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005306:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800530a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fd fb42 	bl	8002994 <HAL_GetTick>
 8005310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005312:	e009      	b.n	8005328 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005314:	f7fd fb3e 	bl	8002994 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d902      	bls.n	8005328 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	73fb      	strb	r3, [r7, #15]
        break;
 8005326:	e005      	b.n	8005334 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005328:	4b3b      	ldr	r3, [pc, #236]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ef      	bne.n	8005314 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d168      	bne.n	800540c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d113      	bne.n	8005368 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005340:	4b35      	ldr	r3, [pc, #212]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	4b35      	ldr	r3, [pc, #212]	@ (800541c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005346:	4013      	ands	r3, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6892      	ldr	r2, [r2, #8]
 800534c:	0211      	lsls	r1, r2, #8
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68d2      	ldr	r2, [r2, #12]
 8005352:	06d2      	lsls	r2, r2, #27
 8005354:	4311      	orrs	r1, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6852      	ldr	r2, [r2, #4]
 800535a:	3a01      	subs	r2, #1
 800535c:	0112      	lsls	r2, r2, #4
 800535e:	430a      	orrs	r2, r1
 8005360:	492d      	ldr	r1, [pc, #180]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	610b      	str	r3, [r1, #16]
 8005366:	e02d      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d115      	bne.n	800539a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800536e:	4b2a      	ldr	r3, [pc, #168]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005370:	691a      	ldr	r2, [r3, #16]
 8005372:	4b2b      	ldr	r3, [pc, #172]	@ (8005420 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005374:	4013      	ands	r3, r2
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6892      	ldr	r2, [r2, #8]
 800537a:	0211      	lsls	r1, r2, #8
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6912      	ldr	r2, [r2, #16]
 8005380:	0852      	lsrs	r2, r2, #1
 8005382:	3a01      	subs	r2, #1
 8005384:	0552      	lsls	r2, r2, #21
 8005386:	4311      	orrs	r1, r2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6852      	ldr	r2, [r2, #4]
 800538c:	3a01      	subs	r2, #1
 800538e:	0112      	lsls	r2, r2, #4
 8005390:	430a      	orrs	r2, r1
 8005392:	4921      	ldr	r1, [pc, #132]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005394:	4313      	orrs	r3, r2
 8005396:	610b      	str	r3, [r1, #16]
 8005398:	e014      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800539a:	4b1f      	ldr	r3, [pc, #124]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	4b21      	ldr	r3, [pc, #132]	@ (8005424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6892      	ldr	r2, [r2, #8]
 80053a6:	0211      	lsls	r1, r2, #8
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6952      	ldr	r2, [r2, #20]
 80053ac:	0852      	lsrs	r2, r2, #1
 80053ae:	3a01      	subs	r2, #1
 80053b0:	0652      	lsls	r2, r2, #25
 80053b2:	4311      	orrs	r1, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6852      	ldr	r2, [r2, #4]
 80053b8:	3a01      	subs	r2, #1
 80053ba:	0112      	lsls	r2, r2, #4
 80053bc:	430a      	orrs	r2, r1
 80053be:	4916      	ldr	r1, [pc, #88]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053c4:	4b14      	ldr	r3, [pc, #80]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a13      	ldr	r2, [pc, #76]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fd fae0 	bl	8002994 <HAL_GetTick>
 80053d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053d6:	e009      	b.n	80053ec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d8:	f7fd fadc 	bl	8002994 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d902      	bls.n	80053ec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	73fb      	strb	r3, [r7, #15]
          break;
 80053ea:	e005      	b.n	80053f8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0ef      	beq.n	80053d8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053fe:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	4904      	ldr	r1, [pc, #16]	@ (8005418 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005408:	4313      	orrs	r3, r2
 800540a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
 800541c:	07ff800f 	.word	0x07ff800f
 8005420:	ff9f800f 	.word	0xff9f800f
 8005424:	f9ff800f 	.word	0xf9ff800f

08005428 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005436:	4b72      	ldr	r3, [pc, #456]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005442:	4b6f      	ldr	r3, [pc, #444]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0203 	and.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d103      	bne.n	800545a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
       ||
 8005456:	2b00      	cmp	r3, #0
 8005458:	d142      	bne.n	80054e0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
 800545e:	e03f      	b.n	80054e0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d018      	beq.n	800549a <RCCEx_PLLSAI2_Config+0x72>
 8005468:	2b03      	cmp	r3, #3
 800546a:	d825      	bhi.n	80054b8 <RCCEx_PLLSAI2_Config+0x90>
 800546c:	2b01      	cmp	r3, #1
 800546e:	d002      	beq.n	8005476 <RCCEx_PLLSAI2_Config+0x4e>
 8005470:	2b02      	cmp	r3, #2
 8005472:	d009      	beq.n	8005488 <RCCEx_PLLSAI2_Config+0x60>
 8005474:	e020      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005476:	4b62      	ldr	r3, [pc, #392]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d11d      	bne.n	80054be <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005486:	e01a      	b.n	80054be <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005488:	4b5d      	ldr	r3, [pc, #372]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005490:	2b00      	cmp	r3, #0
 8005492:	d116      	bne.n	80054c2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005498:	e013      	b.n	80054c2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800549a:	4b59      	ldr	r3, [pc, #356]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054a6:	4b56      	ldr	r3, [pc, #344]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054b6:	e006      	b.n	80054c6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      break;
 80054bc:	e004      	b.n	80054c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d108      	bne.n	80054e0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80054ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f023 0203 	bic.w	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4949      	ldr	r1, [pc, #292]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f040 8086 	bne.w	80055f4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054e8:	4b45      	ldr	r3, [pc, #276]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a44      	ldr	r2, [pc, #272]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f4:	f7fd fa4e 	bl	8002994 <HAL_GetTick>
 80054f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054fa:	e009      	b.n	8005510 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054fc:	f7fd fa4a 	bl	8002994 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d902      	bls.n	8005510 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	73fb      	strb	r3, [r7, #15]
        break;
 800550e:	e005      	b.n	800551c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005510:	4b3b      	ldr	r3, [pc, #236]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ef      	bne.n	80054fc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d168      	bne.n	80055f4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d113      	bne.n	8005550 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005528:	4b35      	ldr	r3, [pc, #212]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	4b35      	ldr	r3, [pc, #212]	@ (8005604 <RCCEx_PLLSAI2_Config+0x1dc>)
 800552e:	4013      	ands	r3, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6892      	ldr	r2, [r2, #8]
 8005534:	0211      	lsls	r1, r2, #8
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68d2      	ldr	r2, [r2, #12]
 800553a:	06d2      	lsls	r2, r2, #27
 800553c:	4311      	orrs	r1, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6852      	ldr	r2, [r2, #4]
 8005542:	3a01      	subs	r2, #1
 8005544:	0112      	lsls	r2, r2, #4
 8005546:	430a      	orrs	r2, r1
 8005548:	492d      	ldr	r1, [pc, #180]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 800554a:	4313      	orrs	r3, r2
 800554c:	614b      	str	r3, [r1, #20]
 800554e:	e02d      	b.n	80055ac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d115      	bne.n	8005582 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005556:	4b2a      	ldr	r3, [pc, #168]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	4b2b      	ldr	r3, [pc, #172]	@ (8005608 <RCCEx_PLLSAI2_Config+0x1e0>)
 800555c:	4013      	ands	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6892      	ldr	r2, [r2, #8]
 8005562:	0211      	lsls	r1, r2, #8
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6912      	ldr	r2, [r2, #16]
 8005568:	0852      	lsrs	r2, r2, #1
 800556a:	3a01      	subs	r2, #1
 800556c:	0552      	lsls	r2, r2, #21
 800556e:	4311      	orrs	r1, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6852      	ldr	r2, [r2, #4]
 8005574:	3a01      	subs	r2, #1
 8005576:	0112      	lsls	r2, r2, #4
 8005578:	430a      	orrs	r2, r1
 800557a:	4921      	ldr	r1, [pc, #132]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 800557c:	4313      	orrs	r3, r2
 800557e:	614b      	str	r3, [r1, #20]
 8005580:	e014      	b.n	80055ac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005582:	4b1f      	ldr	r3, [pc, #124]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	4b21      	ldr	r3, [pc, #132]	@ (800560c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6892      	ldr	r2, [r2, #8]
 800558e:	0211      	lsls	r1, r2, #8
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6952      	ldr	r2, [r2, #20]
 8005594:	0852      	lsrs	r2, r2, #1
 8005596:	3a01      	subs	r2, #1
 8005598:	0652      	lsls	r2, r2, #25
 800559a:	4311      	orrs	r1, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6852      	ldr	r2, [r2, #4]
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0112      	lsls	r2, r2, #4
 80055a4:	430a      	orrs	r2, r1
 80055a6:	4916      	ldr	r1, [pc, #88]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055ac:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a13      	ldr	r2, [pc, #76]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fd f9ec 	bl	8002994 <HAL_GetTick>
 80055bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055be:	e009      	b.n	80055d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055c0:	f7fd f9e8 	bl	8002994 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d902      	bls.n	80055d4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	73fb      	strb	r3, [r7, #15]
          break;
 80055d2:	e005      	b.n	80055e0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ef      	beq.n	80055c0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055e6:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e8:	695a      	ldr	r2, [r3, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	4904      	ldr	r1, [pc, #16]	@ (8005600 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40021000 	.word	0x40021000
 8005604:	07ff800f 	.word	0x07ff800f
 8005608:	ff9f800f 	.word	0xff9f800f
 800560c:	f9ff800f 	.word	0xf9ff800f

08005610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e095      	b.n	800574e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d108      	bne.n	800563c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005632:	d009      	beq.n	8005648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	61da      	str	r2, [r3, #28]
 800563a:	e005      	b.n	8005648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc ff48 	bl	80024f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800567e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005688:	d902      	bls.n	8005690 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e002      	b.n	8005696 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005694:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800569e:	d007      	beq.n	80056b0 <HAL_SPI_Init+0xa0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056a8:	d002      	beq.n	80056b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f2:	ea42 0103 	orr.w	r1, r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	0c1b      	lsrs	r3, r3, #16
 800570c:	f003 0204 	and.w	r2, r3, #4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800572c:	ea42 0103 	orr.w	r1, r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_SPI_Transmit+0x22>
 8005774:	2302      	movs	r3, #2
 8005776:	e15f      	b.n	8005a38 <HAL_SPI_Transmit+0x2e2>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005780:	f7fd f908 	bl	8002994 <HAL_GetTick>
 8005784:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d002      	beq.n	800579c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	77fb      	strb	r3, [r7, #31]
    goto error;
 800579a:	e148      	b.n	8005a2e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Transmit+0x52>
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057ac:	e13f      	b.n	8005a2e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2203      	movs	r2, #3
 80057b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057f8:	d10f      	bne.n	800581a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005808:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005818:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005824:	2b40      	cmp	r3, #64	@ 0x40
 8005826:	d007      	beq.n	8005838 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005840:	d94f      	bls.n	80058e2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Transmit+0xfa>
 800584a:	8afb      	ldrh	r3, [r7, #22]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d142      	bne.n	80058d6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005874:	e02f      	b.n	80058d6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d112      	bne.n	80058aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	1c9a      	adds	r2, r3, #2
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058a8:	e015      	b.n	80058d6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058aa:	f7fd f873 	bl	8002994 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d803      	bhi.n	80058c2 <HAL_SPI_Transmit+0x16c>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Transmit+0x172>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80058d4:	e0ab      	b.n	8005a2e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ca      	bne.n	8005876 <HAL_SPI_Transmit+0x120>
 80058e0:	e080      	b.n	80059e4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_SPI_Transmit+0x19a>
 80058ea:	8afb      	ldrh	r3, [r7, #22]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d174      	bne.n	80059da <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d912      	bls.n	8005920 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	881a      	ldrh	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590a:	1c9a      	adds	r2, r3, #2
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b02      	subs	r3, #2
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800591e:	e05c      	b.n	80059da <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005946:	e048      	b.n	80059da <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d12b      	bne.n	80059ae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d912      	bls.n	8005986 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005964:	881a      	ldrh	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b02      	subs	r3, #2
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005984:	e029      	b.n	80059da <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059ac:	e015      	b.n	80059da <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ae:	f7fc fff1 	bl	8002994 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d803      	bhi.n	80059c6 <HAL_SPI_Transmit+0x270>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d102      	bne.n	80059cc <HAL_SPI_Transmit+0x276>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80059d8:	e029      	b.n	8005a2e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1b1      	bne.n	8005948 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f947 	bl	8005c7c <SPI_EndRxTxTransaction>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e003      	b.n	8005a2e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005a36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3720      	adds	r7, #32
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a50:	f7fc ffa0 	bl	8002994 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a60:	f7fc ff98 	bl	8002994 <HAL_GetTick>
 8005a64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a66:	4b39      	ldr	r3, [pc, #228]	@ (8005b4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	015b      	lsls	r3, r3, #5
 8005a6c:	0d1b      	lsrs	r3, r3, #20
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a76:	e054      	b.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d050      	beq.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a80:	f7fc ff88 	bl	8002994 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d902      	bls.n	8005a96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d13d      	bne.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aae:	d111      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab8:	d004      	beq.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac2:	d107      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005adc:	d10f      	bne.n	8005afe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e017      	b.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d19b      	bne.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	2000006c 	.word	0x2000006c

08005b50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	@ 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b62:	f7fc ff17 	bl	8002994 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	4413      	add	r3, r2
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005b72:	f7fc ff0f 	bl	8002994 <HAL_GetTick>
 8005b76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b80:	4b3d      	ldr	r3, [pc, #244]	@ (8005c78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	00da      	lsls	r2, r3, #3
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	0d1b      	lsrs	r3, r3, #20
 8005b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b98:	e060      	b.n	8005c5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ba0:	d107      	bne.n	8005bb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d050      	beq.n	8005c5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bba:	f7fc feeb 	bl	8002994 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d902      	bls.n	8005bd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d13d      	bne.n	8005c4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be8:	d111      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf2:	d004      	beq.n	8005bfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bfc:	d107      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c16:	d10f      	bne.n	8005c38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e010      	b.n	8005c6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4013      	ands	r3, r2
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d196      	bne.n	8005b9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3728      	adds	r7, #40	@ 0x28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000006c 	.word	0x2000006c

08005c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff ff5b 	bl	8005b50 <SPI_WaitFifoStateUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e027      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2180      	movs	r1, #128	@ 0x80
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fec0 	bl	8005a40 <SPI_WaitFlagStateUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e014      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff ff34 	bl	8005b50 <SPI_WaitFifoStateUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e000      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e049      	b.n	8005dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fc fc24 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f000 fa9a 	bl	8006280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e04f      	b.n	8005e70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a23      	ldr	r2, [pc, #140]	@ (8005e7c <HAL_TIM_Base_Start_IT+0xc4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01d      	beq.n	8005e2e <HAL_TIM_Base_Start_IT+0x76>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfa:	d018      	beq.n	8005e2e <HAL_TIM_Base_Start_IT+0x76>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1f      	ldr	r2, [pc, #124]	@ (8005e80 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_TIM_Base_Start_IT+0x76>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005e84 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_TIM_Base_Start_IT+0x76>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1c      	ldr	r2, [pc, #112]	@ (8005e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_TIM_Base_Start_IT+0x76>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_TIM_Base_Start_IT+0x76>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a19      	ldr	r2, [pc, #100]	@ (8005e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d115      	bne.n	8005e5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	4b17      	ldr	r3, [pc, #92]	@ (8005e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b06      	cmp	r3, #6
 8005e3e:	d015      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0xb4>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e46:	d011      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e58:	e008      	b.n	8005e6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	e000      	b.n	8005e6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	00010007 	.word	0x00010007

08005e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d020      	beq.n	8005efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0202 	mvn.w	r2, #2
 8005ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9ad 	bl	8006242 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f99f 	bl	800622e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9b0 	bl	8006256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d020      	beq.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0204 	mvn.w	r2, #4
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f987 	bl	8006242 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f979 	bl	800622e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f98a 	bl	8006256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d020      	beq.n	8005f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01b      	beq.n	8005f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0208 	mvn.w	r2, #8
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f961 	bl	8006242 <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f953 	bl	800622e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f964 	bl	8006256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d020      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01b      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0210 	mvn.w	r2, #16
 8005fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f93b 	bl	8006242 <HAL_TIM_IC_CaptureCallback>
 8005fcc:	e005      	b.n	8005fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f92d 	bl	800622e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f93e 	bl	8006256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0201 	mvn.w	r2, #1
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fb70 	bl	80016e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 faf2 	bl	800660c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00c      	beq.n	800604c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 faea 	bl	8006620 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00c      	beq.n	8006070 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f8fd 	bl	800626a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00c      	beq.n	8006094 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0220 	mvn.w	r2, #32
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fab2 	bl	80065f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_TIM_ConfigClockSource+0x1c>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e0b6      	b.n	8006226 <HAL_TIM_ConfigClockSource+0x18a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f4:	d03e      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0xd8>
 80060f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060fa:	f200 8087 	bhi.w	800620c <HAL_TIM_ConfigClockSource+0x170>
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006102:	f000 8086 	beq.w	8006212 <HAL_TIM_ConfigClockSource+0x176>
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610a:	d87f      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x170>
 800610c:	2b70      	cmp	r3, #112	@ 0x70
 800610e:	d01a      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0xaa>
 8006110:	2b70      	cmp	r3, #112	@ 0x70
 8006112:	d87b      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x170>
 8006114:	2b60      	cmp	r3, #96	@ 0x60
 8006116:	d050      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x11e>
 8006118:	2b60      	cmp	r3, #96	@ 0x60
 800611a:	d877      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x170>
 800611c:	2b50      	cmp	r3, #80	@ 0x50
 800611e:	d03c      	beq.n	800619a <HAL_TIM_ConfigClockSource+0xfe>
 8006120:	2b50      	cmp	r3, #80	@ 0x50
 8006122:	d873      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x170>
 8006124:	2b40      	cmp	r3, #64	@ 0x40
 8006126:	d058      	beq.n	80061da <HAL_TIM_ConfigClockSource+0x13e>
 8006128:	2b40      	cmp	r3, #64	@ 0x40
 800612a:	d86f      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x170>
 800612c:	2b30      	cmp	r3, #48	@ 0x30
 800612e:	d064      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x15e>
 8006130:	2b30      	cmp	r3, #48	@ 0x30
 8006132:	d86b      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x170>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d060      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x15e>
 8006138:	2b20      	cmp	r3, #32
 800613a:	d867      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x170>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d05c      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x15e>
 8006140:	2b10      	cmp	r3, #16
 8006142:	d05a      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x15e>
 8006144:	e062      	b.n	800620c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006156:	f000 f9a7 	bl	80064a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	609a      	str	r2, [r3, #8]
      break;
 8006172:	e04f      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006184:	f000 f990 	bl	80064a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006196:	609a      	str	r2, [r3, #8]
      break;
 8006198:	e03c      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a6:	461a      	mov	r2, r3
 80061a8:	f000 f904 	bl	80063b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2150      	movs	r1, #80	@ 0x50
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f95d 	bl	8006472 <TIM_ITRx_SetConfig>
      break;
 80061b8:	e02c      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c6:	461a      	mov	r2, r3
 80061c8:	f000 f923 	bl	8006412 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2160      	movs	r1, #96	@ 0x60
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f94d 	bl	8006472 <TIM_ITRx_SetConfig>
      break;
 80061d8:	e01c      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e6:	461a      	mov	r2, r3
 80061e8:	f000 f8e4 	bl	80063b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2140      	movs	r1, #64	@ 0x40
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f93d 	bl	8006472 <TIM_ITRx_SetConfig>
      break;
 80061f8:	e00c      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f000 f934 	bl	8006472 <TIM_ITRx_SetConfig>
      break;
 800620a:	e003      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]
      break;
 8006210:	e000      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a40      	ldr	r2, [pc, #256]	@ (8006394 <TIM_Base_SetConfig+0x114>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d013      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629e:	d00f      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a3d      	ldr	r2, [pc, #244]	@ (8006398 <TIM_Base_SetConfig+0x118>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00b      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3c      	ldr	r2, [pc, #240]	@ (800639c <TIM_Base_SetConfig+0x11c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a3b      	ldr	r2, [pc, #236]	@ (80063a0 <TIM_Base_SetConfig+0x120>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a3a      	ldr	r2, [pc, #232]	@ (80063a4 <TIM_Base_SetConfig+0x124>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d108      	bne.n	80062d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006394 <TIM_Base_SetConfig+0x114>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01f      	beq.n	800631a <TIM_Base_SetConfig+0x9a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e0:	d01b      	beq.n	800631a <TIM_Base_SetConfig+0x9a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006398 <TIM_Base_SetConfig+0x118>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d017      	beq.n	800631a <TIM_Base_SetConfig+0x9a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2b      	ldr	r2, [pc, #172]	@ (800639c <TIM_Base_SetConfig+0x11c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <TIM_Base_SetConfig+0x9a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2a      	ldr	r2, [pc, #168]	@ (80063a0 <TIM_Base_SetConfig+0x120>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00f      	beq.n	800631a <TIM_Base_SetConfig+0x9a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a29      	ldr	r2, [pc, #164]	@ (80063a4 <TIM_Base_SetConfig+0x124>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00b      	beq.n	800631a <TIM_Base_SetConfig+0x9a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a28      	ldr	r2, [pc, #160]	@ (80063a8 <TIM_Base_SetConfig+0x128>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d007      	beq.n	800631a <TIM_Base_SetConfig+0x9a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <TIM_Base_SetConfig+0x12c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_Base_SetConfig+0x9a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a26      	ldr	r2, [pc, #152]	@ (80063b0 <TIM_Base_SetConfig+0x130>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d108      	bne.n	800632c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a10      	ldr	r2, [pc, #64]	@ (8006394 <TIM_Base_SetConfig+0x114>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00f      	beq.n	8006378 <TIM_Base_SetConfig+0xf8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a12      	ldr	r2, [pc, #72]	@ (80063a4 <TIM_Base_SetConfig+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00b      	beq.n	8006378 <TIM_Base_SetConfig+0xf8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a11      	ldr	r2, [pc, #68]	@ (80063a8 <TIM_Base_SetConfig+0x128>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d007      	beq.n	8006378 <TIM_Base_SetConfig+0xf8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a10      	ldr	r2, [pc, #64]	@ (80063ac <TIM_Base_SetConfig+0x12c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d003      	beq.n	8006378 <TIM_Base_SetConfig+0xf8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a0f      	ldr	r2, [pc, #60]	@ (80063b0 <TIM_Base_SetConfig+0x130>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d103      	bne.n	8006380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	615a      	str	r2, [r3, #20]
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40013400 	.word	0x40013400
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40014400 	.word	0x40014400
 80063b0:	40014800 	.word	0x40014800

080063b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 030a 	bic.w	r3, r3, #10
 80063f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006412:	b480      	push	{r7}
 8006414:	b087      	sub	sp, #28
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f023 0210 	bic.w	r2, r3, #16
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800643c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	031b      	lsls	r3, r3, #12
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800644e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	f043 0307 	orr.w	r3, r3, #7
 8006494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	021a      	lsls	r2, r3, #8
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	609a      	str	r2, [r3, #8]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e068      	b.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a2e      	ldr	r2, [pc, #184]	@ (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a2d      	ldr	r2, [pc, #180]	@ (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800653a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1e      	ldr	r2, [pc, #120]	@ (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01d      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006572:	d018      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1a      	ldr	r2, [pc, #104]	@ (80065ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00e      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a18      	ldr	r2, [pc, #96]	@ (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d009      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a13      	ldr	r2, [pc, #76]	@ (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a14      	ldr	r2, [pc, #80]	@ (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10c      	bne.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40000c00 	.word	0x40000c00
 80065f4:	40014000 	.word	0x40014000

080065f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e042      	b.n	80066cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fb fe9f 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2224      	movs	r2, #36	@ 0x24
 8006662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 ff42 	bl	8007508 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fc43 	bl	8006f10 <UART_SetConfig>
 800668a:	4603      	mov	r3, r0
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e01b      	b.n	80066cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 ffc1 	bl	800764c <UART_CheckIdleState>
 80066ca:	4603      	mov	r3, r0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	@ 0x28
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d17b      	bne.n	80067e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <HAL_UART_Transmit+0x26>
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e074      	b.n	80067e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2221      	movs	r2, #33	@ 0x21
 800670a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800670e:	f7fc f941 	bl	8002994 <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672c:	d108      	bne.n	8006740 <HAL_UART_Transmit+0x6c>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e003      	b.n	8006748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006748:	e030      	b.n	80067ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2200      	movs	r2, #0
 8006752:	2180      	movs	r1, #128	@ 0x80
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 f823 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e03d      	b.n	80067e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10b      	bne.n	800678a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	881a      	ldrh	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800677e:	b292      	uxth	r2, r2
 8006780:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	3302      	adds	r3, #2
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	e007      	b.n	800679a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	3301      	adds	r3, #1
 8006798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1c8      	bne.n	800674a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2200      	movs	r2, #0
 80067c0:	2140      	movs	r1, #64	@ 0x40
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 ffec 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e006      	b.n	80067e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80067e6:	2302      	movs	r3, #2
  }
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	@ 0x28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006804:	2b20      	cmp	r3, #32
 8006806:	d137      	bne.n	8006878 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_UART_Receive_IT+0x24>
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e030      	b.n	800687a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a18      	ldr	r2, [pc, #96]	@ (8006884 <HAL_UART_Receive_IT+0x94>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d01f      	beq.n	8006868 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d018      	beq.n	8006868 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	613b      	str	r3, [r7, #16]
   return(result);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800684a:	627b      	str	r3, [r7, #36]	@ 0x24
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	69f9      	ldr	r1, [r7, #28]
 800685a:	6a3a      	ldr	r2, [r7, #32]
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	61bb      	str	r3, [r7, #24]
   return(result);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e6      	bne.n	8006836 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	461a      	mov	r2, r3
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fffe 	bl	8007870 <UART_Start_Receive_IT>
 8006874:	4603      	mov	r3, r0
 8006876:	e000      	b.n	800687a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006878:	2302      	movs	r3, #2
  }
}
 800687a:	4618      	mov	r0, r3
 800687c:	3728      	adds	r7, #40	@ 0x28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40008000 	.word	0x40008000

08006888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b0ba      	sub	sp, #232	@ 0xe8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068b6:	4013      	ands	r3, r2
 80068b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11b      	bne.n	80068fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d015      	beq.n	80068fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d009      	beq.n	80068fc <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 82e3 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4798      	blx	r3
      }
      return;
 80068fa:	e2dd      	b.n	8006eb8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80068fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8123 	beq.w	8006b4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006906:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800690a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b40 <HAL_UART_IRQHandler+0x2b8>)
 800690c:	4013      	ands	r3, r2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006912:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006916:	4b8b      	ldr	r3, [pc, #556]	@ (8006b44 <HAL_UART_IRQHandler+0x2bc>)
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8116 	beq.w	8006b4c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d011      	beq.n	8006950 <HAL_UART_IRQHandler+0xc8>
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d011      	beq.n	8006980 <HAL_UART_IRQHandler+0xf8>
 800695c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2202      	movs	r2, #2
 800696e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006976:	f043 0204 	orr.w	r2, r3, #4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d011      	beq.n	80069b0 <HAL_UART_IRQHandler+0x128>
 800698c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2204      	movs	r2, #4
 800699e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a6:	f043 0202 	orr.w	r2, r3, #2
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d017      	beq.n	80069ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d105      	bne.n	80069d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006b40 <HAL_UART_IRQHandler+0x2b8>)
 80069ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2208      	movs	r2, #8
 80069da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e2:	f043 0208 	orr.w	r2, r3, #8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d012      	beq.n	8006a1e <HAL_UART_IRQHandler+0x196>
 80069f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00c      	beq.n	8006a1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a14:	f043 0220 	orr.w	r2, r3, #32
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8249 	beq.w	8006ebc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d013      	beq.n	8006a5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d105      	bne.n	8006a4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a72:	2b40      	cmp	r3, #64	@ 0x40
 8006a74:	d005      	beq.n	8006a82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d054      	beq.n	8006b2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 f816 	bl	8007ab4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a92:	2b40      	cmp	r3, #64	@ 0x40
 8006a94:	d146      	bne.n	8006b24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1d9      	bne.n	8006a96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d017      	beq.n	8006b1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af2:	4a15      	ldr	r2, [pc, #84]	@ (8006b48 <HAL_UART_IRQHandler+0x2c0>)
 8006af4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fc f8e6 	bl	8002cce <HAL_DMA_Abort_IT>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d019      	beq.n	8006b3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b16:	4610      	mov	r0, r2
 8006b18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1a:	e00f      	b.n	8006b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f9e1 	bl	8006ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b22:	e00b      	b.n	8006b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f9dd 	bl	8006ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2a:	e007      	b.n	8006b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f9d9 	bl	8006ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b3a:	e1bf      	b.n	8006ebc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3c:	bf00      	nop
    return;
 8006b3e:	e1bd      	b.n	8006ebc <HAL_UART_IRQHandler+0x634>
 8006b40:	10000001 	.word	0x10000001
 8006b44:	04000120 	.word	0x04000120
 8006b48:	08007b81 	.word	0x08007b81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	f040 8153 	bne.w	8006dfc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 814c 	beq.w	8006dfc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8145 	beq.w	8006dfc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2210      	movs	r2, #16
 8006b78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b84:	2b40      	cmp	r3, #64	@ 0x40
 8006b86:	f040 80bb 	bne.w	8006d00 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 818f 	beq.w	8006ec0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ba8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bac:	429a      	cmp	r2, r3
 8006bae:	f080 8187 	bcs.w	8006ec0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 8087 	bne.w	8006cde <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1da      	bne.n	8006bd0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e1      	bne.n	8006c1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3308      	adds	r3, #8
 8006c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e3      	bne.n	8006c56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cac:	f023 0310 	bic.w	r3, r3, #16
 8006cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e4      	bne.n	8006c9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fb ff9c 	bl	8002c16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f8fd 	bl	8006ef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cfe:	e0df      	b.n	8006ec0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80d1 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006d22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 80cc 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e4      	bne.n	8006d2c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3308      	adds	r3, #8
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	623b      	str	r3, [r7, #32]
   return(result);
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e1      	bne.n	8006d62 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0310 	bic.w	r3, r3, #16
 8006dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	69b9      	ldr	r1, [r7, #24]
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	617b      	str	r3, [r7, #20]
   return(result);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e4      	bne.n	8006db2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f87f 	bl	8006ef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dfa:	e063      	b.n	8006ec4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00e      	beq.n	8006e26 <HAL_UART_IRQHandler+0x59e>
 8006e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d008      	beq.n	8006e26 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fc14 	bl	800864c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e24:	e051      	b.n	8006eca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d014      	beq.n	8006e5c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d105      	bne.n	8006e4a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d03a      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
    }
    return;
 8006e5a:	e035      	b.n	8006ec8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <HAL_UART_IRQHandler+0x5f4>
 8006e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fe99 	bl	8007bac <UART_EndTransmit_IT>
    return;
 8006e7a:	e026      	b.n	8006eca <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d009      	beq.n	8006e9c <HAL_UART_IRQHandler+0x614>
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fbed 	bl	8008674 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e9a:	e016      	b.n	8006eca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d010      	beq.n	8006eca <HAL_UART_IRQHandler+0x642>
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da0c      	bge.n	8006eca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fbd5 	bl	8008660 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eb6:	e008      	b.n	8006eca <HAL_UART_IRQHandler+0x642>
      return;
 8006eb8:	bf00      	nop
 8006eba:	e006      	b.n	8006eca <HAL_UART_IRQHandler+0x642>
    return;
 8006ebc:	bf00      	nop
 8006ebe:	e004      	b.n	8006eca <HAL_UART_IRQHandler+0x642>
      return;
 8006ec0:	bf00      	nop
 8006ec2:	e002      	b.n	8006eca <HAL_UART_IRQHandler+0x642>
      return;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <HAL_UART_IRQHandler+0x642>
    return;
 8006ec8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006eca:	37e8      	adds	r7, #232	@ 0xe8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f14:	b08c      	sub	sp, #48	@ 0x30
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4baa      	ldr	r3, [pc, #680]	@ (80071e8 <UART_SetConfig+0x2d8>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a9f      	ldr	r2, [pc, #636]	@ (80071ec <UART_SetConfig+0x2dc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f90:	430b      	orrs	r3, r1
 8006f92:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	f023 010f 	bic.w	r1, r3, #15
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a90      	ldr	r2, [pc, #576]	@ (80071f0 <UART_SetConfig+0x2e0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d125      	bne.n	8007000 <UART_SetConfig+0xf0>
 8006fb4:	4b8f      	ldr	r3, [pc, #572]	@ (80071f4 <UART_SetConfig+0x2e4>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d81a      	bhi.n	8006ff8 <UART_SetConfig+0xe8>
 8006fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc8 <UART_SetConfig+0xb8>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fde:	e116      	b.n	800720e <UART_SetConfig+0x2fe>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe6:	e112      	b.n	800720e <UART_SetConfig+0x2fe>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fee:	e10e      	b.n	800720e <UART_SetConfig+0x2fe>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff6:	e10a      	b.n	800720e <UART_SetConfig+0x2fe>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	e106      	b.n	800720e <UART_SetConfig+0x2fe>
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a7c      	ldr	r2, [pc, #496]	@ (80071f8 <UART_SetConfig+0x2e8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d138      	bne.n	800707c <UART_SetConfig+0x16c>
 800700a:	4b7a      	ldr	r3, [pc, #488]	@ (80071f4 <UART_SetConfig+0x2e4>)
 800700c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007010:	f003 030c 	and.w	r3, r3, #12
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d82d      	bhi.n	8007074 <UART_SetConfig+0x164>
 8007018:	a201      	add	r2, pc, #4	@ (adr r2, 8007020 <UART_SetConfig+0x110>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007055 	.word	0x08007055
 8007024:	08007075 	.word	0x08007075
 8007028:	08007075 	.word	0x08007075
 800702c:	08007075 	.word	0x08007075
 8007030:	08007065 	.word	0x08007065
 8007034:	08007075 	.word	0x08007075
 8007038:	08007075 	.word	0x08007075
 800703c:	08007075 	.word	0x08007075
 8007040:	0800705d 	.word	0x0800705d
 8007044:	08007075 	.word	0x08007075
 8007048:	08007075 	.word	0x08007075
 800704c:	08007075 	.word	0x08007075
 8007050:	0800706d 	.word	0x0800706d
 8007054:	2300      	movs	r3, #0
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705a:	e0d8      	b.n	800720e <UART_SetConfig+0x2fe>
 800705c:	2302      	movs	r3, #2
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007062:	e0d4      	b.n	800720e <UART_SetConfig+0x2fe>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706a:	e0d0      	b.n	800720e <UART_SetConfig+0x2fe>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007072:	e0cc      	b.n	800720e <UART_SetConfig+0x2fe>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707a:	e0c8      	b.n	800720e <UART_SetConfig+0x2fe>
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a5e      	ldr	r2, [pc, #376]	@ (80071fc <UART_SetConfig+0x2ec>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d125      	bne.n	80070d2 <UART_SetConfig+0x1c2>
 8007086:	4b5b      	ldr	r3, [pc, #364]	@ (80071f4 <UART_SetConfig+0x2e4>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007090:	2b30      	cmp	r3, #48	@ 0x30
 8007092:	d016      	beq.n	80070c2 <UART_SetConfig+0x1b2>
 8007094:	2b30      	cmp	r3, #48	@ 0x30
 8007096:	d818      	bhi.n	80070ca <UART_SetConfig+0x1ba>
 8007098:	2b20      	cmp	r3, #32
 800709a:	d00a      	beq.n	80070b2 <UART_SetConfig+0x1a2>
 800709c:	2b20      	cmp	r3, #32
 800709e:	d814      	bhi.n	80070ca <UART_SetConfig+0x1ba>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <UART_SetConfig+0x19a>
 80070a4:	2b10      	cmp	r3, #16
 80070a6:	d008      	beq.n	80070ba <UART_SetConfig+0x1aa>
 80070a8:	e00f      	b.n	80070ca <UART_SetConfig+0x1ba>
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b0:	e0ad      	b.n	800720e <UART_SetConfig+0x2fe>
 80070b2:	2302      	movs	r3, #2
 80070b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b8:	e0a9      	b.n	800720e <UART_SetConfig+0x2fe>
 80070ba:	2304      	movs	r3, #4
 80070bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c0:	e0a5      	b.n	800720e <UART_SetConfig+0x2fe>
 80070c2:	2308      	movs	r3, #8
 80070c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c8:	e0a1      	b.n	800720e <UART_SetConfig+0x2fe>
 80070ca:	2310      	movs	r3, #16
 80070cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d0:	e09d      	b.n	800720e <UART_SetConfig+0x2fe>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a4a      	ldr	r2, [pc, #296]	@ (8007200 <UART_SetConfig+0x2f0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d125      	bne.n	8007128 <UART_SetConfig+0x218>
 80070dc:	4b45      	ldr	r3, [pc, #276]	@ (80071f4 <UART_SetConfig+0x2e4>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80070e8:	d016      	beq.n	8007118 <UART_SetConfig+0x208>
 80070ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80070ec:	d818      	bhi.n	8007120 <UART_SetConfig+0x210>
 80070ee:	2b80      	cmp	r3, #128	@ 0x80
 80070f0:	d00a      	beq.n	8007108 <UART_SetConfig+0x1f8>
 80070f2:	2b80      	cmp	r3, #128	@ 0x80
 80070f4:	d814      	bhi.n	8007120 <UART_SetConfig+0x210>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <UART_SetConfig+0x1f0>
 80070fa:	2b40      	cmp	r3, #64	@ 0x40
 80070fc:	d008      	beq.n	8007110 <UART_SetConfig+0x200>
 80070fe:	e00f      	b.n	8007120 <UART_SetConfig+0x210>
 8007100:	2300      	movs	r3, #0
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007106:	e082      	b.n	800720e <UART_SetConfig+0x2fe>
 8007108:	2302      	movs	r3, #2
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710e:	e07e      	b.n	800720e <UART_SetConfig+0x2fe>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007116:	e07a      	b.n	800720e <UART_SetConfig+0x2fe>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e076      	b.n	800720e <UART_SetConfig+0x2fe>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e072      	b.n	800720e <UART_SetConfig+0x2fe>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a35      	ldr	r2, [pc, #212]	@ (8007204 <UART_SetConfig+0x2f4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d12a      	bne.n	8007188 <UART_SetConfig+0x278>
 8007132:	4b30      	ldr	r3, [pc, #192]	@ (80071f4 <UART_SetConfig+0x2e4>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007140:	d01a      	beq.n	8007178 <UART_SetConfig+0x268>
 8007142:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007146:	d81b      	bhi.n	8007180 <UART_SetConfig+0x270>
 8007148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800714c:	d00c      	beq.n	8007168 <UART_SetConfig+0x258>
 800714e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007152:	d815      	bhi.n	8007180 <UART_SetConfig+0x270>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <UART_SetConfig+0x250>
 8007158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800715c:	d008      	beq.n	8007170 <UART_SetConfig+0x260>
 800715e:	e00f      	b.n	8007180 <UART_SetConfig+0x270>
 8007160:	2300      	movs	r3, #0
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007166:	e052      	b.n	800720e <UART_SetConfig+0x2fe>
 8007168:	2302      	movs	r3, #2
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716e:	e04e      	b.n	800720e <UART_SetConfig+0x2fe>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007176:	e04a      	b.n	800720e <UART_SetConfig+0x2fe>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717e:	e046      	b.n	800720e <UART_SetConfig+0x2fe>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007186:	e042      	b.n	800720e <UART_SetConfig+0x2fe>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a17      	ldr	r2, [pc, #92]	@ (80071ec <UART_SetConfig+0x2dc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d13a      	bne.n	8007208 <UART_SetConfig+0x2f8>
 8007192:	4b18      	ldr	r3, [pc, #96]	@ (80071f4 <UART_SetConfig+0x2e4>)
 8007194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007198:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800719c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071a0:	d01a      	beq.n	80071d8 <UART_SetConfig+0x2c8>
 80071a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071a6:	d81b      	bhi.n	80071e0 <UART_SetConfig+0x2d0>
 80071a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ac:	d00c      	beq.n	80071c8 <UART_SetConfig+0x2b8>
 80071ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071b2:	d815      	bhi.n	80071e0 <UART_SetConfig+0x2d0>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <UART_SetConfig+0x2b0>
 80071b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071bc:	d008      	beq.n	80071d0 <UART_SetConfig+0x2c0>
 80071be:	e00f      	b.n	80071e0 <UART_SetConfig+0x2d0>
 80071c0:	2300      	movs	r3, #0
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	e022      	b.n	800720e <UART_SetConfig+0x2fe>
 80071c8:	2302      	movs	r3, #2
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	e01e      	b.n	800720e <UART_SetConfig+0x2fe>
 80071d0:	2304      	movs	r3, #4
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	e01a      	b.n	800720e <UART_SetConfig+0x2fe>
 80071d8:	2308      	movs	r3, #8
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071de:	e016      	b.n	800720e <UART_SetConfig+0x2fe>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e6:	e012      	b.n	800720e <UART_SetConfig+0x2fe>
 80071e8:	cfff69f3 	.word	0xcfff69f3
 80071ec:	40008000 	.word	0x40008000
 80071f0:	40013800 	.word	0x40013800
 80071f4:	40021000 	.word	0x40021000
 80071f8:	40004400 	.word	0x40004400
 80071fc:	40004800 	.word	0x40004800
 8007200:	40004c00 	.word	0x40004c00
 8007204:	40005000 	.word	0x40005000
 8007208:	2310      	movs	r3, #16
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4aae      	ldr	r2, [pc, #696]	@ (80074cc <UART_SetConfig+0x5bc>)
 8007214:	4293      	cmp	r3, r2
 8007216:	f040 8097 	bne.w	8007348 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800721a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800721e:	2b08      	cmp	r3, #8
 8007220:	d823      	bhi.n	800726a <UART_SetConfig+0x35a>
 8007222:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <UART_SetConfig+0x318>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	0800724d 	.word	0x0800724d
 800722c:	0800726b 	.word	0x0800726b
 8007230:	08007255 	.word	0x08007255
 8007234:	0800726b 	.word	0x0800726b
 8007238:	0800725b 	.word	0x0800725b
 800723c:	0800726b 	.word	0x0800726b
 8007240:	0800726b 	.word	0x0800726b
 8007244:	0800726b 	.word	0x0800726b
 8007248:	08007263 	.word	0x08007263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800724c:	f7fd fbdc 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 8007250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007252:	e010      	b.n	8007276 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007254:	4b9e      	ldr	r3, [pc, #632]	@ (80074d0 <UART_SetConfig+0x5c0>)
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007258:	e00d      	b.n	8007276 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725a:	f7fd fb3d 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 800725e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007260:	e009      	b.n	8007276 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007268:	e005      	b.n	8007276 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8130 	beq.w	80074de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007282:	4a94      	ldr	r2, [pc, #592]	@ (80074d4 <UART_SetConfig+0x5c4>)
 8007284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007288:	461a      	mov	r2, r3
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007290:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4413      	add	r3, r2
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d305      	bcc.n	80072ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d903      	bls.n	80072b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072b4:	e113      	b.n	80074de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	2200      	movs	r2, #0
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	60fa      	str	r2, [r7, #12]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	4a84      	ldr	r2, [pc, #528]	@ (80074d4 <UART_SetConfig+0x5c4>)
 80072c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2200      	movs	r2, #0
 80072cc:	603b      	str	r3, [r7, #0]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072d8:	f7f9 fc8e 	bl	8000bf8 <__aeabi_uldivmod>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	020b      	lsls	r3, r1, #8
 80072ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072f2:	0202      	lsls	r2, r0, #8
 80072f4:	6979      	ldr	r1, [r7, #20]
 80072f6:	6849      	ldr	r1, [r1, #4]
 80072f8:	0849      	lsrs	r1, r1, #1
 80072fa:	2000      	movs	r0, #0
 80072fc:	460c      	mov	r4, r1
 80072fe:	4605      	mov	r5, r0
 8007300:	eb12 0804 	adds.w	r8, r2, r4
 8007304:	eb43 0905 	adc.w	r9, r3, r5
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	469a      	mov	sl, r3
 8007310:	4693      	mov	fp, r2
 8007312:	4652      	mov	r2, sl
 8007314:	465b      	mov	r3, fp
 8007316:	4640      	mov	r0, r8
 8007318:	4649      	mov	r1, r9
 800731a:	f7f9 fc6d 	bl	8000bf8 <__aeabi_uldivmod>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4613      	mov	r3, r2
 8007324:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800732c:	d308      	bcc.n	8007340 <UART_SetConfig+0x430>
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007334:	d204      	bcs.n	8007340 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a3a      	ldr	r2, [r7, #32]
 800733c:	60da      	str	r2, [r3, #12]
 800733e:	e0ce      	b.n	80074de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007346:	e0ca      	b.n	80074de <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007350:	d166      	bne.n	8007420 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007352:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007356:	2b08      	cmp	r3, #8
 8007358:	d827      	bhi.n	80073aa <UART_SetConfig+0x49a>
 800735a:	a201      	add	r2, pc, #4	@ (adr r2, 8007360 <UART_SetConfig+0x450>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	08007385 	.word	0x08007385
 8007364:	0800738d 	.word	0x0800738d
 8007368:	08007395 	.word	0x08007395
 800736c:	080073ab 	.word	0x080073ab
 8007370:	0800739b 	.word	0x0800739b
 8007374:	080073ab 	.word	0x080073ab
 8007378:	080073ab 	.word	0x080073ab
 800737c:	080073ab 	.word	0x080073ab
 8007380:	080073a3 	.word	0x080073a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007384:	f7fd fb40 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 8007388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800738a:	e014      	b.n	80073b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800738c:	f7fd fb52 	bl	8004a34 <HAL_RCC_GetPCLK2Freq>
 8007390:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007392:	e010      	b.n	80073b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007394:	4b4e      	ldr	r3, [pc, #312]	@ (80074d0 <UART_SetConfig+0x5c0>)
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007398:	e00d      	b.n	80073b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739a:	f7fd fa9d 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 800739e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073a0:	e009      	b.n	80073b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073a8:	e005      	b.n	80073b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8090 	beq.w	80074de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c2:	4a44      	ldr	r2, [pc, #272]	@ (80074d4 <UART_SetConfig+0x5c4>)
 80073c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d0:	005a      	lsls	r2, r3, #1
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	441a      	add	r2, r3
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	2b0f      	cmp	r3, #15
 80073e8:	d916      	bls.n	8007418 <UART_SetConfig+0x508>
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f0:	d212      	bcs.n	8007418 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f023 030f 	bic.w	r3, r3, #15
 80073fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	b29b      	uxth	r3, r3
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	b29a      	uxth	r2, r3
 8007408:	8bfb      	ldrh	r3, [r7, #30]
 800740a:	4313      	orrs	r3, r2
 800740c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	8bfa      	ldrh	r2, [r7, #30]
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	e062      	b.n	80074de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800741e:	e05e      	b.n	80074de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007420:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007424:	2b08      	cmp	r3, #8
 8007426:	d828      	bhi.n	800747a <UART_SetConfig+0x56a>
 8007428:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <UART_SetConfig+0x520>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007455 	.word	0x08007455
 8007434:	0800745d 	.word	0x0800745d
 8007438:	08007465 	.word	0x08007465
 800743c:	0800747b 	.word	0x0800747b
 8007440:	0800746b 	.word	0x0800746b
 8007444:	0800747b 	.word	0x0800747b
 8007448:	0800747b 	.word	0x0800747b
 800744c:	0800747b 	.word	0x0800747b
 8007450:	08007473 	.word	0x08007473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007454:	f7fd fad8 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 8007458:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800745a:	e014      	b.n	8007486 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800745c:	f7fd faea 	bl	8004a34 <HAL_RCC_GetPCLK2Freq>
 8007460:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007462:	e010      	b.n	8007486 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007464:	4b1a      	ldr	r3, [pc, #104]	@ (80074d0 <UART_SetConfig+0x5c0>)
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007468:	e00d      	b.n	8007486 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800746a:	f7fd fa35 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 800746e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007470:	e009      	b.n	8007486 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007478:	e005      	b.n	8007486 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007484:	bf00      	nop
    }

    if (pclk != 0U)
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d028      	beq.n	80074de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	4a10      	ldr	r2, [pc, #64]	@ (80074d4 <UART_SetConfig+0x5c4>)
 8007492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007496:	461a      	mov	r2, r3
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	fbb3 f2f2 	udiv	r2, r3, r2
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	441a      	add	r2, r3
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	2b0f      	cmp	r3, #15
 80074b4:	d910      	bls.n	80074d8 <UART_SetConfig+0x5c8>
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074bc:	d20c      	bcs.n	80074d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60da      	str	r2, [r3, #12]
 80074c8:	e009      	b.n	80074de <UART_SetConfig+0x5ce>
 80074ca:	bf00      	nop
 80074cc:	40008000 	.word	0x40008000
 80074d0:	00f42400 	.word	0x00f42400
 80074d4:	0800baf8 	.word	0x0800baf8
      }
      else
      {
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2200      	movs	r2, #0
 80074f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2200      	movs	r2, #0
 80074f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3730      	adds	r7, #48	@ 0x30
 8007502:	46bd      	mov	sp, r7
 8007504:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757a:	f003 0304 	and.w	r3, r3, #4
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01a      	beq.n	800761e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007606:	d10a      	bne.n	800761e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b098      	sub	sp, #96	@ 0x60
 8007650:	af02      	add	r7, sp, #8
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800765c:	f7fb f99a 	bl	8002994 <HAL_GetTick>
 8007660:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0308 	and.w	r3, r3, #8
 800766c:	2b08      	cmp	r3, #8
 800766e:	d12f      	bne.n	80076d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007670:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007678:	2200      	movs	r2, #0
 800767a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f88e 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d022      	beq.n	80076d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800769e:	653b      	str	r3, [r7, #80]	@ 0x50
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80076aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e6      	bne.n	800768a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e063      	b.n	8007798 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d149      	bne.n	8007772 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e6:	2200      	movs	r2, #0
 80076e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f857 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d03c      	beq.n	8007772 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	623b      	str	r3, [r7, #32]
   return(result);
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800770c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007716:	633b      	str	r3, [r7, #48]	@ 0x30
 8007718:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800771c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e6      	bne.n	80076f8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	60fb      	str	r3, [r7, #12]
   return(result);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f023 0301 	bic.w	r3, r3, #1
 8007740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800774a:	61fa      	str	r2, [r7, #28]
 800774c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	69b9      	ldr	r1, [r7, #24]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	617b      	str	r3, [r7, #20]
   return(result);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e5      	bne.n	800772a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e012      	b.n	8007798 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2220      	movs	r2, #32
 800777e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3758      	adds	r7, #88	@ 0x58
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b0:	e049      	b.n	8007846 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d045      	beq.n	8007846 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ba:	f7fb f8eb 	bl	8002994 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d302      	bcc.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e048      	b.n	8007866 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d031      	beq.n	8007846 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d110      	bne.n	8007812 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2208      	movs	r2, #8
 80077f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f95b 	bl	8007ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2208      	movs	r2, #8
 8007802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e029      	b.n	8007866 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007820:	d111      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800782a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f941 	bl	8007ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e00f      	b.n	8007866 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4013      	ands	r3, r2
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	429a      	cmp	r2, r3
 8007854:	bf0c      	ite	eq
 8007856:	2301      	moveq	r3, #1
 8007858:	2300      	movne	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	429a      	cmp	r2, r3
 8007862:	d0a6      	beq.n	80077b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007870:	b480      	push	{r7}
 8007872:	b0a3      	sub	sp, #140	@ 0x8c
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	88fa      	ldrh	r2, [r7, #6]
 8007890:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078a2:	d10e      	bne.n	80078c2 <UART_Start_Receive_IT+0x52>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d105      	bne.n	80078b8 <UART_Start_Receive_IT+0x48>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80078b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078b6:	e02d      	b.n	8007914 <UART_Start_Receive_IT+0xa4>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	22ff      	movs	r2, #255	@ 0xff
 80078bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078c0:	e028      	b.n	8007914 <UART_Start_Receive_IT+0xa4>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10d      	bne.n	80078e6 <UART_Start_Receive_IT+0x76>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <UART_Start_Receive_IT+0x6c>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	22ff      	movs	r2, #255	@ 0xff
 80078d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078da:	e01b      	b.n	8007914 <UART_Start_Receive_IT+0xa4>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	227f      	movs	r2, #127	@ 0x7f
 80078e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078e4:	e016      	b.n	8007914 <UART_Start_Receive_IT+0xa4>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ee:	d10d      	bne.n	800790c <UART_Start_Receive_IT+0x9c>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <UART_Start_Receive_IT+0x92>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	227f      	movs	r2, #127	@ 0x7f
 80078fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007900:	e008      	b.n	8007914 <UART_Start_Receive_IT+0xa4>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	223f      	movs	r2, #63	@ 0x3f
 8007906:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800790a:	e003      	b.n	8007914 <UART_Start_Receive_IT+0xa4>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2222      	movs	r2, #34	@ 0x22
 8007920:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3308      	adds	r3, #8
 800792a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007934:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007948:	673a      	str	r2, [r7, #112]	@ 0x70
 800794a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800794e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e3      	bne.n	8007924 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007964:	d14f      	bne.n	8007a06 <UART_Start_Receive_IT+0x196>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	429a      	cmp	r2, r3
 8007970:	d349      	bcc.n	8007a06 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800797a:	d107      	bne.n	800798c <UART_Start_Receive_IT+0x11c>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a47      	ldr	r2, [pc, #284]	@ (8007aa4 <UART_Start_Receive_IT+0x234>)
 8007988:	675a      	str	r2, [r3, #116]	@ 0x74
 800798a:	e002      	b.n	8007992 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4a46      	ldr	r2, [pc, #280]	@ (8007aa8 <UART_Start_Receive_IT+0x238>)
 8007990:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01a      	beq.n	80079d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80079bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80079c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80079ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e4      	bne.n	800799a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3308      	adds	r3, #8
 80079d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80079f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80079f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80079fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e5      	bne.n	80079d0 <UART_Start_Receive_IT+0x160>
 8007a04:	e046      	b.n	8007a94 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a0e:	d107      	bne.n	8007a20 <UART_Start_Receive_IT+0x1b0>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d103      	bne.n	8007a20 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4a24      	ldr	r2, [pc, #144]	@ (8007aac <UART_Start_Receive_IT+0x23c>)
 8007a1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8007a1e:	e002      	b.n	8007a26 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4a23      	ldr	r2, [pc, #140]	@ (8007ab0 <UART_Start_Receive_IT+0x240>)
 8007a24:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d019      	beq.n	8007a62 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007a42:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_Start_Receive_IT+0x1be>
 8007a60:	e018      	b.n	8007a94 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f043 0320 	orr.w	r3, r3, #32
 8007a76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a80:	623b      	str	r3, [r7, #32]
 8007a82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	69f9      	ldr	r1, [r7, #28]
 8007a86:	6a3a      	ldr	r2, [r7, #32]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e6      	bne.n	8007a62 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	378c      	adds	r7, #140	@ 0x8c
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	080082e1 	.word	0x080082e1
 8007aa8:	08007f7d 	.word	0x08007f7d
 8007aac:	08007dc1 	.word	0x08007dc1
 8007ab0:	08007c05 	.word	0x08007c05

08007ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b095      	sub	sp, #84	@ 0x54
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8007adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e6      	bne.n	8007abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3308      	adds	r3, #8
 8007af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b04:	f023 0301 	bic.w	r3, r3, #1
 8007b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e3      	bne.n	8007aee <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d118      	bne.n	8007b60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f023 0310 	bic.w	r3, r3, #16
 8007b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6979      	ldr	r1, [r7, #20]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	613b      	str	r3, [r7, #16]
   return(result);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e6      	bne.n	8007b2e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b74:	bf00      	nop
 8007b76:	3754      	adds	r7, #84	@ 0x54
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff f9a0 	bl	8006ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	61bb      	str	r3, [r7, #24]
 8007bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6979      	ldr	r1, [r7, #20]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	613b      	str	r3, [r7, #16]
   return(result);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e6      	bne.n	8007bb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff f96b 	bl	8006ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfa:	bf00      	nop
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b09c      	sub	sp, #112	@ 0x70
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c1c:	2b22      	cmp	r3, #34	@ 0x22
 8007c1e:	f040 80be 	bne.w	8007d9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c30:	b2d9      	uxtb	r1, r3
 8007c32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c3c:	400a      	ands	r2, r1
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	3b01      	subs	r3, #1
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f040 80a3 	bne.w	8007db2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e6      	bne.n	8007c6c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3308      	adds	r3, #8
 8007cbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007cbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8007cc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e5      	bne.n	8007c9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a34      	ldr	r2, [pc, #208]	@ (8007dbc <UART_RxISR_8BIT+0x1b8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d01f      	beq.n	8007d30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d018      	beq.n	8007d30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e6      	bne.n	8007cfe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d12e      	bne.n	8007d96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0310 	bic.w	r3, r3, #16
 8007d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d5c:	61fb      	str	r3, [r7, #28]
 8007d5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	69b9      	ldr	r1, [r7, #24]
 8007d62:	69fa      	ldr	r2, [r7, #28]
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	617b      	str	r3, [r7, #20]
   return(result);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	f003 0310 	and.w	r3, r3, #16
 8007d7a:	2b10      	cmp	r3, #16
 8007d7c:	d103      	bne.n	8007d86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2210      	movs	r2, #16
 8007d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff f8b2 	bl	8006ef8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d94:	e00d      	b.n	8007db2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7f9 fcca 	bl	8001730 <HAL_UART_RxCpltCallback>
}
 8007d9c:	e009      	b.n	8007db2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	8b1b      	ldrh	r3, [r3, #24]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0208 	orr.w	r2, r2, #8
 8007dae:	b292      	uxth	r2, r2
 8007db0:	831a      	strh	r2, [r3, #24]
}
 8007db2:	bf00      	nop
 8007db4:	3770      	adds	r7, #112	@ 0x70
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	40008000 	.word	0x40008000

08007dc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b09c      	sub	sp, #112	@ 0x70
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007dce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dd8:	2b22      	cmp	r3, #34	@ 0x22
 8007dda:	f040 80be 	bne.w	8007f5a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007de4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007dee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007df2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007df6:	4013      	ands	r3, r2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007dfc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e02:	1c9a      	adds	r2, r3, #2
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f040 80a3 	bne.w	8007f6e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e46:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e48:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e6      	bne.n	8007e28 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3308      	adds	r3, #8
 8007e78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e5      	bne.n	8007e5a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a34      	ldr	r2, [pc, #208]	@ (8007f78 <UART_RxISR_16BIT+0x1b8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d01f      	beq.n	8007eec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d018      	beq.n	8007eec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eda:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e6      	bne.n	8007eba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d12e      	bne.n	8007f52 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f023 0310 	bic.w	r3, r3, #16
 8007f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6979      	ldr	r1, [r7, #20]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	613b      	str	r3, [r7, #16]
   return(result);
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e6      	bne.n	8007efa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	f003 0310 	and.w	r3, r3, #16
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d103      	bne.n	8007f42 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2210      	movs	r2, #16
 8007f40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fe ffd4 	bl	8006ef8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f50:	e00d      	b.n	8007f6e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7f9 fbec 	bl	8001730 <HAL_UART_RxCpltCallback>
}
 8007f58:	e009      	b.n	8007f6e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	8b1b      	ldrh	r3, [r3, #24]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0208 	orr.w	r2, r2, #8
 8007f6a:	b292      	uxth	r2, r2
 8007f6c:	831a      	strh	r2, [r3, #24]
}
 8007f6e:	bf00      	nop
 8007f70:	3770      	adds	r7, #112	@ 0x70
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40008000 	.word	0x40008000

08007f7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b0ac      	sub	sp, #176	@ 0xb0
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fb2:	2b22      	cmp	r3, #34	@ 0x22
 8007fb4:	f040 8182 	bne.w	80082bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007fbe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fc2:	e125      	b.n	8008210 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007fd2:	b2d9      	uxtb	r1, r3
 8007fd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fde:	400a      	ands	r2, r1
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800800a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	2b00      	cmp	r3, #0
 8008014:	d053      	beq.n	80080be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d011      	beq.n	8008046 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2201      	movs	r2, #1
 8008034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800803c:	f043 0201 	orr.w	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d011      	beq.n	8008076 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00b      	beq.n	8008076 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2202      	movs	r2, #2
 8008064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806c:	f043 0204 	orr.w	r2, r3, #4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b00      	cmp	r3, #0
 8008080:	d011      	beq.n	80080a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2204      	movs	r2, #4
 8008094:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809c:	f043 0202 	orr.w	r2, r3, #2
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d006      	beq.n	80080be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fe ff17 	bl	8006ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f040 80a2 	bne.w	8008210 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80080da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080f0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80080f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80080fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e4      	bne.n	80080cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800812a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800812c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008130:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008138:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e1      	bne.n	8008102 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a60      	ldr	r2, [pc, #384]	@ (80082d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d021      	beq.n	80081a0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01a      	beq.n	80081a0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800817a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800817e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800818c:	657b      	str	r3, [r7, #84]	@ 0x54
 800818e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008192:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800819a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e4      	bne.n	800816a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d130      	bne.n	800820a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081be:	f023 0310 	bic.w	r3, r3, #16
 80081c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e4      	bne.n	80081ae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b10      	cmp	r3, #16
 80081f0:	d103      	bne.n	80081fa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2210      	movs	r2, #16
 80081f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7fe fe78 	bl	8006ef8 <HAL_UARTEx_RxEventCallback>
 8008208:	e002      	b.n	8008210 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7f9 fa90 	bl	8001730 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008210:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008214:	2b00      	cmp	r3, #0
 8008216:	d006      	beq.n	8008226 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	f47f aecf 	bne.w	8007fc4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800822c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008230:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008234:	2b00      	cmp	r3, #0
 8008236:	d04b      	beq.n	80082d0 <UART_RxISR_8BIT_FIFOEN+0x354>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800823e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008242:	429a      	cmp	r2, r3
 8008244:	d244      	bcs.n	80082d0 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	61fb      	str	r3, [r7, #28]
   return(result);
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800825c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3308      	adds	r3, #8
 8008266:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800826a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800826c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e3      	bne.n	8008246 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a16      	ldr	r2, [pc, #88]	@ (80082dc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008282:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	60bb      	str	r3, [r7, #8]
   return(result);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f043 0320 	orr.w	r3, r3, #32
 8008298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80082a6:	61bb      	str	r3, [r7, #24]
 80082a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6979      	ldr	r1, [r7, #20]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	613b      	str	r3, [r7, #16]
   return(result);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e4      	bne.n	8008284 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082ba:	e009      	b.n	80082d0 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	8b1b      	ldrh	r3, [r3, #24]
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0208 	orr.w	r2, r2, #8
 80082cc:	b292      	uxth	r2, r2
 80082ce:	831a      	strh	r2, [r3, #24]
}
 80082d0:	bf00      	nop
 80082d2:	37b0      	adds	r7, #176	@ 0xb0
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	40008000 	.word	0x40008000
 80082dc:	08007c05 	.word	0x08007c05

080082e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b0ae      	sub	sp, #184	@ 0xb8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008316:	2b22      	cmp	r3, #34	@ 0x22
 8008318:	f040 8186 	bne.w	8008628 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008322:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008326:	e129      	b.n	800857c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800832e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800833a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800833e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008342:	4013      	ands	r3, r2
 8008344:	b29a      	uxth	r2, r3
 8008346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800834a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008350:	1c9a      	adds	r2, r3, #2
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2b00      	cmp	r3, #0
 800837c:	d053      	beq.n	8008426 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800837e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d011      	beq.n	80083ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800838a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800838e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00b      	beq.n	80083ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2201      	movs	r2, #1
 800839c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a4:	f043 0201 	orr.w	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d011      	beq.n	80083de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80083ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2202      	movs	r2, #2
 80083cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d4:	f043 0204 	orr.w	r2, r3, #4
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d011      	beq.n	800840e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80083ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00b      	beq.n	800840e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2204      	movs	r2, #4
 80083fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008404:	f043 0202 	orr.w	r2, r3, #2
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008414:	2b00      	cmp	r3, #0
 8008416:	d006      	beq.n	8008426 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fe fd63 	bl	8006ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800842c:	b29b      	uxth	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 80a4 	bne.w	800857c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008448:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008456:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800845a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800845e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e2      	bne.n	8008434 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800847e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3308      	adds	r3, #8
 8008492:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008496:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008498:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800849c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e1      	bne.n	800846e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a60      	ldr	r2, [pc, #384]	@ (8008644 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d021      	beq.n	800850c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01a      	beq.n	800850c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e4      	bne.n	80084d6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008510:	2b01      	cmp	r3, #1
 8008512:	d130      	bne.n	8008576 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852a:	f023 0310 	bic.w	r3, r3, #16
 800852e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800853c:	647b      	str	r3, [r7, #68]	@ 0x44
 800853e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800854a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e4      	bne.n	800851a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	f003 0310 	and.w	r3, r3, #16
 800855a:	2b10      	cmp	r3, #16
 800855c:	d103      	bne.n	8008566 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2210      	movs	r2, #16
 8008564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fe fcc2 	bl	8006ef8 <HAL_UARTEx_RxEventCallback>
 8008574:	e002      	b.n	800857c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f9 f8da 	bl	8001730 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800857c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008580:	2b00      	cmp	r3, #0
 8008582:	d006      	beq.n	8008592 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	f47f aecb 	bne.w	8008328 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008598:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800859c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d04b      	beq.n	800863c <UART_RxISR_16BIT_FIFOEN+0x35c>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d244      	bcs.n	800863c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3308      	adds	r3, #8
 80085b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	623b      	str	r3, [r7, #32]
   return(result);
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3308      	adds	r3, #8
 80085d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80085d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80085d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e3      	bne.n	80085b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a16      	ldr	r2, [pc, #88]	@ (8008648 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80085ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f043 0320 	orr.w	r3, r3, #32
 8008604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008612:	61fb      	str	r3, [r7, #28]
 8008614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	69b9      	ldr	r1, [r7, #24]
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	617b      	str	r3, [r7, #20]
   return(result);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e4      	bne.n	80085f0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008626:	e009      	b.n	800863c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	8b1b      	ldrh	r3, [r3, #24]
 800862e:	b29a      	uxth	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 0208 	orr.w	r2, r2, #8
 8008638:	b292      	uxth	r2, r2
 800863a:	831a      	strh	r2, [r3, #24]
}
 800863c:	bf00      	nop
 800863e:	37b8      	adds	r7, #184	@ 0xb8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	40008000 	.word	0x40008000
 8008648:	08007dc1 	.word	0x08007dc1

0800864c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <HAL_UARTEx_DisableFifoMode+0x16>
 800869a:	2302      	movs	r3, #2
 800869c:	e027      	b.n	80086ee <HAL_UARTEx_DisableFifoMode+0x66>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2224      	movs	r2, #36	@ 0x24
 80086aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0201 	bic.w	r2, r2, #1
 80086c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80086cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800870e:	2302      	movs	r3, #2
 8008710:	e02d      	b.n	800876e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2224      	movs	r2, #36	@ 0x24
 800871e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0201 	bic.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f850 	bl	80087f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800878a:	2302      	movs	r3, #2
 800878c:	e02d      	b.n	80087ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2224      	movs	r2, #36	@ 0x24
 800879a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f812 	bl	80087f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008800:	2b00      	cmp	r3, #0
 8008802:	d108      	bne.n	8008816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008814:	e031      	b.n	800887a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008816:	2308      	movs	r3, #8
 8008818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800881a:	2308      	movs	r3, #8
 800881c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	0e5b      	lsrs	r3, r3, #25
 8008826:	b2db      	uxtb	r3, r3
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	0f5b      	lsrs	r3, r3, #29
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	7b3a      	ldrb	r2, [r7, #12]
 8008842:	4911      	ldr	r1, [pc, #68]	@ (8008888 <UARTEx_SetNbDataToProcess+0x94>)
 8008844:	5c8a      	ldrb	r2, [r1, r2]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800884a:	7b3a      	ldrb	r2, [r7, #12]
 800884c:	490f      	ldr	r1, [pc, #60]	@ (800888c <UARTEx_SetNbDataToProcess+0x98>)
 800884e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008850:	fb93 f3f2 	sdiv	r3, r3, r2
 8008854:	b29a      	uxth	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	7b7a      	ldrb	r2, [r7, #13]
 8008860:	4909      	ldr	r1, [pc, #36]	@ (8008888 <UARTEx_SetNbDataToProcess+0x94>)
 8008862:	5c8a      	ldrb	r2, [r1, r2]
 8008864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008868:	7b7a      	ldrb	r2, [r7, #13]
 800886a:	4908      	ldr	r1, [pc, #32]	@ (800888c <UARTEx_SetNbDataToProcess+0x98>)
 800886c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800886e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	0800bb10 	.word	0x0800bb10
 800888c:	0800bb18 	.word	0x0800bb18

08008890 <atoi>:
 8008890:	220a      	movs	r2, #10
 8008892:	2100      	movs	r1, #0
 8008894:	f000 b87a 	b.w	800898c <strtol>

08008898 <_strtol_l.constprop.0>:
 8008898:	2b24      	cmp	r3, #36	@ 0x24
 800889a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889e:	4686      	mov	lr, r0
 80088a0:	4690      	mov	r8, r2
 80088a2:	d801      	bhi.n	80088a8 <_strtol_l.constprop.0+0x10>
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d106      	bne.n	80088b6 <_strtol_l.constprop.0+0x1e>
 80088a8:	f000 ff2e 	bl	8009708 <__errno>
 80088ac:	2316      	movs	r3, #22
 80088ae:	6003      	str	r3, [r0, #0]
 80088b0:	2000      	movs	r0, #0
 80088b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b6:	4834      	ldr	r0, [pc, #208]	@ (8008988 <_strtol_l.constprop.0+0xf0>)
 80088b8:	460d      	mov	r5, r1
 80088ba:	462a      	mov	r2, r5
 80088bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088c0:	5d06      	ldrb	r6, [r0, r4]
 80088c2:	f016 0608 	ands.w	r6, r6, #8
 80088c6:	d1f8      	bne.n	80088ba <_strtol_l.constprop.0+0x22>
 80088c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80088ca:	d12d      	bne.n	8008928 <_strtol_l.constprop.0+0x90>
 80088cc:	782c      	ldrb	r4, [r5, #0]
 80088ce:	2601      	movs	r6, #1
 80088d0:	1c95      	adds	r5, r2, #2
 80088d2:	f033 0210 	bics.w	r2, r3, #16
 80088d6:	d109      	bne.n	80088ec <_strtol_l.constprop.0+0x54>
 80088d8:	2c30      	cmp	r4, #48	@ 0x30
 80088da:	d12a      	bne.n	8008932 <_strtol_l.constprop.0+0x9a>
 80088dc:	782a      	ldrb	r2, [r5, #0]
 80088de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088e2:	2a58      	cmp	r2, #88	@ 0x58
 80088e4:	d125      	bne.n	8008932 <_strtol_l.constprop.0+0x9a>
 80088e6:	786c      	ldrb	r4, [r5, #1]
 80088e8:	2310      	movs	r3, #16
 80088ea:	3502      	adds	r5, #2
 80088ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80088f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088f4:	2200      	movs	r2, #0
 80088f6:	fbbc f9f3 	udiv	r9, ip, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8008900:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008904:	2f09      	cmp	r7, #9
 8008906:	d81b      	bhi.n	8008940 <_strtol_l.constprop.0+0xa8>
 8008908:	463c      	mov	r4, r7
 800890a:	42a3      	cmp	r3, r4
 800890c:	dd27      	ble.n	800895e <_strtol_l.constprop.0+0xc6>
 800890e:	1c57      	adds	r7, r2, #1
 8008910:	d007      	beq.n	8008922 <_strtol_l.constprop.0+0x8a>
 8008912:	4581      	cmp	r9, r0
 8008914:	d320      	bcc.n	8008958 <_strtol_l.constprop.0+0xc0>
 8008916:	d101      	bne.n	800891c <_strtol_l.constprop.0+0x84>
 8008918:	45a2      	cmp	sl, r4
 800891a:	db1d      	blt.n	8008958 <_strtol_l.constprop.0+0xc0>
 800891c:	fb00 4003 	mla	r0, r0, r3, r4
 8008920:	2201      	movs	r2, #1
 8008922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008926:	e7eb      	b.n	8008900 <_strtol_l.constprop.0+0x68>
 8008928:	2c2b      	cmp	r4, #43	@ 0x2b
 800892a:	bf04      	itt	eq
 800892c:	782c      	ldrbeq	r4, [r5, #0]
 800892e:	1c95      	addeq	r5, r2, #2
 8008930:	e7cf      	b.n	80088d2 <_strtol_l.constprop.0+0x3a>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1da      	bne.n	80088ec <_strtol_l.constprop.0+0x54>
 8008936:	2c30      	cmp	r4, #48	@ 0x30
 8008938:	bf0c      	ite	eq
 800893a:	2308      	moveq	r3, #8
 800893c:	230a      	movne	r3, #10
 800893e:	e7d5      	b.n	80088ec <_strtol_l.constprop.0+0x54>
 8008940:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008944:	2f19      	cmp	r7, #25
 8008946:	d801      	bhi.n	800894c <_strtol_l.constprop.0+0xb4>
 8008948:	3c37      	subs	r4, #55	@ 0x37
 800894a:	e7de      	b.n	800890a <_strtol_l.constprop.0+0x72>
 800894c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008950:	2f19      	cmp	r7, #25
 8008952:	d804      	bhi.n	800895e <_strtol_l.constprop.0+0xc6>
 8008954:	3c57      	subs	r4, #87	@ 0x57
 8008956:	e7d8      	b.n	800890a <_strtol_l.constprop.0+0x72>
 8008958:	f04f 32ff 	mov.w	r2, #4294967295
 800895c:	e7e1      	b.n	8008922 <_strtol_l.constprop.0+0x8a>
 800895e:	1c53      	adds	r3, r2, #1
 8008960:	d108      	bne.n	8008974 <_strtol_l.constprop.0+0xdc>
 8008962:	2322      	movs	r3, #34	@ 0x22
 8008964:	f8ce 3000 	str.w	r3, [lr]
 8008968:	4660      	mov	r0, ip
 800896a:	f1b8 0f00 	cmp.w	r8, #0
 800896e:	d0a0      	beq.n	80088b2 <_strtol_l.constprop.0+0x1a>
 8008970:	1e69      	subs	r1, r5, #1
 8008972:	e006      	b.n	8008982 <_strtol_l.constprop.0+0xea>
 8008974:	b106      	cbz	r6, 8008978 <_strtol_l.constprop.0+0xe0>
 8008976:	4240      	negs	r0, r0
 8008978:	f1b8 0f00 	cmp.w	r8, #0
 800897c:	d099      	beq.n	80088b2 <_strtol_l.constprop.0+0x1a>
 800897e:	2a00      	cmp	r2, #0
 8008980:	d1f6      	bne.n	8008970 <_strtol_l.constprop.0+0xd8>
 8008982:	f8c8 1000 	str.w	r1, [r8]
 8008986:	e794      	b.n	80088b2 <_strtol_l.constprop.0+0x1a>
 8008988:	0800bb21 	.word	0x0800bb21

0800898c <strtol>:
 800898c:	4613      	mov	r3, r2
 800898e:	460a      	mov	r2, r1
 8008990:	4601      	mov	r1, r0
 8008992:	4802      	ldr	r0, [pc, #8]	@ (800899c <strtol+0x10>)
 8008994:	6800      	ldr	r0, [r0, #0]
 8008996:	f7ff bf7f 	b.w	8008898 <_strtol_l.constprop.0>
 800899a:	bf00      	nop
 800899c:	20000084 	.word	0x20000084

080089a0 <__cvt>:
 80089a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	ec57 6b10 	vmov	r6, r7, d0
 80089a8:	2f00      	cmp	r7, #0
 80089aa:	460c      	mov	r4, r1
 80089ac:	4619      	mov	r1, r3
 80089ae:	463b      	mov	r3, r7
 80089b0:	bfbb      	ittet	lt
 80089b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80089b6:	461f      	movlt	r7, r3
 80089b8:	2300      	movge	r3, #0
 80089ba:	232d      	movlt	r3, #45	@ 0x2d
 80089bc:	700b      	strb	r3, [r1, #0]
 80089be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80089c4:	4691      	mov	r9, r2
 80089c6:	f023 0820 	bic.w	r8, r3, #32
 80089ca:	bfbc      	itt	lt
 80089cc:	4632      	movlt	r2, r6
 80089ce:	4616      	movlt	r6, r2
 80089d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089d4:	d005      	beq.n	80089e2 <__cvt+0x42>
 80089d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80089da:	d100      	bne.n	80089de <__cvt+0x3e>
 80089dc:	3401      	adds	r4, #1
 80089de:	2102      	movs	r1, #2
 80089e0:	e000      	b.n	80089e4 <__cvt+0x44>
 80089e2:	2103      	movs	r1, #3
 80089e4:	ab03      	add	r3, sp, #12
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	ab02      	add	r3, sp, #8
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	ec47 6b10 	vmov	d0, r6, r7
 80089f0:	4653      	mov	r3, sl
 80089f2:	4622      	mov	r2, r4
 80089f4:	f000 ff48 	bl	8009888 <_dtoa_r>
 80089f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80089fc:	4605      	mov	r5, r0
 80089fe:	d119      	bne.n	8008a34 <__cvt+0x94>
 8008a00:	f019 0f01 	tst.w	r9, #1
 8008a04:	d00e      	beq.n	8008a24 <__cvt+0x84>
 8008a06:	eb00 0904 	add.w	r9, r0, r4
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4630      	mov	r0, r6
 8008a10:	4639      	mov	r1, r7
 8008a12:	f7f8 f881 	bl	8000b18 <__aeabi_dcmpeq>
 8008a16:	b108      	cbz	r0, 8008a1c <__cvt+0x7c>
 8008a18:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a1c:	2230      	movs	r2, #48	@ 0x30
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	454b      	cmp	r3, r9
 8008a22:	d31e      	bcc.n	8008a62 <__cvt+0xc2>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a28:	1b5b      	subs	r3, r3, r5
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	b004      	add	sp, #16
 8008a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a38:	eb00 0904 	add.w	r9, r0, r4
 8008a3c:	d1e5      	bne.n	8008a0a <__cvt+0x6a>
 8008a3e:	7803      	ldrb	r3, [r0, #0]
 8008a40:	2b30      	cmp	r3, #48	@ 0x30
 8008a42:	d10a      	bne.n	8008a5a <__cvt+0xba>
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	4630      	mov	r0, r6
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	f7f8 f864 	bl	8000b18 <__aeabi_dcmpeq>
 8008a50:	b918      	cbnz	r0, 8008a5a <__cvt+0xba>
 8008a52:	f1c4 0401 	rsb	r4, r4, #1
 8008a56:	f8ca 4000 	str.w	r4, [sl]
 8008a5a:	f8da 3000 	ldr.w	r3, [sl]
 8008a5e:	4499      	add	r9, r3
 8008a60:	e7d3      	b.n	8008a0a <__cvt+0x6a>
 8008a62:	1c59      	adds	r1, r3, #1
 8008a64:	9103      	str	r1, [sp, #12]
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	e7d9      	b.n	8008a1e <__cvt+0x7e>

08008a6a <__exponent>:
 8008a6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	bfba      	itte	lt
 8008a70:	4249      	neglt	r1, r1
 8008a72:	232d      	movlt	r3, #45	@ 0x2d
 8008a74:	232b      	movge	r3, #43	@ 0x2b
 8008a76:	2909      	cmp	r1, #9
 8008a78:	7002      	strb	r2, [r0, #0]
 8008a7a:	7043      	strb	r3, [r0, #1]
 8008a7c:	dd29      	ble.n	8008ad2 <__exponent+0x68>
 8008a7e:	f10d 0307 	add.w	r3, sp, #7
 8008a82:	461d      	mov	r5, r3
 8008a84:	270a      	movs	r7, #10
 8008a86:	461a      	mov	r2, r3
 8008a88:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a8c:	fb07 1416 	mls	r4, r7, r6, r1
 8008a90:	3430      	adds	r4, #48	@ 0x30
 8008a92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a96:	460c      	mov	r4, r1
 8008a98:	2c63      	cmp	r4, #99	@ 0x63
 8008a9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	dcf1      	bgt.n	8008a86 <__exponent+0x1c>
 8008aa2:	3130      	adds	r1, #48	@ 0x30
 8008aa4:	1e94      	subs	r4, r2, #2
 8008aa6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008aaa:	1c41      	adds	r1, r0, #1
 8008aac:	4623      	mov	r3, r4
 8008aae:	42ab      	cmp	r3, r5
 8008ab0:	d30a      	bcc.n	8008ac8 <__exponent+0x5e>
 8008ab2:	f10d 0309 	add.w	r3, sp, #9
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	42ac      	cmp	r4, r5
 8008aba:	bf88      	it	hi
 8008abc:	2300      	movhi	r3, #0
 8008abe:	3302      	adds	r3, #2
 8008ac0:	4403      	add	r3, r0
 8008ac2:	1a18      	subs	r0, r3, r0
 8008ac4:	b003      	add	sp, #12
 8008ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008acc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ad0:	e7ed      	b.n	8008aae <__exponent+0x44>
 8008ad2:	2330      	movs	r3, #48	@ 0x30
 8008ad4:	3130      	adds	r1, #48	@ 0x30
 8008ad6:	7083      	strb	r3, [r0, #2]
 8008ad8:	70c1      	strb	r1, [r0, #3]
 8008ada:	1d03      	adds	r3, r0, #4
 8008adc:	e7f1      	b.n	8008ac2 <__exponent+0x58>
	...

08008ae0 <_printf_float>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	b08d      	sub	sp, #52	@ 0x34
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008aec:	4616      	mov	r6, r2
 8008aee:	461f      	mov	r7, r3
 8008af0:	4605      	mov	r5, r0
 8008af2:	f000 fdbf 	bl	8009674 <_localeconv_r>
 8008af6:	6803      	ldr	r3, [r0, #0]
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f7 fbe0 	bl	80002c0 <strlen>
 8008b00:	2300      	movs	r3, #0
 8008b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b04:	f8d8 3000 	ldr.w	r3, [r8]
 8008b08:	9005      	str	r0, [sp, #20]
 8008b0a:	3307      	adds	r3, #7
 8008b0c:	f023 0307 	bic.w	r3, r3, #7
 8008b10:	f103 0208 	add.w	r2, r3, #8
 8008b14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b18:	f8d4 b000 	ldr.w	fp, [r4]
 8008b1c:	f8c8 2000 	str.w	r2, [r8]
 8008b20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b28:	9307      	str	r3, [sp, #28]
 8008b2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b36:	4b9c      	ldr	r3, [pc, #624]	@ (8008da8 <_printf_float+0x2c8>)
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3c:	f7f8 f81e 	bl	8000b7c <__aeabi_dcmpun>
 8008b40:	bb70      	cbnz	r0, 8008ba0 <_printf_float+0xc0>
 8008b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b46:	4b98      	ldr	r3, [pc, #608]	@ (8008da8 <_printf_float+0x2c8>)
 8008b48:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4c:	f7f7 fff8 	bl	8000b40 <__aeabi_dcmple>
 8008b50:	bb30      	cbnz	r0, 8008ba0 <_printf_float+0xc0>
 8008b52:	2200      	movs	r2, #0
 8008b54:	2300      	movs	r3, #0
 8008b56:	4640      	mov	r0, r8
 8008b58:	4649      	mov	r1, r9
 8008b5a:	f7f7 ffe7 	bl	8000b2c <__aeabi_dcmplt>
 8008b5e:	b110      	cbz	r0, 8008b66 <_printf_float+0x86>
 8008b60:	232d      	movs	r3, #45	@ 0x2d
 8008b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b66:	4a91      	ldr	r2, [pc, #580]	@ (8008dac <_printf_float+0x2cc>)
 8008b68:	4b91      	ldr	r3, [pc, #580]	@ (8008db0 <_printf_float+0x2d0>)
 8008b6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b6e:	bf94      	ite	ls
 8008b70:	4690      	movls	r8, r2
 8008b72:	4698      	movhi	r8, r3
 8008b74:	2303      	movs	r3, #3
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	f02b 0304 	bic.w	r3, fp, #4
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	f04f 0900 	mov.w	r9, #0
 8008b82:	9700      	str	r7, [sp, #0]
 8008b84:	4633      	mov	r3, r6
 8008b86:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f000 f9d2 	bl	8008f34 <_printf_common>
 8008b90:	3001      	adds	r0, #1
 8008b92:	f040 808d 	bne.w	8008cb0 <_printf_float+0x1d0>
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	b00d      	add	sp, #52	@ 0x34
 8008b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	f7f7 ffe8 	bl	8000b7c <__aeabi_dcmpun>
 8008bac:	b140      	cbz	r0, 8008bc0 <_printf_float+0xe0>
 8008bae:	464b      	mov	r3, r9
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bfbc      	itt	lt
 8008bb4:	232d      	movlt	r3, #45	@ 0x2d
 8008bb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008bba:	4a7e      	ldr	r2, [pc, #504]	@ (8008db4 <_printf_float+0x2d4>)
 8008bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8008db8 <_printf_float+0x2d8>)
 8008bbe:	e7d4      	b.n	8008b6a <_printf_float+0x8a>
 8008bc0:	6863      	ldr	r3, [r4, #4]
 8008bc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008bc6:	9206      	str	r2, [sp, #24]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	d13b      	bne.n	8008c44 <_printf_float+0x164>
 8008bcc:	2306      	movs	r3, #6
 8008bce:	6063      	str	r3, [r4, #4]
 8008bd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	6022      	str	r2, [r4, #0]
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008be0:	ab09      	add	r3, sp, #36	@ 0x24
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	6861      	ldr	r1, [r4, #4]
 8008be6:	ec49 8b10 	vmov	d0, r8, r9
 8008bea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f7ff fed6 	bl	80089a0 <__cvt>
 8008bf4:	9b06      	ldr	r3, [sp, #24]
 8008bf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bf8:	2b47      	cmp	r3, #71	@ 0x47
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	d129      	bne.n	8008c52 <_printf_float+0x172>
 8008bfe:	1cc8      	adds	r0, r1, #3
 8008c00:	db02      	blt.n	8008c08 <_printf_float+0x128>
 8008c02:	6863      	ldr	r3, [r4, #4]
 8008c04:	4299      	cmp	r1, r3
 8008c06:	dd41      	ble.n	8008c8c <_printf_float+0x1ac>
 8008c08:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c0c:	fa5f fa8a 	uxtb.w	sl, sl
 8008c10:	3901      	subs	r1, #1
 8008c12:	4652      	mov	r2, sl
 8008c14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c18:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c1a:	f7ff ff26 	bl	8008a6a <__exponent>
 8008c1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c20:	1813      	adds	r3, r2, r0
 8008c22:	2a01      	cmp	r2, #1
 8008c24:	4681      	mov	r9, r0
 8008c26:	6123      	str	r3, [r4, #16]
 8008c28:	dc02      	bgt.n	8008c30 <_printf_float+0x150>
 8008c2a:	6822      	ldr	r2, [r4, #0]
 8008c2c:	07d2      	lsls	r2, r2, #31
 8008c2e:	d501      	bpl.n	8008c34 <_printf_float+0x154>
 8008c30:	3301      	adds	r3, #1
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0a2      	beq.n	8008b82 <_printf_float+0xa2>
 8008c3c:	232d      	movs	r3, #45	@ 0x2d
 8008c3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c42:	e79e      	b.n	8008b82 <_printf_float+0xa2>
 8008c44:	9a06      	ldr	r2, [sp, #24]
 8008c46:	2a47      	cmp	r2, #71	@ 0x47
 8008c48:	d1c2      	bne.n	8008bd0 <_printf_float+0xf0>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1c0      	bne.n	8008bd0 <_printf_float+0xf0>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e7bd      	b.n	8008bce <_printf_float+0xee>
 8008c52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c56:	d9db      	bls.n	8008c10 <_printf_float+0x130>
 8008c58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c5c:	d118      	bne.n	8008c90 <_printf_float+0x1b0>
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	6863      	ldr	r3, [r4, #4]
 8008c62:	dd0b      	ble.n	8008c7c <_printf_float+0x19c>
 8008c64:	6121      	str	r1, [r4, #16]
 8008c66:	b913      	cbnz	r3, 8008c6e <_printf_float+0x18e>
 8008c68:	6822      	ldr	r2, [r4, #0]
 8008c6a:	07d0      	lsls	r0, r2, #31
 8008c6c:	d502      	bpl.n	8008c74 <_printf_float+0x194>
 8008c6e:	3301      	adds	r3, #1
 8008c70:	440b      	add	r3, r1
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c76:	f04f 0900 	mov.w	r9, #0
 8008c7a:	e7db      	b.n	8008c34 <_printf_float+0x154>
 8008c7c:	b913      	cbnz	r3, 8008c84 <_printf_float+0x1a4>
 8008c7e:	6822      	ldr	r2, [r4, #0]
 8008c80:	07d2      	lsls	r2, r2, #31
 8008c82:	d501      	bpl.n	8008c88 <_printf_float+0x1a8>
 8008c84:	3302      	adds	r3, #2
 8008c86:	e7f4      	b.n	8008c72 <_printf_float+0x192>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e7f2      	b.n	8008c72 <_printf_float+0x192>
 8008c8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c92:	4299      	cmp	r1, r3
 8008c94:	db05      	blt.n	8008ca2 <_printf_float+0x1c2>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	6121      	str	r1, [r4, #16]
 8008c9a:	07d8      	lsls	r0, r3, #31
 8008c9c:	d5ea      	bpl.n	8008c74 <_printf_float+0x194>
 8008c9e:	1c4b      	adds	r3, r1, #1
 8008ca0:	e7e7      	b.n	8008c72 <_printf_float+0x192>
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	bfd4      	ite	le
 8008ca6:	f1c1 0202 	rsble	r2, r1, #2
 8008caa:	2201      	movgt	r2, #1
 8008cac:	4413      	add	r3, r2
 8008cae:	e7e0      	b.n	8008c72 <_printf_float+0x192>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	055a      	lsls	r2, r3, #21
 8008cb4:	d407      	bmi.n	8008cc6 <_printf_float+0x1e6>
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	4642      	mov	r2, r8
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b8      	blx	r7
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d12b      	bne.n	8008d1c <_printf_float+0x23c>
 8008cc4:	e767      	b.n	8008b96 <_printf_float+0xb6>
 8008cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008cca:	f240 80dd 	bls.w	8008e88 <_printf_float+0x3a8>
 8008cce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f7f7 ff1f 	bl	8000b18 <__aeabi_dcmpeq>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d033      	beq.n	8008d46 <_printf_float+0x266>
 8008cde:	4a37      	ldr	r2, [pc, #220]	@ (8008dbc <_printf_float+0x2dc>)
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f43f af54 	beq.w	8008b96 <_printf_float+0xb6>
 8008cee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cf2:	4543      	cmp	r3, r8
 8008cf4:	db02      	blt.n	8008cfc <_printf_float+0x21c>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	07d8      	lsls	r0, r3, #31
 8008cfa:	d50f      	bpl.n	8008d1c <_printf_float+0x23c>
 8008cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d00:	4631      	mov	r1, r6
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b8      	blx	r7
 8008d06:	3001      	adds	r0, #1
 8008d08:	f43f af45 	beq.w	8008b96 <_printf_float+0xb6>
 8008d0c:	f04f 0900 	mov.w	r9, #0
 8008d10:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d14:	f104 0a1a 	add.w	sl, r4, #26
 8008d18:	45c8      	cmp	r8, r9
 8008d1a:	dc09      	bgt.n	8008d30 <_printf_float+0x250>
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	079b      	lsls	r3, r3, #30
 8008d20:	f100 8103 	bmi.w	8008f2a <_printf_float+0x44a>
 8008d24:	68e0      	ldr	r0, [r4, #12]
 8008d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d28:	4298      	cmp	r0, r3
 8008d2a:	bfb8      	it	lt
 8008d2c:	4618      	movlt	r0, r3
 8008d2e:	e734      	b.n	8008b9a <_printf_float+0xba>
 8008d30:	2301      	movs	r3, #1
 8008d32:	4652      	mov	r2, sl
 8008d34:	4631      	mov	r1, r6
 8008d36:	4628      	mov	r0, r5
 8008d38:	47b8      	blx	r7
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	f43f af2b 	beq.w	8008b96 <_printf_float+0xb6>
 8008d40:	f109 0901 	add.w	r9, r9, #1
 8008d44:	e7e8      	b.n	8008d18 <_printf_float+0x238>
 8008d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dc39      	bgt.n	8008dc0 <_printf_float+0x2e0>
 8008d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8008dbc <_printf_float+0x2dc>)
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4631      	mov	r1, r6
 8008d52:	4628      	mov	r0, r5
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	f43f af1d 	beq.w	8008b96 <_printf_float+0xb6>
 8008d5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d60:	ea59 0303 	orrs.w	r3, r9, r3
 8008d64:	d102      	bne.n	8008d6c <_printf_float+0x28c>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	07d9      	lsls	r1, r3, #31
 8008d6a:	d5d7      	bpl.n	8008d1c <_printf_float+0x23c>
 8008d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f43f af0d 	beq.w	8008b96 <_printf_float+0xb6>
 8008d7c:	f04f 0a00 	mov.w	sl, #0
 8008d80:	f104 0b1a 	add.w	fp, r4, #26
 8008d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d86:	425b      	negs	r3, r3
 8008d88:	4553      	cmp	r3, sl
 8008d8a:	dc01      	bgt.n	8008d90 <_printf_float+0x2b0>
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	e793      	b.n	8008cb8 <_printf_float+0x1d8>
 8008d90:	2301      	movs	r3, #1
 8008d92:	465a      	mov	r2, fp
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f aefb 	beq.w	8008b96 <_printf_float+0xb6>
 8008da0:	f10a 0a01 	add.w	sl, sl, #1
 8008da4:	e7ee      	b.n	8008d84 <_printf_float+0x2a4>
 8008da6:	bf00      	nop
 8008da8:	7fefffff 	.word	0x7fefffff
 8008dac:	0800bc21 	.word	0x0800bc21
 8008db0:	0800bc25 	.word	0x0800bc25
 8008db4:	0800bc29 	.word	0x0800bc29
 8008db8:	0800bc2d 	.word	0x0800bc2d
 8008dbc:	0800bc31 	.word	0x0800bc31
 8008dc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008dc6:	4553      	cmp	r3, sl
 8008dc8:	bfa8      	it	ge
 8008dca:	4653      	movge	r3, sl
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	4699      	mov	r9, r3
 8008dd0:	dc36      	bgt.n	8008e40 <_printf_float+0x360>
 8008dd2:	f04f 0b00 	mov.w	fp, #0
 8008dd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dda:	f104 021a 	add.w	r2, r4, #26
 8008dde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008de0:	9306      	str	r3, [sp, #24]
 8008de2:	eba3 0309 	sub.w	r3, r3, r9
 8008de6:	455b      	cmp	r3, fp
 8008de8:	dc31      	bgt.n	8008e4e <_printf_float+0x36e>
 8008dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dec:	459a      	cmp	sl, r3
 8008dee:	dc3a      	bgt.n	8008e66 <_printf_float+0x386>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	07da      	lsls	r2, r3, #31
 8008df4:	d437      	bmi.n	8008e66 <_printf_float+0x386>
 8008df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df8:	ebaa 0903 	sub.w	r9, sl, r3
 8008dfc:	9b06      	ldr	r3, [sp, #24]
 8008dfe:	ebaa 0303 	sub.w	r3, sl, r3
 8008e02:	4599      	cmp	r9, r3
 8008e04:	bfa8      	it	ge
 8008e06:	4699      	movge	r9, r3
 8008e08:	f1b9 0f00 	cmp.w	r9, #0
 8008e0c:	dc33      	bgt.n	8008e76 <_printf_float+0x396>
 8008e0e:	f04f 0800 	mov.w	r8, #0
 8008e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e16:	f104 0b1a 	add.w	fp, r4, #26
 8008e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008e20:	eba3 0309 	sub.w	r3, r3, r9
 8008e24:	4543      	cmp	r3, r8
 8008e26:	f77f af79 	ble.w	8008d1c <_printf_float+0x23c>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	465a      	mov	r2, fp
 8008e2e:	4631      	mov	r1, r6
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b8      	blx	r7
 8008e34:	3001      	adds	r0, #1
 8008e36:	f43f aeae 	beq.w	8008b96 <_printf_float+0xb6>
 8008e3a:	f108 0801 	add.w	r8, r8, #1
 8008e3e:	e7ec      	b.n	8008e1a <_printf_float+0x33a>
 8008e40:	4642      	mov	r2, r8
 8008e42:	4631      	mov	r1, r6
 8008e44:	4628      	mov	r0, r5
 8008e46:	47b8      	blx	r7
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d1c2      	bne.n	8008dd2 <_printf_float+0x2f2>
 8008e4c:	e6a3      	b.n	8008b96 <_printf_float+0xb6>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4631      	mov	r1, r6
 8008e52:	4628      	mov	r0, r5
 8008e54:	9206      	str	r2, [sp, #24]
 8008e56:	47b8      	blx	r7
 8008e58:	3001      	adds	r0, #1
 8008e5a:	f43f ae9c 	beq.w	8008b96 <_printf_float+0xb6>
 8008e5e:	9a06      	ldr	r2, [sp, #24]
 8008e60:	f10b 0b01 	add.w	fp, fp, #1
 8008e64:	e7bb      	b.n	8008dde <_printf_float+0x2fe>
 8008e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	47b8      	blx	r7
 8008e70:	3001      	adds	r0, #1
 8008e72:	d1c0      	bne.n	8008df6 <_printf_float+0x316>
 8008e74:	e68f      	b.n	8008b96 <_printf_float+0xb6>
 8008e76:	9a06      	ldr	r2, [sp, #24]
 8008e78:	464b      	mov	r3, r9
 8008e7a:	4442      	add	r2, r8
 8008e7c:	4631      	mov	r1, r6
 8008e7e:	4628      	mov	r0, r5
 8008e80:	47b8      	blx	r7
 8008e82:	3001      	adds	r0, #1
 8008e84:	d1c3      	bne.n	8008e0e <_printf_float+0x32e>
 8008e86:	e686      	b.n	8008b96 <_printf_float+0xb6>
 8008e88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e8c:	f1ba 0f01 	cmp.w	sl, #1
 8008e90:	dc01      	bgt.n	8008e96 <_printf_float+0x3b6>
 8008e92:	07db      	lsls	r3, r3, #31
 8008e94:	d536      	bpl.n	8008f04 <_printf_float+0x424>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4642      	mov	r2, r8
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	47b8      	blx	r7
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f43f ae78 	beq.w	8008b96 <_printf_float+0xb6>
 8008ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	f43f ae70 	beq.w	8008b96 <_printf_float+0xb6>
 8008eb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ec2:	f7f7 fe29 	bl	8000b18 <__aeabi_dcmpeq>
 8008ec6:	b9c0      	cbnz	r0, 8008efa <_printf_float+0x41a>
 8008ec8:	4653      	mov	r3, sl
 8008eca:	f108 0201 	add.w	r2, r8, #1
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	47b8      	blx	r7
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d10c      	bne.n	8008ef2 <_printf_float+0x412>
 8008ed8:	e65d      	b.n	8008b96 <_printf_float+0xb6>
 8008eda:	2301      	movs	r3, #1
 8008edc:	465a      	mov	r2, fp
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f ae56 	beq.w	8008b96 <_printf_float+0xb6>
 8008eea:	f108 0801 	add.w	r8, r8, #1
 8008eee:	45d0      	cmp	r8, sl
 8008ef0:	dbf3      	blt.n	8008eda <_printf_float+0x3fa>
 8008ef2:	464b      	mov	r3, r9
 8008ef4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ef8:	e6df      	b.n	8008cba <_printf_float+0x1da>
 8008efa:	f04f 0800 	mov.w	r8, #0
 8008efe:	f104 0b1a 	add.w	fp, r4, #26
 8008f02:	e7f4      	b.n	8008eee <_printf_float+0x40e>
 8008f04:	2301      	movs	r3, #1
 8008f06:	4642      	mov	r2, r8
 8008f08:	e7e1      	b.n	8008ece <_printf_float+0x3ee>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	464a      	mov	r2, r9
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4628      	mov	r0, r5
 8008f12:	47b8      	blx	r7
 8008f14:	3001      	adds	r0, #1
 8008f16:	f43f ae3e 	beq.w	8008b96 <_printf_float+0xb6>
 8008f1a:	f108 0801 	add.w	r8, r8, #1
 8008f1e:	68e3      	ldr	r3, [r4, #12]
 8008f20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f22:	1a5b      	subs	r3, r3, r1
 8008f24:	4543      	cmp	r3, r8
 8008f26:	dcf0      	bgt.n	8008f0a <_printf_float+0x42a>
 8008f28:	e6fc      	b.n	8008d24 <_printf_float+0x244>
 8008f2a:	f04f 0800 	mov.w	r8, #0
 8008f2e:	f104 0919 	add.w	r9, r4, #25
 8008f32:	e7f4      	b.n	8008f1e <_printf_float+0x43e>

08008f34 <_printf_common>:
 8008f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f38:	4616      	mov	r6, r2
 8008f3a:	4698      	mov	r8, r3
 8008f3c:	688a      	ldr	r2, [r1, #8]
 8008f3e:	690b      	ldr	r3, [r1, #16]
 8008f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f44:	4293      	cmp	r3, r2
 8008f46:	bfb8      	it	lt
 8008f48:	4613      	movlt	r3, r2
 8008f4a:	6033      	str	r3, [r6, #0]
 8008f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f50:	4607      	mov	r7, r0
 8008f52:	460c      	mov	r4, r1
 8008f54:	b10a      	cbz	r2, 8008f5a <_printf_common+0x26>
 8008f56:	3301      	adds	r3, #1
 8008f58:	6033      	str	r3, [r6, #0]
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	0699      	lsls	r1, r3, #26
 8008f5e:	bf42      	ittt	mi
 8008f60:	6833      	ldrmi	r3, [r6, #0]
 8008f62:	3302      	addmi	r3, #2
 8008f64:	6033      	strmi	r3, [r6, #0]
 8008f66:	6825      	ldr	r5, [r4, #0]
 8008f68:	f015 0506 	ands.w	r5, r5, #6
 8008f6c:	d106      	bne.n	8008f7c <_printf_common+0x48>
 8008f6e:	f104 0a19 	add.w	sl, r4, #25
 8008f72:	68e3      	ldr	r3, [r4, #12]
 8008f74:	6832      	ldr	r2, [r6, #0]
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	42ab      	cmp	r3, r5
 8008f7a:	dc26      	bgt.n	8008fca <_printf_common+0x96>
 8008f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	3b00      	subs	r3, #0
 8008f84:	bf18      	it	ne
 8008f86:	2301      	movne	r3, #1
 8008f88:	0692      	lsls	r2, r2, #26
 8008f8a:	d42b      	bmi.n	8008fe4 <_printf_common+0xb0>
 8008f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f90:	4641      	mov	r1, r8
 8008f92:	4638      	mov	r0, r7
 8008f94:	47c8      	blx	r9
 8008f96:	3001      	adds	r0, #1
 8008f98:	d01e      	beq.n	8008fd8 <_printf_common+0xa4>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	6922      	ldr	r2, [r4, #16]
 8008f9e:	f003 0306 	and.w	r3, r3, #6
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	bf02      	ittt	eq
 8008fa6:	68e5      	ldreq	r5, [r4, #12]
 8008fa8:	6833      	ldreq	r3, [r6, #0]
 8008faa:	1aed      	subeq	r5, r5, r3
 8008fac:	68a3      	ldr	r3, [r4, #8]
 8008fae:	bf0c      	ite	eq
 8008fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fb4:	2500      	movne	r5, #0
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	bfc4      	itt	gt
 8008fba:	1a9b      	subgt	r3, r3, r2
 8008fbc:	18ed      	addgt	r5, r5, r3
 8008fbe:	2600      	movs	r6, #0
 8008fc0:	341a      	adds	r4, #26
 8008fc2:	42b5      	cmp	r5, r6
 8008fc4:	d11a      	bne.n	8008ffc <_printf_common+0xc8>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e008      	b.n	8008fdc <_printf_common+0xa8>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4652      	mov	r2, sl
 8008fce:	4641      	mov	r1, r8
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	47c8      	blx	r9
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d103      	bne.n	8008fe0 <_printf_common+0xac>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe0:	3501      	adds	r5, #1
 8008fe2:	e7c6      	b.n	8008f72 <_printf_common+0x3e>
 8008fe4:	18e1      	adds	r1, r4, r3
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	2030      	movs	r0, #48	@ 0x30
 8008fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fee:	4422      	add	r2, r4
 8008ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ff8:	3302      	adds	r3, #2
 8008ffa:	e7c7      	b.n	8008f8c <_printf_common+0x58>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	4622      	mov	r2, r4
 8009000:	4641      	mov	r1, r8
 8009002:	4638      	mov	r0, r7
 8009004:	47c8      	blx	r9
 8009006:	3001      	adds	r0, #1
 8009008:	d0e6      	beq.n	8008fd8 <_printf_common+0xa4>
 800900a:	3601      	adds	r6, #1
 800900c:	e7d9      	b.n	8008fc2 <_printf_common+0x8e>
	...

08009010 <_printf_i>:
 8009010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	7e0f      	ldrb	r7, [r1, #24]
 8009016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009018:	2f78      	cmp	r7, #120	@ 0x78
 800901a:	4691      	mov	r9, r2
 800901c:	4680      	mov	r8, r0
 800901e:	460c      	mov	r4, r1
 8009020:	469a      	mov	sl, r3
 8009022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009026:	d807      	bhi.n	8009038 <_printf_i+0x28>
 8009028:	2f62      	cmp	r7, #98	@ 0x62
 800902a:	d80a      	bhi.n	8009042 <_printf_i+0x32>
 800902c:	2f00      	cmp	r7, #0
 800902e:	f000 80d2 	beq.w	80091d6 <_printf_i+0x1c6>
 8009032:	2f58      	cmp	r7, #88	@ 0x58
 8009034:	f000 80b9 	beq.w	80091aa <_printf_i+0x19a>
 8009038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800903c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009040:	e03a      	b.n	80090b8 <_printf_i+0xa8>
 8009042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009046:	2b15      	cmp	r3, #21
 8009048:	d8f6      	bhi.n	8009038 <_printf_i+0x28>
 800904a:	a101      	add	r1, pc, #4	@ (adr r1, 8009050 <_printf_i+0x40>)
 800904c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009050:	080090a9 	.word	0x080090a9
 8009054:	080090bd 	.word	0x080090bd
 8009058:	08009039 	.word	0x08009039
 800905c:	08009039 	.word	0x08009039
 8009060:	08009039 	.word	0x08009039
 8009064:	08009039 	.word	0x08009039
 8009068:	080090bd 	.word	0x080090bd
 800906c:	08009039 	.word	0x08009039
 8009070:	08009039 	.word	0x08009039
 8009074:	08009039 	.word	0x08009039
 8009078:	08009039 	.word	0x08009039
 800907c:	080091bd 	.word	0x080091bd
 8009080:	080090e7 	.word	0x080090e7
 8009084:	08009177 	.word	0x08009177
 8009088:	08009039 	.word	0x08009039
 800908c:	08009039 	.word	0x08009039
 8009090:	080091df 	.word	0x080091df
 8009094:	08009039 	.word	0x08009039
 8009098:	080090e7 	.word	0x080090e7
 800909c:	08009039 	.word	0x08009039
 80090a0:	08009039 	.word	0x08009039
 80090a4:	0800917f 	.word	0x0800917f
 80090a8:	6833      	ldr	r3, [r6, #0]
 80090aa:	1d1a      	adds	r2, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6032      	str	r2, [r6, #0]
 80090b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090b8:	2301      	movs	r3, #1
 80090ba:	e09d      	b.n	80091f8 <_printf_i+0x1e8>
 80090bc:	6833      	ldr	r3, [r6, #0]
 80090be:	6820      	ldr	r0, [r4, #0]
 80090c0:	1d19      	adds	r1, r3, #4
 80090c2:	6031      	str	r1, [r6, #0]
 80090c4:	0606      	lsls	r6, r0, #24
 80090c6:	d501      	bpl.n	80090cc <_printf_i+0xbc>
 80090c8:	681d      	ldr	r5, [r3, #0]
 80090ca:	e003      	b.n	80090d4 <_printf_i+0xc4>
 80090cc:	0645      	lsls	r5, r0, #25
 80090ce:	d5fb      	bpl.n	80090c8 <_printf_i+0xb8>
 80090d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	da03      	bge.n	80090e0 <_printf_i+0xd0>
 80090d8:	232d      	movs	r3, #45	@ 0x2d
 80090da:	426d      	negs	r5, r5
 80090dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090e0:	4859      	ldr	r0, [pc, #356]	@ (8009248 <_printf_i+0x238>)
 80090e2:	230a      	movs	r3, #10
 80090e4:	e011      	b.n	800910a <_printf_i+0xfa>
 80090e6:	6821      	ldr	r1, [r4, #0]
 80090e8:	6833      	ldr	r3, [r6, #0]
 80090ea:	0608      	lsls	r0, r1, #24
 80090ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80090f0:	d402      	bmi.n	80090f8 <_printf_i+0xe8>
 80090f2:	0649      	lsls	r1, r1, #25
 80090f4:	bf48      	it	mi
 80090f6:	b2ad      	uxthmi	r5, r5
 80090f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80090fa:	4853      	ldr	r0, [pc, #332]	@ (8009248 <_printf_i+0x238>)
 80090fc:	6033      	str	r3, [r6, #0]
 80090fe:	bf14      	ite	ne
 8009100:	230a      	movne	r3, #10
 8009102:	2308      	moveq	r3, #8
 8009104:	2100      	movs	r1, #0
 8009106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800910a:	6866      	ldr	r6, [r4, #4]
 800910c:	60a6      	str	r6, [r4, #8]
 800910e:	2e00      	cmp	r6, #0
 8009110:	bfa2      	ittt	ge
 8009112:	6821      	ldrge	r1, [r4, #0]
 8009114:	f021 0104 	bicge.w	r1, r1, #4
 8009118:	6021      	strge	r1, [r4, #0]
 800911a:	b90d      	cbnz	r5, 8009120 <_printf_i+0x110>
 800911c:	2e00      	cmp	r6, #0
 800911e:	d04b      	beq.n	80091b8 <_printf_i+0x1a8>
 8009120:	4616      	mov	r6, r2
 8009122:	fbb5 f1f3 	udiv	r1, r5, r3
 8009126:	fb03 5711 	mls	r7, r3, r1, r5
 800912a:	5dc7      	ldrb	r7, [r0, r7]
 800912c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009130:	462f      	mov	r7, r5
 8009132:	42bb      	cmp	r3, r7
 8009134:	460d      	mov	r5, r1
 8009136:	d9f4      	bls.n	8009122 <_printf_i+0x112>
 8009138:	2b08      	cmp	r3, #8
 800913a:	d10b      	bne.n	8009154 <_printf_i+0x144>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	07df      	lsls	r7, r3, #31
 8009140:	d508      	bpl.n	8009154 <_printf_i+0x144>
 8009142:	6923      	ldr	r3, [r4, #16]
 8009144:	6861      	ldr	r1, [r4, #4]
 8009146:	4299      	cmp	r1, r3
 8009148:	bfde      	ittt	le
 800914a:	2330      	movle	r3, #48	@ 0x30
 800914c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009150:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009154:	1b92      	subs	r2, r2, r6
 8009156:	6122      	str	r2, [r4, #16]
 8009158:	f8cd a000 	str.w	sl, [sp]
 800915c:	464b      	mov	r3, r9
 800915e:	aa03      	add	r2, sp, #12
 8009160:	4621      	mov	r1, r4
 8009162:	4640      	mov	r0, r8
 8009164:	f7ff fee6 	bl	8008f34 <_printf_common>
 8009168:	3001      	adds	r0, #1
 800916a:	d14a      	bne.n	8009202 <_printf_i+0x1f2>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	b004      	add	sp, #16
 8009172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	f043 0320 	orr.w	r3, r3, #32
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	4833      	ldr	r0, [pc, #204]	@ (800924c <_printf_i+0x23c>)
 8009180:	2778      	movs	r7, #120	@ 0x78
 8009182:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	6831      	ldr	r1, [r6, #0]
 800918a:	061f      	lsls	r7, r3, #24
 800918c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009190:	d402      	bmi.n	8009198 <_printf_i+0x188>
 8009192:	065f      	lsls	r7, r3, #25
 8009194:	bf48      	it	mi
 8009196:	b2ad      	uxthmi	r5, r5
 8009198:	6031      	str	r1, [r6, #0]
 800919a:	07d9      	lsls	r1, r3, #31
 800919c:	bf44      	itt	mi
 800919e:	f043 0320 	orrmi.w	r3, r3, #32
 80091a2:	6023      	strmi	r3, [r4, #0]
 80091a4:	b11d      	cbz	r5, 80091ae <_printf_i+0x19e>
 80091a6:	2310      	movs	r3, #16
 80091a8:	e7ac      	b.n	8009104 <_printf_i+0xf4>
 80091aa:	4827      	ldr	r0, [pc, #156]	@ (8009248 <_printf_i+0x238>)
 80091ac:	e7e9      	b.n	8009182 <_printf_i+0x172>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	f023 0320 	bic.w	r3, r3, #32
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	e7f6      	b.n	80091a6 <_printf_i+0x196>
 80091b8:	4616      	mov	r6, r2
 80091ba:	e7bd      	b.n	8009138 <_printf_i+0x128>
 80091bc:	6833      	ldr	r3, [r6, #0]
 80091be:	6825      	ldr	r5, [r4, #0]
 80091c0:	6961      	ldr	r1, [r4, #20]
 80091c2:	1d18      	adds	r0, r3, #4
 80091c4:	6030      	str	r0, [r6, #0]
 80091c6:	062e      	lsls	r6, r5, #24
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	d501      	bpl.n	80091d0 <_printf_i+0x1c0>
 80091cc:	6019      	str	r1, [r3, #0]
 80091ce:	e002      	b.n	80091d6 <_printf_i+0x1c6>
 80091d0:	0668      	lsls	r0, r5, #25
 80091d2:	d5fb      	bpl.n	80091cc <_printf_i+0x1bc>
 80091d4:	8019      	strh	r1, [r3, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	4616      	mov	r6, r2
 80091dc:	e7bc      	b.n	8009158 <_printf_i+0x148>
 80091de:	6833      	ldr	r3, [r6, #0]
 80091e0:	1d1a      	adds	r2, r3, #4
 80091e2:	6032      	str	r2, [r6, #0]
 80091e4:	681e      	ldr	r6, [r3, #0]
 80091e6:	6862      	ldr	r2, [r4, #4]
 80091e8:	2100      	movs	r1, #0
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7f7 f818 	bl	8000220 <memchr>
 80091f0:	b108      	cbz	r0, 80091f6 <_printf_i+0x1e6>
 80091f2:	1b80      	subs	r0, r0, r6
 80091f4:	6060      	str	r0, [r4, #4]
 80091f6:	6863      	ldr	r3, [r4, #4]
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	2300      	movs	r3, #0
 80091fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009200:	e7aa      	b.n	8009158 <_printf_i+0x148>
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	4632      	mov	r2, r6
 8009206:	4649      	mov	r1, r9
 8009208:	4640      	mov	r0, r8
 800920a:	47d0      	blx	sl
 800920c:	3001      	adds	r0, #1
 800920e:	d0ad      	beq.n	800916c <_printf_i+0x15c>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	079b      	lsls	r3, r3, #30
 8009214:	d413      	bmi.n	800923e <_printf_i+0x22e>
 8009216:	68e0      	ldr	r0, [r4, #12]
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	4298      	cmp	r0, r3
 800921c:	bfb8      	it	lt
 800921e:	4618      	movlt	r0, r3
 8009220:	e7a6      	b.n	8009170 <_printf_i+0x160>
 8009222:	2301      	movs	r3, #1
 8009224:	4632      	mov	r2, r6
 8009226:	4649      	mov	r1, r9
 8009228:	4640      	mov	r0, r8
 800922a:	47d0      	blx	sl
 800922c:	3001      	adds	r0, #1
 800922e:	d09d      	beq.n	800916c <_printf_i+0x15c>
 8009230:	3501      	adds	r5, #1
 8009232:	68e3      	ldr	r3, [r4, #12]
 8009234:	9903      	ldr	r1, [sp, #12]
 8009236:	1a5b      	subs	r3, r3, r1
 8009238:	42ab      	cmp	r3, r5
 800923a:	dcf2      	bgt.n	8009222 <_printf_i+0x212>
 800923c:	e7eb      	b.n	8009216 <_printf_i+0x206>
 800923e:	2500      	movs	r5, #0
 8009240:	f104 0619 	add.w	r6, r4, #25
 8009244:	e7f5      	b.n	8009232 <_printf_i+0x222>
 8009246:	bf00      	nop
 8009248:	0800bc33 	.word	0x0800bc33
 800924c:	0800bc44 	.word	0x0800bc44

08009250 <std>:
 8009250:	2300      	movs	r3, #0
 8009252:	b510      	push	{r4, lr}
 8009254:	4604      	mov	r4, r0
 8009256:	e9c0 3300 	strd	r3, r3, [r0]
 800925a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800925e:	6083      	str	r3, [r0, #8]
 8009260:	8181      	strh	r1, [r0, #12]
 8009262:	6643      	str	r3, [r0, #100]	@ 0x64
 8009264:	81c2      	strh	r2, [r0, #14]
 8009266:	6183      	str	r3, [r0, #24]
 8009268:	4619      	mov	r1, r3
 800926a:	2208      	movs	r2, #8
 800926c:	305c      	adds	r0, #92	@ 0x5c
 800926e:	f000 f9f9 	bl	8009664 <memset>
 8009272:	4b0d      	ldr	r3, [pc, #52]	@ (80092a8 <std+0x58>)
 8009274:	6263      	str	r3, [r4, #36]	@ 0x24
 8009276:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <std+0x5c>)
 8009278:	62a3      	str	r3, [r4, #40]	@ 0x28
 800927a:	4b0d      	ldr	r3, [pc, #52]	@ (80092b0 <std+0x60>)
 800927c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800927e:	4b0d      	ldr	r3, [pc, #52]	@ (80092b4 <std+0x64>)
 8009280:	6323      	str	r3, [r4, #48]	@ 0x30
 8009282:	4b0d      	ldr	r3, [pc, #52]	@ (80092b8 <std+0x68>)
 8009284:	6224      	str	r4, [r4, #32]
 8009286:	429c      	cmp	r4, r3
 8009288:	d006      	beq.n	8009298 <std+0x48>
 800928a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800928e:	4294      	cmp	r4, r2
 8009290:	d002      	beq.n	8009298 <std+0x48>
 8009292:	33d0      	adds	r3, #208	@ 0xd0
 8009294:	429c      	cmp	r4, r3
 8009296:	d105      	bne.n	80092a4 <std+0x54>
 8009298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800929c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a0:	f000 ba5c 	b.w	800975c <__retarget_lock_init_recursive>
 80092a4:	bd10      	pop	{r4, pc}
 80092a6:	bf00      	nop
 80092a8:	080094b5 	.word	0x080094b5
 80092ac:	080094d7 	.word	0x080094d7
 80092b0:	0800950f 	.word	0x0800950f
 80092b4:	08009533 	.word	0x08009533
 80092b8:	2000068c 	.word	0x2000068c

080092bc <stdio_exit_handler>:
 80092bc:	4a02      	ldr	r2, [pc, #8]	@ (80092c8 <stdio_exit_handler+0xc>)
 80092be:	4903      	ldr	r1, [pc, #12]	@ (80092cc <stdio_exit_handler+0x10>)
 80092c0:	4803      	ldr	r0, [pc, #12]	@ (80092d0 <stdio_exit_handler+0x14>)
 80092c2:	f000 b869 	b.w	8009398 <_fwalk_sglue>
 80092c6:	bf00      	nop
 80092c8:	20000078 	.word	0x20000078
 80092cc:	0800b0a1 	.word	0x0800b0a1
 80092d0:	20000088 	.word	0x20000088

080092d4 <cleanup_stdio>:
 80092d4:	6841      	ldr	r1, [r0, #4]
 80092d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009308 <cleanup_stdio+0x34>)
 80092d8:	4299      	cmp	r1, r3
 80092da:	b510      	push	{r4, lr}
 80092dc:	4604      	mov	r4, r0
 80092de:	d001      	beq.n	80092e4 <cleanup_stdio+0x10>
 80092e0:	f001 fede 	bl	800b0a0 <_fflush_r>
 80092e4:	68a1      	ldr	r1, [r4, #8]
 80092e6:	4b09      	ldr	r3, [pc, #36]	@ (800930c <cleanup_stdio+0x38>)
 80092e8:	4299      	cmp	r1, r3
 80092ea:	d002      	beq.n	80092f2 <cleanup_stdio+0x1e>
 80092ec:	4620      	mov	r0, r4
 80092ee:	f001 fed7 	bl	800b0a0 <_fflush_r>
 80092f2:	68e1      	ldr	r1, [r4, #12]
 80092f4:	4b06      	ldr	r3, [pc, #24]	@ (8009310 <cleanup_stdio+0x3c>)
 80092f6:	4299      	cmp	r1, r3
 80092f8:	d004      	beq.n	8009304 <cleanup_stdio+0x30>
 80092fa:	4620      	mov	r0, r4
 80092fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009300:	f001 bece 	b.w	800b0a0 <_fflush_r>
 8009304:	bd10      	pop	{r4, pc}
 8009306:	bf00      	nop
 8009308:	2000068c 	.word	0x2000068c
 800930c:	200006f4 	.word	0x200006f4
 8009310:	2000075c 	.word	0x2000075c

08009314 <global_stdio_init.part.0>:
 8009314:	b510      	push	{r4, lr}
 8009316:	4b0b      	ldr	r3, [pc, #44]	@ (8009344 <global_stdio_init.part.0+0x30>)
 8009318:	4c0b      	ldr	r4, [pc, #44]	@ (8009348 <global_stdio_init.part.0+0x34>)
 800931a:	4a0c      	ldr	r2, [pc, #48]	@ (800934c <global_stdio_init.part.0+0x38>)
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	4620      	mov	r0, r4
 8009320:	2200      	movs	r2, #0
 8009322:	2104      	movs	r1, #4
 8009324:	f7ff ff94 	bl	8009250 <std>
 8009328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800932c:	2201      	movs	r2, #1
 800932e:	2109      	movs	r1, #9
 8009330:	f7ff ff8e 	bl	8009250 <std>
 8009334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009338:	2202      	movs	r2, #2
 800933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933e:	2112      	movs	r1, #18
 8009340:	f7ff bf86 	b.w	8009250 <std>
 8009344:	200007c4 	.word	0x200007c4
 8009348:	2000068c 	.word	0x2000068c
 800934c:	080092bd 	.word	0x080092bd

08009350 <__sfp_lock_acquire>:
 8009350:	4801      	ldr	r0, [pc, #4]	@ (8009358 <__sfp_lock_acquire+0x8>)
 8009352:	f000 ba04 	b.w	800975e <__retarget_lock_acquire_recursive>
 8009356:	bf00      	nop
 8009358:	200007cd 	.word	0x200007cd

0800935c <__sfp_lock_release>:
 800935c:	4801      	ldr	r0, [pc, #4]	@ (8009364 <__sfp_lock_release+0x8>)
 800935e:	f000 b9ff 	b.w	8009760 <__retarget_lock_release_recursive>
 8009362:	bf00      	nop
 8009364:	200007cd 	.word	0x200007cd

08009368 <__sinit>:
 8009368:	b510      	push	{r4, lr}
 800936a:	4604      	mov	r4, r0
 800936c:	f7ff fff0 	bl	8009350 <__sfp_lock_acquire>
 8009370:	6a23      	ldr	r3, [r4, #32]
 8009372:	b11b      	cbz	r3, 800937c <__sinit+0x14>
 8009374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009378:	f7ff bff0 	b.w	800935c <__sfp_lock_release>
 800937c:	4b04      	ldr	r3, [pc, #16]	@ (8009390 <__sinit+0x28>)
 800937e:	6223      	str	r3, [r4, #32]
 8009380:	4b04      	ldr	r3, [pc, #16]	@ (8009394 <__sinit+0x2c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1f5      	bne.n	8009374 <__sinit+0xc>
 8009388:	f7ff ffc4 	bl	8009314 <global_stdio_init.part.0>
 800938c:	e7f2      	b.n	8009374 <__sinit+0xc>
 800938e:	bf00      	nop
 8009390:	080092d5 	.word	0x080092d5
 8009394:	200007c4 	.word	0x200007c4

08009398 <_fwalk_sglue>:
 8009398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800939c:	4607      	mov	r7, r0
 800939e:	4688      	mov	r8, r1
 80093a0:	4614      	mov	r4, r2
 80093a2:	2600      	movs	r6, #0
 80093a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093a8:	f1b9 0901 	subs.w	r9, r9, #1
 80093ac:	d505      	bpl.n	80093ba <_fwalk_sglue+0x22>
 80093ae:	6824      	ldr	r4, [r4, #0]
 80093b0:	2c00      	cmp	r4, #0
 80093b2:	d1f7      	bne.n	80093a4 <_fwalk_sglue+0xc>
 80093b4:	4630      	mov	r0, r6
 80093b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d907      	bls.n	80093d0 <_fwalk_sglue+0x38>
 80093c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093c4:	3301      	adds	r3, #1
 80093c6:	d003      	beq.n	80093d0 <_fwalk_sglue+0x38>
 80093c8:	4629      	mov	r1, r5
 80093ca:	4638      	mov	r0, r7
 80093cc:	47c0      	blx	r8
 80093ce:	4306      	orrs	r6, r0
 80093d0:	3568      	adds	r5, #104	@ 0x68
 80093d2:	e7e9      	b.n	80093a8 <_fwalk_sglue+0x10>

080093d4 <iprintf>:
 80093d4:	b40f      	push	{r0, r1, r2, r3}
 80093d6:	b507      	push	{r0, r1, r2, lr}
 80093d8:	4906      	ldr	r1, [pc, #24]	@ (80093f4 <iprintf+0x20>)
 80093da:	ab04      	add	r3, sp, #16
 80093dc:	6808      	ldr	r0, [r1, #0]
 80093de:	f853 2b04 	ldr.w	r2, [r3], #4
 80093e2:	6881      	ldr	r1, [r0, #8]
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	f001 fcbf 	bl	800ad68 <_vfiprintf_r>
 80093ea:	b003      	add	sp, #12
 80093ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80093f0:	b004      	add	sp, #16
 80093f2:	4770      	bx	lr
 80093f4:	20000084 	.word	0x20000084

080093f8 <_puts_r>:
 80093f8:	6a03      	ldr	r3, [r0, #32]
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	6884      	ldr	r4, [r0, #8]
 80093fe:	4605      	mov	r5, r0
 8009400:	460e      	mov	r6, r1
 8009402:	b90b      	cbnz	r3, 8009408 <_puts_r+0x10>
 8009404:	f7ff ffb0 	bl	8009368 <__sinit>
 8009408:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800940a:	07db      	lsls	r3, r3, #31
 800940c:	d405      	bmi.n	800941a <_puts_r+0x22>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	0598      	lsls	r0, r3, #22
 8009412:	d402      	bmi.n	800941a <_puts_r+0x22>
 8009414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009416:	f000 f9a2 	bl	800975e <__retarget_lock_acquire_recursive>
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	0719      	lsls	r1, r3, #28
 800941e:	d502      	bpl.n	8009426 <_puts_r+0x2e>
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d135      	bne.n	8009492 <_puts_r+0x9a>
 8009426:	4621      	mov	r1, r4
 8009428:	4628      	mov	r0, r5
 800942a:	f000 f8c5 	bl	80095b8 <__swsetup_r>
 800942e:	b380      	cbz	r0, 8009492 <_puts_r+0x9a>
 8009430:	f04f 35ff 	mov.w	r5, #4294967295
 8009434:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009436:	07da      	lsls	r2, r3, #31
 8009438:	d405      	bmi.n	8009446 <_puts_r+0x4e>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	059b      	lsls	r3, r3, #22
 800943e:	d402      	bmi.n	8009446 <_puts_r+0x4e>
 8009440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009442:	f000 f98d 	bl	8009760 <__retarget_lock_release_recursive>
 8009446:	4628      	mov	r0, r5
 8009448:	bd70      	pop	{r4, r5, r6, pc}
 800944a:	2b00      	cmp	r3, #0
 800944c:	da04      	bge.n	8009458 <_puts_r+0x60>
 800944e:	69a2      	ldr	r2, [r4, #24]
 8009450:	429a      	cmp	r2, r3
 8009452:	dc17      	bgt.n	8009484 <_puts_r+0x8c>
 8009454:	290a      	cmp	r1, #10
 8009456:	d015      	beq.n	8009484 <_puts_r+0x8c>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	6022      	str	r2, [r4, #0]
 800945e:	7019      	strb	r1, [r3, #0]
 8009460:	68a3      	ldr	r3, [r4, #8]
 8009462:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009466:	3b01      	subs	r3, #1
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	2900      	cmp	r1, #0
 800946c:	d1ed      	bne.n	800944a <_puts_r+0x52>
 800946e:	2b00      	cmp	r3, #0
 8009470:	da11      	bge.n	8009496 <_puts_r+0x9e>
 8009472:	4622      	mov	r2, r4
 8009474:	210a      	movs	r1, #10
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f85f 	bl	800953a <__swbuf_r>
 800947c:	3001      	adds	r0, #1
 800947e:	d0d7      	beq.n	8009430 <_puts_r+0x38>
 8009480:	250a      	movs	r5, #10
 8009482:	e7d7      	b.n	8009434 <_puts_r+0x3c>
 8009484:	4622      	mov	r2, r4
 8009486:	4628      	mov	r0, r5
 8009488:	f000 f857 	bl	800953a <__swbuf_r>
 800948c:	3001      	adds	r0, #1
 800948e:	d1e7      	bne.n	8009460 <_puts_r+0x68>
 8009490:	e7ce      	b.n	8009430 <_puts_r+0x38>
 8009492:	3e01      	subs	r6, #1
 8009494:	e7e4      	b.n	8009460 <_puts_r+0x68>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	6022      	str	r2, [r4, #0]
 800949c:	220a      	movs	r2, #10
 800949e:	701a      	strb	r2, [r3, #0]
 80094a0:	e7ee      	b.n	8009480 <_puts_r+0x88>
	...

080094a4 <puts>:
 80094a4:	4b02      	ldr	r3, [pc, #8]	@ (80094b0 <puts+0xc>)
 80094a6:	4601      	mov	r1, r0
 80094a8:	6818      	ldr	r0, [r3, #0]
 80094aa:	f7ff bfa5 	b.w	80093f8 <_puts_r>
 80094ae:	bf00      	nop
 80094b0:	20000084 	.word	0x20000084

080094b4 <__sread>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	460c      	mov	r4, r1
 80094b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094bc:	f000 f900 	bl	80096c0 <_read_r>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	bfab      	itete	ge
 80094c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094c6:	89a3      	ldrhlt	r3, [r4, #12]
 80094c8:	181b      	addge	r3, r3, r0
 80094ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094ce:	bfac      	ite	ge
 80094d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094d2:	81a3      	strhlt	r3, [r4, #12]
 80094d4:	bd10      	pop	{r4, pc}

080094d6 <__swrite>:
 80094d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094da:	461f      	mov	r7, r3
 80094dc:	898b      	ldrh	r3, [r1, #12]
 80094de:	05db      	lsls	r3, r3, #23
 80094e0:	4605      	mov	r5, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	4616      	mov	r6, r2
 80094e6:	d505      	bpl.n	80094f4 <__swrite+0x1e>
 80094e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ec:	2302      	movs	r3, #2
 80094ee:	2200      	movs	r2, #0
 80094f0:	f000 f8d4 	bl	800969c <_lseek_r>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	4632      	mov	r2, r6
 8009502:	463b      	mov	r3, r7
 8009504:	4628      	mov	r0, r5
 8009506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800950a:	f000 b8eb 	b.w	80096e4 <_write_r>

0800950e <__sseek>:
 800950e:	b510      	push	{r4, lr}
 8009510:	460c      	mov	r4, r1
 8009512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009516:	f000 f8c1 	bl	800969c <_lseek_r>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	bf15      	itete	ne
 8009520:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009522:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009526:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800952a:	81a3      	strheq	r3, [r4, #12]
 800952c:	bf18      	it	ne
 800952e:	81a3      	strhne	r3, [r4, #12]
 8009530:	bd10      	pop	{r4, pc}

08009532 <__sclose>:
 8009532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009536:	f000 b8a1 	b.w	800967c <_close_r>

0800953a <__swbuf_r>:
 800953a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953c:	460e      	mov	r6, r1
 800953e:	4614      	mov	r4, r2
 8009540:	4605      	mov	r5, r0
 8009542:	b118      	cbz	r0, 800954c <__swbuf_r+0x12>
 8009544:	6a03      	ldr	r3, [r0, #32]
 8009546:	b90b      	cbnz	r3, 800954c <__swbuf_r+0x12>
 8009548:	f7ff ff0e 	bl	8009368 <__sinit>
 800954c:	69a3      	ldr	r3, [r4, #24]
 800954e:	60a3      	str	r3, [r4, #8]
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	071a      	lsls	r2, r3, #28
 8009554:	d501      	bpl.n	800955a <__swbuf_r+0x20>
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	b943      	cbnz	r3, 800956c <__swbuf_r+0x32>
 800955a:	4621      	mov	r1, r4
 800955c:	4628      	mov	r0, r5
 800955e:	f000 f82b 	bl	80095b8 <__swsetup_r>
 8009562:	b118      	cbz	r0, 800956c <__swbuf_r+0x32>
 8009564:	f04f 37ff 	mov.w	r7, #4294967295
 8009568:	4638      	mov	r0, r7
 800956a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	6922      	ldr	r2, [r4, #16]
 8009570:	1a98      	subs	r0, r3, r2
 8009572:	6963      	ldr	r3, [r4, #20]
 8009574:	b2f6      	uxtb	r6, r6
 8009576:	4283      	cmp	r3, r0
 8009578:	4637      	mov	r7, r6
 800957a:	dc05      	bgt.n	8009588 <__swbuf_r+0x4e>
 800957c:	4621      	mov	r1, r4
 800957e:	4628      	mov	r0, r5
 8009580:	f001 fd8e 	bl	800b0a0 <_fflush_r>
 8009584:	2800      	cmp	r0, #0
 8009586:	d1ed      	bne.n	8009564 <__swbuf_r+0x2a>
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	3b01      	subs	r3, #1
 800958c:	60a3      	str	r3, [r4, #8]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	6022      	str	r2, [r4, #0]
 8009594:	701e      	strb	r6, [r3, #0]
 8009596:	6962      	ldr	r2, [r4, #20]
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	429a      	cmp	r2, r3
 800959c:	d004      	beq.n	80095a8 <__swbuf_r+0x6e>
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	07db      	lsls	r3, r3, #31
 80095a2:	d5e1      	bpl.n	8009568 <__swbuf_r+0x2e>
 80095a4:	2e0a      	cmp	r6, #10
 80095a6:	d1df      	bne.n	8009568 <__swbuf_r+0x2e>
 80095a8:	4621      	mov	r1, r4
 80095aa:	4628      	mov	r0, r5
 80095ac:	f001 fd78 	bl	800b0a0 <_fflush_r>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d0d9      	beq.n	8009568 <__swbuf_r+0x2e>
 80095b4:	e7d6      	b.n	8009564 <__swbuf_r+0x2a>
	...

080095b8 <__swsetup_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4b29      	ldr	r3, [pc, #164]	@ (8009660 <__swsetup_r+0xa8>)
 80095bc:	4605      	mov	r5, r0
 80095be:	6818      	ldr	r0, [r3, #0]
 80095c0:	460c      	mov	r4, r1
 80095c2:	b118      	cbz	r0, 80095cc <__swsetup_r+0x14>
 80095c4:	6a03      	ldr	r3, [r0, #32]
 80095c6:	b90b      	cbnz	r3, 80095cc <__swsetup_r+0x14>
 80095c8:	f7ff fece 	bl	8009368 <__sinit>
 80095cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d0:	0719      	lsls	r1, r3, #28
 80095d2:	d422      	bmi.n	800961a <__swsetup_r+0x62>
 80095d4:	06da      	lsls	r2, r3, #27
 80095d6:	d407      	bmi.n	80095e8 <__swsetup_r+0x30>
 80095d8:	2209      	movs	r2, #9
 80095da:	602a      	str	r2, [r5, #0]
 80095dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095e0:	81a3      	strh	r3, [r4, #12]
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295
 80095e6:	e033      	b.n	8009650 <__swsetup_r+0x98>
 80095e8:	0758      	lsls	r0, r3, #29
 80095ea:	d512      	bpl.n	8009612 <__swsetup_r+0x5a>
 80095ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095ee:	b141      	cbz	r1, 8009602 <__swsetup_r+0x4a>
 80095f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095f4:	4299      	cmp	r1, r3
 80095f6:	d002      	beq.n	80095fe <__swsetup_r+0x46>
 80095f8:	4628      	mov	r0, r5
 80095fa:	f000 ff09 	bl	800a410 <_free_r>
 80095fe:	2300      	movs	r3, #0
 8009600:	6363      	str	r3, [r4, #52]	@ 0x34
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009608:	81a3      	strh	r3, [r4, #12]
 800960a:	2300      	movs	r3, #0
 800960c:	6063      	str	r3, [r4, #4]
 800960e:	6923      	ldr	r3, [r4, #16]
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	f043 0308 	orr.w	r3, r3, #8
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	b94b      	cbnz	r3, 8009632 <__swsetup_r+0x7a>
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009628:	d003      	beq.n	8009632 <__swsetup_r+0x7a>
 800962a:	4621      	mov	r1, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f001 fd85 	bl	800b13c <__smakebuf_r>
 8009632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009636:	f013 0201 	ands.w	r2, r3, #1
 800963a:	d00a      	beq.n	8009652 <__swsetup_r+0x9a>
 800963c:	2200      	movs	r2, #0
 800963e:	60a2      	str	r2, [r4, #8]
 8009640:	6962      	ldr	r2, [r4, #20]
 8009642:	4252      	negs	r2, r2
 8009644:	61a2      	str	r2, [r4, #24]
 8009646:	6922      	ldr	r2, [r4, #16]
 8009648:	b942      	cbnz	r2, 800965c <__swsetup_r+0xa4>
 800964a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800964e:	d1c5      	bne.n	80095dc <__swsetup_r+0x24>
 8009650:	bd38      	pop	{r3, r4, r5, pc}
 8009652:	0799      	lsls	r1, r3, #30
 8009654:	bf58      	it	pl
 8009656:	6962      	ldrpl	r2, [r4, #20]
 8009658:	60a2      	str	r2, [r4, #8]
 800965a:	e7f4      	b.n	8009646 <__swsetup_r+0x8e>
 800965c:	2000      	movs	r0, #0
 800965e:	e7f7      	b.n	8009650 <__swsetup_r+0x98>
 8009660:	20000084 	.word	0x20000084

08009664 <memset>:
 8009664:	4402      	add	r2, r0
 8009666:	4603      	mov	r3, r0
 8009668:	4293      	cmp	r3, r2
 800966a:	d100      	bne.n	800966e <memset+0xa>
 800966c:	4770      	bx	lr
 800966e:	f803 1b01 	strb.w	r1, [r3], #1
 8009672:	e7f9      	b.n	8009668 <memset+0x4>

08009674 <_localeconv_r>:
 8009674:	4800      	ldr	r0, [pc, #0]	@ (8009678 <_localeconv_r+0x4>)
 8009676:	4770      	bx	lr
 8009678:	200001c4 	.word	0x200001c4

0800967c <_close_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d06      	ldr	r5, [pc, #24]	@ (8009698 <_close_r+0x1c>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	f7f9 f876 	bl	8002778 <_close>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_close_r+0x1a>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_close_r+0x1a>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	200007c8 	.word	0x200007c8

0800969c <_lseek_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d07      	ldr	r5, [pc, #28]	@ (80096bc <_lseek_r+0x20>)
 80096a0:	4604      	mov	r4, r0
 80096a2:	4608      	mov	r0, r1
 80096a4:	4611      	mov	r1, r2
 80096a6:	2200      	movs	r2, #0
 80096a8:	602a      	str	r2, [r5, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	f7f9 f88b 	bl	80027c6 <_lseek>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_lseek_r+0x1e>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_lseek_r+0x1e>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	200007c8 	.word	0x200007c8

080096c0 <_read_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d07      	ldr	r5, [pc, #28]	@ (80096e0 <_read_r+0x20>)
 80096c4:	4604      	mov	r4, r0
 80096c6:	4608      	mov	r0, r1
 80096c8:	4611      	mov	r1, r2
 80096ca:	2200      	movs	r2, #0
 80096cc:	602a      	str	r2, [r5, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	f7f9 f819 	bl	8002706 <_read>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_read_r+0x1e>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_read_r+0x1e>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	200007c8 	.word	0x200007c8

080096e4 <_write_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	@ (8009704 <_write_r+0x20>)
 80096e8:	4604      	mov	r4, r0
 80096ea:	4608      	mov	r0, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	2200      	movs	r2, #0
 80096f0:	602a      	str	r2, [r5, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f7f9 f824 	bl	8002740 <_write>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_write_r+0x1e>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_write_r+0x1e>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	200007c8 	.word	0x200007c8

08009708 <__errno>:
 8009708:	4b01      	ldr	r3, [pc, #4]	@ (8009710 <__errno+0x8>)
 800970a:	6818      	ldr	r0, [r3, #0]
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20000084 	.word	0x20000084

08009714 <__libc_init_array>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4d0d      	ldr	r5, [pc, #52]	@ (800974c <__libc_init_array+0x38>)
 8009718:	4c0d      	ldr	r4, [pc, #52]	@ (8009750 <__libc_init_array+0x3c>)
 800971a:	1b64      	subs	r4, r4, r5
 800971c:	10a4      	asrs	r4, r4, #2
 800971e:	2600      	movs	r6, #0
 8009720:	42a6      	cmp	r6, r4
 8009722:	d109      	bne.n	8009738 <__libc_init_array+0x24>
 8009724:	4d0b      	ldr	r5, [pc, #44]	@ (8009754 <__libc_init_array+0x40>)
 8009726:	4c0c      	ldr	r4, [pc, #48]	@ (8009758 <__libc_init_array+0x44>)
 8009728:	f001 fe34 	bl	800b394 <_init>
 800972c:	1b64      	subs	r4, r4, r5
 800972e:	10a4      	asrs	r4, r4, #2
 8009730:	2600      	movs	r6, #0
 8009732:	42a6      	cmp	r6, r4
 8009734:	d105      	bne.n	8009742 <__libc_init_array+0x2e>
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	f855 3b04 	ldr.w	r3, [r5], #4
 800973c:	4798      	blx	r3
 800973e:	3601      	adds	r6, #1
 8009740:	e7ee      	b.n	8009720 <__libc_init_array+0xc>
 8009742:	f855 3b04 	ldr.w	r3, [r5], #4
 8009746:	4798      	blx	r3
 8009748:	3601      	adds	r6, #1
 800974a:	e7f2      	b.n	8009732 <__libc_init_array+0x1e>
 800974c:	0800be98 	.word	0x0800be98
 8009750:	0800be98 	.word	0x0800be98
 8009754:	0800be98 	.word	0x0800be98
 8009758:	0800be9c 	.word	0x0800be9c

0800975c <__retarget_lock_init_recursive>:
 800975c:	4770      	bx	lr

0800975e <__retarget_lock_acquire_recursive>:
 800975e:	4770      	bx	lr

08009760 <__retarget_lock_release_recursive>:
 8009760:	4770      	bx	lr

08009762 <strcpy>:
 8009762:	4603      	mov	r3, r0
 8009764:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009768:	f803 2b01 	strb.w	r2, [r3], #1
 800976c:	2a00      	cmp	r2, #0
 800976e:	d1f9      	bne.n	8009764 <strcpy+0x2>
 8009770:	4770      	bx	lr

08009772 <quorem>:
 8009772:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009776:	6903      	ldr	r3, [r0, #16]
 8009778:	690c      	ldr	r4, [r1, #16]
 800977a:	42a3      	cmp	r3, r4
 800977c:	4607      	mov	r7, r0
 800977e:	db7e      	blt.n	800987e <quorem+0x10c>
 8009780:	3c01      	subs	r4, #1
 8009782:	f101 0814 	add.w	r8, r1, #20
 8009786:	00a3      	lsls	r3, r4, #2
 8009788:	f100 0514 	add.w	r5, r0, #20
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009798:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800979c:	3301      	adds	r3, #1
 800979e:	429a      	cmp	r2, r3
 80097a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80097a8:	d32e      	bcc.n	8009808 <quorem+0x96>
 80097aa:	f04f 0a00 	mov.w	sl, #0
 80097ae:	46c4      	mov	ip, r8
 80097b0:	46ae      	mov	lr, r5
 80097b2:	46d3      	mov	fp, sl
 80097b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097b8:	b298      	uxth	r0, r3
 80097ba:	fb06 a000 	mla	r0, r6, r0, sl
 80097be:	0c02      	lsrs	r2, r0, #16
 80097c0:	0c1b      	lsrs	r3, r3, #16
 80097c2:	fb06 2303 	mla	r3, r6, r3, r2
 80097c6:	f8de 2000 	ldr.w	r2, [lr]
 80097ca:	b280      	uxth	r0, r0
 80097cc:	b292      	uxth	r2, r2
 80097ce:	1a12      	subs	r2, r2, r0
 80097d0:	445a      	add	r2, fp
 80097d2:	f8de 0000 	ldr.w	r0, [lr]
 80097d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097da:	b29b      	uxth	r3, r3
 80097dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80097e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80097e4:	b292      	uxth	r2, r2
 80097e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80097ea:	45e1      	cmp	r9, ip
 80097ec:	f84e 2b04 	str.w	r2, [lr], #4
 80097f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80097f4:	d2de      	bcs.n	80097b4 <quorem+0x42>
 80097f6:	9b00      	ldr	r3, [sp, #0]
 80097f8:	58eb      	ldr	r3, [r5, r3]
 80097fa:	b92b      	cbnz	r3, 8009808 <quorem+0x96>
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	3b04      	subs	r3, #4
 8009800:	429d      	cmp	r5, r3
 8009802:	461a      	mov	r2, r3
 8009804:	d32f      	bcc.n	8009866 <quorem+0xf4>
 8009806:	613c      	str	r4, [r7, #16]
 8009808:	4638      	mov	r0, r7
 800980a:	f001 f97b 	bl	800ab04 <__mcmp>
 800980e:	2800      	cmp	r0, #0
 8009810:	db25      	blt.n	800985e <quorem+0xec>
 8009812:	4629      	mov	r1, r5
 8009814:	2000      	movs	r0, #0
 8009816:	f858 2b04 	ldr.w	r2, [r8], #4
 800981a:	f8d1 c000 	ldr.w	ip, [r1]
 800981e:	fa1f fe82 	uxth.w	lr, r2
 8009822:	fa1f f38c 	uxth.w	r3, ip
 8009826:	eba3 030e 	sub.w	r3, r3, lr
 800982a:	4403      	add	r3, r0
 800982c:	0c12      	lsrs	r2, r2, #16
 800982e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009832:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009836:	b29b      	uxth	r3, r3
 8009838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800983c:	45c1      	cmp	r9, r8
 800983e:	f841 3b04 	str.w	r3, [r1], #4
 8009842:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009846:	d2e6      	bcs.n	8009816 <quorem+0xa4>
 8009848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800984c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009850:	b922      	cbnz	r2, 800985c <quorem+0xea>
 8009852:	3b04      	subs	r3, #4
 8009854:	429d      	cmp	r5, r3
 8009856:	461a      	mov	r2, r3
 8009858:	d30b      	bcc.n	8009872 <quorem+0x100>
 800985a:	613c      	str	r4, [r7, #16]
 800985c:	3601      	adds	r6, #1
 800985e:	4630      	mov	r0, r6
 8009860:	b003      	add	sp, #12
 8009862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009866:	6812      	ldr	r2, [r2, #0]
 8009868:	3b04      	subs	r3, #4
 800986a:	2a00      	cmp	r2, #0
 800986c:	d1cb      	bne.n	8009806 <quorem+0x94>
 800986e:	3c01      	subs	r4, #1
 8009870:	e7c6      	b.n	8009800 <quorem+0x8e>
 8009872:	6812      	ldr	r2, [r2, #0]
 8009874:	3b04      	subs	r3, #4
 8009876:	2a00      	cmp	r2, #0
 8009878:	d1ef      	bne.n	800985a <quorem+0xe8>
 800987a:	3c01      	subs	r4, #1
 800987c:	e7ea      	b.n	8009854 <quorem+0xe2>
 800987e:	2000      	movs	r0, #0
 8009880:	e7ee      	b.n	8009860 <quorem+0xee>
 8009882:	0000      	movs	r0, r0
 8009884:	0000      	movs	r0, r0
	...

08009888 <_dtoa_r>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	69c7      	ldr	r7, [r0, #28]
 800988e:	b099      	sub	sp, #100	@ 0x64
 8009890:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009894:	ec55 4b10 	vmov	r4, r5, d0
 8009898:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800989a:	9109      	str	r1, [sp, #36]	@ 0x24
 800989c:	4683      	mov	fp, r0
 800989e:	920e      	str	r2, [sp, #56]	@ 0x38
 80098a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098a2:	b97f      	cbnz	r7, 80098c4 <_dtoa_r+0x3c>
 80098a4:	2010      	movs	r0, #16
 80098a6:	f000 fdfd 	bl	800a4a4 <malloc>
 80098aa:	4602      	mov	r2, r0
 80098ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80098b0:	b920      	cbnz	r0, 80098bc <_dtoa_r+0x34>
 80098b2:	4ba7      	ldr	r3, [pc, #668]	@ (8009b50 <_dtoa_r+0x2c8>)
 80098b4:	21ef      	movs	r1, #239	@ 0xef
 80098b6:	48a7      	ldr	r0, [pc, #668]	@ (8009b54 <_dtoa_r+0x2cc>)
 80098b8:	f001 fcbc 	bl	800b234 <__assert_func>
 80098bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80098c0:	6007      	str	r7, [r0, #0]
 80098c2:	60c7      	str	r7, [r0, #12]
 80098c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80098c8:	6819      	ldr	r1, [r3, #0]
 80098ca:	b159      	cbz	r1, 80098e4 <_dtoa_r+0x5c>
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	604a      	str	r2, [r1, #4]
 80098d0:	2301      	movs	r3, #1
 80098d2:	4093      	lsls	r3, r2
 80098d4:	608b      	str	r3, [r1, #8]
 80098d6:	4658      	mov	r0, fp
 80098d8:	f000 feda 	bl	800a690 <_Bfree>
 80098dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	1e2b      	subs	r3, r5, #0
 80098e6:	bfb9      	ittee	lt
 80098e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80098ec:	9303      	strlt	r3, [sp, #12]
 80098ee:	2300      	movge	r3, #0
 80098f0:	6033      	strge	r3, [r6, #0]
 80098f2:	9f03      	ldr	r7, [sp, #12]
 80098f4:	4b98      	ldr	r3, [pc, #608]	@ (8009b58 <_dtoa_r+0x2d0>)
 80098f6:	bfbc      	itt	lt
 80098f8:	2201      	movlt	r2, #1
 80098fa:	6032      	strlt	r2, [r6, #0]
 80098fc:	43bb      	bics	r3, r7
 80098fe:	d112      	bne.n	8009926 <_dtoa_r+0x9e>
 8009900:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009902:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800990c:	4323      	orrs	r3, r4
 800990e:	f000 854d 	beq.w	800a3ac <_dtoa_r+0xb24>
 8009912:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009914:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009b6c <_dtoa_r+0x2e4>
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 854f 	beq.w	800a3bc <_dtoa_r+0xb34>
 800991e:	f10a 0303 	add.w	r3, sl, #3
 8009922:	f000 bd49 	b.w	800a3b8 <_dtoa_r+0xb30>
 8009926:	ed9d 7b02 	vldr	d7, [sp, #8]
 800992a:	2200      	movs	r2, #0
 800992c:	ec51 0b17 	vmov	r0, r1, d7
 8009930:	2300      	movs	r3, #0
 8009932:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009936:	f7f7 f8ef 	bl	8000b18 <__aeabi_dcmpeq>
 800993a:	4680      	mov	r8, r0
 800993c:	b158      	cbz	r0, 8009956 <_dtoa_r+0xce>
 800993e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009940:	2301      	movs	r3, #1
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009946:	b113      	cbz	r3, 800994e <_dtoa_r+0xc6>
 8009948:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800994a:	4b84      	ldr	r3, [pc, #528]	@ (8009b5c <_dtoa_r+0x2d4>)
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009b70 <_dtoa_r+0x2e8>
 8009952:	f000 bd33 	b.w	800a3bc <_dtoa_r+0xb34>
 8009956:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800995a:	aa16      	add	r2, sp, #88	@ 0x58
 800995c:	a917      	add	r1, sp, #92	@ 0x5c
 800995e:	4658      	mov	r0, fp
 8009960:	f001 f980 	bl	800ac64 <__d2b>
 8009964:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009968:	4681      	mov	r9, r0
 800996a:	2e00      	cmp	r6, #0
 800996c:	d077      	beq.n	8009a5e <_dtoa_r+0x1d6>
 800996e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009970:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800997c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009980:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009984:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009988:	4619      	mov	r1, r3
 800998a:	2200      	movs	r2, #0
 800998c:	4b74      	ldr	r3, [pc, #464]	@ (8009b60 <_dtoa_r+0x2d8>)
 800998e:	f7f6 fca3 	bl	80002d8 <__aeabi_dsub>
 8009992:	a369      	add	r3, pc, #420	@ (adr r3, 8009b38 <_dtoa_r+0x2b0>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f6 fe56 	bl	8000648 <__aeabi_dmul>
 800999c:	a368      	add	r3, pc, #416	@ (adr r3, 8009b40 <_dtoa_r+0x2b8>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f7f6 fc9b 	bl	80002dc <__adddf3>
 80099a6:	4604      	mov	r4, r0
 80099a8:	4630      	mov	r0, r6
 80099aa:	460d      	mov	r5, r1
 80099ac:	f7f6 fde2 	bl	8000574 <__aeabi_i2d>
 80099b0:	a365      	add	r3, pc, #404	@ (adr r3, 8009b48 <_dtoa_r+0x2c0>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f7f6 fe47 	bl	8000648 <__aeabi_dmul>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4620      	mov	r0, r4
 80099c0:	4629      	mov	r1, r5
 80099c2:	f7f6 fc8b 	bl	80002dc <__adddf3>
 80099c6:	4604      	mov	r4, r0
 80099c8:	460d      	mov	r5, r1
 80099ca:	f7f7 f8ed 	bl	8000ba8 <__aeabi_d2iz>
 80099ce:	2200      	movs	r2, #0
 80099d0:	4607      	mov	r7, r0
 80099d2:	2300      	movs	r3, #0
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f7 f8a8 	bl	8000b2c <__aeabi_dcmplt>
 80099dc:	b140      	cbz	r0, 80099f0 <_dtoa_r+0x168>
 80099de:	4638      	mov	r0, r7
 80099e0:	f7f6 fdc8 	bl	8000574 <__aeabi_i2d>
 80099e4:	4622      	mov	r2, r4
 80099e6:	462b      	mov	r3, r5
 80099e8:	f7f7 f896 	bl	8000b18 <__aeabi_dcmpeq>
 80099ec:	b900      	cbnz	r0, 80099f0 <_dtoa_r+0x168>
 80099ee:	3f01      	subs	r7, #1
 80099f0:	2f16      	cmp	r7, #22
 80099f2:	d851      	bhi.n	8009a98 <_dtoa_r+0x210>
 80099f4:	4b5b      	ldr	r3, [pc, #364]	@ (8009b64 <_dtoa_r+0x2dc>)
 80099f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a02:	f7f7 f893 	bl	8000b2c <__aeabi_dcmplt>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d048      	beq.n	8009a9c <_dtoa_r+0x214>
 8009a0a:	3f01      	subs	r7, #1
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a12:	1b9b      	subs	r3, r3, r6
 8009a14:	1e5a      	subs	r2, r3, #1
 8009a16:	bf44      	itt	mi
 8009a18:	f1c3 0801 	rsbmi	r8, r3, #1
 8009a1c:	2300      	movmi	r3, #0
 8009a1e:	9208      	str	r2, [sp, #32]
 8009a20:	bf54      	ite	pl
 8009a22:	f04f 0800 	movpl.w	r8, #0
 8009a26:	9308      	strmi	r3, [sp, #32]
 8009a28:	2f00      	cmp	r7, #0
 8009a2a:	db39      	blt.n	8009aa0 <_dtoa_r+0x218>
 8009a2c:	9b08      	ldr	r3, [sp, #32]
 8009a2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009a30:	443b      	add	r3, r7
 8009a32:	9308      	str	r3, [sp, #32]
 8009a34:	2300      	movs	r3, #0
 8009a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3a:	2b09      	cmp	r3, #9
 8009a3c:	d864      	bhi.n	8009b08 <_dtoa_r+0x280>
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	bfc4      	itt	gt
 8009a42:	3b04      	subgt	r3, #4
 8009a44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a48:	f1a3 0302 	sub.w	r3, r3, #2
 8009a4c:	bfcc      	ite	gt
 8009a4e:	2400      	movgt	r4, #0
 8009a50:	2401      	movle	r4, #1
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d863      	bhi.n	8009b1e <_dtoa_r+0x296>
 8009a56:	e8df f003 	tbb	[pc, r3]
 8009a5a:	372a      	.short	0x372a
 8009a5c:	5535      	.short	0x5535
 8009a5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009a62:	441e      	add	r6, r3
 8009a64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a68:	2b20      	cmp	r3, #32
 8009a6a:	bfc1      	itttt	gt
 8009a6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a70:	409f      	lslgt	r7, r3
 8009a72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a7a:	bfd6      	itet	le
 8009a7c:	f1c3 0320 	rsble	r3, r3, #32
 8009a80:	ea47 0003 	orrgt.w	r0, r7, r3
 8009a84:	fa04 f003 	lslle.w	r0, r4, r3
 8009a88:	f7f6 fd64 	bl	8000554 <__aeabi_ui2d>
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a92:	3e01      	subs	r6, #1
 8009a94:	9214      	str	r2, [sp, #80]	@ 0x50
 8009a96:	e777      	b.n	8009988 <_dtoa_r+0x100>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e7b8      	b.n	8009a0e <_dtoa_r+0x186>
 8009a9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009a9e:	e7b7      	b.n	8009a10 <_dtoa_r+0x188>
 8009aa0:	427b      	negs	r3, r7
 8009aa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	eba8 0807 	sub.w	r8, r8, r7
 8009aaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aac:	e7c4      	b.n	8009a38 <_dtoa_r+0x1b0>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	dc35      	bgt.n	8009b24 <_dtoa_r+0x29c>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	9307      	str	r3, [sp, #28]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ac2:	e00b      	b.n	8009adc <_dtoa_r+0x254>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e7f3      	b.n	8009ab0 <_dtoa_r+0x228>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ace:	18fb      	adds	r3, r7, r3
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	9307      	str	r3, [sp, #28]
 8009ad8:	bfb8      	it	lt
 8009ada:	2301      	movlt	r3, #1
 8009adc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	2204      	movs	r2, #4
 8009ae4:	f102 0514 	add.w	r5, r2, #20
 8009ae8:	429d      	cmp	r5, r3
 8009aea:	d91f      	bls.n	8009b2c <_dtoa_r+0x2a4>
 8009aec:	6041      	str	r1, [r0, #4]
 8009aee:	4658      	mov	r0, fp
 8009af0:	f000 fd8e 	bl	800a610 <_Balloc>
 8009af4:	4682      	mov	sl, r0
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d13c      	bne.n	8009b74 <_dtoa_r+0x2ec>
 8009afa:	4b1b      	ldr	r3, [pc, #108]	@ (8009b68 <_dtoa_r+0x2e0>)
 8009afc:	4602      	mov	r2, r0
 8009afe:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b02:	e6d8      	b.n	80098b6 <_dtoa_r+0x2e>
 8009b04:	2301      	movs	r3, #1
 8009b06:	e7e0      	b.n	8009aca <_dtoa_r+0x242>
 8009b08:	2401      	movs	r4, #1
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b10:	f04f 33ff 	mov.w	r3, #4294967295
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	9307      	str	r3, [sp, #28]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2312      	movs	r3, #18
 8009b1c:	e7d0      	b.n	8009ac0 <_dtoa_r+0x238>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b22:	e7f5      	b.n	8009b10 <_dtoa_r+0x288>
 8009b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	9307      	str	r3, [sp, #28]
 8009b2a:	e7d7      	b.n	8009adc <_dtoa_r+0x254>
 8009b2c:	3101      	adds	r1, #1
 8009b2e:	0052      	lsls	r2, r2, #1
 8009b30:	e7d8      	b.n	8009ae4 <_dtoa_r+0x25c>
 8009b32:	bf00      	nop
 8009b34:	f3af 8000 	nop.w
 8009b38:	636f4361 	.word	0x636f4361
 8009b3c:	3fd287a7 	.word	0x3fd287a7
 8009b40:	8b60c8b3 	.word	0x8b60c8b3
 8009b44:	3fc68a28 	.word	0x3fc68a28
 8009b48:	509f79fb 	.word	0x509f79fb
 8009b4c:	3fd34413 	.word	0x3fd34413
 8009b50:	0800bc62 	.word	0x0800bc62
 8009b54:	0800bc79 	.word	0x0800bc79
 8009b58:	7ff00000 	.word	0x7ff00000
 8009b5c:	0800bc32 	.word	0x0800bc32
 8009b60:	3ff80000 	.word	0x3ff80000
 8009b64:	0800bd70 	.word	0x0800bd70
 8009b68:	0800bcd1 	.word	0x0800bcd1
 8009b6c:	0800bc5e 	.word	0x0800bc5e
 8009b70:	0800bc31 	.word	0x0800bc31
 8009b74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b78:	6018      	str	r0, [r3, #0]
 8009b7a:	9b07      	ldr	r3, [sp, #28]
 8009b7c:	2b0e      	cmp	r3, #14
 8009b7e:	f200 80a4 	bhi.w	8009cca <_dtoa_r+0x442>
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	f000 80a1 	beq.w	8009cca <_dtoa_r+0x442>
 8009b88:	2f00      	cmp	r7, #0
 8009b8a:	dd33      	ble.n	8009bf4 <_dtoa_r+0x36c>
 8009b8c:	4bad      	ldr	r3, [pc, #692]	@ (8009e44 <_dtoa_r+0x5bc>)
 8009b8e:	f007 020f 	and.w	r2, r7, #15
 8009b92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b96:	ed93 7b00 	vldr	d7, [r3]
 8009b9a:	05f8      	lsls	r0, r7, #23
 8009b9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ba0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ba4:	d516      	bpl.n	8009bd4 <_dtoa_r+0x34c>
 8009ba6:	4ba8      	ldr	r3, [pc, #672]	@ (8009e48 <_dtoa_r+0x5c0>)
 8009ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bb0:	f7f6 fe74 	bl	800089c <__aeabi_ddiv>
 8009bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bb8:	f004 040f 	and.w	r4, r4, #15
 8009bbc:	2603      	movs	r6, #3
 8009bbe:	4da2      	ldr	r5, [pc, #648]	@ (8009e48 <_dtoa_r+0x5c0>)
 8009bc0:	b954      	cbnz	r4, 8009bd8 <_dtoa_r+0x350>
 8009bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bca:	f7f6 fe67 	bl	800089c <__aeabi_ddiv>
 8009bce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bd2:	e028      	b.n	8009c26 <_dtoa_r+0x39e>
 8009bd4:	2602      	movs	r6, #2
 8009bd6:	e7f2      	b.n	8009bbe <_dtoa_r+0x336>
 8009bd8:	07e1      	lsls	r1, r4, #31
 8009bda:	d508      	bpl.n	8009bee <_dtoa_r+0x366>
 8009bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009be0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009be4:	f7f6 fd30 	bl	8000648 <__aeabi_dmul>
 8009be8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bec:	3601      	adds	r6, #1
 8009bee:	1064      	asrs	r4, r4, #1
 8009bf0:	3508      	adds	r5, #8
 8009bf2:	e7e5      	b.n	8009bc0 <_dtoa_r+0x338>
 8009bf4:	f000 80d2 	beq.w	8009d9c <_dtoa_r+0x514>
 8009bf8:	427c      	negs	r4, r7
 8009bfa:	4b92      	ldr	r3, [pc, #584]	@ (8009e44 <_dtoa_r+0x5bc>)
 8009bfc:	4d92      	ldr	r5, [pc, #584]	@ (8009e48 <_dtoa_r+0x5c0>)
 8009bfe:	f004 020f 	and.w	r2, r4, #15
 8009c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c0e:	f7f6 fd1b 	bl	8000648 <__aeabi_dmul>
 8009c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c16:	1124      	asrs	r4, r4, #4
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2602      	movs	r6, #2
 8009c1c:	2c00      	cmp	r4, #0
 8009c1e:	f040 80b2 	bne.w	8009d86 <_dtoa_r+0x4fe>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1d3      	bne.n	8009bce <_dtoa_r+0x346>
 8009c26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 80b7 	beq.w	8009da0 <_dtoa_r+0x518>
 8009c32:	4b86      	ldr	r3, [pc, #536]	@ (8009e4c <_dtoa_r+0x5c4>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	4620      	mov	r0, r4
 8009c38:	4629      	mov	r1, r5
 8009c3a:	f7f6 ff77 	bl	8000b2c <__aeabi_dcmplt>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f000 80ae 	beq.w	8009da0 <_dtoa_r+0x518>
 8009c44:	9b07      	ldr	r3, [sp, #28]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80aa 	beq.w	8009da0 <_dtoa_r+0x518>
 8009c4c:	9b00      	ldr	r3, [sp, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	dd37      	ble.n	8009cc2 <_dtoa_r+0x43a>
 8009c52:	1e7b      	subs	r3, r7, #1
 8009c54:	9304      	str	r3, [sp, #16]
 8009c56:	4620      	mov	r0, r4
 8009c58:	4b7d      	ldr	r3, [pc, #500]	@ (8009e50 <_dtoa_r+0x5c8>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7f6 fcf3 	bl	8000648 <__aeabi_dmul>
 8009c62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c66:	9c00      	ldr	r4, [sp, #0]
 8009c68:	3601      	adds	r6, #1
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7f6 fc82 	bl	8000574 <__aeabi_i2d>
 8009c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c74:	f7f6 fce8 	bl	8000648 <__aeabi_dmul>
 8009c78:	4b76      	ldr	r3, [pc, #472]	@ (8009e54 <_dtoa_r+0x5cc>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f7f6 fb2e 	bl	80002dc <__adddf3>
 8009c80:	4605      	mov	r5, r0
 8009c82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c86:	2c00      	cmp	r4, #0
 8009c88:	f040 808d 	bne.w	8009da6 <_dtoa_r+0x51e>
 8009c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c90:	4b71      	ldr	r3, [pc, #452]	@ (8009e58 <_dtoa_r+0x5d0>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	f7f6 fb20 	bl	80002d8 <__aeabi_dsub>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ca0:	462a      	mov	r2, r5
 8009ca2:	4633      	mov	r3, r6
 8009ca4:	f7f6 ff60 	bl	8000b68 <__aeabi_dcmpgt>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f040 828b 	bne.w	800a1c4 <_dtoa_r+0x93c>
 8009cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cb2:	462a      	mov	r2, r5
 8009cb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009cb8:	f7f6 ff38 	bl	8000b2c <__aeabi_dcmplt>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	f040 8128 	bne.w	8009f12 <_dtoa_r+0x68a>
 8009cc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009cc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009cca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f2c0 815a 	blt.w	8009f86 <_dtoa_r+0x6fe>
 8009cd2:	2f0e      	cmp	r7, #14
 8009cd4:	f300 8157 	bgt.w	8009f86 <_dtoa_r+0x6fe>
 8009cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8009e44 <_dtoa_r+0x5bc>)
 8009cda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cde:	ed93 7b00 	vldr	d7, [r3]
 8009ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	ed8d 7b00 	vstr	d7, [sp]
 8009cea:	da03      	bge.n	8009cf4 <_dtoa_r+0x46c>
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f340 8101 	ble.w	8009ef6 <_dtoa_r+0x66e>
 8009cf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009cf8:	4656      	mov	r6, sl
 8009cfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cfe:	4620      	mov	r0, r4
 8009d00:	4629      	mov	r1, r5
 8009d02:	f7f6 fdcb 	bl	800089c <__aeabi_ddiv>
 8009d06:	f7f6 ff4f 	bl	8000ba8 <__aeabi_d2iz>
 8009d0a:	4680      	mov	r8, r0
 8009d0c:	f7f6 fc32 	bl	8000574 <__aeabi_i2d>
 8009d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d14:	f7f6 fc98 	bl	8000648 <__aeabi_dmul>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	4629      	mov	r1, r5
 8009d20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009d24:	f7f6 fad8 	bl	80002d8 <__aeabi_dsub>
 8009d28:	f806 4b01 	strb.w	r4, [r6], #1
 8009d2c:	9d07      	ldr	r5, [sp, #28]
 8009d2e:	eba6 040a 	sub.w	r4, r6, sl
 8009d32:	42a5      	cmp	r5, r4
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	f040 8117 	bne.w	8009f6a <_dtoa_r+0x6e2>
 8009d3c:	f7f6 face 	bl	80002dc <__adddf3>
 8009d40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	f7f6 ff0e 	bl	8000b68 <__aeabi_dcmpgt>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	f040 80f9 	bne.w	8009f44 <_dtoa_r+0x6bc>
 8009d52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fedd 	bl	8000b18 <__aeabi_dcmpeq>
 8009d5e:	b118      	cbz	r0, 8009d68 <_dtoa_r+0x4e0>
 8009d60:	f018 0f01 	tst.w	r8, #1
 8009d64:	f040 80ee 	bne.w	8009f44 <_dtoa_r+0x6bc>
 8009d68:	4649      	mov	r1, r9
 8009d6a:	4658      	mov	r0, fp
 8009d6c:	f000 fc90 	bl	800a690 <_Bfree>
 8009d70:	2300      	movs	r3, #0
 8009d72:	7033      	strb	r3, [r6, #0]
 8009d74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d76:	3701      	adds	r7, #1
 8009d78:	601f      	str	r7, [r3, #0]
 8009d7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 831d 	beq.w	800a3bc <_dtoa_r+0xb34>
 8009d82:	601e      	str	r6, [r3, #0]
 8009d84:	e31a      	b.n	800a3bc <_dtoa_r+0xb34>
 8009d86:	07e2      	lsls	r2, r4, #31
 8009d88:	d505      	bpl.n	8009d96 <_dtoa_r+0x50e>
 8009d8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d8e:	f7f6 fc5b 	bl	8000648 <__aeabi_dmul>
 8009d92:	3601      	adds	r6, #1
 8009d94:	2301      	movs	r3, #1
 8009d96:	1064      	asrs	r4, r4, #1
 8009d98:	3508      	adds	r5, #8
 8009d9a:	e73f      	b.n	8009c1c <_dtoa_r+0x394>
 8009d9c:	2602      	movs	r6, #2
 8009d9e:	e742      	b.n	8009c26 <_dtoa_r+0x39e>
 8009da0:	9c07      	ldr	r4, [sp, #28]
 8009da2:	9704      	str	r7, [sp, #16]
 8009da4:	e761      	b.n	8009c6a <_dtoa_r+0x3e2>
 8009da6:	4b27      	ldr	r3, [pc, #156]	@ (8009e44 <_dtoa_r+0x5bc>)
 8009da8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009daa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009db2:	4454      	add	r4, sl
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d053      	beq.n	8009e60 <_dtoa_r+0x5d8>
 8009db8:	4928      	ldr	r1, [pc, #160]	@ (8009e5c <_dtoa_r+0x5d4>)
 8009dba:	2000      	movs	r0, #0
 8009dbc:	f7f6 fd6e 	bl	800089c <__aeabi_ddiv>
 8009dc0:	4633      	mov	r3, r6
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	f7f6 fa88 	bl	80002d8 <__aeabi_dsub>
 8009dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009dcc:	4656      	mov	r6, sl
 8009dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dd2:	f7f6 fee9 	bl	8000ba8 <__aeabi_d2iz>
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	f7f6 fbcc 	bl	8000574 <__aeabi_i2d>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009de4:	f7f6 fa78 	bl	80002d8 <__aeabi_dsub>
 8009de8:	3530      	adds	r5, #48	@ 0x30
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009df2:	f806 5b01 	strb.w	r5, [r6], #1
 8009df6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009dfa:	f7f6 fe97 	bl	8000b2c <__aeabi_dcmplt>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d171      	bne.n	8009ee6 <_dtoa_r+0x65e>
 8009e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e06:	4911      	ldr	r1, [pc, #68]	@ (8009e4c <_dtoa_r+0x5c4>)
 8009e08:	2000      	movs	r0, #0
 8009e0a:	f7f6 fa65 	bl	80002d8 <__aeabi_dsub>
 8009e0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e12:	f7f6 fe8b 	bl	8000b2c <__aeabi_dcmplt>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f040 8095 	bne.w	8009f46 <_dtoa_r+0x6be>
 8009e1c:	42a6      	cmp	r6, r4
 8009e1e:	f43f af50 	beq.w	8009cc2 <_dtoa_r+0x43a>
 8009e22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e26:	4b0a      	ldr	r3, [pc, #40]	@ (8009e50 <_dtoa_r+0x5c8>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f7f6 fc0d 	bl	8000648 <__aeabi_dmul>
 8009e2e:	4b08      	ldr	r3, [pc, #32]	@ (8009e50 <_dtoa_r+0x5c8>)
 8009e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e34:	2200      	movs	r2, #0
 8009e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e3a:	f7f6 fc05 	bl	8000648 <__aeabi_dmul>
 8009e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e42:	e7c4      	b.n	8009dce <_dtoa_r+0x546>
 8009e44:	0800bd70 	.word	0x0800bd70
 8009e48:	0800bd48 	.word	0x0800bd48
 8009e4c:	3ff00000 	.word	0x3ff00000
 8009e50:	40240000 	.word	0x40240000
 8009e54:	401c0000 	.word	0x401c0000
 8009e58:	40140000 	.word	0x40140000
 8009e5c:	3fe00000 	.word	0x3fe00000
 8009e60:	4631      	mov	r1, r6
 8009e62:	4628      	mov	r0, r5
 8009e64:	f7f6 fbf0 	bl	8000648 <__aeabi_dmul>
 8009e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e6c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009e6e:	4656      	mov	r6, sl
 8009e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e74:	f7f6 fe98 	bl	8000ba8 <__aeabi_d2iz>
 8009e78:	4605      	mov	r5, r0
 8009e7a:	f7f6 fb7b 	bl	8000574 <__aeabi_i2d>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e86:	f7f6 fa27 	bl	80002d8 <__aeabi_dsub>
 8009e8a:	3530      	adds	r5, #48	@ 0x30
 8009e8c:	f806 5b01 	strb.w	r5, [r6], #1
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	42a6      	cmp	r6, r4
 8009e96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	d124      	bne.n	8009eea <_dtoa_r+0x662>
 8009ea0:	4bac      	ldr	r3, [pc, #688]	@ (800a154 <_dtoa_r+0x8cc>)
 8009ea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ea6:	f7f6 fa19 	bl	80002dc <__adddf3>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eb2:	f7f6 fe59 	bl	8000b68 <__aeabi_dcmpgt>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d145      	bne.n	8009f46 <_dtoa_r+0x6be>
 8009eba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ebe:	49a5      	ldr	r1, [pc, #660]	@ (800a154 <_dtoa_r+0x8cc>)
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	f7f6 fa09 	bl	80002d8 <__aeabi_dsub>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ece:	f7f6 fe2d 	bl	8000b2c <__aeabi_dcmplt>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f43f aef5 	beq.w	8009cc2 <_dtoa_r+0x43a>
 8009ed8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009eda:	1e73      	subs	r3, r6, #1
 8009edc:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ede:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ee2:	2b30      	cmp	r3, #48	@ 0x30
 8009ee4:	d0f8      	beq.n	8009ed8 <_dtoa_r+0x650>
 8009ee6:	9f04      	ldr	r7, [sp, #16]
 8009ee8:	e73e      	b.n	8009d68 <_dtoa_r+0x4e0>
 8009eea:	4b9b      	ldr	r3, [pc, #620]	@ (800a158 <_dtoa_r+0x8d0>)
 8009eec:	f7f6 fbac 	bl	8000648 <__aeabi_dmul>
 8009ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef4:	e7bc      	b.n	8009e70 <_dtoa_r+0x5e8>
 8009ef6:	d10c      	bne.n	8009f12 <_dtoa_r+0x68a>
 8009ef8:	4b98      	ldr	r3, [pc, #608]	@ (800a15c <_dtoa_r+0x8d4>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f00:	f7f6 fba2 	bl	8000648 <__aeabi_dmul>
 8009f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f08:	f7f6 fe24 	bl	8000b54 <__aeabi_dcmpge>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f000 8157 	beq.w	800a1c0 <_dtoa_r+0x938>
 8009f12:	2400      	movs	r4, #0
 8009f14:	4625      	mov	r5, r4
 8009f16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f18:	43db      	mvns	r3, r3
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	4656      	mov	r6, sl
 8009f1e:	2700      	movs	r7, #0
 8009f20:	4621      	mov	r1, r4
 8009f22:	4658      	mov	r0, fp
 8009f24:	f000 fbb4 	bl	800a690 <_Bfree>
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	d0dc      	beq.n	8009ee6 <_dtoa_r+0x65e>
 8009f2c:	b12f      	cbz	r7, 8009f3a <_dtoa_r+0x6b2>
 8009f2e:	42af      	cmp	r7, r5
 8009f30:	d003      	beq.n	8009f3a <_dtoa_r+0x6b2>
 8009f32:	4639      	mov	r1, r7
 8009f34:	4658      	mov	r0, fp
 8009f36:	f000 fbab 	bl	800a690 <_Bfree>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4658      	mov	r0, fp
 8009f3e:	f000 fba7 	bl	800a690 <_Bfree>
 8009f42:	e7d0      	b.n	8009ee6 <_dtoa_r+0x65e>
 8009f44:	9704      	str	r7, [sp, #16]
 8009f46:	4633      	mov	r3, r6
 8009f48:	461e      	mov	r6, r3
 8009f4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f4e:	2a39      	cmp	r2, #57	@ 0x39
 8009f50:	d107      	bne.n	8009f62 <_dtoa_r+0x6da>
 8009f52:	459a      	cmp	sl, r3
 8009f54:	d1f8      	bne.n	8009f48 <_dtoa_r+0x6c0>
 8009f56:	9a04      	ldr	r2, [sp, #16]
 8009f58:	3201      	adds	r2, #1
 8009f5a:	9204      	str	r2, [sp, #16]
 8009f5c:	2230      	movs	r2, #48	@ 0x30
 8009f5e:	f88a 2000 	strb.w	r2, [sl]
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	3201      	adds	r2, #1
 8009f66:	701a      	strb	r2, [r3, #0]
 8009f68:	e7bd      	b.n	8009ee6 <_dtoa_r+0x65e>
 8009f6a:	4b7b      	ldr	r3, [pc, #492]	@ (800a158 <_dtoa_r+0x8d0>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f7f6 fb6b 	bl	8000648 <__aeabi_dmul>
 8009f72:	2200      	movs	r2, #0
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	460d      	mov	r5, r1
 8009f7a:	f7f6 fdcd 	bl	8000b18 <__aeabi_dcmpeq>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f43f aebb 	beq.w	8009cfa <_dtoa_r+0x472>
 8009f84:	e6f0      	b.n	8009d68 <_dtoa_r+0x4e0>
 8009f86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f88:	2a00      	cmp	r2, #0
 8009f8a:	f000 80db 	beq.w	800a144 <_dtoa_r+0x8bc>
 8009f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f90:	2a01      	cmp	r2, #1
 8009f92:	f300 80bf 	bgt.w	800a114 <_dtoa_r+0x88c>
 8009f96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	f000 80b7 	beq.w	800a10c <_dtoa_r+0x884>
 8009f9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009fa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fa4:	4646      	mov	r6, r8
 8009fa6:	9a08      	ldr	r2, [sp, #32]
 8009fa8:	2101      	movs	r1, #1
 8009faa:	441a      	add	r2, r3
 8009fac:	4658      	mov	r0, fp
 8009fae:	4498      	add	r8, r3
 8009fb0:	9208      	str	r2, [sp, #32]
 8009fb2:	f000 fc21 	bl	800a7f8 <__i2b>
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	b15e      	cbz	r6, 8009fd2 <_dtoa_r+0x74a>
 8009fba:	9b08      	ldr	r3, [sp, #32]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	dd08      	ble.n	8009fd2 <_dtoa_r+0x74a>
 8009fc0:	42b3      	cmp	r3, r6
 8009fc2:	9a08      	ldr	r2, [sp, #32]
 8009fc4:	bfa8      	it	ge
 8009fc6:	4633      	movge	r3, r6
 8009fc8:	eba8 0803 	sub.w	r8, r8, r3
 8009fcc:	1af6      	subs	r6, r6, r3
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	9308      	str	r3, [sp, #32]
 8009fd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fd4:	b1f3      	cbz	r3, 800a014 <_dtoa_r+0x78c>
 8009fd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80b7 	beq.w	800a14c <_dtoa_r+0x8c4>
 8009fde:	b18c      	cbz	r4, 800a004 <_dtoa_r+0x77c>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	4658      	mov	r0, fp
 8009fe6:	f000 fcc7 	bl	800a978 <__pow5mult>
 8009fea:	464a      	mov	r2, r9
 8009fec:	4601      	mov	r1, r0
 8009fee:	4605      	mov	r5, r0
 8009ff0:	4658      	mov	r0, fp
 8009ff2:	f000 fc17 	bl	800a824 <__multiply>
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	9004      	str	r0, [sp, #16]
 8009ffa:	4658      	mov	r0, fp
 8009ffc:	f000 fb48 	bl	800a690 <_Bfree>
 800a000:	9b04      	ldr	r3, [sp, #16]
 800a002:	4699      	mov	r9, r3
 800a004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a006:	1b1a      	subs	r2, r3, r4
 800a008:	d004      	beq.n	800a014 <_dtoa_r+0x78c>
 800a00a:	4649      	mov	r1, r9
 800a00c:	4658      	mov	r0, fp
 800a00e:	f000 fcb3 	bl	800a978 <__pow5mult>
 800a012:	4681      	mov	r9, r0
 800a014:	2101      	movs	r1, #1
 800a016:	4658      	mov	r0, fp
 800a018:	f000 fbee 	bl	800a7f8 <__i2b>
 800a01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a01e:	4604      	mov	r4, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 81cf 	beq.w	800a3c4 <_dtoa_r+0xb3c>
 800a026:	461a      	mov	r2, r3
 800a028:	4601      	mov	r1, r0
 800a02a:	4658      	mov	r0, fp
 800a02c:	f000 fca4 	bl	800a978 <__pow5mult>
 800a030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a032:	2b01      	cmp	r3, #1
 800a034:	4604      	mov	r4, r0
 800a036:	f300 8095 	bgt.w	800a164 <_dtoa_r+0x8dc>
 800a03a:	9b02      	ldr	r3, [sp, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f040 8087 	bne.w	800a150 <_dtoa_r+0x8c8>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f040 8089 	bne.w	800a160 <_dtoa_r+0x8d8>
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a054:	0d1b      	lsrs	r3, r3, #20
 800a056:	051b      	lsls	r3, r3, #20
 800a058:	b12b      	cbz	r3, 800a066 <_dtoa_r+0x7de>
 800a05a:	9b08      	ldr	r3, [sp, #32]
 800a05c:	3301      	adds	r3, #1
 800a05e:	9308      	str	r3, [sp, #32]
 800a060:	f108 0801 	add.w	r8, r8, #1
 800a064:	2301      	movs	r3, #1
 800a066:	930a      	str	r3, [sp, #40]	@ 0x28
 800a068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 81b0 	beq.w	800a3d0 <_dtoa_r+0xb48>
 800a070:	6923      	ldr	r3, [r4, #16]
 800a072:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a076:	6918      	ldr	r0, [r3, #16]
 800a078:	f000 fb72 	bl	800a760 <__hi0bits>
 800a07c:	f1c0 0020 	rsb	r0, r0, #32
 800a080:	9b08      	ldr	r3, [sp, #32]
 800a082:	4418      	add	r0, r3
 800a084:	f010 001f 	ands.w	r0, r0, #31
 800a088:	d077      	beq.n	800a17a <_dtoa_r+0x8f2>
 800a08a:	f1c0 0320 	rsb	r3, r0, #32
 800a08e:	2b04      	cmp	r3, #4
 800a090:	dd6b      	ble.n	800a16a <_dtoa_r+0x8e2>
 800a092:	9b08      	ldr	r3, [sp, #32]
 800a094:	f1c0 001c 	rsb	r0, r0, #28
 800a098:	4403      	add	r3, r0
 800a09a:	4480      	add	r8, r0
 800a09c:	4406      	add	r6, r0
 800a09e:	9308      	str	r3, [sp, #32]
 800a0a0:	f1b8 0f00 	cmp.w	r8, #0
 800a0a4:	dd05      	ble.n	800a0b2 <_dtoa_r+0x82a>
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	4642      	mov	r2, r8
 800a0aa:	4658      	mov	r0, fp
 800a0ac:	f000 fcbe 	bl	800aa2c <__lshift>
 800a0b0:	4681      	mov	r9, r0
 800a0b2:	9b08      	ldr	r3, [sp, #32]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dd05      	ble.n	800a0c4 <_dtoa_r+0x83c>
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4658      	mov	r0, fp
 800a0be:	f000 fcb5 	bl	800aa2c <__lshift>
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d059      	beq.n	800a17e <_dtoa_r+0x8f6>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4648      	mov	r0, r9
 800a0ce:	f000 fd19 	bl	800ab04 <__mcmp>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	da53      	bge.n	800a17e <_dtoa_r+0x8f6>
 800a0d6:	1e7b      	subs	r3, r7, #1
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	4649      	mov	r1, r9
 800a0dc:	2300      	movs	r3, #0
 800a0de:	220a      	movs	r2, #10
 800a0e0:	4658      	mov	r0, fp
 800a0e2:	f000 faf7 	bl	800a6d4 <__multadd>
 800a0e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0e8:	4681      	mov	r9, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 8172 	beq.w	800a3d4 <_dtoa_r+0xb4c>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	4658      	mov	r0, fp
 800a0f8:	f000 faec 	bl	800a6d4 <__multadd>
 800a0fc:	9b00      	ldr	r3, [sp, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	4605      	mov	r5, r0
 800a102:	dc67      	bgt.n	800a1d4 <_dtoa_r+0x94c>
 800a104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a106:	2b02      	cmp	r3, #2
 800a108:	dc41      	bgt.n	800a18e <_dtoa_r+0x906>
 800a10a:	e063      	b.n	800a1d4 <_dtoa_r+0x94c>
 800a10c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a10e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a112:	e746      	b.n	8009fa2 <_dtoa_r+0x71a>
 800a114:	9b07      	ldr	r3, [sp, #28]
 800a116:	1e5c      	subs	r4, r3, #1
 800a118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11a:	42a3      	cmp	r3, r4
 800a11c:	bfbf      	itttt	lt
 800a11e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a120:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a122:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a124:	1ae3      	sublt	r3, r4, r3
 800a126:	bfb4      	ite	lt
 800a128:	18d2      	addlt	r2, r2, r3
 800a12a:	1b1c      	subge	r4, r3, r4
 800a12c:	9b07      	ldr	r3, [sp, #28]
 800a12e:	bfbc      	itt	lt
 800a130:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a132:	2400      	movlt	r4, #0
 800a134:	2b00      	cmp	r3, #0
 800a136:	bfb5      	itete	lt
 800a138:	eba8 0603 	sublt.w	r6, r8, r3
 800a13c:	9b07      	ldrge	r3, [sp, #28]
 800a13e:	2300      	movlt	r3, #0
 800a140:	4646      	movge	r6, r8
 800a142:	e730      	b.n	8009fa6 <_dtoa_r+0x71e>
 800a144:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a146:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a148:	4646      	mov	r6, r8
 800a14a:	e735      	b.n	8009fb8 <_dtoa_r+0x730>
 800a14c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a14e:	e75c      	b.n	800a00a <_dtoa_r+0x782>
 800a150:	2300      	movs	r3, #0
 800a152:	e788      	b.n	800a066 <_dtoa_r+0x7de>
 800a154:	3fe00000 	.word	0x3fe00000
 800a158:	40240000 	.word	0x40240000
 800a15c:	40140000 	.word	0x40140000
 800a160:	9b02      	ldr	r3, [sp, #8]
 800a162:	e780      	b.n	800a066 <_dtoa_r+0x7de>
 800a164:	2300      	movs	r3, #0
 800a166:	930a      	str	r3, [sp, #40]	@ 0x28
 800a168:	e782      	b.n	800a070 <_dtoa_r+0x7e8>
 800a16a:	d099      	beq.n	800a0a0 <_dtoa_r+0x818>
 800a16c:	9a08      	ldr	r2, [sp, #32]
 800a16e:	331c      	adds	r3, #28
 800a170:	441a      	add	r2, r3
 800a172:	4498      	add	r8, r3
 800a174:	441e      	add	r6, r3
 800a176:	9208      	str	r2, [sp, #32]
 800a178:	e792      	b.n	800a0a0 <_dtoa_r+0x818>
 800a17a:	4603      	mov	r3, r0
 800a17c:	e7f6      	b.n	800a16c <_dtoa_r+0x8e4>
 800a17e:	9b07      	ldr	r3, [sp, #28]
 800a180:	9704      	str	r7, [sp, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	dc20      	bgt.n	800a1c8 <_dtoa_r+0x940>
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	dd1e      	ble.n	800a1cc <_dtoa_r+0x944>
 800a18e:	9b00      	ldr	r3, [sp, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	f47f aec0 	bne.w	8009f16 <_dtoa_r+0x68e>
 800a196:	4621      	mov	r1, r4
 800a198:	2205      	movs	r2, #5
 800a19a:	4658      	mov	r0, fp
 800a19c:	f000 fa9a 	bl	800a6d4 <__multadd>
 800a1a0:	4601      	mov	r1, r0
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4648      	mov	r0, r9
 800a1a6:	f000 fcad 	bl	800ab04 <__mcmp>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	f77f aeb3 	ble.w	8009f16 <_dtoa_r+0x68e>
 800a1b0:	4656      	mov	r6, sl
 800a1b2:	2331      	movs	r3, #49	@ 0x31
 800a1b4:	f806 3b01 	strb.w	r3, [r6], #1
 800a1b8:	9b04      	ldr	r3, [sp, #16]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	9304      	str	r3, [sp, #16]
 800a1be:	e6ae      	b.n	8009f1e <_dtoa_r+0x696>
 800a1c0:	9c07      	ldr	r4, [sp, #28]
 800a1c2:	9704      	str	r7, [sp, #16]
 800a1c4:	4625      	mov	r5, r4
 800a1c6:	e7f3      	b.n	800a1b0 <_dtoa_r+0x928>
 800a1c8:	9b07      	ldr	r3, [sp, #28]
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 8104 	beq.w	800a3dc <_dtoa_r+0xb54>
 800a1d4:	2e00      	cmp	r6, #0
 800a1d6:	dd05      	ble.n	800a1e4 <_dtoa_r+0x95c>
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4632      	mov	r2, r6
 800a1dc:	4658      	mov	r0, fp
 800a1de:	f000 fc25 	bl	800aa2c <__lshift>
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d05a      	beq.n	800a2a0 <_dtoa_r+0xa18>
 800a1ea:	6869      	ldr	r1, [r5, #4]
 800a1ec:	4658      	mov	r0, fp
 800a1ee:	f000 fa0f 	bl	800a610 <_Balloc>
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	b928      	cbnz	r0, 800a202 <_dtoa_r+0x97a>
 800a1f6:	4b84      	ldr	r3, [pc, #528]	@ (800a408 <_dtoa_r+0xb80>)
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a1fe:	f7ff bb5a 	b.w	80098b6 <_dtoa_r+0x2e>
 800a202:	692a      	ldr	r2, [r5, #16]
 800a204:	3202      	adds	r2, #2
 800a206:	0092      	lsls	r2, r2, #2
 800a208:	f105 010c 	add.w	r1, r5, #12
 800a20c:	300c      	adds	r0, #12
 800a20e:	f001 f803 	bl	800b218 <memcpy>
 800a212:	2201      	movs	r2, #1
 800a214:	4631      	mov	r1, r6
 800a216:	4658      	mov	r0, fp
 800a218:	f000 fc08 	bl	800aa2c <__lshift>
 800a21c:	f10a 0301 	add.w	r3, sl, #1
 800a220:	9307      	str	r3, [sp, #28]
 800a222:	9b00      	ldr	r3, [sp, #0]
 800a224:	4453      	add	r3, sl
 800a226:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a228:	9b02      	ldr	r3, [sp, #8]
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	462f      	mov	r7, r5
 800a230:	930a      	str	r3, [sp, #40]	@ 0x28
 800a232:	4605      	mov	r5, r0
 800a234:	9b07      	ldr	r3, [sp, #28]
 800a236:	4621      	mov	r1, r4
 800a238:	3b01      	subs	r3, #1
 800a23a:	4648      	mov	r0, r9
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	f7ff fa98 	bl	8009772 <quorem>
 800a242:	4639      	mov	r1, r7
 800a244:	9002      	str	r0, [sp, #8]
 800a246:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a24a:	4648      	mov	r0, r9
 800a24c:	f000 fc5a 	bl	800ab04 <__mcmp>
 800a250:	462a      	mov	r2, r5
 800a252:	9008      	str	r0, [sp, #32]
 800a254:	4621      	mov	r1, r4
 800a256:	4658      	mov	r0, fp
 800a258:	f000 fc70 	bl	800ab3c <__mdiff>
 800a25c:	68c2      	ldr	r2, [r0, #12]
 800a25e:	4606      	mov	r6, r0
 800a260:	bb02      	cbnz	r2, 800a2a4 <_dtoa_r+0xa1c>
 800a262:	4601      	mov	r1, r0
 800a264:	4648      	mov	r0, r9
 800a266:	f000 fc4d 	bl	800ab04 <__mcmp>
 800a26a:	4602      	mov	r2, r0
 800a26c:	4631      	mov	r1, r6
 800a26e:	4658      	mov	r0, fp
 800a270:	920e      	str	r2, [sp, #56]	@ 0x38
 800a272:	f000 fa0d 	bl	800a690 <_Bfree>
 800a276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a278:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a27a:	9e07      	ldr	r6, [sp, #28]
 800a27c:	ea43 0102 	orr.w	r1, r3, r2
 800a280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a282:	4319      	orrs	r1, r3
 800a284:	d110      	bne.n	800a2a8 <_dtoa_r+0xa20>
 800a286:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a28a:	d029      	beq.n	800a2e0 <_dtoa_r+0xa58>
 800a28c:	9b08      	ldr	r3, [sp, #32]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	dd02      	ble.n	800a298 <_dtoa_r+0xa10>
 800a292:	9b02      	ldr	r3, [sp, #8]
 800a294:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a298:	9b00      	ldr	r3, [sp, #0]
 800a29a:	f883 8000 	strb.w	r8, [r3]
 800a29e:	e63f      	b.n	8009f20 <_dtoa_r+0x698>
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	e7bb      	b.n	800a21c <_dtoa_r+0x994>
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	e7e1      	b.n	800a26c <_dtoa_r+0x9e4>
 800a2a8:	9b08      	ldr	r3, [sp, #32]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	db04      	blt.n	800a2b8 <_dtoa_r+0xa30>
 800a2ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	d120      	bne.n	800a2fa <_dtoa_r+0xa72>
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	dded      	ble.n	800a298 <_dtoa_r+0xa10>
 800a2bc:	4649      	mov	r1, r9
 800a2be:	2201      	movs	r2, #1
 800a2c0:	4658      	mov	r0, fp
 800a2c2:	f000 fbb3 	bl	800aa2c <__lshift>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4681      	mov	r9, r0
 800a2ca:	f000 fc1b 	bl	800ab04 <__mcmp>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	dc03      	bgt.n	800a2da <_dtoa_r+0xa52>
 800a2d2:	d1e1      	bne.n	800a298 <_dtoa_r+0xa10>
 800a2d4:	f018 0f01 	tst.w	r8, #1
 800a2d8:	d0de      	beq.n	800a298 <_dtoa_r+0xa10>
 800a2da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a2de:	d1d8      	bne.n	800a292 <_dtoa_r+0xa0a>
 800a2e0:	9a00      	ldr	r2, [sp, #0]
 800a2e2:	2339      	movs	r3, #57	@ 0x39
 800a2e4:	7013      	strb	r3, [r2, #0]
 800a2e6:	4633      	mov	r3, r6
 800a2e8:	461e      	mov	r6, r3
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a2f0:	2a39      	cmp	r2, #57	@ 0x39
 800a2f2:	d052      	beq.n	800a39a <_dtoa_r+0xb12>
 800a2f4:	3201      	adds	r2, #1
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	e612      	b.n	8009f20 <_dtoa_r+0x698>
 800a2fa:	2a00      	cmp	r2, #0
 800a2fc:	dd07      	ble.n	800a30e <_dtoa_r+0xa86>
 800a2fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a302:	d0ed      	beq.n	800a2e0 <_dtoa_r+0xa58>
 800a304:	9a00      	ldr	r2, [sp, #0]
 800a306:	f108 0301 	add.w	r3, r8, #1
 800a30a:	7013      	strb	r3, [r2, #0]
 800a30c:	e608      	b.n	8009f20 <_dtoa_r+0x698>
 800a30e:	9b07      	ldr	r3, [sp, #28]
 800a310:	9a07      	ldr	r2, [sp, #28]
 800a312:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a318:	4293      	cmp	r3, r2
 800a31a:	d028      	beq.n	800a36e <_dtoa_r+0xae6>
 800a31c:	4649      	mov	r1, r9
 800a31e:	2300      	movs	r3, #0
 800a320:	220a      	movs	r2, #10
 800a322:	4658      	mov	r0, fp
 800a324:	f000 f9d6 	bl	800a6d4 <__multadd>
 800a328:	42af      	cmp	r7, r5
 800a32a:	4681      	mov	r9, r0
 800a32c:	f04f 0300 	mov.w	r3, #0
 800a330:	f04f 020a 	mov.w	r2, #10
 800a334:	4639      	mov	r1, r7
 800a336:	4658      	mov	r0, fp
 800a338:	d107      	bne.n	800a34a <_dtoa_r+0xac2>
 800a33a:	f000 f9cb 	bl	800a6d4 <__multadd>
 800a33e:	4607      	mov	r7, r0
 800a340:	4605      	mov	r5, r0
 800a342:	9b07      	ldr	r3, [sp, #28]
 800a344:	3301      	adds	r3, #1
 800a346:	9307      	str	r3, [sp, #28]
 800a348:	e774      	b.n	800a234 <_dtoa_r+0x9ac>
 800a34a:	f000 f9c3 	bl	800a6d4 <__multadd>
 800a34e:	4629      	mov	r1, r5
 800a350:	4607      	mov	r7, r0
 800a352:	2300      	movs	r3, #0
 800a354:	220a      	movs	r2, #10
 800a356:	4658      	mov	r0, fp
 800a358:	f000 f9bc 	bl	800a6d4 <__multadd>
 800a35c:	4605      	mov	r5, r0
 800a35e:	e7f0      	b.n	800a342 <_dtoa_r+0xaba>
 800a360:	9b00      	ldr	r3, [sp, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	bfcc      	ite	gt
 800a366:	461e      	movgt	r6, r3
 800a368:	2601      	movle	r6, #1
 800a36a:	4456      	add	r6, sl
 800a36c:	2700      	movs	r7, #0
 800a36e:	4649      	mov	r1, r9
 800a370:	2201      	movs	r2, #1
 800a372:	4658      	mov	r0, fp
 800a374:	f000 fb5a 	bl	800aa2c <__lshift>
 800a378:	4621      	mov	r1, r4
 800a37a:	4681      	mov	r9, r0
 800a37c:	f000 fbc2 	bl	800ab04 <__mcmp>
 800a380:	2800      	cmp	r0, #0
 800a382:	dcb0      	bgt.n	800a2e6 <_dtoa_r+0xa5e>
 800a384:	d102      	bne.n	800a38c <_dtoa_r+0xb04>
 800a386:	f018 0f01 	tst.w	r8, #1
 800a38a:	d1ac      	bne.n	800a2e6 <_dtoa_r+0xa5e>
 800a38c:	4633      	mov	r3, r6
 800a38e:	461e      	mov	r6, r3
 800a390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a394:	2a30      	cmp	r2, #48	@ 0x30
 800a396:	d0fa      	beq.n	800a38e <_dtoa_r+0xb06>
 800a398:	e5c2      	b.n	8009f20 <_dtoa_r+0x698>
 800a39a:	459a      	cmp	sl, r3
 800a39c:	d1a4      	bne.n	800a2e8 <_dtoa_r+0xa60>
 800a39e:	9b04      	ldr	r3, [sp, #16]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	9304      	str	r3, [sp, #16]
 800a3a4:	2331      	movs	r3, #49	@ 0x31
 800a3a6:	f88a 3000 	strb.w	r3, [sl]
 800a3aa:	e5b9      	b.n	8009f20 <_dtoa_r+0x698>
 800a3ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a40c <_dtoa_r+0xb84>
 800a3b2:	b11b      	cbz	r3, 800a3bc <_dtoa_r+0xb34>
 800a3b4:	f10a 0308 	add.w	r3, sl, #8
 800a3b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a3ba:	6013      	str	r3, [r2, #0]
 800a3bc:	4650      	mov	r0, sl
 800a3be:	b019      	add	sp, #100	@ 0x64
 800a3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	f77f ae37 	ble.w	800a03a <_dtoa_r+0x7b2>
 800a3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3d0:	2001      	movs	r0, #1
 800a3d2:	e655      	b.n	800a080 <_dtoa_r+0x7f8>
 800a3d4:	9b00      	ldr	r3, [sp, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f77f aed6 	ble.w	800a188 <_dtoa_r+0x900>
 800a3dc:	4656      	mov	r6, sl
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4648      	mov	r0, r9
 800a3e2:	f7ff f9c6 	bl	8009772 <quorem>
 800a3e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3ea:	f806 8b01 	strb.w	r8, [r6], #1
 800a3ee:	9b00      	ldr	r3, [sp, #0]
 800a3f0:	eba6 020a 	sub.w	r2, r6, sl
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	ddb3      	ble.n	800a360 <_dtoa_r+0xad8>
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	220a      	movs	r2, #10
 800a3fe:	4658      	mov	r0, fp
 800a400:	f000 f968 	bl	800a6d4 <__multadd>
 800a404:	4681      	mov	r9, r0
 800a406:	e7ea      	b.n	800a3de <_dtoa_r+0xb56>
 800a408:	0800bcd1 	.word	0x0800bcd1
 800a40c:	0800bc55 	.word	0x0800bc55

0800a410 <_free_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4605      	mov	r5, r0
 800a414:	2900      	cmp	r1, #0
 800a416:	d041      	beq.n	800a49c <_free_r+0x8c>
 800a418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a41c:	1f0c      	subs	r4, r1, #4
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfb8      	it	lt
 800a422:	18e4      	addlt	r4, r4, r3
 800a424:	f000 f8e8 	bl	800a5f8 <__malloc_lock>
 800a428:	4a1d      	ldr	r2, [pc, #116]	@ (800a4a0 <_free_r+0x90>)
 800a42a:	6813      	ldr	r3, [r2, #0]
 800a42c:	b933      	cbnz	r3, 800a43c <_free_r+0x2c>
 800a42e:	6063      	str	r3, [r4, #4]
 800a430:	6014      	str	r4, [r2, #0]
 800a432:	4628      	mov	r0, r5
 800a434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a438:	f000 b8e4 	b.w	800a604 <__malloc_unlock>
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	d908      	bls.n	800a452 <_free_r+0x42>
 800a440:	6820      	ldr	r0, [r4, #0]
 800a442:	1821      	adds	r1, r4, r0
 800a444:	428b      	cmp	r3, r1
 800a446:	bf01      	itttt	eq
 800a448:	6819      	ldreq	r1, [r3, #0]
 800a44a:	685b      	ldreq	r3, [r3, #4]
 800a44c:	1809      	addeq	r1, r1, r0
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	e7ed      	b.n	800a42e <_free_r+0x1e>
 800a452:	461a      	mov	r2, r3
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	b10b      	cbz	r3, 800a45c <_free_r+0x4c>
 800a458:	42a3      	cmp	r3, r4
 800a45a:	d9fa      	bls.n	800a452 <_free_r+0x42>
 800a45c:	6811      	ldr	r1, [r2, #0]
 800a45e:	1850      	adds	r0, r2, r1
 800a460:	42a0      	cmp	r0, r4
 800a462:	d10b      	bne.n	800a47c <_free_r+0x6c>
 800a464:	6820      	ldr	r0, [r4, #0]
 800a466:	4401      	add	r1, r0
 800a468:	1850      	adds	r0, r2, r1
 800a46a:	4283      	cmp	r3, r0
 800a46c:	6011      	str	r1, [r2, #0]
 800a46e:	d1e0      	bne.n	800a432 <_free_r+0x22>
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	6053      	str	r3, [r2, #4]
 800a476:	4408      	add	r0, r1
 800a478:	6010      	str	r0, [r2, #0]
 800a47a:	e7da      	b.n	800a432 <_free_r+0x22>
 800a47c:	d902      	bls.n	800a484 <_free_r+0x74>
 800a47e:	230c      	movs	r3, #12
 800a480:	602b      	str	r3, [r5, #0]
 800a482:	e7d6      	b.n	800a432 <_free_r+0x22>
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	1821      	adds	r1, r4, r0
 800a488:	428b      	cmp	r3, r1
 800a48a:	bf04      	itt	eq
 800a48c:	6819      	ldreq	r1, [r3, #0]
 800a48e:	685b      	ldreq	r3, [r3, #4]
 800a490:	6063      	str	r3, [r4, #4]
 800a492:	bf04      	itt	eq
 800a494:	1809      	addeq	r1, r1, r0
 800a496:	6021      	streq	r1, [r4, #0]
 800a498:	6054      	str	r4, [r2, #4]
 800a49a:	e7ca      	b.n	800a432 <_free_r+0x22>
 800a49c:	bd38      	pop	{r3, r4, r5, pc}
 800a49e:	bf00      	nop
 800a4a0:	200007d4 	.word	0x200007d4

0800a4a4 <malloc>:
 800a4a4:	4b02      	ldr	r3, [pc, #8]	@ (800a4b0 <malloc+0xc>)
 800a4a6:	4601      	mov	r1, r0
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	f000 b825 	b.w	800a4f8 <_malloc_r>
 800a4ae:	bf00      	nop
 800a4b0:	20000084 	.word	0x20000084

0800a4b4 <sbrk_aligned>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	4e0f      	ldr	r6, [pc, #60]	@ (800a4f4 <sbrk_aligned+0x40>)
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	6831      	ldr	r1, [r6, #0]
 800a4bc:	4605      	mov	r5, r0
 800a4be:	b911      	cbnz	r1, 800a4c6 <sbrk_aligned+0x12>
 800a4c0:	f000 fe9a 	bl	800b1f8 <_sbrk_r>
 800a4c4:	6030      	str	r0, [r6, #0]
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f000 fe95 	bl	800b1f8 <_sbrk_r>
 800a4ce:	1c43      	adds	r3, r0, #1
 800a4d0:	d103      	bne.n	800a4da <sbrk_aligned+0x26>
 800a4d2:	f04f 34ff 	mov.w	r4, #4294967295
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	bd70      	pop	{r4, r5, r6, pc}
 800a4da:	1cc4      	adds	r4, r0, #3
 800a4dc:	f024 0403 	bic.w	r4, r4, #3
 800a4e0:	42a0      	cmp	r0, r4
 800a4e2:	d0f8      	beq.n	800a4d6 <sbrk_aligned+0x22>
 800a4e4:	1a21      	subs	r1, r4, r0
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 fe86 	bl	800b1f8 <_sbrk_r>
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d1f2      	bne.n	800a4d6 <sbrk_aligned+0x22>
 800a4f0:	e7ef      	b.n	800a4d2 <sbrk_aligned+0x1e>
 800a4f2:	bf00      	nop
 800a4f4:	200007d0 	.word	0x200007d0

0800a4f8 <_malloc_r>:
 800a4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4fc:	1ccd      	adds	r5, r1, #3
 800a4fe:	f025 0503 	bic.w	r5, r5, #3
 800a502:	3508      	adds	r5, #8
 800a504:	2d0c      	cmp	r5, #12
 800a506:	bf38      	it	cc
 800a508:	250c      	movcc	r5, #12
 800a50a:	2d00      	cmp	r5, #0
 800a50c:	4606      	mov	r6, r0
 800a50e:	db01      	blt.n	800a514 <_malloc_r+0x1c>
 800a510:	42a9      	cmp	r1, r5
 800a512:	d904      	bls.n	800a51e <_malloc_r+0x26>
 800a514:	230c      	movs	r3, #12
 800a516:	6033      	str	r3, [r6, #0]
 800a518:	2000      	movs	r0, #0
 800a51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a51e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5f4 <_malloc_r+0xfc>
 800a522:	f000 f869 	bl	800a5f8 <__malloc_lock>
 800a526:	f8d8 3000 	ldr.w	r3, [r8]
 800a52a:	461c      	mov	r4, r3
 800a52c:	bb44      	cbnz	r4, 800a580 <_malloc_r+0x88>
 800a52e:	4629      	mov	r1, r5
 800a530:	4630      	mov	r0, r6
 800a532:	f7ff ffbf 	bl	800a4b4 <sbrk_aligned>
 800a536:	1c43      	adds	r3, r0, #1
 800a538:	4604      	mov	r4, r0
 800a53a:	d158      	bne.n	800a5ee <_malloc_r+0xf6>
 800a53c:	f8d8 4000 	ldr.w	r4, [r8]
 800a540:	4627      	mov	r7, r4
 800a542:	2f00      	cmp	r7, #0
 800a544:	d143      	bne.n	800a5ce <_malloc_r+0xd6>
 800a546:	2c00      	cmp	r4, #0
 800a548:	d04b      	beq.n	800a5e2 <_malloc_r+0xea>
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	4639      	mov	r1, r7
 800a54e:	4630      	mov	r0, r6
 800a550:	eb04 0903 	add.w	r9, r4, r3
 800a554:	f000 fe50 	bl	800b1f8 <_sbrk_r>
 800a558:	4581      	cmp	r9, r0
 800a55a:	d142      	bne.n	800a5e2 <_malloc_r+0xea>
 800a55c:	6821      	ldr	r1, [r4, #0]
 800a55e:	1a6d      	subs	r5, r5, r1
 800a560:	4629      	mov	r1, r5
 800a562:	4630      	mov	r0, r6
 800a564:	f7ff ffa6 	bl	800a4b4 <sbrk_aligned>
 800a568:	3001      	adds	r0, #1
 800a56a:	d03a      	beq.n	800a5e2 <_malloc_r+0xea>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	442b      	add	r3, r5
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	f8d8 3000 	ldr.w	r3, [r8]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	bb62      	cbnz	r2, 800a5d4 <_malloc_r+0xdc>
 800a57a:	f8c8 7000 	str.w	r7, [r8]
 800a57e:	e00f      	b.n	800a5a0 <_malloc_r+0xa8>
 800a580:	6822      	ldr	r2, [r4, #0]
 800a582:	1b52      	subs	r2, r2, r5
 800a584:	d420      	bmi.n	800a5c8 <_malloc_r+0xd0>
 800a586:	2a0b      	cmp	r2, #11
 800a588:	d917      	bls.n	800a5ba <_malloc_r+0xc2>
 800a58a:	1961      	adds	r1, r4, r5
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	6025      	str	r5, [r4, #0]
 800a590:	bf18      	it	ne
 800a592:	6059      	strne	r1, [r3, #4]
 800a594:	6863      	ldr	r3, [r4, #4]
 800a596:	bf08      	it	eq
 800a598:	f8c8 1000 	streq.w	r1, [r8]
 800a59c:	5162      	str	r2, [r4, r5]
 800a59e:	604b      	str	r3, [r1, #4]
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f000 f82f 	bl	800a604 <__malloc_unlock>
 800a5a6:	f104 000b 	add.w	r0, r4, #11
 800a5aa:	1d23      	adds	r3, r4, #4
 800a5ac:	f020 0007 	bic.w	r0, r0, #7
 800a5b0:	1ac2      	subs	r2, r0, r3
 800a5b2:	bf1c      	itt	ne
 800a5b4:	1a1b      	subne	r3, r3, r0
 800a5b6:	50a3      	strne	r3, [r4, r2]
 800a5b8:	e7af      	b.n	800a51a <_malloc_r+0x22>
 800a5ba:	6862      	ldr	r2, [r4, #4]
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	bf0c      	ite	eq
 800a5c0:	f8c8 2000 	streq.w	r2, [r8]
 800a5c4:	605a      	strne	r2, [r3, #4]
 800a5c6:	e7eb      	b.n	800a5a0 <_malloc_r+0xa8>
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	6864      	ldr	r4, [r4, #4]
 800a5cc:	e7ae      	b.n	800a52c <_malloc_r+0x34>
 800a5ce:	463c      	mov	r4, r7
 800a5d0:	687f      	ldr	r7, [r7, #4]
 800a5d2:	e7b6      	b.n	800a542 <_malloc_r+0x4a>
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	d1fb      	bne.n	800a5d4 <_malloc_r+0xdc>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	6053      	str	r3, [r2, #4]
 800a5e0:	e7de      	b.n	800a5a0 <_malloc_r+0xa8>
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	6033      	str	r3, [r6, #0]
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f000 f80c 	bl	800a604 <__malloc_unlock>
 800a5ec:	e794      	b.n	800a518 <_malloc_r+0x20>
 800a5ee:	6005      	str	r5, [r0, #0]
 800a5f0:	e7d6      	b.n	800a5a0 <_malloc_r+0xa8>
 800a5f2:	bf00      	nop
 800a5f4:	200007d4 	.word	0x200007d4

0800a5f8 <__malloc_lock>:
 800a5f8:	4801      	ldr	r0, [pc, #4]	@ (800a600 <__malloc_lock+0x8>)
 800a5fa:	f7ff b8b0 	b.w	800975e <__retarget_lock_acquire_recursive>
 800a5fe:	bf00      	nop
 800a600:	200007cc 	.word	0x200007cc

0800a604 <__malloc_unlock>:
 800a604:	4801      	ldr	r0, [pc, #4]	@ (800a60c <__malloc_unlock+0x8>)
 800a606:	f7ff b8ab 	b.w	8009760 <__retarget_lock_release_recursive>
 800a60a:	bf00      	nop
 800a60c:	200007cc 	.word	0x200007cc

0800a610 <_Balloc>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	69c6      	ldr	r6, [r0, #28]
 800a614:	4604      	mov	r4, r0
 800a616:	460d      	mov	r5, r1
 800a618:	b976      	cbnz	r6, 800a638 <_Balloc+0x28>
 800a61a:	2010      	movs	r0, #16
 800a61c:	f7ff ff42 	bl	800a4a4 <malloc>
 800a620:	4602      	mov	r2, r0
 800a622:	61e0      	str	r0, [r4, #28]
 800a624:	b920      	cbnz	r0, 800a630 <_Balloc+0x20>
 800a626:	4b18      	ldr	r3, [pc, #96]	@ (800a688 <_Balloc+0x78>)
 800a628:	4818      	ldr	r0, [pc, #96]	@ (800a68c <_Balloc+0x7c>)
 800a62a:	216b      	movs	r1, #107	@ 0x6b
 800a62c:	f000 fe02 	bl	800b234 <__assert_func>
 800a630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a634:	6006      	str	r6, [r0, #0]
 800a636:	60c6      	str	r6, [r0, #12]
 800a638:	69e6      	ldr	r6, [r4, #28]
 800a63a:	68f3      	ldr	r3, [r6, #12]
 800a63c:	b183      	cbz	r3, 800a660 <_Balloc+0x50>
 800a63e:	69e3      	ldr	r3, [r4, #28]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a646:	b9b8      	cbnz	r0, 800a678 <_Balloc+0x68>
 800a648:	2101      	movs	r1, #1
 800a64a:	fa01 f605 	lsl.w	r6, r1, r5
 800a64e:	1d72      	adds	r2, r6, #5
 800a650:	0092      	lsls	r2, r2, #2
 800a652:	4620      	mov	r0, r4
 800a654:	f000 fe0c 	bl	800b270 <_calloc_r>
 800a658:	b160      	cbz	r0, 800a674 <_Balloc+0x64>
 800a65a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a65e:	e00e      	b.n	800a67e <_Balloc+0x6e>
 800a660:	2221      	movs	r2, #33	@ 0x21
 800a662:	2104      	movs	r1, #4
 800a664:	4620      	mov	r0, r4
 800a666:	f000 fe03 	bl	800b270 <_calloc_r>
 800a66a:	69e3      	ldr	r3, [r4, #28]
 800a66c:	60f0      	str	r0, [r6, #12]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1e4      	bne.n	800a63e <_Balloc+0x2e>
 800a674:	2000      	movs	r0, #0
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	6802      	ldr	r2, [r0, #0]
 800a67a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a67e:	2300      	movs	r3, #0
 800a680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a684:	e7f7      	b.n	800a676 <_Balloc+0x66>
 800a686:	bf00      	nop
 800a688:	0800bc62 	.word	0x0800bc62
 800a68c:	0800bce2 	.word	0x0800bce2

0800a690 <_Bfree>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	69c6      	ldr	r6, [r0, #28]
 800a694:	4605      	mov	r5, r0
 800a696:	460c      	mov	r4, r1
 800a698:	b976      	cbnz	r6, 800a6b8 <_Bfree+0x28>
 800a69a:	2010      	movs	r0, #16
 800a69c:	f7ff ff02 	bl	800a4a4 <malloc>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	61e8      	str	r0, [r5, #28]
 800a6a4:	b920      	cbnz	r0, 800a6b0 <_Bfree+0x20>
 800a6a6:	4b09      	ldr	r3, [pc, #36]	@ (800a6cc <_Bfree+0x3c>)
 800a6a8:	4809      	ldr	r0, [pc, #36]	@ (800a6d0 <_Bfree+0x40>)
 800a6aa:	218f      	movs	r1, #143	@ 0x8f
 800a6ac:	f000 fdc2 	bl	800b234 <__assert_func>
 800a6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6b4:	6006      	str	r6, [r0, #0]
 800a6b6:	60c6      	str	r6, [r0, #12]
 800a6b8:	b13c      	cbz	r4, 800a6ca <_Bfree+0x3a>
 800a6ba:	69eb      	ldr	r3, [r5, #28]
 800a6bc:	6862      	ldr	r2, [r4, #4]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6c4:	6021      	str	r1, [r4, #0]
 800a6c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	0800bc62 	.word	0x0800bc62
 800a6d0:	0800bce2 	.word	0x0800bce2

0800a6d4 <__multadd>:
 800a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d8:	690d      	ldr	r5, [r1, #16]
 800a6da:	4607      	mov	r7, r0
 800a6dc:	460c      	mov	r4, r1
 800a6de:	461e      	mov	r6, r3
 800a6e0:	f101 0c14 	add.w	ip, r1, #20
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	f8dc 3000 	ldr.w	r3, [ip]
 800a6ea:	b299      	uxth	r1, r3
 800a6ec:	fb02 6101 	mla	r1, r2, r1, r6
 800a6f0:	0c1e      	lsrs	r6, r3, #16
 800a6f2:	0c0b      	lsrs	r3, r1, #16
 800a6f4:	fb02 3306 	mla	r3, r2, r6, r3
 800a6f8:	b289      	uxth	r1, r1
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a700:	4285      	cmp	r5, r0
 800a702:	f84c 1b04 	str.w	r1, [ip], #4
 800a706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a70a:	dcec      	bgt.n	800a6e6 <__multadd+0x12>
 800a70c:	b30e      	cbz	r6, 800a752 <__multadd+0x7e>
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	42ab      	cmp	r3, r5
 800a712:	dc19      	bgt.n	800a748 <__multadd+0x74>
 800a714:	6861      	ldr	r1, [r4, #4]
 800a716:	4638      	mov	r0, r7
 800a718:	3101      	adds	r1, #1
 800a71a:	f7ff ff79 	bl	800a610 <_Balloc>
 800a71e:	4680      	mov	r8, r0
 800a720:	b928      	cbnz	r0, 800a72e <__multadd+0x5a>
 800a722:	4602      	mov	r2, r0
 800a724:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <__multadd+0x84>)
 800a726:	480d      	ldr	r0, [pc, #52]	@ (800a75c <__multadd+0x88>)
 800a728:	21ba      	movs	r1, #186	@ 0xba
 800a72a:	f000 fd83 	bl	800b234 <__assert_func>
 800a72e:	6922      	ldr	r2, [r4, #16]
 800a730:	3202      	adds	r2, #2
 800a732:	f104 010c 	add.w	r1, r4, #12
 800a736:	0092      	lsls	r2, r2, #2
 800a738:	300c      	adds	r0, #12
 800a73a:	f000 fd6d 	bl	800b218 <memcpy>
 800a73e:	4621      	mov	r1, r4
 800a740:	4638      	mov	r0, r7
 800a742:	f7ff ffa5 	bl	800a690 <_Bfree>
 800a746:	4644      	mov	r4, r8
 800a748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a74c:	3501      	adds	r5, #1
 800a74e:	615e      	str	r6, [r3, #20]
 800a750:	6125      	str	r5, [r4, #16]
 800a752:	4620      	mov	r0, r4
 800a754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a758:	0800bcd1 	.word	0x0800bcd1
 800a75c:	0800bce2 	.word	0x0800bce2

0800a760 <__hi0bits>:
 800a760:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a764:	4603      	mov	r3, r0
 800a766:	bf36      	itet	cc
 800a768:	0403      	lslcc	r3, r0, #16
 800a76a:	2000      	movcs	r0, #0
 800a76c:	2010      	movcc	r0, #16
 800a76e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a772:	bf3c      	itt	cc
 800a774:	021b      	lslcc	r3, r3, #8
 800a776:	3008      	addcc	r0, #8
 800a778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a77c:	bf3c      	itt	cc
 800a77e:	011b      	lslcc	r3, r3, #4
 800a780:	3004      	addcc	r0, #4
 800a782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a786:	bf3c      	itt	cc
 800a788:	009b      	lslcc	r3, r3, #2
 800a78a:	3002      	addcc	r0, #2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	db05      	blt.n	800a79c <__hi0bits+0x3c>
 800a790:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a794:	f100 0001 	add.w	r0, r0, #1
 800a798:	bf08      	it	eq
 800a79a:	2020      	moveq	r0, #32
 800a79c:	4770      	bx	lr

0800a79e <__lo0bits>:
 800a79e:	6803      	ldr	r3, [r0, #0]
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	f013 0007 	ands.w	r0, r3, #7
 800a7a6:	d00b      	beq.n	800a7c0 <__lo0bits+0x22>
 800a7a8:	07d9      	lsls	r1, r3, #31
 800a7aa:	d421      	bmi.n	800a7f0 <__lo0bits+0x52>
 800a7ac:	0798      	lsls	r0, r3, #30
 800a7ae:	bf49      	itett	mi
 800a7b0:	085b      	lsrmi	r3, r3, #1
 800a7b2:	089b      	lsrpl	r3, r3, #2
 800a7b4:	2001      	movmi	r0, #1
 800a7b6:	6013      	strmi	r3, [r2, #0]
 800a7b8:	bf5c      	itt	pl
 800a7ba:	6013      	strpl	r3, [r2, #0]
 800a7bc:	2002      	movpl	r0, #2
 800a7be:	4770      	bx	lr
 800a7c0:	b299      	uxth	r1, r3
 800a7c2:	b909      	cbnz	r1, 800a7c8 <__lo0bits+0x2a>
 800a7c4:	0c1b      	lsrs	r3, r3, #16
 800a7c6:	2010      	movs	r0, #16
 800a7c8:	b2d9      	uxtb	r1, r3
 800a7ca:	b909      	cbnz	r1, 800a7d0 <__lo0bits+0x32>
 800a7cc:	3008      	adds	r0, #8
 800a7ce:	0a1b      	lsrs	r3, r3, #8
 800a7d0:	0719      	lsls	r1, r3, #28
 800a7d2:	bf04      	itt	eq
 800a7d4:	091b      	lsreq	r3, r3, #4
 800a7d6:	3004      	addeq	r0, #4
 800a7d8:	0799      	lsls	r1, r3, #30
 800a7da:	bf04      	itt	eq
 800a7dc:	089b      	lsreq	r3, r3, #2
 800a7de:	3002      	addeq	r0, #2
 800a7e0:	07d9      	lsls	r1, r3, #31
 800a7e2:	d403      	bmi.n	800a7ec <__lo0bits+0x4e>
 800a7e4:	085b      	lsrs	r3, r3, #1
 800a7e6:	f100 0001 	add.w	r0, r0, #1
 800a7ea:	d003      	beq.n	800a7f4 <__lo0bits+0x56>
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	4770      	bx	lr
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	4770      	bx	lr
 800a7f4:	2020      	movs	r0, #32
 800a7f6:	4770      	bx	lr

0800a7f8 <__i2b>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	f7ff ff07 	bl	800a610 <_Balloc>
 800a802:	4602      	mov	r2, r0
 800a804:	b928      	cbnz	r0, 800a812 <__i2b+0x1a>
 800a806:	4b05      	ldr	r3, [pc, #20]	@ (800a81c <__i2b+0x24>)
 800a808:	4805      	ldr	r0, [pc, #20]	@ (800a820 <__i2b+0x28>)
 800a80a:	f240 1145 	movw	r1, #325	@ 0x145
 800a80e:	f000 fd11 	bl	800b234 <__assert_func>
 800a812:	2301      	movs	r3, #1
 800a814:	6144      	str	r4, [r0, #20]
 800a816:	6103      	str	r3, [r0, #16]
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	bf00      	nop
 800a81c:	0800bcd1 	.word	0x0800bcd1
 800a820:	0800bce2 	.word	0x0800bce2

0800a824 <__multiply>:
 800a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	4614      	mov	r4, r2
 800a82a:	690a      	ldr	r2, [r1, #16]
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	429a      	cmp	r2, r3
 800a830:	bfa8      	it	ge
 800a832:	4623      	movge	r3, r4
 800a834:	460f      	mov	r7, r1
 800a836:	bfa4      	itt	ge
 800a838:	460c      	movge	r4, r1
 800a83a:	461f      	movge	r7, r3
 800a83c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a840:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a844:	68a3      	ldr	r3, [r4, #8]
 800a846:	6861      	ldr	r1, [r4, #4]
 800a848:	eb0a 0609 	add.w	r6, sl, r9
 800a84c:	42b3      	cmp	r3, r6
 800a84e:	b085      	sub	sp, #20
 800a850:	bfb8      	it	lt
 800a852:	3101      	addlt	r1, #1
 800a854:	f7ff fedc 	bl	800a610 <_Balloc>
 800a858:	b930      	cbnz	r0, 800a868 <__multiply+0x44>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b44      	ldr	r3, [pc, #272]	@ (800a970 <__multiply+0x14c>)
 800a85e:	4845      	ldr	r0, [pc, #276]	@ (800a974 <__multiply+0x150>)
 800a860:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a864:	f000 fce6 	bl	800b234 <__assert_func>
 800a868:	f100 0514 	add.w	r5, r0, #20
 800a86c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a870:	462b      	mov	r3, r5
 800a872:	2200      	movs	r2, #0
 800a874:	4543      	cmp	r3, r8
 800a876:	d321      	bcc.n	800a8bc <__multiply+0x98>
 800a878:	f107 0114 	add.w	r1, r7, #20
 800a87c:	f104 0214 	add.w	r2, r4, #20
 800a880:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a884:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a888:	9302      	str	r3, [sp, #8]
 800a88a:	1b13      	subs	r3, r2, r4
 800a88c:	3b15      	subs	r3, #21
 800a88e:	f023 0303 	bic.w	r3, r3, #3
 800a892:	3304      	adds	r3, #4
 800a894:	f104 0715 	add.w	r7, r4, #21
 800a898:	42ba      	cmp	r2, r7
 800a89a:	bf38      	it	cc
 800a89c:	2304      	movcc	r3, #4
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	9b02      	ldr	r3, [sp, #8]
 800a8a2:	9103      	str	r1, [sp, #12]
 800a8a4:	428b      	cmp	r3, r1
 800a8a6:	d80c      	bhi.n	800a8c2 <__multiply+0x9e>
 800a8a8:	2e00      	cmp	r6, #0
 800a8aa:	dd03      	ble.n	800a8b4 <__multiply+0x90>
 800a8ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d05b      	beq.n	800a96c <__multiply+0x148>
 800a8b4:	6106      	str	r6, [r0, #16]
 800a8b6:	b005      	add	sp, #20
 800a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8bc:	f843 2b04 	str.w	r2, [r3], #4
 800a8c0:	e7d8      	b.n	800a874 <__multiply+0x50>
 800a8c2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a8c6:	f1ba 0f00 	cmp.w	sl, #0
 800a8ca:	d024      	beq.n	800a916 <__multiply+0xf2>
 800a8cc:	f104 0e14 	add.w	lr, r4, #20
 800a8d0:	46a9      	mov	r9, r5
 800a8d2:	f04f 0c00 	mov.w	ip, #0
 800a8d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8da:	f8d9 3000 	ldr.w	r3, [r9]
 800a8de:	fa1f fb87 	uxth.w	fp, r7
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a8e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a8ec:	f8d9 7000 	ldr.w	r7, [r9]
 800a8f0:	4463      	add	r3, ip
 800a8f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a8f6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a8fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a904:	4572      	cmp	r2, lr
 800a906:	f849 3b04 	str.w	r3, [r9], #4
 800a90a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a90e:	d8e2      	bhi.n	800a8d6 <__multiply+0xb2>
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	f845 c003 	str.w	ip, [r5, r3]
 800a916:	9b03      	ldr	r3, [sp, #12]
 800a918:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a91c:	3104      	adds	r1, #4
 800a91e:	f1b9 0f00 	cmp.w	r9, #0
 800a922:	d021      	beq.n	800a968 <__multiply+0x144>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	f104 0c14 	add.w	ip, r4, #20
 800a92a:	46ae      	mov	lr, r5
 800a92c:	f04f 0a00 	mov.w	sl, #0
 800a930:	f8bc b000 	ldrh.w	fp, [ip]
 800a934:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a938:	fb09 770b 	mla	r7, r9, fp, r7
 800a93c:	4457      	add	r7, sl
 800a93e:	b29b      	uxth	r3, r3
 800a940:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a944:	f84e 3b04 	str.w	r3, [lr], #4
 800a948:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a94c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a950:	f8be 3000 	ldrh.w	r3, [lr]
 800a954:	fb09 330a 	mla	r3, r9, sl, r3
 800a958:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a95c:	4562      	cmp	r2, ip
 800a95e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a962:	d8e5      	bhi.n	800a930 <__multiply+0x10c>
 800a964:	9f01      	ldr	r7, [sp, #4]
 800a966:	51eb      	str	r3, [r5, r7]
 800a968:	3504      	adds	r5, #4
 800a96a:	e799      	b.n	800a8a0 <__multiply+0x7c>
 800a96c:	3e01      	subs	r6, #1
 800a96e:	e79b      	b.n	800a8a8 <__multiply+0x84>
 800a970:	0800bcd1 	.word	0x0800bcd1
 800a974:	0800bce2 	.word	0x0800bce2

0800a978 <__pow5mult>:
 800a978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a97c:	4615      	mov	r5, r2
 800a97e:	f012 0203 	ands.w	r2, r2, #3
 800a982:	4607      	mov	r7, r0
 800a984:	460e      	mov	r6, r1
 800a986:	d007      	beq.n	800a998 <__pow5mult+0x20>
 800a988:	4c25      	ldr	r4, [pc, #148]	@ (800aa20 <__pow5mult+0xa8>)
 800a98a:	3a01      	subs	r2, #1
 800a98c:	2300      	movs	r3, #0
 800a98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a992:	f7ff fe9f 	bl	800a6d4 <__multadd>
 800a996:	4606      	mov	r6, r0
 800a998:	10ad      	asrs	r5, r5, #2
 800a99a:	d03d      	beq.n	800aa18 <__pow5mult+0xa0>
 800a99c:	69fc      	ldr	r4, [r7, #28]
 800a99e:	b97c      	cbnz	r4, 800a9c0 <__pow5mult+0x48>
 800a9a0:	2010      	movs	r0, #16
 800a9a2:	f7ff fd7f 	bl	800a4a4 <malloc>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	61f8      	str	r0, [r7, #28]
 800a9aa:	b928      	cbnz	r0, 800a9b8 <__pow5mult+0x40>
 800a9ac:	4b1d      	ldr	r3, [pc, #116]	@ (800aa24 <__pow5mult+0xac>)
 800a9ae:	481e      	ldr	r0, [pc, #120]	@ (800aa28 <__pow5mult+0xb0>)
 800a9b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a9b4:	f000 fc3e 	bl	800b234 <__assert_func>
 800a9b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9bc:	6004      	str	r4, [r0, #0]
 800a9be:	60c4      	str	r4, [r0, #12]
 800a9c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9c8:	b94c      	cbnz	r4, 800a9de <__pow5mult+0x66>
 800a9ca:	f240 2171 	movw	r1, #625	@ 0x271
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f7ff ff12 	bl	800a7f8 <__i2b>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9da:	4604      	mov	r4, r0
 800a9dc:	6003      	str	r3, [r0, #0]
 800a9de:	f04f 0900 	mov.w	r9, #0
 800a9e2:	07eb      	lsls	r3, r5, #31
 800a9e4:	d50a      	bpl.n	800a9fc <__pow5mult+0x84>
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f7ff ff1a 	bl	800a824 <__multiply>
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4680      	mov	r8, r0
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff fe4b 	bl	800a690 <_Bfree>
 800a9fa:	4646      	mov	r6, r8
 800a9fc:	106d      	asrs	r5, r5, #1
 800a9fe:	d00b      	beq.n	800aa18 <__pow5mult+0xa0>
 800aa00:	6820      	ldr	r0, [r4, #0]
 800aa02:	b938      	cbnz	r0, 800aa14 <__pow5mult+0x9c>
 800aa04:	4622      	mov	r2, r4
 800aa06:	4621      	mov	r1, r4
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f7ff ff0b 	bl	800a824 <__multiply>
 800aa0e:	6020      	str	r0, [r4, #0]
 800aa10:	f8c0 9000 	str.w	r9, [r0]
 800aa14:	4604      	mov	r4, r0
 800aa16:	e7e4      	b.n	800a9e2 <__pow5mult+0x6a>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1e:	bf00      	nop
 800aa20:	0800bd3c 	.word	0x0800bd3c
 800aa24:	0800bc62 	.word	0x0800bc62
 800aa28:	0800bce2 	.word	0x0800bce2

0800aa2c <__lshift>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	460c      	mov	r4, r1
 800aa32:	6849      	ldr	r1, [r1, #4]
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	4691      	mov	r9, r2
 800aa40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa44:	f108 0601 	add.w	r6, r8, #1
 800aa48:	42b3      	cmp	r3, r6
 800aa4a:	db0b      	blt.n	800aa64 <__lshift+0x38>
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff fddf 	bl	800a610 <_Balloc>
 800aa52:	4605      	mov	r5, r0
 800aa54:	b948      	cbnz	r0, 800aa6a <__lshift+0x3e>
 800aa56:	4602      	mov	r2, r0
 800aa58:	4b28      	ldr	r3, [pc, #160]	@ (800aafc <__lshift+0xd0>)
 800aa5a:	4829      	ldr	r0, [pc, #164]	@ (800ab00 <__lshift+0xd4>)
 800aa5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa60:	f000 fbe8 	bl	800b234 <__assert_func>
 800aa64:	3101      	adds	r1, #1
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	e7ee      	b.n	800aa48 <__lshift+0x1c>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f100 0114 	add.w	r1, r0, #20
 800aa70:	f100 0210 	add.w	r2, r0, #16
 800aa74:	4618      	mov	r0, r3
 800aa76:	4553      	cmp	r3, sl
 800aa78:	db33      	blt.n	800aae2 <__lshift+0xb6>
 800aa7a:	6920      	ldr	r0, [r4, #16]
 800aa7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa80:	f104 0314 	add.w	r3, r4, #20
 800aa84:	f019 091f 	ands.w	r9, r9, #31
 800aa88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa90:	d02b      	beq.n	800aaea <__lshift+0xbe>
 800aa92:	f1c9 0e20 	rsb	lr, r9, #32
 800aa96:	468a      	mov	sl, r1
 800aa98:	2200      	movs	r2, #0
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	fa00 f009 	lsl.w	r0, r0, r9
 800aaa0:	4310      	orrs	r0, r2
 800aaa2:	f84a 0b04 	str.w	r0, [sl], #4
 800aaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaaa:	459c      	cmp	ip, r3
 800aaac:	fa22 f20e 	lsr.w	r2, r2, lr
 800aab0:	d8f3      	bhi.n	800aa9a <__lshift+0x6e>
 800aab2:	ebac 0304 	sub.w	r3, ip, r4
 800aab6:	3b15      	subs	r3, #21
 800aab8:	f023 0303 	bic.w	r3, r3, #3
 800aabc:	3304      	adds	r3, #4
 800aabe:	f104 0015 	add.w	r0, r4, #21
 800aac2:	4584      	cmp	ip, r0
 800aac4:	bf38      	it	cc
 800aac6:	2304      	movcc	r3, #4
 800aac8:	50ca      	str	r2, [r1, r3]
 800aaca:	b10a      	cbz	r2, 800aad0 <__lshift+0xa4>
 800aacc:	f108 0602 	add.w	r6, r8, #2
 800aad0:	3e01      	subs	r6, #1
 800aad2:	4638      	mov	r0, r7
 800aad4:	612e      	str	r6, [r5, #16]
 800aad6:	4621      	mov	r1, r4
 800aad8:	f7ff fdda 	bl	800a690 <_Bfree>
 800aadc:	4628      	mov	r0, r5
 800aade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aae6:	3301      	adds	r3, #1
 800aae8:	e7c5      	b.n	800aa76 <__lshift+0x4a>
 800aaea:	3904      	subs	r1, #4
 800aaec:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaf4:	459c      	cmp	ip, r3
 800aaf6:	d8f9      	bhi.n	800aaec <__lshift+0xc0>
 800aaf8:	e7ea      	b.n	800aad0 <__lshift+0xa4>
 800aafa:	bf00      	nop
 800aafc:	0800bcd1 	.word	0x0800bcd1
 800ab00:	0800bce2 	.word	0x0800bce2

0800ab04 <__mcmp>:
 800ab04:	690a      	ldr	r2, [r1, #16]
 800ab06:	4603      	mov	r3, r0
 800ab08:	6900      	ldr	r0, [r0, #16]
 800ab0a:	1a80      	subs	r0, r0, r2
 800ab0c:	b530      	push	{r4, r5, lr}
 800ab0e:	d10e      	bne.n	800ab2e <__mcmp+0x2a>
 800ab10:	3314      	adds	r3, #20
 800ab12:	3114      	adds	r1, #20
 800ab14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab24:	4295      	cmp	r5, r2
 800ab26:	d003      	beq.n	800ab30 <__mcmp+0x2c>
 800ab28:	d205      	bcs.n	800ab36 <__mcmp+0x32>
 800ab2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2e:	bd30      	pop	{r4, r5, pc}
 800ab30:	42a3      	cmp	r3, r4
 800ab32:	d3f3      	bcc.n	800ab1c <__mcmp+0x18>
 800ab34:	e7fb      	b.n	800ab2e <__mcmp+0x2a>
 800ab36:	2001      	movs	r0, #1
 800ab38:	e7f9      	b.n	800ab2e <__mcmp+0x2a>
	...

0800ab3c <__mdiff>:
 800ab3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	4689      	mov	r9, r1
 800ab42:	4606      	mov	r6, r0
 800ab44:	4611      	mov	r1, r2
 800ab46:	4648      	mov	r0, r9
 800ab48:	4614      	mov	r4, r2
 800ab4a:	f7ff ffdb 	bl	800ab04 <__mcmp>
 800ab4e:	1e05      	subs	r5, r0, #0
 800ab50:	d112      	bne.n	800ab78 <__mdiff+0x3c>
 800ab52:	4629      	mov	r1, r5
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7ff fd5b 	bl	800a610 <_Balloc>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	b928      	cbnz	r0, 800ab6a <__mdiff+0x2e>
 800ab5e:	4b3f      	ldr	r3, [pc, #252]	@ (800ac5c <__mdiff+0x120>)
 800ab60:	f240 2137 	movw	r1, #567	@ 0x237
 800ab64:	483e      	ldr	r0, [pc, #248]	@ (800ac60 <__mdiff+0x124>)
 800ab66:	f000 fb65 	bl	800b234 <__assert_func>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab70:	4610      	mov	r0, r2
 800ab72:	b003      	add	sp, #12
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	bfbc      	itt	lt
 800ab7a:	464b      	movlt	r3, r9
 800ab7c:	46a1      	movlt	r9, r4
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab84:	bfba      	itte	lt
 800ab86:	461c      	movlt	r4, r3
 800ab88:	2501      	movlt	r5, #1
 800ab8a:	2500      	movge	r5, #0
 800ab8c:	f7ff fd40 	bl	800a610 <_Balloc>
 800ab90:	4602      	mov	r2, r0
 800ab92:	b918      	cbnz	r0, 800ab9c <__mdiff+0x60>
 800ab94:	4b31      	ldr	r3, [pc, #196]	@ (800ac5c <__mdiff+0x120>)
 800ab96:	f240 2145 	movw	r1, #581	@ 0x245
 800ab9a:	e7e3      	b.n	800ab64 <__mdiff+0x28>
 800ab9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aba0:	6926      	ldr	r6, [r4, #16]
 800aba2:	60c5      	str	r5, [r0, #12]
 800aba4:	f109 0310 	add.w	r3, r9, #16
 800aba8:	f109 0514 	add.w	r5, r9, #20
 800abac:	f104 0e14 	add.w	lr, r4, #20
 800abb0:	f100 0b14 	add.w	fp, r0, #20
 800abb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	46d9      	mov	r9, fp
 800abc0:	f04f 0c00 	mov.w	ip, #0
 800abc4:	9b01      	ldr	r3, [sp, #4]
 800abc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800abca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800abce:	9301      	str	r3, [sp, #4]
 800abd0:	fa1f f38a 	uxth.w	r3, sl
 800abd4:	4619      	mov	r1, r3
 800abd6:	b283      	uxth	r3, r0
 800abd8:	1acb      	subs	r3, r1, r3
 800abda:	0c00      	lsrs	r0, r0, #16
 800abdc:	4463      	add	r3, ip
 800abde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800abe2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800abec:	4576      	cmp	r6, lr
 800abee:	f849 3b04 	str.w	r3, [r9], #4
 800abf2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abf6:	d8e5      	bhi.n	800abc4 <__mdiff+0x88>
 800abf8:	1b33      	subs	r3, r6, r4
 800abfa:	3b15      	subs	r3, #21
 800abfc:	f023 0303 	bic.w	r3, r3, #3
 800ac00:	3415      	adds	r4, #21
 800ac02:	3304      	adds	r3, #4
 800ac04:	42a6      	cmp	r6, r4
 800ac06:	bf38      	it	cc
 800ac08:	2304      	movcc	r3, #4
 800ac0a:	441d      	add	r5, r3
 800ac0c:	445b      	add	r3, fp
 800ac0e:	461e      	mov	r6, r3
 800ac10:	462c      	mov	r4, r5
 800ac12:	4544      	cmp	r4, r8
 800ac14:	d30e      	bcc.n	800ac34 <__mdiff+0xf8>
 800ac16:	f108 0103 	add.w	r1, r8, #3
 800ac1a:	1b49      	subs	r1, r1, r5
 800ac1c:	f021 0103 	bic.w	r1, r1, #3
 800ac20:	3d03      	subs	r5, #3
 800ac22:	45a8      	cmp	r8, r5
 800ac24:	bf38      	it	cc
 800ac26:	2100      	movcc	r1, #0
 800ac28:	440b      	add	r3, r1
 800ac2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac2e:	b191      	cbz	r1, 800ac56 <__mdiff+0x11a>
 800ac30:	6117      	str	r7, [r2, #16]
 800ac32:	e79d      	b.n	800ab70 <__mdiff+0x34>
 800ac34:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac38:	46e6      	mov	lr, ip
 800ac3a:	0c08      	lsrs	r0, r1, #16
 800ac3c:	fa1c fc81 	uxtah	ip, ip, r1
 800ac40:	4471      	add	r1, lr
 800ac42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac46:	b289      	uxth	r1, r1
 800ac48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac4c:	f846 1b04 	str.w	r1, [r6], #4
 800ac50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac54:	e7dd      	b.n	800ac12 <__mdiff+0xd6>
 800ac56:	3f01      	subs	r7, #1
 800ac58:	e7e7      	b.n	800ac2a <__mdiff+0xee>
 800ac5a:	bf00      	nop
 800ac5c:	0800bcd1 	.word	0x0800bcd1
 800ac60:	0800bce2 	.word	0x0800bce2

0800ac64 <__d2b>:
 800ac64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac68:	460f      	mov	r7, r1
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	ec59 8b10 	vmov	r8, r9, d0
 800ac70:	4616      	mov	r6, r2
 800ac72:	f7ff fccd 	bl	800a610 <_Balloc>
 800ac76:	4604      	mov	r4, r0
 800ac78:	b930      	cbnz	r0, 800ac88 <__d2b+0x24>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4b23      	ldr	r3, [pc, #140]	@ (800ad0c <__d2b+0xa8>)
 800ac7e:	4824      	ldr	r0, [pc, #144]	@ (800ad10 <__d2b+0xac>)
 800ac80:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac84:	f000 fad6 	bl	800b234 <__assert_func>
 800ac88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac90:	b10d      	cbz	r5, 800ac96 <__d2b+0x32>
 800ac92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	f1b8 0300 	subs.w	r3, r8, #0
 800ac9c:	d023      	beq.n	800ace6 <__d2b+0x82>
 800ac9e:	4668      	mov	r0, sp
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	f7ff fd7c 	bl	800a79e <__lo0bits>
 800aca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acaa:	b1d0      	cbz	r0, 800ace2 <__d2b+0x7e>
 800acac:	f1c0 0320 	rsb	r3, r0, #32
 800acb0:	fa02 f303 	lsl.w	r3, r2, r3
 800acb4:	430b      	orrs	r3, r1
 800acb6:	40c2      	lsrs	r2, r0
 800acb8:	6163      	str	r3, [r4, #20]
 800acba:	9201      	str	r2, [sp, #4]
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	61a3      	str	r3, [r4, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bf0c      	ite	eq
 800acc4:	2201      	moveq	r2, #1
 800acc6:	2202      	movne	r2, #2
 800acc8:	6122      	str	r2, [r4, #16]
 800acca:	b1a5      	cbz	r5, 800acf6 <__d2b+0x92>
 800accc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acd0:	4405      	add	r5, r0
 800acd2:	603d      	str	r5, [r7, #0]
 800acd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acd8:	6030      	str	r0, [r6, #0]
 800acda:	4620      	mov	r0, r4
 800acdc:	b003      	add	sp, #12
 800acde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace2:	6161      	str	r1, [r4, #20]
 800ace4:	e7ea      	b.n	800acbc <__d2b+0x58>
 800ace6:	a801      	add	r0, sp, #4
 800ace8:	f7ff fd59 	bl	800a79e <__lo0bits>
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	6163      	str	r3, [r4, #20]
 800acf0:	3020      	adds	r0, #32
 800acf2:	2201      	movs	r2, #1
 800acf4:	e7e8      	b.n	800acc8 <__d2b+0x64>
 800acf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acfe:	6038      	str	r0, [r7, #0]
 800ad00:	6918      	ldr	r0, [r3, #16]
 800ad02:	f7ff fd2d 	bl	800a760 <__hi0bits>
 800ad06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad0a:	e7e5      	b.n	800acd8 <__d2b+0x74>
 800ad0c:	0800bcd1 	.word	0x0800bcd1
 800ad10:	0800bce2 	.word	0x0800bce2

0800ad14 <__sfputc_r>:
 800ad14:	6893      	ldr	r3, [r2, #8]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	b410      	push	{r4}
 800ad1c:	6093      	str	r3, [r2, #8]
 800ad1e:	da08      	bge.n	800ad32 <__sfputc_r+0x1e>
 800ad20:	6994      	ldr	r4, [r2, #24]
 800ad22:	42a3      	cmp	r3, r4
 800ad24:	db01      	blt.n	800ad2a <__sfputc_r+0x16>
 800ad26:	290a      	cmp	r1, #10
 800ad28:	d103      	bne.n	800ad32 <__sfputc_r+0x1e>
 800ad2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad2e:	f7fe bc04 	b.w	800953a <__swbuf_r>
 800ad32:	6813      	ldr	r3, [r2, #0]
 800ad34:	1c58      	adds	r0, r3, #1
 800ad36:	6010      	str	r0, [r2, #0]
 800ad38:	7019      	strb	r1, [r3, #0]
 800ad3a:	4608      	mov	r0, r1
 800ad3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <__sfputs_r>:
 800ad42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad44:	4606      	mov	r6, r0
 800ad46:	460f      	mov	r7, r1
 800ad48:	4614      	mov	r4, r2
 800ad4a:	18d5      	adds	r5, r2, r3
 800ad4c:	42ac      	cmp	r4, r5
 800ad4e:	d101      	bne.n	800ad54 <__sfputs_r+0x12>
 800ad50:	2000      	movs	r0, #0
 800ad52:	e007      	b.n	800ad64 <__sfputs_r+0x22>
 800ad54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad58:	463a      	mov	r2, r7
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f7ff ffda 	bl	800ad14 <__sfputc_r>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d1f3      	bne.n	800ad4c <__sfputs_r+0xa>
 800ad64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad68 <_vfiprintf_r>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	460d      	mov	r5, r1
 800ad6e:	b09d      	sub	sp, #116	@ 0x74
 800ad70:	4614      	mov	r4, r2
 800ad72:	4698      	mov	r8, r3
 800ad74:	4606      	mov	r6, r0
 800ad76:	b118      	cbz	r0, 800ad80 <_vfiprintf_r+0x18>
 800ad78:	6a03      	ldr	r3, [r0, #32]
 800ad7a:	b90b      	cbnz	r3, 800ad80 <_vfiprintf_r+0x18>
 800ad7c:	f7fe faf4 	bl	8009368 <__sinit>
 800ad80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad82:	07d9      	lsls	r1, r3, #31
 800ad84:	d405      	bmi.n	800ad92 <_vfiprintf_r+0x2a>
 800ad86:	89ab      	ldrh	r3, [r5, #12]
 800ad88:	059a      	lsls	r2, r3, #22
 800ad8a:	d402      	bmi.n	800ad92 <_vfiprintf_r+0x2a>
 800ad8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad8e:	f7fe fce6 	bl	800975e <__retarget_lock_acquire_recursive>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	071b      	lsls	r3, r3, #28
 800ad96:	d501      	bpl.n	800ad9c <_vfiprintf_r+0x34>
 800ad98:	692b      	ldr	r3, [r5, #16]
 800ad9a:	b99b      	cbnz	r3, 800adc4 <_vfiprintf_r+0x5c>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f7fe fc0a 	bl	80095b8 <__swsetup_r>
 800ada4:	b170      	cbz	r0, 800adc4 <_vfiprintf_r+0x5c>
 800ada6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ada8:	07dc      	lsls	r4, r3, #31
 800adaa:	d504      	bpl.n	800adb6 <_vfiprintf_r+0x4e>
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	b01d      	add	sp, #116	@ 0x74
 800adb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb6:	89ab      	ldrh	r3, [r5, #12]
 800adb8:	0598      	lsls	r0, r3, #22
 800adba:	d4f7      	bmi.n	800adac <_vfiprintf_r+0x44>
 800adbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adbe:	f7fe fccf 	bl	8009760 <__retarget_lock_release_recursive>
 800adc2:	e7f3      	b.n	800adac <_vfiprintf_r+0x44>
 800adc4:	2300      	movs	r3, #0
 800adc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800adc8:	2320      	movs	r3, #32
 800adca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adce:	f8cd 800c 	str.w	r8, [sp, #12]
 800add2:	2330      	movs	r3, #48	@ 0x30
 800add4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af84 <_vfiprintf_r+0x21c>
 800add8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800addc:	f04f 0901 	mov.w	r9, #1
 800ade0:	4623      	mov	r3, r4
 800ade2:	469a      	mov	sl, r3
 800ade4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade8:	b10a      	cbz	r2, 800adee <_vfiprintf_r+0x86>
 800adea:	2a25      	cmp	r2, #37	@ 0x25
 800adec:	d1f9      	bne.n	800ade2 <_vfiprintf_r+0x7a>
 800adee:	ebba 0b04 	subs.w	fp, sl, r4
 800adf2:	d00b      	beq.n	800ae0c <_vfiprintf_r+0xa4>
 800adf4:	465b      	mov	r3, fp
 800adf6:	4622      	mov	r2, r4
 800adf8:	4629      	mov	r1, r5
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff ffa1 	bl	800ad42 <__sfputs_r>
 800ae00:	3001      	adds	r0, #1
 800ae02:	f000 80a7 	beq.w	800af54 <_vfiprintf_r+0x1ec>
 800ae06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae08:	445a      	add	r2, fp
 800ae0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 809f 	beq.w	800af54 <_vfiprintf_r+0x1ec>
 800ae16:	2300      	movs	r3, #0
 800ae18:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae20:	f10a 0a01 	add.w	sl, sl, #1
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae2e:	4654      	mov	r4, sl
 800ae30:	2205      	movs	r2, #5
 800ae32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae36:	4853      	ldr	r0, [pc, #332]	@ (800af84 <_vfiprintf_r+0x21c>)
 800ae38:	f7f5 f9f2 	bl	8000220 <memchr>
 800ae3c:	9a04      	ldr	r2, [sp, #16]
 800ae3e:	b9d8      	cbnz	r0, 800ae78 <_vfiprintf_r+0x110>
 800ae40:	06d1      	lsls	r1, r2, #27
 800ae42:	bf44      	itt	mi
 800ae44:	2320      	movmi	r3, #32
 800ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4a:	0713      	lsls	r3, r2, #28
 800ae4c:	bf44      	itt	mi
 800ae4e:	232b      	movmi	r3, #43	@ 0x2b
 800ae50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae54:	f89a 3000 	ldrb.w	r3, [sl]
 800ae58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae5a:	d015      	beq.n	800ae88 <_vfiprintf_r+0x120>
 800ae5c:	9a07      	ldr	r2, [sp, #28]
 800ae5e:	4654      	mov	r4, sl
 800ae60:	2000      	movs	r0, #0
 800ae62:	f04f 0c0a 	mov.w	ip, #10
 800ae66:	4621      	mov	r1, r4
 800ae68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6c:	3b30      	subs	r3, #48	@ 0x30
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	d94b      	bls.n	800af0a <_vfiprintf_r+0x1a2>
 800ae72:	b1b0      	cbz	r0, 800aea2 <_vfiprintf_r+0x13a>
 800ae74:	9207      	str	r2, [sp, #28]
 800ae76:	e014      	b.n	800aea2 <_vfiprintf_r+0x13a>
 800ae78:	eba0 0308 	sub.w	r3, r0, r8
 800ae7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae80:	4313      	orrs	r3, r2
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	46a2      	mov	sl, r4
 800ae86:	e7d2      	b.n	800ae2e <_vfiprintf_r+0xc6>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	1d19      	adds	r1, r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	9103      	str	r1, [sp, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	bfbb      	ittet	lt
 800ae94:	425b      	neglt	r3, r3
 800ae96:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9a:	9307      	strge	r3, [sp, #28]
 800ae9c:	9307      	strlt	r3, [sp, #28]
 800ae9e:	bfb8      	it	lt
 800aea0:	9204      	strlt	r2, [sp, #16]
 800aea2:	7823      	ldrb	r3, [r4, #0]
 800aea4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aea6:	d10a      	bne.n	800aebe <_vfiprintf_r+0x156>
 800aea8:	7863      	ldrb	r3, [r4, #1]
 800aeaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeac:	d132      	bne.n	800af14 <_vfiprintf_r+0x1ac>
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	1d1a      	adds	r2, r3, #4
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	9203      	str	r2, [sp, #12]
 800aeb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeba:	3402      	adds	r4, #2
 800aebc:	9305      	str	r3, [sp, #20]
 800aebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af94 <_vfiprintf_r+0x22c>
 800aec2:	7821      	ldrb	r1, [r4, #0]
 800aec4:	2203      	movs	r2, #3
 800aec6:	4650      	mov	r0, sl
 800aec8:	f7f5 f9aa 	bl	8000220 <memchr>
 800aecc:	b138      	cbz	r0, 800aede <_vfiprintf_r+0x176>
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	eba0 000a 	sub.w	r0, r0, sl
 800aed4:	2240      	movs	r2, #64	@ 0x40
 800aed6:	4082      	lsls	r2, r0
 800aed8:	4313      	orrs	r3, r2
 800aeda:	3401      	adds	r4, #1
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee2:	4829      	ldr	r0, [pc, #164]	@ (800af88 <_vfiprintf_r+0x220>)
 800aee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aee8:	2206      	movs	r2, #6
 800aeea:	f7f5 f999 	bl	8000220 <memchr>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d03f      	beq.n	800af72 <_vfiprintf_r+0x20a>
 800aef2:	4b26      	ldr	r3, [pc, #152]	@ (800af8c <_vfiprintf_r+0x224>)
 800aef4:	bb1b      	cbnz	r3, 800af3e <_vfiprintf_r+0x1d6>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	3307      	adds	r3, #7
 800aefa:	f023 0307 	bic.w	r3, r3, #7
 800aefe:	3308      	adds	r3, #8
 800af00:	9303      	str	r3, [sp, #12]
 800af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af04:	443b      	add	r3, r7
 800af06:	9309      	str	r3, [sp, #36]	@ 0x24
 800af08:	e76a      	b.n	800ade0 <_vfiprintf_r+0x78>
 800af0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0e:	460c      	mov	r4, r1
 800af10:	2001      	movs	r0, #1
 800af12:	e7a8      	b.n	800ae66 <_vfiprintf_r+0xfe>
 800af14:	2300      	movs	r3, #0
 800af16:	3401      	adds	r4, #1
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	4619      	mov	r1, r3
 800af1c:	f04f 0c0a 	mov.w	ip, #10
 800af20:	4620      	mov	r0, r4
 800af22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af26:	3a30      	subs	r2, #48	@ 0x30
 800af28:	2a09      	cmp	r2, #9
 800af2a:	d903      	bls.n	800af34 <_vfiprintf_r+0x1cc>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0c6      	beq.n	800aebe <_vfiprintf_r+0x156>
 800af30:	9105      	str	r1, [sp, #20]
 800af32:	e7c4      	b.n	800aebe <_vfiprintf_r+0x156>
 800af34:	fb0c 2101 	mla	r1, ip, r1, r2
 800af38:	4604      	mov	r4, r0
 800af3a:	2301      	movs	r3, #1
 800af3c:	e7f0      	b.n	800af20 <_vfiprintf_r+0x1b8>
 800af3e:	ab03      	add	r3, sp, #12
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	462a      	mov	r2, r5
 800af44:	4b12      	ldr	r3, [pc, #72]	@ (800af90 <_vfiprintf_r+0x228>)
 800af46:	a904      	add	r1, sp, #16
 800af48:	4630      	mov	r0, r6
 800af4a:	f7fd fdc9 	bl	8008ae0 <_printf_float>
 800af4e:	4607      	mov	r7, r0
 800af50:	1c78      	adds	r0, r7, #1
 800af52:	d1d6      	bne.n	800af02 <_vfiprintf_r+0x19a>
 800af54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af56:	07d9      	lsls	r1, r3, #31
 800af58:	d405      	bmi.n	800af66 <_vfiprintf_r+0x1fe>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	059a      	lsls	r2, r3, #22
 800af5e:	d402      	bmi.n	800af66 <_vfiprintf_r+0x1fe>
 800af60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af62:	f7fe fbfd 	bl	8009760 <__retarget_lock_release_recursive>
 800af66:	89ab      	ldrh	r3, [r5, #12]
 800af68:	065b      	lsls	r3, r3, #25
 800af6a:	f53f af1f 	bmi.w	800adac <_vfiprintf_r+0x44>
 800af6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af70:	e71e      	b.n	800adb0 <_vfiprintf_r+0x48>
 800af72:	ab03      	add	r3, sp, #12
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	462a      	mov	r2, r5
 800af78:	4b05      	ldr	r3, [pc, #20]	@ (800af90 <_vfiprintf_r+0x228>)
 800af7a:	a904      	add	r1, sp, #16
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7fe f847 	bl	8009010 <_printf_i>
 800af82:	e7e4      	b.n	800af4e <_vfiprintf_r+0x1e6>
 800af84:	0800be38 	.word	0x0800be38
 800af88:	0800be42 	.word	0x0800be42
 800af8c:	08008ae1 	.word	0x08008ae1
 800af90:	0800ad43 	.word	0x0800ad43
 800af94:	0800be3e 	.word	0x0800be3e

0800af98 <__sflush_r>:
 800af98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa0:	0716      	lsls	r6, r2, #28
 800afa2:	4605      	mov	r5, r0
 800afa4:	460c      	mov	r4, r1
 800afa6:	d454      	bmi.n	800b052 <__sflush_r+0xba>
 800afa8:	684b      	ldr	r3, [r1, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dc02      	bgt.n	800afb4 <__sflush_r+0x1c>
 800afae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dd48      	ble.n	800b046 <__sflush_r+0xae>
 800afb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	d045      	beq.n	800b046 <__sflush_r+0xae>
 800afba:	2300      	movs	r3, #0
 800afbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afc0:	682f      	ldr	r7, [r5, #0]
 800afc2:	6a21      	ldr	r1, [r4, #32]
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	d030      	beq.n	800b02a <__sflush_r+0x92>
 800afc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	0759      	lsls	r1, r3, #29
 800afce:	d505      	bpl.n	800afdc <__sflush_r+0x44>
 800afd0:	6863      	ldr	r3, [r4, #4]
 800afd2:	1ad2      	subs	r2, r2, r3
 800afd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afd6:	b10b      	cbz	r3, 800afdc <__sflush_r+0x44>
 800afd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afda:	1ad2      	subs	r2, r2, r3
 800afdc:	2300      	movs	r3, #0
 800afde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afe0:	6a21      	ldr	r1, [r4, #32]
 800afe2:	4628      	mov	r0, r5
 800afe4:	47b0      	blx	r6
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	d106      	bne.n	800affa <__sflush_r+0x62>
 800afec:	6829      	ldr	r1, [r5, #0]
 800afee:	291d      	cmp	r1, #29
 800aff0:	d82b      	bhi.n	800b04a <__sflush_r+0xb2>
 800aff2:	4a2a      	ldr	r2, [pc, #168]	@ (800b09c <__sflush_r+0x104>)
 800aff4:	410a      	asrs	r2, r1
 800aff6:	07d6      	lsls	r6, r2, #31
 800aff8:	d427      	bmi.n	800b04a <__sflush_r+0xb2>
 800affa:	2200      	movs	r2, #0
 800affc:	6062      	str	r2, [r4, #4]
 800affe:	04d9      	lsls	r1, r3, #19
 800b000:	6922      	ldr	r2, [r4, #16]
 800b002:	6022      	str	r2, [r4, #0]
 800b004:	d504      	bpl.n	800b010 <__sflush_r+0x78>
 800b006:	1c42      	adds	r2, r0, #1
 800b008:	d101      	bne.n	800b00e <__sflush_r+0x76>
 800b00a:	682b      	ldr	r3, [r5, #0]
 800b00c:	b903      	cbnz	r3, 800b010 <__sflush_r+0x78>
 800b00e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b010:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b012:	602f      	str	r7, [r5, #0]
 800b014:	b1b9      	cbz	r1, 800b046 <__sflush_r+0xae>
 800b016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b01a:	4299      	cmp	r1, r3
 800b01c:	d002      	beq.n	800b024 <__sflush_r+0x8c>
 800b01e:	4628      	mov	r0, r5
 800b020:	f7ff f9f6 	bl	800a410 <_free_r>
 800b024:	2300      	movs	r3, #0
 800b026:	6363      	str	r3, [r4, #52]	@ 0x34
 800b028:	e00d      	b.n	800b046 <__sflush_r+0xae>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4628      	mov	r0, r5
 800b02e:	47b0      	blx	r6
 800b030:	4602      	mov	r2, r0
 800b032:	1c50      	adds	r0, r2, #1
 800b034:	d1c9      	bne.n	800afca <__sflush_r+0x32>
 800b036:	682b      	ldr	r3, [r5, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d0c6      	beq.n	800afca <__sflush_r+0x32>
 800b03c:	2b1d      	cmp	r3, #29
 800b03e:	d001      	beq.n	800b044 <__sflush_r+0xac>
 800b040:	2b16      	cmp	r3, #22
 800b042:	d11e      	bne.n	800b082 <__sflush_r+0xea>
 800b044:	602f      	str	r7, [r5, #0]
 800b046:	2000      	movs	r0, #0
 800b048:	e022      	b.n	800b090 <__sflush_r+0xf8>
 800b04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b04e:	b21b      	sxth	r3, r3
 800b050:	e01b      	b.n	800b08a <__sflush_r+0xf2>
 800b052:	690f      	ldr	r7, [r1, #16]
 800b054:	2f00      	cmp	r7, #0
 800b056:	d0f6      	beq.n	800b046 <__sflush_r+0xae>
 800b058:	0793      	lsls	r3, r2, #30
 800b05a:	680e      	ldr	r6, [r1, #0]
 800b05c:	bf08      	it	eq
 800b05e:	694b      	ldreq	r3, [r1, #20]
 800b060:	600f      	str	r7, [r1, #0]
 800b062:	bf18      	it	ne
 800b064:	2300      	movne	r3, #0
 800b066:	eba6 0807 	sub.w	r8, r6, r7
 800b06a:	608b      	str	r3, [r1, #8]
 800b06c:	f1b8 0f00 	cmp.w	r8, #0
 800b070:	dde9      	ble.n	800b046 <__sflush_r+0xae>
 800b072:	6a21      	ldr	r1, [r4, #32]
 800b074:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b076:	4643      	mov	r3, r8
 800b078:	463a      	mov	r2, r7
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b0      	blx	r6
 800b07e:	2800      	cmp	r0, #0
 800b080:	dc08      	bgt.n	800b094 <__sflush_r+0xfc>
 800b082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b08a:	81a3      	strh	r3, [r4, #12]
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b094:	4407      	add	r7, r0
 800b096:	eba8 0800 	sub.w	r8, r8, r0
 800b09a:	e7e7      	b.n	800b06c <__sflush_r+0xd4>
 800b09c:	dfbffffe 	.word	0xdfbffffe

0800b0a0 <_fflush_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	690b      	ldr	r3, [r1, #16]
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	b913      	cbnz	r3, 800b0b0 <_fflush_r+0x10>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	b118      	cbz	r0, 800b0ba <_fflush_r+0x1a>
 800b0b2:	6a03      	ldr	r3, [r0, #32]
 800b0b4:	b90b      	cbnz	r3, 800b0ba <_fflush_r+0x1a>
 800b0b6:	f7fe f957 	bl	8009368 <__sinit>
 800b0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d0f3      	beq.n	800b0aa <_fflush_r+0xa>
 800b0c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0c4:	07d0      	lsls	r0, r2, #31
 800b0c6:	d404      	bmi.n	800b0d2 <_fflush_r+0x32>
 800b0c8:	0599      	lsls	r1, r3, #22
 800b0ca:	d402      	bmi.n	800b0d2 <_fflush_r+0x32>
 800b0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ce:	f7fe fb46 	bl	800975e <__retarget_lock_acquire_recursive>
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	f7ff ff5f 	bl	800af98 <__sflush_r>
 800b0da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0dc:	07da      	lsls	r2, r3, #31
 800b0de:	4605      	mov	r5, r0
 800b0e0:	d4e4      	bmi.n	800b0ac <_fflush_r+0xc>
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	059b      	lsls	r3, r3, #22
 800b0e6:	d4e1      	bmi.n	800b0ac <_fflush_r+0xc>
 800b0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ea:	f7fe fb39 	bl	8009760 <__retarget_lock_release_recursive>
 800b0ee:	e7dd      	b.n	800b0ac <_fflush_r+0xc>

0800b0f0 <__swhatbuf_r>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f8:	2900      	cmp	r1, #0
 800b0fa:	b096      	sub	sp, #88	@ 0x58
 800b0fc:	4615      	mov	r5, r2
 800b0fe:	461e      	mov	r6, r3
 800b100:	da0d      	bge.n	800b11e <__swhatbuf_r+0x2e>
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b108:	f04f 0100 	mov.w	r1, #0
 800b10c:	bf14      	ite	ne
 800b10e:	2340      	movne	r3, #64	@ 0x40
 800b110:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b114:	2000      	movs	r0, #0
 800b116:	6031      	str	r1, [r6, #0]
 800b118:	602b      	str	r3, [r5, #0]
 800b11a:	b016      	add	sp, #88	@ 0x58
 800b11c:	bd70      	pop	{r4, r5, r6, pc}
 800b11e:	466a      	mov	r2, sp
 800b120:	f000 f848 	bl	800b1b4 <_fstat_r>
 800b124:	2800      	cmp	r0, #0
 800b126:	dbec      	blt.n	800b102 <__swhatbuf_r+0x12>
 800b128:	9901      	ldr	r1, [sp, #4]
 800b12a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b12e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b132:	4259      	negs	r1, r3
 800b134:	4159      	adcs	r1, r3
 800b136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b13a:	e7eb      	b.n	800b114 <__swhatbuf_r+0x24>

0800b13c <__smakebuf_r>:
 800b13c:	898b      	ldrh	r3, [r1, #12]
 800b13e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b140:	079d      	lsls	r5, r3, #30
 800b142:	4606      	mov	r6, r0
 800b144:	460c      	mov	r4, r1
 800b146:	d507      	bpl.n	800b158 <__smakebuf_r+0x1c>
 800b148:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	6123      	str	r3, [r4, #16]
 800b150:	2301      	movs	r3, #1
 800b152:	6163      	str	r3, [r4, #20]
 800b154:	b003      	add	sp, #12
 800b156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b158:	ab01      	add	r3, sp, #4
 800b15a:	466a      	mov	r2, sp
 800b15c:	f7ff ffc8 	bl	800b0f0 <__swhatbuf_r>
 800b160:	9f00      	ldr	r7, [sp, #0]
 800b162:	4605      	mov	r5, r0
 800b164:	4639      	mov	r1, r7
 800b166:	4630      	mov	r0, r6
 800b168:	f7ff f9c6 	bl	800a4f8 <_malloc_r>
 800b16c:	b948      	cbnz	r0, 800b182 <__smakebuf_r+0x46>
 800b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b172:	059a      	lsls	r2, r3, #22
 800b174:	d4ee      	bmi.n	800b154 <__smakebuf_r+0x18>
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	f043 0302 	orr.w	r3, r3, #2
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	e7e2      	b.n	800b148 <__smakebuf_r+0xc>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	6020      	str	r0, [r4, #0]
 800b186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b192:	b15b      	cbz	r3, 800b1ac <__smakebuf_r+0x70>
 800b194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b198:	4630      	mov	r0, r6
 800b19a:	f000 f81d 	bl	800b1d8 <_isatty_r>
 800b19e:	b128      	cbz	r0, 800b1ac <__smakebuf_r+0x70>
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	f023 0303 	bic.w	r3, r3, #3
 800b1a6:	f043 0301 	orr.w	r3, r3, #1
 800b1aa:	81a3      	strh	r3, [r4, #12]
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	431d      	orrs	r5, r3
 800b1b0:	81a5      	strh	r5, [r4, #12]
 800b1b2:	e7cf      	b.n	800b154 <__smakebuf_r+0x18>

0800b1b4 <_fstat_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4d07      	ldr	r5, [pc, #28]	@ (800b1d4 <_fstat_r+0x20>)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	4611      	mov	r1, r2
 800b1c0:	602b      	str	r3, [r5, #0]
 800b1c2:	f7f7 fae5 	bl	8002790 <_fstat>
 800b1c6:	1c43      	adds	r3, r0, #1
 800b1c8:	d102      	bne.n	800b1d0 <_fstat_r+0x1c>
 800b1ca:	682b      	ldr	r3, [r5, #0]
 800b1cc:	b103      	cbz	r3, 800b1d0 <_fstat_r+0x1c>
 800b1ce:	6023      	str	r3, [r4, #0]
 800b1d0:	bd38      	pop	{r3, r4, r5, pc}
 800b1d2:	bf00      	nop
 800b1d4:	200007c8 	.word	0x200007c8

0800b1d8 <_isatty_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4d06      	ldr	r5, [pc, #24]	@ (800b1f4 <_isatty_r+0x1c>)
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	f7f7 fae4 	bl	80027b0 <_isatty>
 800b1e8:	1c43      	adds	r3, r0, #1
 800b1ea:	d102      	bne.n	800b1f2 <_isatty_r+0x1a>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	b103      	cbz	r3, 800b1f2 <_isatty_r+0x1a>
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	200007c8 	.word	0x200007c8

0800b1f8 <_sbrk_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d06      	ldr	r5, [pc, #24]	@ (800b214 <_sbrk_r+0x1c>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	f7f7 faec 	bl	80027e0 <_sbrk>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_sbrk_r+0x1a>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_sbrk_r+0x1a>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	200007c8 	.word	0x200007c8

0800b218 <memcpy>:
 800b218:	440a      	add	r2, r1
 800b21a:	4291      	cmp	r1, r2
 800b21c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b220:	d100      	bne.n	800b224 <memcpy+0xc>
 800b222:	4770      	bx	lr
 800b224:	b510      	push	{r4, lr}
 800b226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b22e:	4291      	cmp	r1, r2
 800b230:	d1f9      	bne.n	800b226 <memcpy+0xe>
 800b232:	bd10      	pop	{r4, pc}

0800b234 <__assert_func>:
 800b234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b236:	4614      	mov	r4, r2
 800b238:	461a      	mov	r2, r3
 800b23a:	4b09      	ldr	r3, [pc, #36]	@ (800b260 <__assert_func+0x2c>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4605      	mov	r5, r0
 800b240:	68d8      	ldr	r0, [r3, #12]
 800b242:	b954      	cbnz	r4, 800b25a <__assert_func+0x26>
 800b244:	4b07      	ldr	r3, [pc, #28]	@ (800b264 <__assert_func+0x30>)
 800b246:	461c      	mov	r4, r3
 800b248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b24c:	9100      	str	r1, [sp, #0]
 800b24e:	462b      	mov	r3, r5
 800b250:	4905      	ldr	r1, [pc, #20]	@ (800b268 <__assert_func+0x34>)
 800b252:	f000 f841 	bl	800b2d8 <fiprintf>
 800b256:	f000 f851 	bl	800b2fc <abort>
 800b25a:	4b04      	ldr	r3, [pc, #16]	@ (800b26c <__assert_func+0x38>)
 800b25c:	e7f4      	b.n	800b248 <__assert_func+0x14>
 800b25e:	bf00      	nop
 800b260:	20000084 	.word	0x20000084
 800b264:	0800be8e 	.word	0x0800be8e
 800b268:	0800be60 	.word	0x0800be60
 800b26c:	0800be53 	.word	0x0800be53

0800b270 <_calloc_r>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	fba1 5402 	umull	r5, r4, r1, r2
 800b276:	b93c      	cbnz	r4, 800b288 <_calloc_r+0x18>
 800b278:	4629      	mov	r1, r5
 800b27a:	f7ff f93d 	bl	800a4f8 <_malloc_r>
 800b27e:	4606      	mov	r6, r0
 800b280:	b928      	cbnz	r0, 800b28e <_calloc_r+0x1e>
 800b282:	2600      	movs	r6, #0
 800b284:	4630      	mov	r0, r6
 800b286:	bd70      	pop	{r4, r5, r6, pc}
 800b288:	220c      	movs	r2, #12
 800b28a:	6002      	str	r2, [r0, #0]
 800b28c:	e7f9      	b.n	800b282 <_calloc_r+0x12>
 800b28e:	462a      	mov	r2, r5
 800b290:	4621      	mov	r1, r4
 800b292:	f7fe f9e7 	bl	8009664 <memset>
 800b296:	e7f5      	b.n	800b284 <_calloc_r+0x14>

0800b298 <__ascii_mbtowc>:
 800b298:	b082      	sub	sp, #8
 800b29a:	b901      	cbnz	r1, 800b29e <__ascii_mbtowc+0x6>
 800b29c:	a901      	add	r1, sp, #4
 800b29e:	b142      	cbz	r2, 800b2b2 <__ascii_mbtowc+0x1a>
 800b2a0:	b14b      	cbz	r3, 800b2b6 <__ascii_mbtowc+0x1e>
 800b2a2:	7813      	ldrb	r3, [r2, #0]
 800b2a4:	600b      	str	r3, [r1, #0]
 800b2a6:	7812      	ldrb	r2, [r2, #0]
 800b2a8:	1e10      	subs	r0, r2, #0
 800b2aa:	bf18      	it	ne
 800b2ac:	2001      	movne	r0, #1
 800b2ae:	b002      	add	sp, #8
 800b2b0:	4770      	bx	lr
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	e7fb      	b.n	800b2ae <__ascii_mbtowc+0x16>
 800b2b6:	f06f 0001 	mvn.w	r0, #1
 800b2ba:	e7f8      	b.n	800b2ae <__ascii_mbtowc+0x16>

0800b2bc <__ascii_wctomb>:
 800b2bc:	4603      	mov	r3, r0
 800b2be:	4608      	mov	r0, r1
 800b2c0:	b141      	cbz	r1, 800b2d4 <__ascii_wctomb+0x18>
 800b2c2:	2aff      	cmp	r2, #255	@ 0xff
 800b2c4:	d904      	bls.n	800b2d0 <__ascii_wctomb+0x14>
 800b2c6:	228a      	movs	r2, #138	@ 0x8a
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ce:	4770      	bx	lr
 800b2d0:	700a      	strb	r2, [r1, #0]
 800b2d2:	2001      	movs	r0, #1
 800b2d4:	4770      	bx	lr
	...

0800b2d8 <fiprintf>:
 800b2d8:	b40e      	push	{r1, r2, r3}
 800b2da:	b503      	push	{r0, r1, lr}
 800b2dc:	4601      	mov	r1, r0
 800b2de:	ab03      	add	r3, sp, #12
 800b2e0:	4805      	ldr	r0, [pc, #20]	@ (800b2f8 <fiprintf+0x20>)
 800b2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e6:	6800      	ldr	r0, [r0, #0]
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	f7ff fd3d 	bl	800ad68 <_vfiprintf_r>
 800b2ee:	b002      	add	sp, #8
 800b2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2f4:	b003      	add	sp, #12
 800b2f6:	4770      	bx	lr
 800b2f8:	20000084 	.word	0x20000084

0800b2fc <abort>:
 800b2fc:	b508      	push	{r3, lr}
 800b2fe:	2006      	movs	r0, #6
 800b300:	f000 f82c 	bl	800b35c <raise>
 800b304:	2001      	movs	r0, #1
 800b306:	f7f7 f9f3 	bl	80026f0 <_exit>

0800b30a <_raise_r>:
 800b30a:	291f      	cmp	r1, #31
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4605      	mov	r5, r0
 800b310:	460c      	mov	r4, r1
 800b312:	d904      	bls.n	800b31e <_raise_r+0x14>
 800b314:	2316      	movs	r3, #22
 800b316:	6003      	str	r3, [r0, #0]
 800b318:	f04f 30ff 	mov.w	r0, #4294967295
 800b31c:	bd38      	pop	{r3, r4, r5, pc}
 800b31e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b320:	b112      	cbz	r2, 800b328 <_raise_r+0x1e>
 800b322:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b326:	b94b      	cbnz	r3, 800b33c <_raise_r+0x32>
 800b328:	4628      	mov	r0, r5
 800b32a:	f000 f831 	bl	800b390 <_getpid_r>
 800b32e:	4622      	mov	r2, r4
 800b330:	4601      	mov	r1, r0
 800b332:	4628      	mov	r0, r5
 800b334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b338:	f000 b818 	b.w	800b36c <_kill_r>
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d00a      	beq.n	800b356 <_raise_r+0x4c>
 800b340:	1c59      	adds	r1, r3, #1
 800b342:	d103      	bne.n	800b34c <_raise_r+0x42>
 800b344:	2316      	movs	r3, #22
 800b346:	6003      	str	r3, [r0, #0]
 800b348:	2001      	movs	r0, #1
 800b34a:	e7e7      	b.n	800b31c <_raise_r+0x12>
 800b34c:	2100      	movs	r1, #0
 800b34e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b352:	4620      	mov	r0, r4
 800b354:	4798      	blx	r3
 800b356:	2000      	movs	r0, #0
 800b358:	e7e0      	b.n	800b31c <_raise_r+0x12>
	...

0800b35c <raise>:
 800b35c:	4b02      	ldr	r3, [pc, #8]	@ (800b368 <raise+0xc>)
 800b35e:	4601      	mov	r1, r0
 800b360:	6818      	ldr	r0, [r3, #0]
 800b362:	f7ff bfd2 	b.w	800b30a <_raise_r>
 800b366:	bf00      	nop
 800b368:	20000084 	.word	0x20000084

0800b36c <_kill_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	@ (800b38c <_kill_r+0x20>)
 800b370:	2300      	movs	r3, #0
 800b372:	4604      	mov	r4, r0
 800b374:	4608      	mov	r0, r1
 800b376:	4611      	mov	r1, r2
 800b378:	602b      	str	r3, [r5, #0]
 800b37a:	f7f7 f9a9 	bl	80026d0 <_kill>
 800b37e:	1c43      	adds	r3, r0, #1
 800b380:	d102      	bne.n	800b388 <_kill_r+0x1c>
 800b382:	682b      	ldr	r3, [r5, #0]
 800b384:	b103      	cbz	r3, 800b388 <_kill_r+0x1c>
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	bd38      	pop	{r3, r4, r5, pc}
 800b38a:	bf00      	nop
 800b38c:	200007c8 	.word	0x200007c8

0800b390 <_getpid_r>:
 800b390:	f7f7 b996 	b.w	80026c0 <_getpid>

0800b394 <_init>:
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b396:	bf00      	nop
 800b398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b39a:	bc08      	pop	{r3}
 800b39c:	469e      	mov	lr, r3
 800b39e:	4770      	bx	lr

0800b3a0 <_fini>:
 800b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a2:	bf00      	nop
 800b3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a6:	bc08      	pop	{r3}
 800b3a8:	469e      	mov	lr, r3
 800b3aa:	4770      	bx	lr
