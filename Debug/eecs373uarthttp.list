
eecs373uarthttp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b314  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800b4d8  0800b4d8  0000c4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba70  0800ba70  0000d254  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba70  0800ba70  0000ca70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba78  0800ba78  0000d254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba78  0800ba78  0000ca78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba7c  0800ba7c  0000ca7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800ba80  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000254  0800bcd4  0000d254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800bcd4  0000d7a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019374  00000000  00000000  0000d284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da1  00000000  00000000  000265f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e5  00000000  00000000  0002aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c590  00000000  00000000  0002bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b70e  00000000  00000000  000581ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fa71  00000000  00000000  000738bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018332c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007280  00000000  00000000  00183370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000254 	.word	0x20000254
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b4bc 	.word	0x0800b4bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000258 	.word	0x20000258
 80001fc:	0800b4bc 	.word	0x0800b4bc

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <FoodOrder_Init>:
    char name[20];
    uint8_t valid;
    int id;
    int box; // 0 when it has not been delivered
} FoodOrder;
void FoodOrder_Init(FoodOrder* order) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    order->valid = 0;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	751a      	strb	r2, [r3, #20]
    order->box = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
    for(int i = 0; i < 20; ++i){
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e007      	b.n	8000f12 <FoodOrder_Init+0x2a>
    	order->name[i] = '\0';
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 20; ++i){
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b13      	cmp	r3, #19
 8000f16:	ddf4      	ble.n	8000f02 <FoodOrder_Init+0x1a>
    }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <big>:
    0x01, 0x01, 0x1E, 0x00, 0x19, 0x1D, 0x17, 0x12, 0x00, 0x3C, 0x3C, 0x3C,
    0x3C, 0x00, 0x00, 0x00, 0x00, 0x00 // #255 NBSP
};

// convert a little endian 16 bit number to big endian
uint16_t big(uint16_t original) {
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	80fb      	strh	r3, [r7, #6]
	uint16_t result = original << 8;
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	81fb      	strh	r3, [r7, #14]
	result |= original >> 8;
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	81fb      	strh	r3, [r7, #14]
	return result;
 8000f42:	89fb      	ldrh	r3, [r7, #14]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <sendCommand>:

// send an SPI command in the correct format
void sendCommand(SPI_HandleTypeDef* spi, uint8_t commandByte, uint8_t *dataBytes, uint16_t numDataBytes) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	72fb      	strb	r3, [r7, #11]
 8000f60:	4613      	mov	r3, r2
 8000f62:	813b      	strh	r3, [r7, #8]
	//printf("Sending command: cmd %x, args %d\r\n", commandByte, numDataBytes);

	// first send the command byte
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET); // pull DC low
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <sendCommand+0x50>)
 8000f6c:	f002 f91c 	bl	80031a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &commandByte, 1, 100); // write the byte
 8000f70:	f107 010b 	add.w	r1, r7, #11
 8000f74:	2364      	movs	r3, #100	@ 0x64
 8000f76:	2201      	movs	r2, #1
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f004 fc80 	bl	800587e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET); // pull DC back high
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f84:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <sendCommand+0x50>)
 8000f86:	f002 f90f 	bl	80031a8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spi, dataBytes, numDataBytes, 100);
 8000f8a:	893a      	ldrh	r2, [r7, #8]
 8000f8c:	2364      	movs	r3, #100	@ 0x64
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f004 fc74 	bl	800587e <HAL_SPI_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	48001400 	.word	0x48001400

08000fa4 <sendBlock>:

// x1 <= x2, y1 <= y2
void sendBlock(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t value) {
 8000fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fa8:	b08f      	sub	sp, #60	@ 0x3c
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	4608      	mov	r0, r1
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	817b      	strh	r3, [r7, #10]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	813b      	strh	r3, [r7, #8]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	466b      	mov	r3, sp
 8000fc2:	461e      	mov	r6, r3
	uint32_t amount = (uint32_t)(x2-x1+1) * (uint32_t)(y2-y1+1); // amount of pixels to send
 8000fc4:	893a      	ldrh	r2, [r7, #8]
 8000fc6:	897b      	ldrh	r3, [r7, #10]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	fb01 f303 	mul.w	r3, r1, r3
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t widthSpan[2] = {big(x1), big(x2)};
 8000fde:	897b      	ldrh	r3, [r7, #10]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ffa0 	bl	8000f26 <big>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	82bb      	strh	r3, [r7, #20]
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff9a 	bl	8000f26 <big>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	82fb      	strh	r3, [r7, #22]
	uint16_t heightSpan[2] = {big(y1), big(y2)};
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff94 	bl	8000f26 <big>
 8000ffe:	4603      	mov	r3, r0
 8001000:	823b      	strh	r3, [r7, #16]
 8001002:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff8d 	bl	8000f26 <big>
 800100c:	4603      	mov	r3, r0
 800100e:	827b      	strh	r3, [r7, #18]
	sendCommand(spi, HX8357_CASET, (uint8_t*)widthSpan, 4);
 8001010:	f107 0214 	add.w	r2, r7, #20
 8001014:	2304      	movs	r3, #4
 8001016:	212a      	movs	r1, #42	@ 0x2a
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff ff99 	bl	8000f50 <sendCommand>
	sendCommand(spi, HX8357_PASET, (uint8_t*)heightSpan, 4);
 800101e:	f107 0210 	add.w	r2, r7, #16
 8001022:	2304      	movs	r3, #4
 8001024:	212b      	movs	r1, #43	@ 0x2b
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f7ff ff92 	bl	8000f50 <sendCommand>
	// This sends the pixels. There are likely more than 2^16 to send,
	// however the HAL SPI can only send 2^16 at a time, so break up the
	// transaction into chunks of 2^16. Don't send one at a time because that
	// is much much slower. It is still fairly slow so in the future I
	// could try to optimize it.
	sendCommand(spi, HX8357_RAMWR, NULL, 0);
 800102c:	2300      	movs	r3, #0
 800102e:	2200      	movs	r2, #0
 8001030:	212c      	movs	r1, #44	@ 0x2c
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ff8c 	bl	8000f50 <sendCommand>
	uint16_t fullLength = 32767; // maximum amount of pixels that can be sent at once
 8001038:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800103c:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t buffer[fullLength];
 800103e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001040:	460b      	mov	r3, r1
 8001042:	3b01      	subs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
 8001046:	b28b      	uxth	r3, r1
 8001048:	2200      	movs	r2, #0
 800104a:	4698      	mov	r8, r3
 800104c:	4691      	mov	r9, r2
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800105a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800105e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001062:	b28b      	uxth	r3, r1
 8001064:	2200      	movs	r2, #0
 8001066:	461c      	mov	r4, r3
 8001068:	4615      	mov	r5, r2
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	012b      	lsls	r3, r5, #4
 8001074:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001078:	0122      	lsls	r2, r4, #4
 800107a:	460b      	mov	r3, r1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	3307      	adds	r3, #7
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	ebad 0d03 	sub.w	sp, sp, r3
 8001088:	466b      	mov	r3, sp
 800108a:	3301      	adds	r3, #1
 800108c:	085b      	lsrs	r3, r3, #1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	623b      	str	r3, [r7, #32]
	for (uint16_t i = 0; i < fullLength; i++) buffer[i] = big(value); // fill the buffer
 8001092:	2300      	movs	r3, #0
 8001094:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001096:	e00d      	b.n	80010b4 <sendBlock+0x110>
 8001098:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 800109a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff41 	bl	8000f26 <big>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 80010ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80010b0:	3301      	adds	r3, #1
 80010b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80010b4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80010b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3ed      	bcc.n	8001098 <sendBlock+0xf4>
	uint32_t fullTransactions = amount / fullLength; // amount of full transactions to send
 80010bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c4:	61fb      	str	r3, [r7, #28]
	uint16_t weirdLength = amount % fullLength; // one transaction will be a different amount
 80010c6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80010c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80010ce:	fb01 f202 	mul.w	r2, r1, r2
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	837b      	strh	r3, [r7, #26]
	if (weirdLength != 0) {
 80010d6:	8b7b      	ldrh	r3, [r7, #26]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <sendBlock+0x148>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, weirdLength * 2, 100);
 80010dc:	8b7b      	ldrh	r3, [r7, #26]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	2364      	movs	r3, #100	@ 0x64
 80010e4:	6a39      	ldr	r1, [r7, #32]
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f004 fbc9 	bl	800587e <HAL_SPI_Transmit>
	}
	for (uint32_t i = 0; i < fullTransactions; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80010f0:	e00a      	b.n	8001108 <sendBlock+0x164>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, fullLength * 2, 100);
 80010f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	2364      	movs	r3, #100	@ 0x64
 80010fa:	6a39      	ldr	r1, [r7, #32]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f004 fbbe 	bl	800587e <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < fullTransactions; i++) {
 8001102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001104:	3301      	adds	r3, #1
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
 8001108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3f0      	bcc.n	80010f2 <sendBlock+0x14e>
 8001110:	46b5      	mov	sp, r6
	}
}
 8001112:	bf00      	nop
 8001114:	373c      	adds	r7, #60	@ 0x3c
 8001116:	46bd      	mov	sp, r7
 8001118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800111c <initialize_screen>:
		if (offset + width > 479) return; // off the end of the screen
		sendCharacter(spi, offset, y, s[i], color, size_x, size_y);
	}
}

void initialize_screen(SPI_HandleTypeDef* spi) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	printf("Starting initialization.\r\n");
 8001124:	4827      	ldr	r0, [pc, #156]	@ (80011c4 <initialize_screen+0xa8>)
 8001126:	f008 fa51 	bl	80095cc <puts>

	// hardware reset the display
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001130:	4825      	ldr	r0, [pc, #148]	@ (80011c8 <initialize_screen+0xac>)
 8001132:	f002 f839 	bl	80031a8 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001136:	20fa      	movs	r0, #250	@ 0xfa
 8001138:	f001 fcb4 	bl	8002aa4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	4821      	ldr	r0, [pc, #132]	@ (80011c8 <initialize_screen+0xac>)
 8001144:	f002 f830 	bl	80031a8 <HAL_GPIO_WritePin>

	uint8_t *addr = initd;
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <initialize_screen+0xb0>)
 800114a:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 800114c:	e02c      	b.n	80011a8 <initialize_screen+0x8c>
		x = *(addr++);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	60fa      	str	r2, [r7, #12]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	72bb      	strb	r3, [r7, #10]
		numArgs = x & 0x7F;
 8001158:	7abb      	ldrb	r3, [r7, #10]
 800115a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800115e:	727b      	strb	r3, [r7, #9]
		if (cmd != 0xFF) { // '255' is ignored
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	2bff      	cmp	r3, #255	@ 0xff
 8001164:	d015      	beq.n	8001192 <initialize_screen+0x76>
		  if (x & 0x80) {  // If high bit set, numArgs is a delay time
 8001166:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800116a:	2b00      	cmp	r3, #0
 800116c:	da06      	bge.n	800117c <initialize_screen+0x60>
			sendCommand(spi, cmd, NULL, 0);
 800116e:	7af9      	ldrb	r1, [r7, #11]
 8001170:	2300      	movs	r3, #0
 8001172:	2200      	movs	r2, #0
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff feeb 	bl	8000f50 <sendCommand>
 800117a:	e00a      	b.n	8001192 <initialize_screen+0x76>
		  } else {
			sendCommand(spi, cmd, addr, numArgs);
 800117c:	7a7b      	ldrb	r3, [r7, #9]
 800117e:	b29b      	uxth	r3, r3
 8001180:	7af9      	ldrb	r1, [r7, #11]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fee3 	bl	8000f50 <sendCommand>
			addr += numArgs;
 800118a:	7a7b      	ldrb	r3, [r7, #9]
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
		  }
		}
		if (x & 0x80) {       // If high bit set...
 8001192:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001196:	2b00      	cmp	r3, #0
 8001198:	da06      	bge.n	80011a8 <initialize_screen+0x8c>
		  HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800119a:	7a7a      	ldrb	r2, [r7, #9]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fc7e 	bl	8002aa4 <HAL_Delay>
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60fa      	str	r2, [r7, #12]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	72fb      	strb	r3, [r7, #11]
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ca      	bne.n	800114e <initialize_screen+0x32>
		}
	}
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	0800b4d8 	.word	0x0800b4d8
 80011c8:	48001400 	.word	0x48001400
 80011cc:	20000000 	.word	0x20000000

080011d0 <drawButton>:
		{0x0, 0x0}
};

uint8_t states[5] = {0, 0, 0, 0, 0};

void drawButton(SPI_HandleTypeDef* spi, uint8_t button, uint8_t on) {
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
 80011dc:	4613      	mov	r3, r2
 80011de:	70bb      	strb	r3, [r7, #2]
	switch (button) {
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	f200 808e 	bhi.w	8001304 <drawButton+0x134>
 80011e8:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <drawButton+0x20>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001205 	.word	0x08001205
 80011f4:	08001235 	.word	0x08001235
 80011f8:	08001269 	.word	0x08001269
 80011fc:	0800129f 	.word	0x0800129f
 8001200:	080012d7 	.word	0x080012d7
	case 0: sendBlock(spi, 0, xend, yend-96, yend, colors[button][on]); return;
 8001204:	f240 153f 	movw	r5, #319	@ 0x13f
 8001208:	f240 13df 	movw	r3, #479	@ 0x1df
 800120c:	3b60      	subs	r3, #96	@ 0x60
 800120e:	b299      	uxth	r1, r3
 8001210:	f240 10df 	movw	r0, #479	@ 0x1df
 8001214:	78fa      	ldrb	r2, [r7, #3]
 8001216:	78bb      	ldrb	r3, [r7, #2]
 8001218:	4c3c      	ldr	r4, [pc, #240]	@ (800130c <drawButton+0x13c>)
 800121a:	0052      	lsls	r2, r2, #1
 800121c:	4413      	add	r3, r2
 800121e:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	9000      	str	r0, [sp, #0]
 8001226:	460b      	mov	r3, r1
 8001228:	462a      	mov	r2, r5
 800122a:	2100      	movs	r1, #0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff feb9 	bl	8000fa4 <sendBlock>
 8001232:	e067      	b.n	8001304 <drawButton+0x134>
	case 1: sendBlock(spi, 0, xend, yend-(96*2), yend-96-1, colors[button][on]); return;
 8001234:	f240 153f 	movw	r5, #319	@ 0x13f
 8001238:	f240 13df 	movw	r3, #479	@ 0x1df
 800123c:	3bc0      	subs	r3, #192	@ 0xc0
 800123e:	b298      	uxth	r0, r3
 8001240:	f240 13df 	movw	r3, #479	@ 0x1df
 8001244:	3b61      	subs	r3, #97	@ 0x61
 8001246:	b29b      	uxth	r3, r3
 8001248:	78f9      	ldrb	r1, [r7, #3]
 800124a:	78ba      	ldrb	r2, [r7, #2]
 800124c:	4c2f      	ldr	r4, [pc, #188]	@ (800130c <drawButton+0x13c>)
 800124e:	0049      	lsls	r1, r1, #1
 8001250:	440a      	add	r2, r1
 8001252:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4603      	mov	r3, r0
 800125c:	462a      	mov	r2, r5
 800125e:	2100      	movs	r1, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fe9f 	bl	8000fa4 <sendBlock>
 8001266:	e04d      	b.n	8001304 <drawButton+0x134>
	case 2: sendBlock(spi, 0, xend, yend-(96*3), yend-(96*2)-1, colors[button][on]); return;
 8001268:	f240 153f 	movw	r5, #319	@ 0x13f
 800126c:	f240 13df 	movw	r3, #479	@ 0x1df
 8001270:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001274:	b298      	uxth	r0, r3
 8001276:	f240 13df 	movw	r3, #479	@ 0x1df
 800127a:	3bc1      	subs	r3, #193	@ 0xc1
 800127c:	b29b      	uxth	r3, r3
 800127e:	78f9      	ldrb	r1, [r7, #3]
 8001280:	78ba      	ldrb	r2, [r7, #2]
 8001282:	4c22      	ldr	r4, [pc, #136]	@ (800130c <drawButton+0x13c>)
 8001284:	0049      	lsls	r1, r1, #1
 8001286:	440a      	add	r2, r1
 8001288:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	4603      	mov	r3, r0
 8001292:	462a      	mov	r2, r5
 8001294:	2100      	movs	r1, #0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fe84 	bl	8000fa4 <sendBlock>
 800129c:	e032      	b.n	8001304 <drawButton+0x134>
	case 3: sendBlock(spi, 0, xend, yend-(96*4), yend-(96*3)-1, colors[button][on]); return;
 800129e:	f240 153f 	movw	r5, #319	@ 0x13f
 80012a2:	f240 13df 	movw	r3, #479	@ 0x1df
 80012a6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80012aa:	b298      	uxth	r0, r3
 80012ac:	f240 13df 	movw	r3, #479	@ 0x1df
 80012b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	78f9      	ldrb	r1, [r7, #3]
 80012b8:	78ba      	ldrb	r2, [r7, #2]
 80012ba:	4c14      	ldr	r4, [pc, #80]	@ (800130c <drawButton+0x13c>)
 80012bc:	0049      	lsls	r1, r1, #1
 80012be:	440a      	add	r2, r1
 80012c0:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 80012c4:	9201      	str	r2, [sp, #4]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	4603      	mov	r3, r0
 80012ca:	462a      	mov	r2, r5
 80012cc:	2100      	movs	r1, #0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fe68 	bl	8000fa4 <sendBlock>
 80012d4:	e016      	b.n	8001304 <drawButton+0x134>
	case 4: sendBlock(spi, 0, xend, 0, yend-(96*4)-1, colors[button][on]); return;
 80012d6:	f240 143f 	movw	r4, #319	@ 0x13f
 80012da:	f240 13df 	movw	r3, #479	@ 0x1df
 80012de:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	78f9      	ldrb	r1, [r7, #3]
 80012e6:	78ba      	ldrb	r2, [r7, #2]
 80012e8:	4808      	ldr	r0, [pc, #32]	@ (800130c <drawButton+0x13c>)
 80012ea:	0049      	lsls	r1, r1, #1
 80012ec:	440a      	add	r2, r1
 80012ee:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80012f2:	9201      	str	r2, [sp, #4]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2300      	movs	r3, #0
 80012f8:	4622      	mov	r2, r4
 80012fa:	2100      	movs	r1, #0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fe51 	bl	8000fa4 <sendBlock>
 8001302:	bf00      	nop
	}
}
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bdb0      	pop	{r4, r5, r7, pc}
 800130a:	bf00      	nop
 800130c:	20000068 	.word	0x20000068

08001310 <drawAll>:

void drawAll(SPI_HandleTypeDef* spi) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
//	drawButton(spi, 0, 0);
//	drawButton(spi, 1, 0);
//	drawButton(spi, 2, 0);
//	drawButton(spi, 3, 0);
//	drawButton(spi, 4, 0);
	for (uint8_t i = 0; i < 5; i++) {
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e00a      	b.n	8001334 <drawAll+0x24>
		drawButton(spi, i, states[i]);
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <drawAll+0x34>)
 8001322:	5cd2      	ldrb	r2, [r2, r3]
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	4619      	mov	r1, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff51 	bl	80011d0 <drawButton>
	for (uint8_t i = 0; i < 5; i++) {
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b04      	cmp	r3, #4
 8001338:	d9f1      	bls.n	800131e <drawAll+0xe>
	}
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000270 	.word	0x20000270

08001348 <flip>:

void flip(SPI_HandleTypeDef* spi, uint8_t button) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
	states[button] = !states[button];
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <flip+0x3c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2da      	uxtb	r2, r3
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	4611      	mov	r1, r2
 8001368:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <flip+0x3c>)
 800136a:	54d1      	strb	r1, [r2, r3]
	drawButton(spi, button, states[button]);
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <flip+0x3c>)
 8001370:	5cd2      	ldrb	r2, [r2, r3]
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff2a 	bl	80011d0 <drawButton>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000270 	.word	0x20000270

08001388 <draw>:

void draw(SPI_HandleTypeDef* spi) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	printf("Sending pixels.\r\n");
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <draw+0x1c>)
 8001392:	f008 f91b 	bl	80095cc <puts>



	// use https://rgbcolorpicker.com/565 to find pixel values
	//sendBlock(spi, 0, xend, 0, yend, 0);
	drawAll(spi);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffba 	bl	8001310 <drawAll>
	//sendString(spi, xend-70, 20, "Delivering for?", 0xffff, 2, 2);
	//sendString(spi, 25+75+25 + 10, 50 + 10, "B. Obama", 0x0, 2, 2);
	//sendString(spi, 25 + 10, 50 + 10, "Benton E.", 0x0, 5, 5);
	//sendBlock(spi, 0, 0, 0, 0, 0x17e0);
	//sendBlock(spi, xend, xend, yend, yend, 0xf880);
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	0800b4f4 	.word	0x0800b4f4

080013a8 <writeRegister8>:
#include "touch-defines.h"

// plan is to try stmpe. if it flops, switch to manual
// i2c1_sda is PB9, i2c1_scl is PB8

void writeRegister8(I2C_HandleTypeDef* i2c, uint8_t reg, uint8_t value){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
 80013b4:	4613      	mov	r3, r2
 80013b6:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {reg, value};
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	733b      	strb	r3, [r7, #12]
 80013bc:	78bb      	ldrb	r3, [r7, #2]
 80013be:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, buffer, 2, 1000);
 80013c0:	f107 020c 	add.w	r2, r7, #12
 80013c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2302      	movs	r3, #2
 80013cc:	2182      	movs	r1, #130	@ 0x82
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f001 ffb6 	bl	8003340 <HAL_I2C_Master_Transmit>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <writeRegister8+0x40>
		printf("I2C write to STMPE failed with %d.\r\n", status);
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <writeRegister8+0x48>)
 80013e4:	f008 f88a 	bl	80094fc <iprintf>
	}
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	0800b508 	.word	0x0800b508

080013f4 <readRegister8>:

uint8_t readRegister8(I2C_HandleTypeDef* i2c, uint8_t reg) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
	// problem is don't know what restart is
	// You are supposed to i2c write the address, then do an empty i2c read
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, &reg, 1, 1000);
 8001400:	1cfa      	adds	r2, r7, #3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	2182      	movs	r1, #130	@ 0x82
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f001 ff97 	bl	8003340 <HAL_I2C_Master_Transmit>
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <readRegister8+0x32>
		printf("I2C write (for the purpose of reading) to STMPE failed with %d.\r\n", status);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4619      	mov	r1, r3
 8001420:	480f      	ldr	r0, [pc, #60]	@ (8001460 <readRegister8+0x6c>)
 8001422:	f008 f86b 	bl	80094fc <iprintf>
	}

	uint8_t result = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	73bb      	strb	r3, [r7, #14]
	// TODO: maybe the byte value here should be 1
	status = HAL_I2C_Master_Receive(i2c, (STMPE_ADDR << 1) | 1, &result, 1, 1000);
 800142a:	f107 020e 	add.w	r2, r7, #14
 800142e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	2183      	movs	r1, #131	@ 0x83
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f002 f899 	bl	8003570 <HAL_I2C_Master_Receive>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <readRegister8+0x62>
		printf("I2C read from STMPE failed with %d.\r\n", status);
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <readRegister8+0x70>)
 800144e:	f008 f855 	bl	80094fc <iprintf>
		return 0;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <readRegister8+0x64>
	}
	return result;
 8001456:	7bbb      	ldrb	r3, [r7, #14]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0800b530 	.word	0x0800b530
 8001464:	0800b574 	.word	0x0800b574

08001468 <bufferEmpty>:
// 1 is true, 0 is false
uint8_t touched(I2C_HandleTypeDef* i2c) {
	return readRegister8(i2c, STMPE_TSC_CTRL) & 0x80;
}

uint8_t bufferEmpty(I2C_HandleTypeDef* i2c) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	return (readRegister8(i2c, STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
 8001470:	214b      	movs	r1, #75	@ 0x4b
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffbe 	bl	80013f4 <readRegister8>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	b2db      	uxtb	r3, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <readPosition>:

void readPosition(I2C_HandleTypeDef* i2c, uint16_t *x, uint16_t *y, uint8_t *z) {
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  uint8_t data[4];

  for (uint8_t i = 0; i < 4; i++) {
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
 800149a:	e00e      	b.n	80014ba <readPosition+0x32>
    data[i] = readRegister8(i2c, 0xD7);
 800149c:	7dfc      	ldrb	r4, [r7, #23]
 800149e:	21d7      	movs	r1, #215	@ 0xd7
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff ffa7 	bl	80013f4 <readRegister8>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	f104 0318 	add.w	r3, r4, #24
 80014ae:	443b      	add	r3, r7
 80014b0:	f803 2c08 	strb.w	r2, [r3, #-8]
  for (uint8_t i = 0; i < 4; i++) {
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	3301      	adds	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d9ed      	bls.n	800149c <readPosition+0x14>
  }
  *x = data[0];
 80014c0:	7c3b      	ldrb	r3, [r7, #16]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	801a      	strh	r2, [r3, #0]
  *x <<= 4;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	801a      	strh	r2, [r3, #0]
  *x |= (data[1] >> 4);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	7c7a      	ldrb	r2, [r7, #17]
 80014da:	0912      	lsrs	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	4313      	orrs	r3, r2
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	801a      	strh	r2, [r3, #0]
  *y = data[1] & 0x0F;
 80014e6:	7c7b      	ldrb	r3, [r7, #17]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	801a      	strh	r2, [r3, #0]
  *y <<= 8;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	801a      	strh	r2, [r3, #0]
  *y |= data[2];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	7cba      	ldrb	r2, [r7, #18]
 8001504:	4313      	orrs	r3, r2
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	801a      	strh	r2, [r3, #0]
  *z = data[3];
 800150c:	7cfa      	ldrb	r2, [r7, #19]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	701a      	strb	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <map>:

// from: https://github.com/arduino/ArduinoCore-API/blob/0c853c5cded2768122fae258d42b2b4c06cdb3b1/api/Common.cpp
uint16_t map(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 800151a:	b480      	push	{r7}
 800151c:	b087      	sub	sp, #28
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	603b      	str	r3, [r7, #0]
	uint32_t result = (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	6a39      	ldr	r1, [r7, #32]
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	1a8a      	subs	r2, r1, r2
 8001534:	fb03 f202 	mul.w	r2, r3, r2
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1acb      	subs	r3, r1, r3
 800153e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
	if (result > out_max) return out_max;
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	d902      	bls.n	8001556 <map+0x3c>
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	b29b      	uxth	r3, r3
 8001554:	e008      	b.n	8001568 <map+0x4e>
	if (result < out_min) return out_min;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	429a      	cmp	r2, r3
 800155c:	d202      	bcs.n	8001564 <map+0x4a>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	e001      	b.n	8001568 <map+0x4e>
	return result;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	b29b      	uxth	r3, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <touchHook>:
uint8_t within(uint16_t x, uint16_t y, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
	return (x > x1) && (x < x2) && (y > y1) && (y < y2);
}

// returns the button that was touched
int8_t touchHook(I2C_HandleTypeDef* i2c) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af02      	add	r7, sp, #8
 800157a:	6078      	str	r0, [r7, #4]
	writeRegister8(i2c, STMPE_INT_STA, 0xFF);
 800157c:	22ff      	movs	r2, #255	@ 0xff
 800157e:	210b      	movs	r1, #11
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff11 	bl	80013a8 <writeRegister8>
	uint16_t x, y;
	uint8_t z;

	// clear the buffer and take the last thing from the buffer
	while (!bufferEmpty(i2c)) {
 8001586:	e008      	b.n	800159a <touchHook+0x26>
		readPosition(i2c, &x, &y, &z);
 8001588:	f107 0309 	add.w	r3, r7, #9
 800158c:	f107 020a 	add.w	r2, r7, #10
 8001590:	f107 010c 	add.w	r1, r7, #12
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff77 	bl	8001488 <readPosition>
	while (!bufferEmpty(i2c)) {
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff64 	bl	8001468 <bufferEmpty>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <touchHook+0x14>
	}

	if (y > 3700 || y < 450) { // was 700
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	f640 6274 	movw	r2, #3700	@ 0xe74
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d803      	bhi.n	80015b8 <touchHook+0x44>
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80015b6:	d207      	bcs.n	80015c8 <touchHook+0x54>
		printf("Off the end with %d\r\n", y);
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	4619      	mov	r1, r3
 80015bc:	4817      	ldr	r0, [pc, #92]	@ (800161c <touchHook+0xa8>)
 80015be:	f007 ff9d 	bl	80094fc <iprintf>
		return -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e025      	b.n	8001614 <touchHook+0xa0>
	}
	y = map(y, 3700, 450, 0, 479);
 80015c8:	897b      	ldrh	r3, [r7, #10]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f240 13df 	movw	r3, #479	@ 0x1df
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2300      	movs	r3, #0
 80015d4:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80015d8:	f640 6174 	movw	r1, #3700	@ 0xe74
 80015dc:	f7ff ff9d 	bl	800151a <map>
 80015e0:	4603      	mov	r3, r0
 80015e2:	817b      	strh	r3, [r7, #10]

	uint16_t button = 4 - y / 96;
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <touchHook+0xac>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	099b      	lsrs	r3, r3, #6
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f1c3 0304 	rsb	r3, r3, #4
 80015f4:	81fb      	strh	r3, [r7, #14]
	if (button == 4) return -1;
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d102      	bne.n	8001602 <touchHook+0x8e>
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	e008      	b.n	8001614 <touchHook+0xa0>

	printf("Touched button %d %d.\r\n", y, button);
 8001602:	897b      	ldrh	r3, [r7, #10]
 8001604:	4619      	mov	r1, r3
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	461a      	mov	r2, r3
 800160a:	4806      	ldr	r0, [pc, #24]	@ (8001624 <touchHook+0xb0>)
 800160c:	f007 ff76 	bl	80094fc <iprintf>

	return button;
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	b25b      	sxtb	r3, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	0800b59c 	.word	0x0800b59c
 8001620:	aaaaaaab 	.word	0xaaaaaaab
 8001624:	0800b5b4 	.word	0x0800b5b4

08001628 <initialize_touch>:

void initialize_touch(I2C_HandleTypeDef* i2c) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	//HAL_Delay(1000); // When restarted, QR code is spamming, need to let it cool down
	// TODO: only thing I can think of is that you need to read the version here for some reason
	// the problem is that I need to do some sort of request response thing, for read
	// it is a write then request

	printf("Initializing touch.\r\n");
 8001630:	483c      	ldr	r0, [pc, #240]	@ (8001724 <initialize_touch+0xfc>)
 8001632:	f007 ffcb 	bl	80095cc <puts>

	  uint16_t v;
	  v = readRegister8(i2c, 0);
 8001636:	2100      	movs	r1, #0
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fedb 	bl	80013f4 <readRegister8>
 800163e:	4603      	mov	r3, r0
 8001640:	81bb      	strh	r3, [r7, #12]
	  v <<= 8;
 8001642:	89bb      	ldrh	r3, [r7, #12]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	81bb      	strh	r3, [r7, #12]
	  v |= readRegister8(i2c, 1);
 8001648:	2101      	movs	r1, #1
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fed2 	bl	80013f4 <readRegister8>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	81bb      	strh	r3, [r7, #12]
	  printf("STMPE version is 0x%x\r\n", v);
 800165a:	89bb      	ldrh	r3, [r7, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4832      	ldr	r0, [pc, #200]	@ (8001728 <initialize_touch+0x100>)
 8001660:	f007 ff4c 	bl	80094fc <iprintf>

	  writeRegister8(i2c, STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
 8001664:	2202      	movs	r2, #2
 8001666:	2103      	movs	r1, #3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fe9d 	bl	80013a8 <writeRegister8>

	  HAL_Delay(1000);
 800166e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001672:	f001 fa17 	bl	8002aa4 <HAL_Delay>

	  for (uint8_t i = 0; i < 65; i++) {
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e007      	b.n	800168c <initialize_touch+0x64>
	    readRegister8(i2c, i);
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	4619      	mov	r1, r3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff feb7 	bl	80013f4 <readRegister8>
	  for (uint8_t i = 0; i < 65; i++) {
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	3301      	adds	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	2b40      	cmp	r3, #64	@ 0x40
 8001690:	d9f4      	bls.n	800167c <initialize_touch+0x54>
	  }

	  writeRegister8(i2c, STMPE_SYS_CTRL2, 0x0); // turn on clocks!
 8001692:	2200      	movs	r2, #0
 8001694:	2104      	movs	r1, #4
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fe86 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CTRL,
 800169c:	2201      	movs	r2, #1
 800169e:	2140      	movs	r1, #64	@ 0x40
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fe81 	bl	80013a8 <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(i2c, STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	210a      	movs	r1, #10
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fe7c 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
 80016b0:	2260      	movs	r2, #96	@ 0x60
 80016b2:	2120      	movs	r1, #32
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fe77 	bl	80013a8 <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(i2c, STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
 80016ba:	2202      	movs	r2, #2
 80016bc:	2121      	movs	r1, #33	@ 0x21
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fe72 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
 80016c4:	22a4      	movs	r2, #164	@ 0xa4
 80016c6:	2141      	movs	r1, #65	@ 0x41
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fe6d 	bl	80013a8 <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(i2c, STMPE_TSC_FRACTION_Z, 0x6);
 80016ce:	2206      	movs	r2, #6
 80016d0:	2156      	movs	r1, #86	@ 0x56
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fe68 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_TH, 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	214a      	movs	r1, #74	@ 0x4a
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fe63 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	214b      	movs	r1, #75	@ 0x4b
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fe5e 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, 0); // unreset
 80016ec:	2200      	movs	r2, #0
 80016ee:	214b      	movs	r1, #75	@ 0x4b
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fe59 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2158      	movs	r1, #88	@ 0x58
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe54 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_STA, 0xFF); // reset all ints
 8001700:	22ff      	movs	r2, #255	@ 0xff
 8001702:	210b      	movs	r1, #11
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fe4f 	bl	80013a8 <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_CTRL,
 800170a:	2203      	movs	r2, #3
 800170c:	2109      	movs	r1, #9
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fe4a 	bl	80013a8 <writeRegister8>
	                 STMPE_INT_CTRL_POL_LOW | STMPE_INT_CTRL_EDGE | STMPE_INT_CTRL_ENABLE);

	  printf("Finished touch setup.\r\n");
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <initialize_touch+0x104>)
 8001716:	f007 ff59 	bl	80095cc <puts>
//			  readPosition(i2c, &x, &y, &z);
//			  //printf("yes touch: (%d, %d, %d)\r", x, y, z);
//			  //printf("no  touch: \r");
//		  }
//	  }
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	0800b5cc 	.word	0x0800b5cc
 8001728:	0800b5e4 	.word	0x0800b5e4
 800172c:	0800b5fc 	.word	0x0800b5fc

08001730 <openDoor>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void uartSend (char *str);
int prevIdCode = -1;
void openDoor(int id){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	printf("Open The door signal sent with id %d\r\n", id);
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4803      	ldr	r0, [pc, #12]	@ (8001748 <openDoor+0x18>)
 800173c:	f007 fede 	bl	80094fc <iprintf>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	0800b614 	.word	0x0800b614

0800174c <readTinyCodeData>:

void readTinyCodeData(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b0c4      	sub	sp, #272	@ 0x110
 8001750:	af02      	add	r7, sp, #8
    uint8_t readBuffer[256]; // Buffer to store the read data
    uint16_t contentLength = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106

    // First, read the content length
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, READ_LEN, 1000);
 8001758:	463a      	mov	r2, r7
 800175a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2302      	movs	r3, #2
 8001762:	2118      	movs	r1, #24
 8001764:	4831      	ldr	r0, [pc, #196]	@ (800182c <readTinyCodeData+0xe0>)
 8001766:	f001 ff03 	bl	8003570 <HAL_I2C_Master_Receive>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
    if(status != HAL_OK) {
 8001770:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8001774:	2b00      	cmp	r3, #0
 8001776:	d155      	bne.n	8001824 <readTinyCodeData+0xd8>
        // Handle communication error
    } else {
        // If read is successful, parse the content length
        contentLength = readBuffer[0] | (readBuffer[1] << 8);
 8001778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800177c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b21a      	sxth	r2, r3
 8001784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800178c:	785b      	ldrb	r3, [r3, #1]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21b      	sxth	r3, r3
 8001796:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
        if(contentLength == 0){
 800179a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d03d      	beq.n	800181e <readTinyCodeData+0xd2>
        	return;
        }
        if(contentLength > 0 && contentLength <= 254) {
 80017a2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03c      	beq.n	8001824 <readTinyCodeData+0xd8>
 80017aa:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80017ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80017b0:	d838      	bhi.n	8001824 <readTinyCodeData+0xd8>
            // Now, read the actual content based on the content length
            status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, contentLength + 2, 1000);
 80017b2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80017b6:	3302      	adds	r3, #2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	463a      	mov	r2, r7
 80017bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017c0:	9100      	str	r1, [sp, #0]
 80017c2:	2118      	movs	r1, #24
 80017c4:	4819      	ldr	r0, [pc, #100]	@ (800182c <readTinyCodeData+0xe0>)
 80017c6:	f001 fed3 	bl	8003570 <HAL_I2C_Master_Receive>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
            if(status != HAL_OK) {
 80017d0:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d125      	bne.n	8001824 <readTinyCodeData+0xd8>
                // Handle communication error
            } else {
                // Data is now in readBuffer[2] to readBuffer[contentLength+1], process it as needed
                // Remember to handle non-UTF-8 or other data safely
            	readBuffer[contentLength + 3] = '\0';
 80017d8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80017dc:	3303      	adds	r3, #3
 80017de:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80017e2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80017e6:	2100      	movs	r1, #0
 80017e8:	54d1      	strb	r1, [r2, r3]
//            	for(int i =0; i < contentLength; ++i){
//            		printf("%c",readBuffer[2 + i]);
//            	}

            	int parsedId = atoi((char *)readBuffer + 2);
 80017ea:	463b      	mov	r3, r7
 80017ec:	3302      	adds	r3, #2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f007 f8e2 	bl	80089b8 <atoi>
 80017f4:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
            	if(parsedId == 0){
 80017f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <readTinyCodeData+0xd6>
                       return;
                        	}
            	if (parsedId != prevIdCode){
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <readTinyCodeData+0xe4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001808:	429a      	cmp	r2, r3
 800180a:	d00b      	beq.n	8001824 <readTinyCodeData+0xd8>
            		prevIdCode = parsedId;
 800180c:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <readTinyCodeData+0xe4>)
 800180e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001812:	6013      	str	r3, [r2, #0]
            		openDoor(parsedId);
 8001814:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001818:	f7ff ff8a 	bl	8001730 <openDoor>
 800181c:	e002      	b.n	8001824 <readTinyCodeData+0xd8>
        	return;
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <readTinyCodeData+0xd8>
                       return;
 8001822:	bf00      	nop
            }
        } else {
            // No content or content length invalid
        }
    }
}
 8001824:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000278 	.word	0x20000278
 8001830:	2000007c 	.word	0x2000007c

08001834 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	printf("Timer triggered.\r\n");
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800183e:	f007 fec5 	bl	80095cc <puts>
	if(htim->Instance == TIM1){
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d10d      	bne.n	8001868 <HAL_TIM_PeriodElapsedCallback+0x34>
		  uartSend("LIST\n");
 800184c:	480a      	ldr	r0, [pc, #40]	@ (8001878 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800184e:	f000 f91f 	bl	8001a90 <uartSend>
		  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800185c:	4413      	add	r3, r2
 800185e:	2201      	movs	r2, #1
 8001860:	4619      	mov	r1, r3
 8001862:	4808      	ldr	r0, [pc, #32]	@ (8001884 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001864:	f005 f858 	bl	8006918 <HAL_UART_Receive_IT>
	}
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	0800b63c 	.word	0x0800b63c
 8001874:	40012c00 	.word	0x40012c00
 8001878:	0800b650 	.word	0x0800b650
 800187c:	20000644 	.word	0x20000644
 8001880:	200004a4 	.word	0x200004a4
 8001884:	20000360 	.word	0x20000360

08001888 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a25      	ldr	r2, [pc, #148]	@ (800192c <HAL_UART_RxCpltCallback+0xa4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d143      	bne.n	8001922 <HAL_UART_RxCpltCallback+0x9a>

		 ++i;
 800189a:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_UART_RxCpltCallback+0xa8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <HAL_UART_RxCpltCallback+0xa8>)
 80018a2:	6013      	str	r3, [r2, #0]
		 while(i > 0){
 80018a4:	e039      	b.n	800191a <HAL_UART_RxCpltCallback+0x92>
		 //		  printf("%c", rxBuffer[rxIndex]);
		 	 	if (rxBuffer[rxIndex] == '\n' || rxIndex >= RX_BUFFER_SIZE - 1 ||rxBuffer[rxIndex] == '\r' ) {
 80018a6:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <HAL_UART_RxCpltCallback+0xac>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <HAL_UART_RxCpltCallback+0xb0>)
 80018b0:	5c9b      	ldrb	r3, [r3, r2]
 80018b2:	2b0a      	cmp	r3, #10
 80018b4:	d00c      	beq.n	80018d0 <HAL_UART_RxCpltCallback+0x48>
 80018b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <HAL_UART_RxCpltCallback+0xac>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80018be:	d807      	bhi.n	80018d0 <HAL_UART_RxCpltCallback+0x48>
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <HAL_UART_RxCpltCallback+0xac>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_UART_RxCpltCallback+0xb0>)
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	2b0d      	cmp	r3, #13
 80018ce:	d10d      	bne.n	80018ec <HAL_UART_RxCpltCallback+0x64>
		 	 		// Null-terminate the string
		 	 		rxBuffer[rxIndex] = '\0';
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_UART_RxCpltCallback+0xac>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <HAL_UART_RxCpltCallback+0xb0>)
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

		 	 		// Process received data
		 	 		processReceivedData(rxBuffer);
 80018de:	4816      	ldr	r0, [pc, #88]	@ (8001938 <HAL_UART_RxCpltCallback+0xb0>)
 80018e0:	f000 f82e 	bl	8001940 <processReceivedData>

		 	 		// Reset index
		 	 		rxIndex = 0;
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <HAL_UART_RxCpltCallback+0xac>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	e006      	b.n	80018fa <HAL_UART_RxCpltCallback+0x72>
		 	 		} else {
		 	 		// Increment index to receive the next byte
		 	 		rxIndex++;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_UART_RxCpltCallback+0xac>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <HAL_UART_RxCpltCallback+0xac>)
 80018f8:	801a      	strh	r2, [r3, #0]
		 	 	}
		 	 		// Prepare to receive the next byte
		 	 		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_UART_RxCpltCallback+0xac>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <HAL_UART_RxCpltCallback+0xb0>)
 8001904:	4413      	add	r3, r2
 8001906:	2201      	movs	r2, #1
 8001908:	4619      	mov	r1, r3
 800190a:	480c      	ldr	r0, [pc, #48]	@ (800193c <HAL_UART_RxCpltCallback+0xb4>)
 800190c:	f005 f804 	bl	8006918 <HAL_UART_Receive_IT>

		 	 		  --i;
 8001910:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_UART_RxCpltCallback+0xa8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a06      	ldr	r2, [pc, #24]	@ (8001930 <HAL_UART_RxCpltCallback+0xa8>)
 8001918:	6013      	str	r3, [r2, #0]
		 while(i > 0){
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_UART_RxCpltCallback+0xa8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1c1      	bne.n	80018a6 <HAL_UART_RxCpltCallback+0x1e>
		 	 	  }
	}

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40004800 	.word	0x40004800
 8001930:	20000648 	.word	0x20000648
 8001934:	20000644 	.word	0x20000644
 8001938:	200004a4 	.word	0x200004a4
 800193c:	20000360 	.word	0x20000360

08001940 <processReceivedData>:
void setBox(int id, int box){
	 char command[10];
	 sprintf(command, "PUT%d%d\n", box, id);
	 uartSend(command);
}
void processReceivedData(char* data) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	if(strcmp(data, "DATA") != 0){
 8001948:	494c      	ldr	r1, [pc, #304]	@ (8001a7c <processReceivedData+0x13c>)
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7fe fc58 	bl	8000200 <strcmp>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 808c 	bne.w	8001a70 <processReceivedData+0x130>
		return;
	}
  data += 5;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3305      	adds	r3, #5
 800195c:	607b      	str	r3, [r7, #4]
    int totalOrders = atoi(data);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f007 f82a 	bl	80089b8 <atoi>
 8001964:	60b8      	str	r0, [r7, #8]
    data += 3;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3303      	adds	r3, #3
 800196a:	607b      	str	r3, [r7, #4]
    int processedOrders = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e009      	b.n	800198a <processReceivedData+0x4a>
          		FoodOrder_Init(&foodOrders[i]);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	015b      	lsls	r3, r3, #5
 800197a:	4a41      	ldr	r2, [pc, #260]	@ (8001a80 <processReceivedData+0x140>)
 800197c:	4413      	add	r3, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fab2 	bl	8000ee8 <FoodOrder_Init>
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	3301      	adds	r3, #1
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b04      	cmp	r3, #4
 800198e:	ddf2      	ble.n	8001976 <processReceivedData+0x36>
          	}
    if(totalOrders == 0){
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06e      	beq.n	8001a74 <processReceivedData+0x134>
    	return;
    }

    while(processedOrders < totalOrders){
 8001996:	e036      	b.n	8001a06 <processReceivedData+0xc6>

    	foodOrders[processedOrders].id = atoi(data);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f007 f80d 	bl	80089b8 <atoi>
 800199e:	4602      	mov	r2, r0
 80019a0:	4937      	ldr	r1, [pc, #220]	@ (8001a80 <processReceivedData+0x140>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	440b      	add	r3, r1
 80019a8:	3318      	adds	r3, #24
 80019aa:	601a      	str	r2, [r3, #0]
    	data += 11;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	330b      	adds	r3, #11
 80019b0:	607b      	str	r3, [r7, #4]
    	strcpy(foodOrders[processedOrders].name, data);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	015b      	lsls	r3, r3, #5
 80019b6:	4a32      	ldr	r2, [pc, #200]	@ (8001a80 <processReceivedData+0x140>)
 80019b8:	4413      	add	r3, r2
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f007 ff64 	bl	800988a <strcpy>
    	while(*data != '\0'){
 80019c2:	e002      	b.n	80019ca <processReceivedData+0x8a>
    		++data;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
    	while(*data != '\0'){
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f8      	bne.n	80019c4 <processReceivedData+0x84>
    	}
    	++data;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3301      	adds	r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
    	foodOrders[processedOrders].box = atoi(data);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f006 ffed 	bl	80089b8 <atoi>
 80019de:	4602      	mov	r2, r0
 80019e0:	4927      	ldr	r1, [pc, #156]	@ (8001a80 <processReceivedData+0x140>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	015b      	lsls	r3, r3, #5
 80019e6:	440b      	add	r3, r1
 80019e8:	331c      	adds	r3, #28
 80019ea:	601a      	str	r2, [r3, #0]
    	data += 2;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3302      	adds	r3, #2
 80019f0:	607b      	str	r3, [r7, #4]
    	foodOrders[processedOrders].valid = 1;
 80019f2:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <processReceivedData+0x140>)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	015b      	lsls	r3, r3, #5
 80019f8:	4413      	add	r3, r2
 80019fa:	3314      	adds	r3, #20
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
    	++processedOrders;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
    while(processedOrders < totalOrders){
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbc4      	blt.n	8001998 <processReceivedData+0x58>
    }
    for(int i = 0; i < processedOrders; ++i){
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e028      	b.n	8001a66 <processReceivedData+0x126>
    	if(!foodOrders[i].valid) continue;
 8001a14:	4a1a      	ldr	r2, [pc, #104]	@ (8001a80 <processReceivedData+0x140>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	015b      	lsls	r3, r3, #5
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3314      	adds	r3, #20
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d01c      	beq.n	8001a5e <processReceivedData+0x11e>
    	printf("Name: %s\r\n", foodOrders[i].name);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <processReceivedData+0x140>)
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4815      	ldr	r0, [pc, #84]	@ (8001a84 <processReceivedData+0x144>)
 8001a30:	f007 fd64 	bl	80094fc <iprintf>
    	printf("id: %d\r\n", foodOrders[i].id);
 8001a34:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <processReceivedData+0x140>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	015b      	lsls	r3, r3, #5
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3318      	adds	r3, #24
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4811      	ldr	r0, [pc, #68]	@ (8001a88 <processReceivedData+0x148>)
 8001a44:	f007 fd5a 	bl	80094fc <iprintf>
    	printf("box: %d\r\n", foodOrders[i].box);
 8001a48:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <processReceivedData+0x140>)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	015b      	lsls	r3, r3, #5
 8001a4e:	4413      	add	r3, r2
 8001a50:	331c      	adds	r3, #28
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <processReceivedData+0x14c>)
 8001a58:	f007 fd50 	bl	80094fc <iprintf>
 8001a5c:	e000      	b.n	8001a60 <processReceivedData+0x120>
    	if(!foodOrders[i].valid) continue;
 8001a5e:	bf00      	nop
    for(int i = 0; i < processedOrders; ++i){
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbd2      	blt.n	8001a14 <processReceivedData+0xd4>
 8001a6e:	e002      	b.n	8001a76 <processReceivedData+0x136>
		return;
 8001a70:	bf00      	nop
 8001a72:	e000      	b.n	8001a76 <processReceivedData+0x136>
    	return;
 8001a74:	bf00      	nop
    }
}
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	0800b664 	.word	0x0800b664
 8001a80:	200005a4 	.word	0x200005a4
 8001a84:	0800b66c 	.word	0x0800b66c
 8001a88:	0800b678 	.word	0x0800b678
 8001a8c:	0800b684 	.word	0x0800b684

08001a90 <uartSend>:
static void uartSend (char *str)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen (str), 1000);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fc11 	bl	80002c0 <strlen>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <uartSend+0x28>)
 8001aaa:	f004 fea7 	bl	80067fc <HAL_UART_Transmit>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000360 	.word	0x20000360

08001abc <HAL_GPIO_EXTI_Callback>:

int pendingTouch = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  	pendingTouch = 1;
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	2000064c 	.word	0x2000064c

08001adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	e009      	b.n	8001afc <main+0x20>
		FoodOrder_Init(&foodOrders[i]);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <main+0x8c>)
 8001aee:	4413      	add	r3, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f9f9 	bl	8000ee8 <FoodOrder_Init>
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3301      	adds	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	ddf2      	ble.n	8001ae8 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b02:	f000 ff5a 	bl	80029ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b06:	f000 f839 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0a:	f000 f9f3 	bl	8001ef4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b0e:	f000 f913 	bl	8001d38 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001b12:	f000 f8c5 	bl	8001ca0 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001b16:	f000 f999 	bl	8001e4c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001b1a:	f000 f881 	bl	8001c20 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001b1e:	f000 f957 	bl	8001dd0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8001b22:	4812      	ldr	r0, [pc, #72]	@ (8001b6c <main+0x90>)
 8001b24:	f004 f9dc 	bl	8005ee0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  initialize_touch(&hi2c2);
 8001b28:	4811      	ldr	r0, [pc, #68]	@ (8001b70 <main+0x94>)
 8001b2a:	f7ff fd7d 	bl	8001628 <initialize_touch>
  initialize_screen(&hspi1);
 8001b2e:	4811      	ldr	r0, [pc, #68]	@ (8001b74 <main+0x98>)
 8001b30:	f7ff faf4 	bl	800111c <initialize_screen>
  draw(&hspi1);
 8001b34:	480f      	ldr	r0, [pc, #60]	@ (8001b74 <main+0x98>)
 8001b36:	f7ff fc27 	bl	8001388 <draw>

  while (1)
  {
	  if (pendingTouch) {
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <main+0x9c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <main+0x80>
		  pendingTouch = 0; // put this at the end to debounce or something
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <main+0x9c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

		  uint8_t button = touchHook(&hi2c2);
 8001b48:	4809      	ldr	r0, [pc, #36]	@ (8001b70 <main+0x94>)
 8001b4a:	f7ff fd13 	bl	8001574 <touchHook>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	70fb      	strb	r3, [r7, #3]

		  if (button != -1) flip(&hspi1, button);
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4807      	ldr	r0, [pc, #28]	@ (8001b74 <main+0x98>)
 8001b58:	f7ff fbf6 	bl	8001348 <flip>
	  }


	  HAL_Delay(10);
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f000 ffa1 	bl	8002aa4 <HAL_Delay>
	  readTinyCodeData();
 8001b62:	f7ff fdf3 	bl	800174c <readTinyCodeData>
	  if (pendingTouch) {
 8001b66:	e7e8      	b.n	8001b3a <main+0x5e>
 8001b68:	200005a4 	.word	0x200005a4
 8001b6c:	20000458 	.word	0x20000458
 8001b70:	20000278 	.word	0x20000278
 8001b74:	200003f4 	.word	0x200003f4
 8001b78:	2000064c 	.word	0x2000064c

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b096      	sub	sp, #88	@ 0x58
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	2244      	movs	r2, #68	@ 0x44
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f007 fdfe 	bl	800978c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	463b      	mov	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ba2:	f002 f925 	bl	8003df0 <HAL_PWREx_ControlVoltageScaling>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bac:	f000 fbce 	bl	800234c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bbc:	2360      	movs	r3, #96	@ 0x60
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 f9b9 	bl	8003f58 <HAL_RCC_OscConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001bec:	f000 fbae 	bl	800234c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	2103      	movs	r1, #3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fdbf 	bl	800478c <HAL_RCC_ClockConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c14:	f000 fb9a 	bl	800234c <Error_Handler>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3758      	adds	r7, #88	@ 0x58
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c26:	4a1c      	ldr	r2, [pc, #112]	@ (8001c98 <MX_I2C2_Init+0x78>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c9c <MX_I2C2_Init+0x7c>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c36:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c42:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c5a:	480e      	ldr	r0, [pc, #56]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c5c:	f001 fad4 	bl	8003208 <HAL_I2C_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c66:	f000 fb71 	bl	800234c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4809      	ldr	r0, [pc, #36]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c6e:	f002 f807 	bl	8003c80 <HAL_I2CEx_ConfigAnalogFilter>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c78:	f000 fb68 	bl	800234c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <MX_I2C2_Init+0x74>)
 8001c80:	f002 f849 	bl	8003d16 <HAL_I2CEx_ConfigDigitalFilter>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c8a:	f000 fb5f 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000278 	.word	0x20000278
 8001c98:	40005800 	.word	0x40005800
 8001c9c:	10707dbc 	.word	0x10707dbc

08001ca0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001ca6:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <MX_LPUART1_UART_Init+0x94>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001caa:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cb0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ce8:	4811      	ldr	r0, [pc, #68]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cea:	f004 fd37 	bl	800675c <HAL_UART_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cf4:	f000 fb2a 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	480d      	ldr	r0, [pc, #52]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001cfc:	f006 fd91 	bl	8008822 <HAL_UARTEx_SetTxFifoThreshold>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d06:	f000 fb21 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4808      	ldr	r0, [pc, #32]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001d0e:	f006 fdc6 	bl	800889e <HAL_UARTEx_SetRxFifoThreshold>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d18:	f000 fb18 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	@ (8001d30 <MX_LPUART1_UART_Init+0x90>)
 8001d1e:	f006 fd47 	bl	80087b0 <HAL_UARTEx_DisableFifoMode>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d28:	f000 fb10 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200002cc 	.word	0x200002cc
 8001d34:	40008000 	.word	0x40008000

08001d38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d3c:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d3e:	4a23      	ldr	r2, [pc, #140]	@ (8001dcc <MX_USART3_UART_Init+0x94>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d42:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d74:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d80:	4811      	ldr	r0, [pc, #68]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d82:	f004 fceb 	bl	800675c <HAL_UART_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d8c:	f000 fade 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d90:	2100      	movs	r1, #0
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d94:	f006 fd45 	bl	8008822 <HAL_UARTEx_SetTxFifoThreshold>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d9e:	f000 fad5 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4808      	ldr	r0, [pc, #32]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001da6:	f006 fd7a 	bl	800889e <HAL_UARTEx_SetRxFifoThreshold>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001db0:	f000 facc 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	@ (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001db6:	f006 fcfb 	bl	80087b0 <HAL_UARTEx_DisableFifoMode>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dc0:	f000 fac4 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000360 	.word	0x20000360
 8001dcc:	40004800 	.word	0x40004800

08001dd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e48 <MX_SPI1_Init+0x78>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001ddc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001de0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001dea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001dee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001df6:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001dfe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001e06:	2208      	movs	r2, #8
 8001e08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001e1e:	2207      	movs	r2, #7
 8001e20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <MX_SPI1_Init+0x74>)
 8001e30:	f003 fc82 	bl	8005738 <HAL_SPI_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e3a:	f000 fa87 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200003f4 	.word	0x200003f4
 8001e48:	40013000 	.word	0x40013000

08001e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001e6c:	4a20      	ldr	r2, [pc, #128]	@ (8001ef0 <MX_TIM1_Init+0xa4>)
 8001e6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30000;
 8001e70:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001e72:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001e76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b1c      	ldr	r3, [pc, #112]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001e80:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001e84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e86:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e98:	4814      	ldr	r0, [pc, #80]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001e9a:	f003 ffc9 	bl	8005e30 <HAL_TIM_Base_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001ea4:	f000 fa52 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480d      	ldr	r0, [pc, #52]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001eb6:	f004 f985 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ec0:	f000 fa44 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	@ (8001eec <MX_TIM1_Init+0xa0>)
 8001ed6:	f004 fb9b 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ee0:	f000 fa34 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000458 	.word	0x20000458
 8001ef0:	40012c00 	.word	0x40012c00

08001ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08e      	sub	sp, #56	@ 0x38
 8001ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f0a:	4bb2      	ldr	r3, [pc, #712]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	4ab1      	ldr	r2, [pc, #708]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f16:	4baf      	ldr	r3, [pc, #700]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	4bac      	ldr	r3, [pc, #688]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	4aab      	ldr	r2, [pc, #684]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2e:	4ba9      	ldr	r3, [pc, #676]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f3a:	4ba6      	ldr	r3, [pc, #664]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	4aa5      	ldr	r2, [pc, #660]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f46:	4ba3      	ldr	r3, [pc, #652]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f52:	4ba0      	ldr	r3, [pc, #640]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	4a9f      	ldr	r2, [pc, #636]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5e:	4b9d      	ldr	r3, [pc, #628]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b9a      	ldr	r3, [pc, #616]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	4a99      	ldr	r2, [pc, #612]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f76:	4b97      	ldr	r3, [pc, #604]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	4b94      	ldr	r3, [pc, #592]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f86:	4a93      	ldr	r2, [pc, #588]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8e:	4b91      	ldr	r3, [pc, #580]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9a:	4b8e      	ldr	r3, [pc, #568]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	4a8d      	ldr	r2, [pc, #564]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fb2:	4b88      	ldr	r3, [pc, #544]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	4a87      	ldr	r2, [pc, #540]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fbe:	4b85      	ldr	r3, [pc, #532]	@ (80021d4 <MX_GPIO_Init+0x2e0>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001fca:	f001 ffb5 	bl	8003f38 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001fd4:	4880      	ldr	r0, [pc, #512]	@ (80021d8 <MX_GPIO_Init+0x2e4>)
 8001fd6:	f001 f8e7 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fda:	230c      	movs	r3, #12
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fea:	230d      	movs	r3, #13
 8001fec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4879      	ldr	r0, [pc, #484]	@ (80021dc <MX_GPIO_Init+0x2e8>)
 8001ff6:	f000 ff45 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800200a:	230d      	movs	r3, #13
 800200c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800200e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002012:	4619      	mov	r1, r3
 8002014:	4870      	ldr	r0, [pc, #448]	@ (80021d8 <MX_GPIO_Init+0x2e4>)
 8002016:	f000 ff35 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800201a:	230f      	movs	r3, #15
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800201e:	230b      	movs	r3, #11
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	486c      	ldr	r0, [pc, #432]	@ (80021e0 <MX_GPIO_Init+0x2ec>)
 800202e:	f000 ff29 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002032:	2301      	movs	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002042:	2301      	movs	r3, #1
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002050:	f000 ff18 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002054:	2308      	movs	r3, #8
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002058:	230b      	movs	r3, #11
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800206a:	f000 ff0b 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800206e:	2301      	movs	r3, #1
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800207e:	2302      	movs	r3, #2
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	4856      	ldr	r0, [pc, #344]	@ (80021e4 <MX_GPIO_Init+0x2f0>)
 800208a:	f000 fefb 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800208e:	2302      	movs	r3, #2
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002092:	230b      	movs	r3, #11
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800209e:	4619      	mov	r1, r3
 80020a0:	4850      	ldr	r0, [pc, #320]	@ (80021e4 <MX_GPIO_Init+0x2f0>)
 80020a2:	f000 feef 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80020a6:	2344      	movs	r3, #68	@ 0x44
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020aa:	2303      	movs	r3, #3
 80020ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b6:	4619      	mov	r1, r3
 80020b8:	484a      	ldr	r0, [pc, #296]	@ (80021e4 <MX_GPIO_Init+0x2f0>)
 80020ba:	f000 fee3 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d4:	4619      	mov	r1, r3
 80020d6:	4840      	ldr	r0, [pc, #256]	@ (80021d8 <MX_GPIO_Init+0x2e4>)
 80020d8:	f000 fed4 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f0:	4619      	mov	r1, r3
 80020f2:	4839      	ldr	r0, [pc, #228]	@ (80021d8 <MX_GPIO_Init+0x2e4>)
 80020f4:	f000 fec6 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210a:	2301      	movs	r3, #1
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	4833      	ldr	r0, [pc, #204]	@ (80021e4 <MX_GPIO_Init+0x2f0>)
 8002116:	f000 feb5 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800211a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800212c:	230d      	movs	r3, #13
 800212e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	482b      	ldr	r0, [pc, #172]	@ (80021e4 <MX_GPIO_Init+0x2f0>)
 8002138:	f000 fea4 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800213c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800214e:	230e      	movs	r3, #14
 8002150:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	4822      	ldr	r0, [pc, #136]	@ (80021e4 <MX_GPIO_Init+0x2f0>)
 800215a:	f000 fe93 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800215e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002170:	2302      	movs	r3, #2
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002178:	4619      	mov	r1, r3
 800217a:	481b      	ldr	r0, [pc, #108]	@ (80021e8 <MX_GPIO_Init+0x2f4>)
 800217c:	f000 fe82 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002180:	2340      	movs	r3, #64	@ 0x40
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002190:	230d      	movs	r3, #13
 8002192:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002198:	4619      	mov	r1, r3
 800219a:	4811      	ldr	r0, [pc, #68]	@ (80021e0 <MX_GPIO_Init+0x2ec>)
 800219c:	f000 fe72 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b0:	2302      	movs	r3, #2
 80021b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	4809      	ldr	r0, [pc, #36]	@ (80021e0 <MX_GPIO_Init+0x2ec>)
 80021bc:	f000 fe62 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80021c0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80021d2:	e00b      	b.n	80021ec <MX_GPIO_Init+0x2f8>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48001400 	.word	0x48001400
 80021dc:	48001000 	.word	0x48001000
 80021e0:	48000800 	.word	0x48000800
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021ec:	230c      	movs	r3, #12
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4848      	ldr	r0, [pc, #288]	@ (8002318 <MX_GPIO_Init+0x424>)
 80021f8:	f000 fe44 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80021fc:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800220e:	230a      	movs	r3, #10
 8002210:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002216:	4619      	mov	r1, r3
 8002218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800221c:	f000 fe32 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002238:	f000 fe24 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800223c:	2301      	movs	r3, #1
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800224c:	2309      	movs	r3, #9
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002254:	4619      	mov	r1, r3
 8002256:	4831      	ldr	r0, [pc, #196]	@ (800231c <MX_GPIO_Init+0x428>)
 8002258:	f000 fe14 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800225c:	2304      	movs	r3, #4
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800226c:	230c      	movs	r3, #12
 800226e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002274:	4619      	mov	r1, r3
 8002276:	4829      	ldr	r0, [pc, #164]	@ (800231c <MX_GPIO_Init+0x428>)
 8002278:	f000 fe04 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800227c:	2378      	movs	r3, #120	@ 0x78
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800228c:	2307      	movs	r3, #7
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002294:	4619      	mov	r1, r3
 8002296:	4821      	ldr	r0, [pc, #132]	@ (800231c <MX_GPIO_Init+0x428>)
 8002298:	f000 fdf4 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800229c:	2338      	movs	r3, #56	@ 0x38
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022ac:	2306      	movs	r3, #6
 80022ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022b4:	4619      	mov	r1, r3
 80022b6:	481a      	ldr	r0, [pc, #104]	@ (8002320 <MX_GPIO_Init+0x42c>)
 80022b8:	f000 fde4 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c2:	2312      	movs	r3, #18
 80022c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ce:	2304      	movs	r3, #4
 80022d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d6:	4619      	mov	r1, r3
 80022d8:	4811      	ldr	r0, [pc, #68]	@ (8002320 <MX_GPIO_Init+0x42c>)
 80022da:	f000 fdd3 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022ee:	2302      	movs	r3, #2
 80022f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	480a      	ldr	r0, [pc, #40]	@ (8002324 <MX_GPIO_Init+0x430>)
 80022fa:	f000 fdc3 	bl	8002e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2028      	movs	r0, #40	@ 0x28
 8002304:	f000 fccd 	bl	8002ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002308:	2028      	movs	r0, #40	@ 0x28
 800230a:	f000 fce6 	bl	8002cda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800230e:	bf00      	nop
 8002310:	3738      	adds	r7, #56	@ 0x38
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	48000800 	.word	0x48000800
 800231c:	48000c00 	.word	0x48000c00
 8002320:	48000400 	.word	0x48000400
 8002324:	48001000 	.word	0x48001000

08002328 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002330:	1d39      	adds	r1, r7, #4
 8002332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002336:	2201      	movs	r2, #1
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <__io_putchar+0x20>)
 800233a:	f004 fa5f 	bl	80067fc <HAL_UART_Transmit>
  return ch;
 800233e:	687b      	ldr	r3, [r7, #4]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200002cc 	.word	0x200002cc

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <Error_Handler+0x8>

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <HAL_MspInit+0x44>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	4a0e      	ldr	r2, [pc, #56]	@ (800239c <HAL_MspInit+0x44>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6613      	str	r3, [r2, #96]	@ 0x60
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <HAL_MspInit+0x44>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_MspInit+0x44>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <HAL_MspInit+0x44>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002380:	6593      	str	r3, [r2, #88]	@ 0x58
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_MspInit+0x44>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0ae      	sub	sp, #184	@ 0xb8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	2294      	movs	r2, #148	@ 0x94
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f007 f9e3 	bl	800978c <memset>
  if(hi2c->Instance==I2C2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002478 <HAL_I2C_MspInit+0xd8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d14f      	bne.n	8002470 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fc93 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80023e8:	f7ff ffb0 	bl	800234c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023ec:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_I2C_MspInit+0xdc>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <HAL_I2C_MspInit+0xdc>)
 80023f2:	f043 0320 	orr.w	r3, r3, #32
 80023f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023f8:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_I2C_MspInit+0xdc>)
 80023fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002404:	2303      	movs	r3, #3
 8002406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240a:	2312      	movs	r3, #18
 800240c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002410:	2301      	movs	r3, #1
 8002412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800241c:	2304      	movs	r3, #4
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002422:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002426:	4619      	mov	r1, r3
 8002428:	4815      	ldr	r0, [pc, #84]	@ (8002480 <HAL_I2C_MspInit+0xe0>)
 800242a:	f000 fd2b 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800242e:	2304      	movs	r3, #4
 8002430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002434:	2312      	movs	r3, #18
 8002436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002446:	2304      	movs	r3, #4
 8002448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800244c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002450:	4619      	mov	r1, r3
 8002452:	480b      	ldr	r0, [pc, #44]	@ (8002480 <HAL_I2C_MspInit+0xe0>)
 8002454:	f000 fd16 	bl	8002e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002458:	4b08      	ldr	r3, [pc, #32]	@ (800247c <HAL_I2C_MspInit+0xdc>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	4a07      	ldr	r2, [pc, #28]	@ (800247c <HAL_I2C_MspInit+0xdc>)
 800245e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002462:	6593      	str	r3, [r2, #88]	@ 0x58
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_I2C_MspInit+0xdc>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	37b8      	adds	r7, #184	@ 0xb8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40005800 	.word	0x40005800
 800247c:	40021000 	.word	0x40021000
 8002480:	48001400 	.word	0x48001400

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0b0      	sub	sp, #192	@ 0xc0
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800249c:	f107 0318 	add.w	r3, r7, #24
 80024a0:	2294      	movs	r2, #148	@ 0x94
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f007 f971 	bl	800978c <memset>
  if(huart->Instance==LPUART1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a47      	ldr	r2, [pc, #284]	@ (80025cc <HAL_UART_MspInit+0x148>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d13e      	bne.n	8002532 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024b4:	2320      	movs	r3, #32
 80024b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024bc:	f107 0318 	add.w	r3, r7, #24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 fc21 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024cc:	f7ff ff3e 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024d0:	4b3f      	ldr	r3, [pc, #252]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 80024d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d4:	4a3e      	ldr	r2, [pc, #248]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80024dc:	4b3c      	ldr	r3, [pc, #240]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024e8:	4b39      	ldr	r3, [pc, #228]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ec:	4a38      	ldr	r2, [pc, #224]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 80024ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f4:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8002500:	f001 fd1a 	bl	8003f38 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002504:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800251e:	2308      	movs	r3, #8
 8002520:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002524:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002528:	4619      	mov	r1, r3
 800252a:	482a      	ldr	r0, [pc, #168]	@ (80025d4 <HAL_UART_MspInit+0x150>)
 800252c:	f000 fcaa 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002530:	e047      	b.n	80025c2 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a28      	ldr	r2, [pc, #160]	@ (80025d8 <HAL_UART_MspInit+0x154>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d142      	bne.n	80025c2 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800253c:	2304      	movs	r3, #4
 800253e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002540:	2300      	movs	r3, #0
 8002542:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002544:	f107 0318 	add.w	r3, r7, #24
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fbdd 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002554:	f7ff fefa 	bl	800234c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002558:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 800255e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002562:	6593      	str	r3, [r2, #88]	@ 0x58
 8002564:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4a16      	ldr	r2, [pc, #88]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257c:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <HAL_UART_MspInit+0x14c>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002588:	2330      	movs	r3, #48	@ 0x30
 800258a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a0:	2307      	movs	r3, #7
 80025a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80025aa:	4619      	mov	r1, r3
 80025ac:	480b      	ldr	r0, [pc, #44]	@ (80025dc <HAL_UART_MspInit+0x158>)
 80025ae:	f000 fc69 	bl	8002e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2027      	movs	r0, #39	@ 0x27
 80025b8:	f000 fb73 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025bc:	2027      	movs	r0, #39	@ 0x27
 80025be:	f000 fb8c 	bl	8002cda <HAL_NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	37c0      	adds	r7, #192	@ 0xc0
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40008000 	.word	0x40008000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	48001800 	.word	0x48001800
 80025d8:	40004800 	.word	0x40004800
 80025dc:	48000800 	.word	0x48000800

080025e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a17      	ldr	r2, [pc, #92]	@ (800265c <HAL_SPI_MspInit+0x7c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d128      	bne.n	8002654 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002606:	4a16      	ldr	r2, [pc, #88]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002608:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800260c:	6613      	str	r3, [r2, #96]	@ 0x60
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002612:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	4a10      	ldr	r2, [pc, #64]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002632:	23f0      	movs	r3, #240	@ 0xf0
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002642:	2305      	movs	r3, #5
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002650:	f000 fc18 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002654:	bf00      	nop
 8002656:	3728      	adds	r7, #40	@ 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40013000 	.word	0x40013000
 8002660:	40021000 	.word	0x40021000

08002664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	@ 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <HAL_TIM_Base_MspInit+0xb0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d141      	bne.n	800270a <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002686:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_TIM_Base_MspInit+0xb4>)
 8002688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268a:	4a23      	ldr	r2, [pc, #140]	@ (8002718 <HAL_TIM_Base_MspInit+0xb4>)
 800268c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002690:	6613      	str	r3, [r2, #96]	@ 0x60
 8002692:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_TIM_Base_MspInit+0xb4>)
 8002694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800269e:	4b1e      	ldr	r3, [pc, #120]	@ (8002718 <HAL_TIM_Base_MspInit+0xb4>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <HAL_TIM_Base_MspInit+0xb4>)
 80026a4:	f043 0310 	orr.w	r3, r3, #16
 80026a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_TIM_Base_MspInit+0xb4>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80026b6:	f44f 532a 	mov.w	r3, #10880	@ 0x2a80
 80026ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4812      	ldr	r0, [pc, #72]	@ (800271c <HAL_TIM_Base_MspInit+0xb8>)
 80026d4:	f000 fbd6 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026d8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80026ea:	2303      	movs	r3, #3
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	4809      	ldr	r0, [pc, #36]	@ (800271c <HAL_TIM_Base_MspInit+0xb8>)
 80026f6:	f000 fbc5 	bl	8002e84 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2019      	movs	r0, #25
 8002700:	f000 facf 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002704:	2019      	movs	r0, #25
 8002706:	f000 fae8 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	@ 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40021000 	.word	0x40021000
 800271c:	48001000 	.word	0x48001000

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <NMI_Handler+0x4>

08002728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <HardFault_Handler+0x4>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <MemManage_Handler+0x4>

08002738 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <BusFault_Handler+0x4>

08002740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <UsageFault_Handler+0x4>

08002748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002776:	f000 f975 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002786:	f003 fc1b 	bl	8005fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000458 	.word	0x20000458

08002794 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <USART3_IRQHandler+0x10>)
 800279a:	f004 f909 	bl	80069b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000360 	.word	0x20000360

080027a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80027ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80027b0:	f000 fd12 	bl	80031d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return 1;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_kill>:

int _kill(int pid, int sig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027d2:	f007 f82d 	bl	8009830 <__errno>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2216      	movs	r2, #22
 80027da:	601a      	str	r2, [r3, #0]
  return -1;
 80027dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_exit>:

void _exit (int status)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027f0:	f04f 31ff 	mov.w	r1, #4294967295
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ffe7 	bl	80027c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027fa:	bf00      	nop
 80027fc:	e7fd      	b.n	80027fa <_exit+0x12>

080027fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e00a      	b.n	8002826 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002810:	f3af 8000 	nop.w
 8002814:	4601      	mov	r1, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	60ba      	str	r2, [r7, #8]
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3301      	adds	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	dbf0      	blt.n	8002810 <_read+0x12>
  }

  return len;
 800282e:	687b      	ldr	r3, [r7, #4]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e009      	b.n	800285e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	60ba      	str	r2, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fd68 	bl	8002328 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	dbf1      	blt.n	800284a <_write+0x12>
  }
  return len;
 8002866:	687b      	ldr	r3, [r7, #4]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_close>:

int _close(int file)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002898:	605a      	str	r2, [r3, #4]
  return 0;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_isatty>:

int _isatty(int file)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028b0:	2301      	movs	r3, #1
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e0:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <_sbrk+0x5c>)
 80028e2:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <_sbrk+0x60>)
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <_sbrk+0x64>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f4:	4b11      	ldr	r3, [pc, #68]	@ (800293c <_sbrk+0x64>)
 80028f6:	4a12      	ldr	r2, [pc, #72]	@ (8002940 <_sbrk+0x68>)
 80028f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <_sbrk+0x64>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	429a      	cmp	r2, r3
 8002906:	d207      	bcs.n	8002918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002908:	f006 ff92 	bl	8009830 <__errno>
 800290c:	4603      	mov	r3, r0
 800290e:	220c      	movs	r2, #12
 8002910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e009      	b.n	800292c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002918:	4b08      	ldr	r3, [pc, #32]	@ (800293c <_sbrk+0x64>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800291e:	4b07      	ldr	r3, [pc, #28]	@ (800293c <_sbrk+0x64>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	4a05      	ldr	r2, [pc, #20]	@ (800293c <_sbrk+0x64>)
 8002928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200a0000 	.word	0x200a0000
 8002938:	00000400 	.word	0x00000400
 800293c:	20000650 	.word	0x20000650
 8002940:	200007a8 	.word	0x200007a8

08002944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <SystemInit+0x20>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	4a05      	ldr	r2, [pc, #20]	@ (8002964 <SystemInit+0x20>)
 8002950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800296c:	f7ff ffea 	bl	8002944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <LoopForever+0xe>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002988:	4c0a      	ldr	r4, [pc, #40]	@ (80029b4 <LoopForever+0x16>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002996:	f006 ff51 	bl	800983c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800299a:	f7ff f89f 	bl	8001adc <main>

0800299e <LoopForever>:

LoopForever:
    b LoopForever
 800299e:	e7fe      	b.n	800299e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029a0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80029ac:	0800ba80 	.word	0x0800ba80
  ldr r2, =_sbss
 80029b0:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80029b4:	200007a4 	.word	0x200007a4

080029b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC1_IRQHandler>

080029ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c4:	2003      	movs	r0, #3
 80029c6:	f000 f961 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ca:	2000      	movs	r0, #0
 80029cc:	f000 f80e 	bl	80029ec <HAL_InitTick>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	71fb      	strb	r3, [r7, #7]
 80029da:	e001      	b.n	80029e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029dc:	f7ff fcbc 	bl	8002358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029e0:	79fb      	ldrb	r3, [r7, #7]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_InitTick+0x6c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d023      	beq.n	8002a48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a00:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <HAL_InitTick+0x70>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_InitTick+0x6c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f96d 	bl	8002cf6 <HAL_SYSTICK_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10f      	bne.n	8002a42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b0f      	cmp	r3, #15
 8002a26:	d809      	bhi.n	8002a3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f000 f937 	bl	8002ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a34:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <HAL_InitTick+0x74>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e007      	b.n	8002a4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e004      	b.n	8002a4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	e001      	b.n	8002a4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000088 	.word	0x20000088
 8002a5c:	20000080 	.word	0x20000080
 8002a60:	20000084 	.word	0x20000084

08002a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_IncTick+0x20>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_IncTick+0x24>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <HAL_IncTick+0x24>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000088 	.word	0x20000088
 8002a88:	20000654 	.word	0x20000654

08002a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <HAL_GetTick+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000654 	.word	0x20000654

08002aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff ffee 	bl	8002a8c <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d005      	beq.n	8002aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_Delay+0x44>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aca:	bf00      	nop
 8002acc:	f7ff ffde 	bl	8002a8c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d8f7      	bhi.n	8002acc <HAL_Delay+0x28>
  {
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000088 	.word	0x20000088

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	@ (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	@ (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	@ (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff29 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff3e 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff8e 	bl	8002be0 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5d 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff31 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa2 	bl	8002c48 <SysTick_Config>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d008      	beq.n	8002d38 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e040      	b.n	8002dba <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020e 	bic.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d56:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6c:	f003 021c 	and.w	r2, r3, #28
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d84:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d9c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002da6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d005      	beq.n	8002dea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	e047      	b.n	8002e7a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 020e 	bic.w	r2, r2, #14
 8002df8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f003 021c 	and.w	r2, r3, #28
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e36:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00c      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e58:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
    }
  }
  return status;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e92:	e166      	b.n	8003162 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8158 	beq.w	800315c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d005      	beq.n	8002ec4 <HAL_GPIO_Init+0x40>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d130      	bne.n	8002f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002efa:	2201      	movs	r2, #1
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 0201 	and.w	r2, r3, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d017      	beq.n	8002f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d123      	bne.n	8002fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	08da      	lsrs	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3208      	adds	r2, #8
 8002fb0:	6939      	ldr	r1, [r7, #16]
 8002fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0203 	and.w	r2, r3, #3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80b2 	beq.w	800315c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff8:	4b61      	ldr	r3, [pc, #388]	@ (8003180 <HAL_GPIO_Init+0x2fc>)
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffc:	4a60      	ldr	r2, [pc, #384]	@ (8003180 <HAL_GPIO_Init+0x2fc>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6613      	str	r3, [r2, #96]	@ 0x60
 8003004:	4b5e      	ldr	r3, [pc, #376]	@ (8003180 <HAL_GPIO_Init+0x2fc>)
 8003006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003010:	4a5c      	ldr	r2, [pc, #368]	@ (8003184 <HAL_GPIO_Init+0x300>)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3302      	adds	r3, #2
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800303a:	d02b      	beq.n	8003094 <HAL_GPIO_Init+0x210>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a52      	ldr	r2, [pc, #328]	@ (8003188 <HAL_GPIO_Init+0x304>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d025      	beq.n	8003090 <HAL_GPIO_Init+0x20c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a51      	ldr	r2, [pc, #324]	@ (800318c <HAL_GPIO_Init+0x308>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d01f      	beq.n	800308c <HAL_GPIO_Init+0x208>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a50      	ldr	r2, [pc, #320]	@ (8003190 <HAL_GPIO_Init+0x30c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d019      	beq.n	8003088 <HAL_GPIO_Init+0x204>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a4f      	ldr	r2, [pc, #316]	@ (8003194 <HAL_GPIO_Init+0x310>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_GPIO_Init+0x200>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a4e      	ldr	r2, [pc, #312]	@ (8003198 <HAL_GPIO_Init+0x314>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_GPIO_Init+0x1fc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a4d      	ldr	r2, [pc, #308]	@ (800319c <HAL_GPIO_Init+0x318>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <HAL_GPIO_Init+0x1f8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a4c      	ldr	r2, [pc, #304]	@ (80031a0 <HAL_GPIO_Init+0x31c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_GPIO_Init+0x1f4>
 8003074:	2307      	movs	r3, #7
 8003076:	e00e      	b.n	8003096 <HAL_GPIO_Init+0x212>
 8003078:	2308      	movs	r3, #8
 800307a:	e00c      	b.n	8003096 <HAL_GPIO_Init+0x212>
 800307c:	2306      	movs	r3, #6
 800307e:	e00a      	b.n	8003096 <HAL_GPIO_Init+0x212>
 8003080:	2305      	movs	r3, #5
 8003082:	e008      	b.n	8003096 <HAL_GPIO_Init+0x212>
 8003084:	2304      	movs	r3, #4
 8003086:	e006      	b.n	8003096 <HAL_GPIO_Init+0x212>
 8003088:	2303      	movs	r3, #3
 800308a:	e004      	b.n	8003096 <HAL_GPIO_Init+0x212>
 800308c:	2302      	movs	r3, #2
 800308e:	e002      	b.n	8003096 <HAL_GPIO_Init+0x212>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_GPIO_Init+0x212>
 8003094:	2300      	movs	r3, #0
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	f002 0203 	and.w	r2, r2, #3
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	4093      	lsls	r3, r2
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030a6:	4937      	ldr	r1, [pc, #220]	@ (8003184 <HAL_GPIO_Init+0x300>)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b4:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <HAL_GPIO_Init+0x320>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d8:	4a32      	ldr	r2, [pc, #200]	@ (80031a4 <HAL_GPIO_Init+0x320>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030de:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <HAL_GPIO_Init+0x320>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003102:	4a28      	ldr	r2, [pc, #160]	@ (80031a4 <HAL_GPIO_Init+0x320>)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003108:	4b26      	ldr	r3, [pc, #152]	@ (80031a4 <HAL_GPIO_Init+0x320>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800312c:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <HAL_GPIO_Init+0x320>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003132:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <HAL_GPIO_Init+0x320>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003156:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <HAL_GPIO_Init+0x320>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f ae91 	bne.w	8002e94 <HAL_GPIO_Init+0x10>
  }
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40021000 	.word	0x40021000
 8003184:	40010000 	.word	0x40010000
 8003188:	48000400 	.word	0x48000400
 800318c:	48000800 	.word	0x48000800
 8003190:	48000c00 	.word	0x48000c00
 8003194:	48001000 	.word	0x48001000
 8003198:	48001400 	.word	0x48001400
 800319c:	48001800 	.word	0x48001800
 80031a0:	48001c00 	.word	0x48001c00
 80031a4:	40010400 	.word	0x40010400

080031a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
 80031b4:	4613      	mov	r3, r2
 80031b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b8:	787b      	ldrb	r3, [r7, #1]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031e2:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ee:	4a05      	ldr	r2, [pc, #20]	@ (8003204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fc60 	bl	8001abc <HAL_GPIO_EXTI_Callback>
  }
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40010400 	.word	0x40010400

08003208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e08d      	b.n	8003336 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff f8b6 	bl	80023a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003258:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003268:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e006      	b.n	8003290 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800328e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d108      	bne.n	80032aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	e007      	b.n	80032ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	461a      	mov	r2, r3
 800334c:	460b      	mov	r3, r1
 800334e:	817b      	strh	r3, [r7, #10]
 8003350:	4613      	mov	r3, r2
 8003352:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b20      	cmp	r3, #32
 800335e:	f040 80fd 	bne.w	800355c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_I2C_Master_Transmit+0x30>
 800336c:	2302      	movs	r3, #2
 800336e:	e0f6      	b.n	800355e <HAL_I2C_Master_Transmit+0x21e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003378:	f7ff fb88 	bl	8002a8c <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2319      	movs	r3, #25
 8003384:	2201      	movs	r2, #1
 8003386:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa0a 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0e1      	b.n	800355e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2221      	movs	r2, #33	@ 0x21
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2210      	movs	r2, #16
 80033a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2bff      	cmp	r3, #255	@ 0xff
 80033ca:	d906      	bls.n	80033da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	22ff      	movs	r2, #255	@ 0xff
 80033d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80033d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e007      	b.n	80033ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80033e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d024      	beq.n	800343c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	781a      	ldrb	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	8979      	ldrh	r1, [r7, #10]
 800342e:	4b4e      	ldr	r3, [pc, #312]	@ (8003568 <HAL_I2C_Master_Transmit+0x228>)
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fbf1 	bl	8003c1c <I2C_TransferConfig>
 800343a:	e066      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	b2da      	uxtb	r2, r3
 8003442:	8979      	ldrh	r1, [r7, #10]
 8003444:	4b48      	ldr	r3, [pc, #288]	@ (8003568 <HAL_I2C_Master_Transmit+0x228>)
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fbe6 	bl	8003c1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003450:	e05b      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f9f3 	bl	8003842 <I2C_WaitOnTXISFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07b      	b.n	800355e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d034      	beq.n	800350a <HAL_I2C_Master_Transmit+0x1ca>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d130      	bne.n	800350a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	2200      	movs	r2, #0
 80034b0:	2180      	movs	r1, #128	@ 0x80
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f976 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e04d      	b.n	800355e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2bff      	cmp	r3, #255	@ 0xff
 80034ca:	d90e      	bls.n	80034ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	22ff      	movs	r2, #255	@ 0xff
 80034d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	8979      	ldrh	r1, [r7, #10]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fb9a 	bl	8003c1c <I2C_TransferConfig>
 80034e8:	e00f      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	8979      	ldrh	r1, [r7, #10]
 80034fc:	2300      	movs	r3, #0
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fb89 	bl	8003c1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d19e      	bne.n	8003452 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	6a39      	ldr	r1, [r7, #32]
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f9d9 	bl	80038d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e01a      	b.n	800355e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2220      	movs	r2, #32
 800352e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <HAL_I2C_Master_Transmit+0x22c>)
 800353c:	400b      	ands	r3, r1
 800353e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	80002000 	.word	0x80002000
 800356c:	fe00e800 	.word	0xfe00e800

08003570 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
 8003580:	4613      	mov	r3, r2
 8003582:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b20      	cmp	r3, #32
 800358e:	f040 80db 	bne.w	8003748 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_I2C_Master_Receive+0x30>
 800359c:	2302      	movs	r3, #2
 800359e:	e0d4      	b.n	800374a <HAL_I2C_Master_Receive+0x1da>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035a8:	f7ff fa70 	bl	8002a8c <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2319      	movs	r3, #25
 80035b4:	2201      	movs	r2, #1
 80035b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f8f2 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0bf      	b.n	800374a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2222      	movs	r2, #34	@ 0x22
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2210      	movs	r2, #16
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	893a      	ldrh	r2, [r7, #8]
 80035ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2bff      	cmp	r3, #255	@ 0xff
 80035fa:	d90e      	bls.n	800361a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	22ff      	movs	r2, #255	@ 0xff
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003606:	b2da      	uxtb	r2, r3
 8003608:	8979      	ldrh	r1, [r7, #10]
 800360a:	4b52      	ldr	r3, [pc, #328]	@ (8003754 <HAL_I2C_Master_Receive+0x1e4>)
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fb02 	bl	8003c1c <I2C_TransferConfig>
 8003618:	e06d      	b.n	80036f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	b2da      	uxtb	r2, r3
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	4b49      	ldr	r3, [pc, #292]	@ (8003754 <HAL_I2C_Master_Receive+0x1e4>)
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 faf1 	bl	8003c1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800363a:	e05c      	b.n	80036f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6a39      	ldr	r1, [r7, #32]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f989 	bl	8003958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e07c      	b.n	800374a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d034      	beq.n	80036f6 <HAL_I2C_Master_Receive+0x186>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d130      	bne.n	80036f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2200      	movs	r2, #0
 800369c:	2180      	movs	r1, #128	@ 0x80
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f880 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e04d      	b.n	800374a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2bff      	cmp	r3, #255	@ 0xff
 80036b6:	d90e      	bls.n	80036d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	22ff      	movs	r2, #255	@ 0xff
 80036bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	8979      	ldrh	r1, [r7, #10]
 80036c6:	2300      	movs	r3, #0
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 faa4 	bl	8003c1c <I2C_TransferConfig>
 80036d4:	e00f      	b.n	80036f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	8979      	ldrh	r1, [r7, #10]
 80036e8:	2300      	movs	r3, #0
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fa93 	bl	8003c1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d19d      	bne.n	800363c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	6a39      	ldr	r1, [r7, #32]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f8e3 	bl	80038d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e01a      	b.n	800374a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2220      	movs	r2, #32
 800371a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <HAL_I2C_Master_Receive+0x1e8>)
 8003728:	400b      	ands	r3, r1
 800372a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	80002400 	.word	0x80002400
 8003758:	fe00e800 	.word	0xfe00e800

0800375c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d103      	bne.n	800377a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d007      	beq.n	8003798 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	619a      	str	r2, [r3, #24]
  }
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b4:	e031      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d02d      	beq.n	800381a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7ff f965 	bl	8002a8c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d122      	bne.n	800381a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d113      	bne.n	800381a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00f      	b.n	800383a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699a      	ldr	r2, [r3, #24]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	429a      	cmp	r2, r3
 8003836:	d0be      	beq.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800384e:	e033      	b.n	80038b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f901 	bl	8003a5c <I2C_IsErrorOccurred>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e031      	b.n	80038c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d025      	beq.n	80038b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386c:	f7ff f90e 	bl	8002a8c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	d302      	bcc.n	8003882 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11a      	bne.n	80038b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d013      	beq.n	80038b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	f043 0220 	orr.w	r2, r3, #32
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e007      	b.n	80038c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d1c4      	bne.n	8003850 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038dc:	e02f      	b.n	800393e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f8ba 	bl	8003a5c <I2C_IsErrorOccurred>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e02d      	b.n	800394e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f2:	f7ff f8cb 	bl	8002a8c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11a      	bne.n	800393e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	d013      	beq.n	800393e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e007      	b.n	800394e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b20      	cmp	r3, #32
 800394a:	d1c8      	bne.n	80038de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003964:	e06b      	b.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f876 	bl	8003a5c <I2C_IsErrorOccurred>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e069      	b.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b20      	cmp	r3, #32
 8003986:	d138      	bne.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d105      	bne.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e055      	b.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d107      	bne.n	80039c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2210      	movs	r2, #16
 80039b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2204      	movs	r2, #4
 80039bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80039be:	e002      	b.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2220      	movs	r2, #32
 80039cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80039da:	400b      	ands	r3, r1
 80039dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e029      	b.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fa:	f7ff f847 	bl	8002a8c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d116      	bne.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d00f      	beq.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e007      	b.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d18c      	bne.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	fe00e800 	.word	0xfe00e800

08003a5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	@ 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d068      	beq.n	8003b5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a90:	e049      	b.n	8003b26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d045      	beq.n	8003b26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a9a:	f7fe fff7 	bl	8002a8c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <I2C_IsErrorOccurred+0x54>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d13a      	bne.n	8003b26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ac2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad2:	d121      	bne.n	8003b18 <I2C_IsErrorOccurred+0xbc>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ada:	d01d      	beq.n	8003b18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d01a      	beq.n	8003b18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003af0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003af2:	f7fe ffcb 	bl	8002a8c <HAL_GetTick>
 8003af6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af8:	e00e      	b.n	8003b18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003afa:	f7fe ffc7 	bl	8002a8c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b19      	cmp	r3, #25
 8003b06:	d907      	bls.n	8003b18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f043 0320 	orr.w	r3, r3, #32
 8003b0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003b16:	e006      	b.n	8003b26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d1e9      	bne.n	8003afa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d003      	beq.n	8003b3c <I2C_IsErrorOccurred+0xe0>
 8003b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0aa      	beq.n	8003a92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f043 0308 	orr.w	r3, r3, #8
 8003b94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f043 0302 	orr.w	r3, r3, #2
 8003bb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01c      	beq.n	8003c0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fdc3 	bl	800375c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <I2C_IsErrorOccurred+0x1bc>)
 8003be2:	400b      	ands	r3, r1
 8003be4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3728      	adds	r7, #40	@ 0x28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	fe00e800 	.word	0xfe00e800

08003c1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	817b      	strh	r3, [r7, #10]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c34:	7a7b      	ldrb	r3, [r7, #9]
 8003c36:	041b      	lsls	r3, r3, #16
 8003c38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	0d5b      	lsrs	r3, r3, #21
 8003c56:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c5a:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <I2C_TransferConfig+0x60>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	ea02 0103 	and.w	r1, r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	03ff63ff 	.word	0x03ff63ff

08003c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d138      	bne.n	8003d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e032      	b.n	8003d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	@ 0x24
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d139      	bne.n	8003da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e033      	b.n	8003da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2224      	movs	r2, #36	@ 0x24
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003db4:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <HAL_PWREx_GetVoltageRange+0x3c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc0:	d102      	bne.n	8003dc8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dc6:	e00b      	b.n	8003de0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003dc8:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <HAL_PWREx_GetVoltageRange+0x3c>)
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dd6:	d102      	bne.n	8003dde <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ddc:	e000      	b.n	8003de0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003dde:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40007000 	.word	0x40007000

08003df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d141      	bne.n	8003e82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0a:	d131      	bne.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e0c:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e12:	4a46      	ldr	r2, [pc, #280]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e1c:	4b43      	ldr	r3, [pc, #268]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e24:	4a41      	ldr	r2, [pc, #260]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e2c:	4b40      	ldr	r3, [pc, #256]	@ (8003f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2232      	movs	r2, #50	@ 0x32
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	4a3f      	ldr	r2, [pc, #252]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	0c9b      	lsrs	r3, r3, #18
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e42:	e002      	b.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e4a:	4b38      	ldr	r3, [pc, #224]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e56:	d102      	bne.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f2      	bne.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e5e:	4b33      	ldr	r3, [pc, #204]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6a:	d158      	bne.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e057      	b.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e70:	4b2e      	ldr	r3, [pc, #184]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e76:	4a2d      	ldr	r2, [pc, #180]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e80:	e04d      	b.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e88:	d141      	bne.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e8a:	4b28      	ldr	r3, [pc, #160]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e96:	d131      	bne.n	8003efc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e98:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e9e:	4a23      	ldr	r2, [pc, #140]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ea8:	4b20      	ldr	r3, [pc, #128]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2232      	movs	r2, #50	@ 0x32
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	0c9b      	lsrs	r3, r3, #18
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ece:	e002      	b.n	8003ed6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ed6:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee2:	d102      	bne.n	8003eea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f2      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef6:	d112      	bne.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e011      	b.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f02:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f0c:	e007      	b.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f0e:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f16:	4a05      	ldr	r2, [pc, #20]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f1c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	20000080 	.word	0x20000080
 8003f34:	431bde83 	.word	0x431bde83

08003f38 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a04      	ldr	r2, [pc, #16]	@ (8003f54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f46:	6053      	str	r3, [r2, #4]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f000 bc08 	b.w	800477c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6c:	4b96      	ldr	r3, [pc, #600]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f76:	4b94      	ldr	r3, [pc, #592]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80e4 	beq.w	8004156 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4c>
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	f040 808b 	bne.w	80040b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	f040 8087 	bne.w	80040b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fa4:	4b88      	ldr	r3, [pc, #544]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x64>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e3df      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	4b81      	ldr	r3, [pc, #516]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x7e>
 8003fcc:	4b7e      	ldr	r3, [pc, #504]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fd4:	e005      	b.n	8003fe2 <HAL_RCC_OscConfig+0x8a>
 8003fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d223      	bcs.n	800402e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fdcc 	bl	8004b88 <RCC_SetFlashLatencyFromMSIRange>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e3c0      	b.n	800477c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffa:	4b73      	ldr	r3, [pc, #460]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a72      	ldr	r2, [pc, #456]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004000:	f043 0308 	orr.w	r3, r3, #8
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b70      	ldr	r3, [pc, #448]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	496d      	ldr	r1, [pc, #436]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004014:	4313      	orrs	r3, r2
 8004016:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004018:	4b6b      	ldr	r3, [pc, #428]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	4968      	ldr	r1, [pc, #416]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
 800402c:	e025      	b.n	800407a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800402e:	4b66      	ldr	r3, [pc, #408]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a65      	ldr	r2, [pc, #404]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004034:	f043 0308 	orr.w	r3, r3, #8
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b63      	ldr	r3, [pc, #396]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	4960      	ldr	r1, [pc, #384]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404c:	4b5e      	ldr	r3, [pc, #376]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	495b      	ldr	r1, [pc, #364]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fd8c 	bl	8004b88 <RCC_SetFlashLatencyFromMSIRange>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e380      	b.n	800477c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800407a:	f000 fcc1 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 800407e:	4602      	mov	r2, r0
 8004080:	4b51      	ldr	r3, [pc, #324]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	4950      	ldr	r1, [pc, #320]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 800408c:	5ccb      	ldrb	r3, [r1, r3]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	fa22 f303 	lsr.w	r3, r2, r3
 8004096:	4a4e      	ldr	r2, [pc, #312]	@ (80041d0 <HAL_RCC_OscConfig+0x278>)
 8004098:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800409a:	4b4e      	ldr	r3, [pc, #312]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fca4 	bl	80029ec <HAL_InitTick>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d052      	beq.n	8004154 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	e364      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d032      	beq.n	8004120 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040ba:	4b43      	ldr	r3, [pc, #268]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a42      	ldr	r2, [pc, #264]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040c6:	f7fe fce1 	bl	8002a8c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ce:	f7fe fcdd 	bl	8002a8c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e34d      	b.n	800477c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e0:	4b39      	ldr	r3, [pc, #228]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ec:	4b36      	ldr	r3, [pc, #216]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a35      	ldr	r2, [pc, #212]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80040f2:	f043 0308 	orr.w	r3, r3, #8
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b33      	ldr	r3, [pc, #204]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4930      	ldr	r1, [pc, #192]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800410a:	4b2f      	ldr	r3, [pc, #188]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	492b      	ldr	r1, [pc, #172]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
 800411e:	e01a      	b.n	8004156 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004120:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a28      	ldr	r2, [pc, #160]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800412c:	f7fe fcae 	bl	8002a8c <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004134:	f7fe fcaa 	bl	8002a8c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e31a      	b.n	800477c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004146:	4b20      	ldr	r3, [pc, #128]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x1dc>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d073      	beq.n	800424a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d005      	beq.n	8004174 <HAL_RCC_OscConfig+0x21c>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b0c      	cmp	r3, #12
 800416c:	d10e      	bne.n	800418c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d10b      	bne.n	800418c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	4b14      	ldr	r3, [pc, #80]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d063      	beq.n	8004248 <HAL_RCC_OscConfig+0x2f0>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d15f      	bne.n	8004248 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e2f7      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004194:	d106      	bne.n	80041a4 <HAL_RCC_OscConfig+0x24c>
 8004196:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a0b      	ldr	r2, [pc, #44]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e025      	b.n	80041f0 <HAL_RCC_OscConfig+0x298>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041ac:	d114      	bne.n	80041d8 <HAL_RCC_OscConfig+0x280>
 80041ae:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a05      	ldr	r2, [pc, #20]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80041b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a02      	ldr	r2, [pc, #8]	@ (80041c8 <HAL_RCC_OscConfig+0x270>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e013      	b.n	80041f0 <HAL_RCC_OscConfig+0x298>
 80041c8:	40021000 	.word	0x40021000
 80041cc:	0800b690 	.word	0x0800b690
 80041d0:	20000080 	.word	0x20000080
 80041d4:	20000084 	.word	0x20000084
 80041d8:	4ba0      	ldr	r3, [pc, #640]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a9f      	ldr	r2, [pc, #636]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80041de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b9d      	ldr	r3, [pc, #628]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a9c      	ldr	r2, [pc, #624]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80041ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fe fc48 	bl	8002a8c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe fc44 	bl	8002a8c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e2b4      	b.n	800477c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004212:	4b92      	ldr	r3, [pc, #584]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x2a8>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe fc34 	bl	8002a8c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004228:	f7fe fc30 	bl	8002a8c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	@ 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e2a0      	b.n	800477c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800423a:	4b88      	ldr	r3, [pc, #544]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x2d0>
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d060      	beq.n	8004318 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b04      	cmp	r3, #4
 800425a:	d005      	beq.n	8004268 <HAL_RCC_OscConfig+0x310>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b0c      	cmp	r3, #12
 8004260:	d119      	bne.n	8004296 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d116      	bne.n	8004296 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004268:	4b7c      	ldr	r3, [pc, #496]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_OscConfig+0x328>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e27d      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004280:	4b76      	ldr	r3, [pc, #472]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	061b      	lsls	r3, r3, #24
 800428e:	4973      	ldr	r1, [pc, #460]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004294:	e040      	b.n	8004318 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d023      	beq.n	80042e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800429e:	4b6f      	ldr	r3, [pc, #444]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a6e      	ldr	r2, [pc, #440]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fe fbef 	bl	8002a8c <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b2:	f7fe fbeb 	bl	8002a8c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e25b      	b.n	800477c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c4:	4b65      	ldr	r3, [pc, #404]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d0:	4b62      	ldr	r3, [pc, #392]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	495f      	ldr	r1, [pc, #380]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
 80042e4:	e018      	b.n	8004318 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e6:	4b5d      	ldr	r3, [pc, #372]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a5c      	ldr	r2, [pc, #368]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80042ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fe fbcb 	bl	8002a8c <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fa:	f7fe fbc7 	bl	8002a8c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e237      	b.n	800477c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800430c:	4b53      	ldr	r3, [pc, #332]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d03c      	beq.n	800439e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01c      	beq.n	8004366 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432c:	4b4b      	ldr	r3, [pc, #300]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004332:	4a4a      	ldr	r2, [pc, #296]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fe fba6 	bl	8002a8c <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004344:	f7fe fba2 	bl	8002a8c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e212      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004356:	4b41      	ldr	r3, [pc, #260]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0ef      	beq.n	8004344 <HAL_RCC_OscConfig+0x3ec>
 8004364:	e01b      	b.n	800439e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004366:	4b3d      	ldr	r3, [pc, #244]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800436c:	4a3b      	ldr	r2, [pc, #236]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fe fb89 	bl	8002a8c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437e:	f7fe fb85 	bl	8002a8c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e1f5      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004390:	4b32      	ldr	r3, [pc, #200]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1ef      	bne.n	800437e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80a6 	beq.w	80044f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ac:	2300      	movs	r3, #0
 80043ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043b0:	4b2a      	ldr	r3, [pc, #168]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043bc:	4b27      	ldr	r3, [pc, #156]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c0:	4a26      	ldr	r2, [pc, #152]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043c8:	4b24      	ldr	r3, [pc, #144]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d4:	2301      	movs	r3, #1
 80043d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d8:	4b21      	ldr	r3, [pc, #132]	@ (8004460 <HAL_RCC_OscConfig+0x508>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d118      	bne.n	8004416 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <HAL_RCC_OscConfig+0x508>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004460 <HAL_RCC_OscConfig+0x508>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f0:	f7fe fb4c 	bl	8002a8c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fe fb48 	bl	8002a8c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e1b8      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440a:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <HAL_RCC_OscConfig+0x508>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d108      	bne.n	8004430 <HAL_RCC_OscConfig+0x4d8>
 800441e:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004424:	4a0d      	ldr	r2, [pc, #52]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800442e:	e029      	b.n	8004484 <HAL_RCC_OscConfig+0x52c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b05      	cmp	r3, #5
 8004436:	d115      	bne.n	8004464 <HAL_RCC_OscConfig+0x50c>
 8004438:	4b08      	ldr	r3, [pc, #32]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	4a07      	ldr	r2, [pc, #28]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444e:	4a03      	ldr	r2, [pc, #12]	@ (800445c <HAL_RCC_OscConfig+0x504>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004458:	e014      	b.n	8004484 <HAL_RCC_OscConfig+0x52c>
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000
 8004460:	40007000 	.word	0x40007000
 8004464:	4b9d      	ldr	r3, [pc, #628]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446a:	4a9c      	ldr	r2, [pc, #624]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004474:	4b99      	ldr	r3, [pc, #612]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	4a98      	ldr	r2, [pc, #608]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 800447c:	f023 0304 	bic.w	r3, r3, #4
 8004480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d016      	beq.n	80044ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fe fafe 	bl	8002a8c <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004492:	e00a      	b.n	80044aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f7fe fafa 	bl	8002a8c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e168      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044aa:	4b8c      	ldr	r3, [pc, #560]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ed      	beq.n	8004494 <HAL_RCC_OscConfig+0x53c>
 80044b8:	e015      	b.n	80044e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fe fae7 	bl	8002a8c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fe fae3 	bl	8002a8c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e151      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d8:	4b80      	ldr	r3, [pc, #512]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ed      	bne.n	80044c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ec:	4b7b      	ldr	r3, [pc, #492]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f0:	4a7a      	ldr	r2, [pc, #488]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 80044f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d03c      	beq.n	800457e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01c      	beq.n	8004546 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800450c:	4b73      	ldr	r3, [pc, #460]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 800450e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004512:	4a72      	ldr	r2, [pc, #456]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fe fab6 	bl	8002a8c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004524:	f7fe fab2 	bl	8002a8c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e122      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004536:	4b69      	ldr	r3, [pc, #420]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004538:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ef      	beq.n	8004524 <HAL_RCC_OscConfig+0x5cc>
 8004544:	e01b      	b.n	800457e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004546:	4b65      	ldr	r3, [pc, #404]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800454c:	4a63      	ldr	r2, [pc, #396]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fe fa99 	bl	8002a8c <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800455e:	f7fe fa95 	bl	8002a8c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e105      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004570:	4b5a      	ldr	r3, [pc, #360]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004572:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1ef      	bne.n	800455e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80f9 	beq.w	800477a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	2b02      	cmp	r3, #2
 800458e:	f040 80cf 	bne.w	8004730 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004592:	4b52      	ldr	r3, [pc, #328]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0203 	and.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d12c      	bne.n	8004600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	3b01      	subs	r3, #1
 80045b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d123      	bne.n	8004600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d11b      	bne.n	8004600 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d113      	bne.n	8004600 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	3b01      	subs	r3, #1
 80045e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d109      	bne.n	8004600 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	3b01      	subs	r3, #1
 80045fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d071      	beq.n	80046e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d068      	beq.n	80046d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004606:	4b35      	ldr	r3, [pc, #212]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004612:	4b32      	ldr	r3, [pc, #200]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0ac      	b.n	800477c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004622:	4b2e      	ldr	r3, [pc, #184]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2d      	ldr	r2, [pc, #180]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004628:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800462c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800462e:	f7fe fa2d 	bl	8002a8c <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7fe fa29 	bl	8002a8c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e099      	b.n	800477c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004648:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004654:	4b21      	ldr	r3, [pc, #132]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	4b21      	ldr	r3, [pc, #132]	@ (80046e0 <HAL_RCC_OscConfig+0x788>)
 800465a:	4013      	ands	r3, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004664:	3a01      	subs	r2, #1
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	4311      	orrs	r1, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800466e:	0212      	lsls	r2, r2, #8
 8004670:	4311      	orrs	r1, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004676:	0852      	lsrs	r2, r2, #1
 8004678:	3a01      	subs	r2, #1
 800467a:	0552      	lsls	r2, r2, #21
 800467c:	4311      	orrs	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004682:	0852      	lsrs	r2, r2, #1
 8004684:	3a01      	subs	r2, #1
 8004686:	0652      	lsls	r2, r2, #25
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800468e:	06d2      	lsls	r2, r2, #27
 8004690:	430a      	orrs	r2, r1
 8004692:	4912      	ldr	r1, [pc, #72]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 8004694:	4313      	orrs	r3, r2
 8004696:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004698:	4b10      	ldr	r3, [pc, #64]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0f      	ldr	r2, [pc, #60]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 800469e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046a4:	4b0d      	ldr	r3, [pc, #52]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4a0c      	ldr	r2, [pc, #48]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 80046aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046b0:	f7fe f9ec 	bl	8002a8c <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b8:	f7fe f9e8 	bl	8002a8c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e058      	b.n	800477c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ca:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <HAL_RCC_OscConfig+0x784>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046d6:	e050      	b.n	800477a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e04f      	b.n	800477c <HAL_RCC_OscConfig+0x824>
 80046dc:	40021000 	.word	0x40021000
 80046e0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d144      	bne.n	800477a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046f0:	4b24      	ldr	r3, [pc, #144]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a23      	ldr	r2, [pc, #140]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 80046f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046fc:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a20      	ldr	r2, [pc, #128]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 8004702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004706:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004708:	f7fe f9c0 	bl	8002a8c <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fe f9bc 	bl	8002a8c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e02c      	b.n	800477c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004722:	4b18      	ldr	r3, [pc, #96]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0x7b8>
 800472e:	e024      	b.n	800477a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d01f      	beq.n	8004776 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004736:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a12      	ldr	r2, [pc, #72]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 800473c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fe f9a3 	bl	8002a8c <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474a:	f7fe f99f 	bl	8002a8c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e00f      	b.n	800477c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	4905      	ldr	r1, [pc, #20]	@ (8004784 <HAL_RCC_OscConfig+0x82c>)
 800476e:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <HAL_RCC_OscConfig+0x830>)
 8004770:	4013      	ands	r3, r2
 8004772:	60cb      	str	r3, [r1, #12]
 8004774:	e001      	b.n	800477a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000
 8004788:	feeefffc 	.word	0xfeeefffc

0800478c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e11d      	b.n	80049e0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047a4:	4b90      	ldr	r3, [pc, #576]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d910      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b8d      	ldr	r3, [pc, #564]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 020f 	bic.w	r2, r3, #15
 80047ba:	498b      	ldr	r1, [pc, #556]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b89      	ldr	r3, [pc, #548]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e105      	b.n	80049e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d010      	beq.n	8004802 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	4b81      	ldr	r3, [pc, #516]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d908      	bls.n	8004802 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b7e      	ldr	r3, [pc, #504]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	497b      	ldr	r1, [pc, #492]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d079      	beq.n	8004902 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d11e      	bne.n	8004854 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	4b75      	ldr	r3, [pc, #468]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e0dc      	b.n	80049e0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004826:	f000 fa09 	bl	8004c3c <RCC_GetSysClockFreqFromPLLSource>
 800482a:	4603      	mov	r3, r0
 800482c:	4a70      	ldr	r2, [pc, #448]	@ (80049f0 <HAL_RCC_ClockConfig+0x264>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d946      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004832:	4b6e      	ldr	r3, [pc, #440]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d140      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800483e:	4b6b      	ldr	r3, [pc, #428]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004846:	4a69      	ldr	r2, [pc, #420]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800484c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800484e:	2380      	movs	r3, #128	@ 0x80
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e035      	b.n	80048c0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d107      	bne.n	800486c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485c:	4b63      	ldr	r3, [pc, #396]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d115      	bne.n	8004894 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0b9      	b.n	80049e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004874:	4b5d      	ldr	r3, [pc, #372]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0ad      	b.n	80049e0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004884:	4b59      	ldr	r3, [pc, #356]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0a5      	b.n	80049e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004894:	f000 f8b4 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8004898:	4603      	mov	r3, r0
 800489a:	4a55      	ldr	r2, [pc, #340]	@ (80049f0 <HAL_RCC_ClockConfig+0x264>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d90f      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048a0:	4b52      	ldr	r3, [pc, #328]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ac:	4b4f      	ldr	r3, [pc, #316]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048b4:	4a4d      	ldr	r2, [pc, #308]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80048b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048c0:	4b4a      	ldr	r3, [pc, #296]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 0203 	bic.w	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4947      	ldr	r1, [pc, #284]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d2:	f7fe f8db 	bl	8002a8c <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d8:	e00a      	b.n	80048f0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048da:	f7fe f8d7 	bl	8002a8c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e077      	b.n	80049e0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f0:	4b3e      	ldr	r3, [pc, #248]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 020c 	and.w	r2, r3, #12
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	429a      	cmp	r2, r3
 8004900:	d1eb      	bne.n	80048da <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b80      	cmp	r3, #128	@ 0x80
 8004906:	d105      	bne.n	8004914 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004908:	4b38      	ldr	r3, [pc, #224]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a37      	ldr	r2, [pc, #220]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 800490e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004912:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d010      	beq.n	8004942 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800492c:	429a      	cmp	r2, r3
 800492e:	d208      	bcs.n	8004942 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004930:	4b2e      	ldr	r3, [pc, #184]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	492b      	ldr	r1, [pc, #172]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004942:	4b29      	ldr	r3, [pc, #164]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d210      	bcs.n	8004972 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004950:	4b25      	ldr	r3, [pc, #148]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 020f 	bic.w	r2, r3, #15
 8004958:	4923      	ldr	r1, [pc, #140]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004960:	4b21      	ldr	r3, [pc, #132]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e036      	b.n	80049e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497e:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4918      	ldr	r1, [pc, #96]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 800498c:	4313      	orrs	r3, r2
 800498e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499c:	4b13      	ldr	r3, [pc, #76]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4910      	ldr	r1, [pc, #64]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b0:	f000 f826 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	490c      	ldr	r1, [pc, #48]	@ (80049f4 <HAL_RCC_ClockConfig+0x268>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <HAL_RCC_ClockConfig+0x26c>)
 80049ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049d0:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <HAL_RCC_ClockConfig+0x270>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe f809 	bl	80029ec <HAL_InitTick>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40022000 	.word	0x40022000
 80049ec:	40021000 	.word	0x40021000
 80049f0:	04c4b400 	.word	0x04c4b400
 80049f4:	0800b690 	.word	0x0800b690
 80049f8:	20000080 	.word	0x20000080
 80049fc:	20000084 	.word	0x20000084

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b089      	sub	sp, #36	@ 0x24
 8004a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a18:	4b3b      	ldr	r3, [pc, #236]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x34>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b0c      	cmp	r3, #12
 8004a2c:	d121      	bne.n	8004a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d11e      	bne.n	8004a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a34:	4b34      	ldr	r3, [pc, #208]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a40:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	e005      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a50:	4b2d      	ldr	r3, [pc, #180]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d102      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a78:	4b25      	ldr	r3, [pc, #148]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e004      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a84:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d134      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d003      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0xac>
 8004aa4:	e005      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004aa8:	617b      	str	r3, [r7, #20]
      break;
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004aac:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aae:	617b      	str	r3, [r7, #20]
      break;
 8004ab0:	e002      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	617b      	str	r3, [r7, #20]
      break;
 8004ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab8:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ac6:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	0a1b      	lsrs	r3, r3, #8
 8004acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	fb03 f202 	mul.w	r2, r3, r2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ade:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	0e5b      	lsrs	r3, r3, #25
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004af8:	69bb      	ldr	r3, [r7, #24]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3724      	adds	r7, #36	@ 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	0800b6a8 	.word	0x0800b6a8
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	007a1200 	.word	0x007a1200

08004b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	@ (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000080 	.word	0x20000080

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4904      	ldr	r1, [pc, #16]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	0800b6a0 	.word	0x0800b6a0

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b60:	f7ff ffda 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0adb      	lsrs	r3, r3, #11
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800b6a0 	.word	0x0800b6a0

08004b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b94:	4b27      	ldr	r3, [pc, #156]	@ (8004c34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ba0:	f7ff f906 	bl	8003db0 <HAL_PWREx_GetVoltageRange>
 8004ba4:	6178      	str	r0, [r7, #20]
 8004ba6:	e014      	b.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba8:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bac:	4a21      	ldr	r2, [pc, #132]	@ (8004c34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004c34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bc0:	f7ff f8f6 	bl	8003db0 <HAL_PWREx_GetVoltageRange>
 8004bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	4a1a      	ldr	r2, [pc, #104]	@ (8004c34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd8:	d10b      	bne.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b80      	cmp	r3, #128	@ 0x80
 8004bde:	d913      	bls.n	8004c08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004be4:	d902      	bls.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004be6:	2302      	movs	r3, #2
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e00d      	b.n	8004c08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bec:	2301      	movs	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	e00a      	b.n	8004c08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bf6:	d902      	bls.n	8004bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	e004      	b.n	8004c08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b70      	cmp	r3, #112	@ 0x70
 8004c02:	d101      	bne.n	8004c08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c04:	2301      	movs	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c08:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 020f 	bic.w	r2, r3, #15
 8004c10:	4909      	ldr	r1, [pc, #36]	@ (8004c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c18:	4b07      	ldr	r3, [pc, #28]	@ (8004c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40022000 	.word	0x40022000

08004c3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c42:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d00b      	beq.n	8004c6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d825      	bhi.n	8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d008      	beq.n	8004c70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d11f      	bne.n	8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004c64:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c66:	613b      	str	r3, [r7, #16]
    break;
 8004c68:	e01f      	b.n	8004caa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004c6a:	4b25      	ldr	r3, [pc, #148]	@ (8004d00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004c6c:	613b      	str	r3, [r7, #16]
    break;
 8004c6e:	e01c      	b.n	8004caa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c70:	4b21      	ldr	r3, [pc, #132]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d107      	bne.n	8004c8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e005      	b.n	8004c98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004c98:	4a1a      	ldr	r2, [pc, #104]	@ (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca0:	613b      	str	r3, [r7, #16]
    break;
 8004ca2:	e002      	b.n	8004caa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
    break;
 8004ca8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004caa:	4b13      	ldr	r3, [pc, #76]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	0a1b      	lsrs	r3, r3, #8
 8004cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	fb03 f202 	mul.w	r2, r3, r2
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd0:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	0e5b      	lsrs	r3, r3, #25
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004cea:	683b      	ldr	r3, [r7, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	00f42400 	.word	0x00f42400
 8004d00:	007a1200 	.word	0x007a1200
 8004d04:	0800b6a8 	.word	0x0800b6a8

08004d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d10:	2300      	movs	r3, #0
 8004d12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d14:	2300      	movs	r3, #0
 8004d16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d040      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d28:	2b80      	cmp	r3, #128	@ 0x80
 8004d2a:	d02a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d2c:	2b80      	cmp	r3, #128	@ 0x80
 8004d2e:	d825      	bhi.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d30:	2b60      	cmp	r3, #96	@ 0x60
 8004d32:	d026      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d34:	2b60      	cmp	r3, #96	@ 0x60
 8004d36:	d821      	bhi.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d38:	2b40      	cmp	r3, #64	@ 0x40
 8004d3a:	d006      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d3c:	2b40      	cmp	r3, #64	@ 0x40
 8004d3e:	d81d      	bhi.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d010      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d48:	e018      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d4a:	4b89      	ldr	r3, [pc, #548]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	4a88      	ldr	r2, [pc, #544]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d54:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d56:	e015      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fb02 	bl	8005368 <RCCEx_PLLSAI1_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d68:	e00c      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3320      	adds	r3, #32
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fbed 	bl	8005550 <RCCEx_PLLSAI2_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d7a:	e003      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	74fb      	strb	r3, [r7, #19]
      break;
 8004d80:	e000      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d8a:	4b79      	ldr	r3, [pc, #484]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d90:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d98:	4975      	ldr	r1, [pc, #468]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004da0:	e001      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da2:	7cfb      	ldrb	r3, [r7, #19]
 8004da4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d047      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dba:	d030      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc0:	d82a      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc6:	d02a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dcc:	d824      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd2:	d008      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd8:	d81e      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004de2:	d010      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004de4:	e018      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004de6:	4b62      	ldr	r3, [pc, #392]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4a61      	ldr	r2, [pc, #388]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004df2:	e015      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fab4 	bl	8005368 <RCCEx_PLLSAI1_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e04:	e00c      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3320      	adds	r3, #32
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fb9f 	bl	8005550 <RCCEx_PLLSAI2_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e16:	e003      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	74fb      	strb	r3, [r7, #19]
      break;
 8004e1c:	e000      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e20:	7cfb      	ldrb	r3, [r7, #19]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e26:	4b52      	ldr	r3, [pc, #328]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e34:	494e      	ldr	r1, [pc, #312]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004e3c:	e001      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 809f 	beq.w	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e50:	2300      	movs	r3, #0
 8004e52:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e54:	4b46      	ldr	r3, [pc, #280]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e64:	2300      	movs	r3, #0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6a:	4b41      	ldr	r3, [pc, #260]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6e:	4a40      	ldr	r2, [pc, #256]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e76:	4b3e      	ldr	r3, [pc, #248]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e82:	2301      	movs	r3, #1
 8004e84:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a3a      	ldr	r2, [pc, #232]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e92:	f7fd fdfb 	bl	8002a8c <HAL_GetTick>
 8004e96:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e98:	e009      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9a:	f7fd fdf7 	bl	8002a8c <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d902      	bls.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	74fb      	strb	r3, [r7, #19]
        break;
 8004eac:	e005      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eae:	4b31      	ldr	r3, [pc, #196]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ef      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d15b      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01f      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d019      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eea:	4b21      	ldr	r3, [pc, #132]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004efa:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	4a1b      	ldr	r2, [pc, #108]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f0a:	4a19      	ldr	r2, [pc, #100]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d016      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fd fdb6 	bl	8002a8c <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f22:	e00b      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fd fdb2 	bl	8002a8c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d902      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	74fb      	strb	r3, [r7, #19]
            break;
 8004f3a:	e006      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ec      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10c      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f50:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f60:	4903      	ldr	r1, [pc, #12]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f68:	e008      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f6a:	7cfb      	ldrb	r3, [r7, #19]
 8004f6c:	74bb      	strb	r3, [r7, #18]
 8004f6e:	e005      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f7c:	7c7b      	ldrb	r3, [r7, #17]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d105      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f82:	4ba0      	ldr	r3, [pc, #640]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	4a9f      	ldr	r2, [pc, #636]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f9a:	4b9a      	ldr	r3, [pc, #616]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa0:	f023 0203 	bic.w	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa8:	4996      	ldr	r1, [pc, #600]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fbc:	4b91      	ldr	r3, [pc, #580]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc2:	f023 020c 	bic.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	498e      	ldr	r1, [pc, #568]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fde:	4b89      	ldr	r3, [pc, #548]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fec:	4985      	ldr	r1, [pc, #532]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005000:	4b80      	ldr	r3, [pc, #512]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005006:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500e:	497d      	ldr	r1, [pc, #500]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005022:	4b78      	ldr	r3, [pc, #480]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005030:	4974      	ldr	r1, [pc, #464]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005044:	4b6f      	ldr	r3, [pc, #444]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005052:	496c      	ldr	r1, [pc, #432]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005066:	4b67      	ldr	r3, [pc, #412]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005074:	4963      	ldr	r1, [pc, #396]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005088:	4b5e      	ldr	r3, [pc, #376]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005096:	495b      	ldr	r1, [pc, #364]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050aa:	4b56      	ldr	r3, [pc, #344]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b8:	4952      	ldr	r1, [pc, #328]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050da:	494a      	ldr	r1, [pc, #296]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050ee:	4b45      	ldr	r3, [pc, #276]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050fc:	4941      	ldr	r1, [pc, #260]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005110:	4b3c      	ldr	r3, [pc, #240]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511e:	4939      	ldr	r1, [pc, #228]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d028      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005132:	4b34      	ldr	r3, [pc, #208]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005138:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005140:	4930      	ldr	r1, [pc, #192]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005150:	d106      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005152:	4b2c      	ldr	r3, [pc, #176]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4a2b      	ldr	r2, [pc, #172]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800515c:	60d3      	str	r3, [r2, #12]
 800515e:	e011      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005164:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005168:	d10c      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3304      	adds	r3, #4
 800516e:	2101      	movs	r1, #1
 8005170:	4618      	mov	r0, r3
 8005172:	f000 f8f9 	bl	8005368 <RCCEx_PLLSAI1_Config>
 8005176:	4603      	mov	r3, r0
 8005178:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d04d      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005198:	d108      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800519a:	4b1a      	ldr	r3, [pc, #104]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051a0:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80051aa:	e012      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80051ac:	4b15      	ldr	r3, [pc, #84]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051b2:	4a14      	ldr	r2, [pc, #80]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80051bc:	4b11      	ldr	r3, [pc, #68]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ca:	490e      	ldr	r1, [pc, #56]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051da:	d106      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051dc:	4b09      	ldr	r3, [pc, #36]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a08      	ldr	r2, [pc, #32]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e6:	60d3      	str	r3, [r2, #12]
 80051e8:	e020      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f2:	d109      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051f4:	4b03      	ldr	r3, [pc, #12]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4a02      	ldr	r2, [pc, #8]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fe:	60d3      	str	r3, [r2, #12]
 8005200:	e014      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800520c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005210:	d10c      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3304      	adds	r3, #4
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f8a5 	bl	8005368 <RCCEx_PLLSAI1_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d028      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005238:	4b4a      	ldr	r3, [pc, #296]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005246:	4947      	ldr	r1, [pc, #284]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005256:	d106      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005258:	4b42      	ldr	r3, [pc, #264]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a41      	ldr	r2, [pc, #260]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800525e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005262:	60d3      	str	r3, [r2, #12]
 8005264:	e011      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800526a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800526e:	d10c      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	2101      	movs	r1, #1
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f876 	bl	8005368 <RCCEx_PLLSAI1_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01e      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005296:	4b33      	ldr	r3, [pc, #204]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a6:	492f      	ldr	r1, [pc, #188]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	2102      	movs	r1, #2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 f851 	bl	8005368 <RCCEx_PLLSAI1_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ca:	7cfb      	ldrb	r3, [r7, #19]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80052d0:	7cfb      	ldrb	r3, [r7, #19]
 80052d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052e0:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052e6:	f023 0204 	bic.w	r2, r3, #4
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052f0:	491c      	ldr	r1, [pc, #112]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005304:	4b17      	ldr	r3, [pc, #92]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005306:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800530a:	f023 0218 	bic.w	r2, r3, #24
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005314:	4913      	ldr	r1, [pc, #76]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d017      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005328:	4b0e      	ldr	r3, [pc, #56]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800532a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800532e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005338:	490a      	ldr	r1, [pc, #40]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800534a:	d105      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800534c:	4b05      	ldr	r3, [pc, #20]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a04      	ldr	r2, [pc, #16]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005356:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005358:	7cbb      	ldrb	r3, [r7, #18]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000

08005368 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005376:	4b72      	ldr	r3, [pc, #456]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005382:	4b6f      	ldr	r3, [pc, #444]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0203 	and.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d103      	bne.n	800539a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
       ||
 8005396:	2b00      	cmp	r3, #0
 8005398:	d142      	bne.n	8005420 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
 800539e:	e03f      	b.n	8005420 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d018      	beq.n	80053da <RCCEx_PLLSAI1_Config+0x72>
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d825      	bhi.n	80053f8 <RCCEx_PLLSAI1_Config+0x90>
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d002      	beq.n	80053b6 <RCCEx_PLLSAI1_Config+0x4e>
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d009      	beq.n	80053c8 <RCCEx_PLLSAI1_Config+0x60>
 80053b4:	e020      	b.n	80053f8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053b6:	4b62      	ldr	r3, [pc, #392]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d11d      	bne.n	80053fe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c6:	e01a      	b.n	80053fe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053c8:	4b5d      	ldr	r3, [pc, #372]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d116      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d8:	e013      	b.n	8005402 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053da:	4b59      	ldr	r3, [pc, #356]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053e6:	4b56      	ldr	r3, [pc, #344]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053f6:	e006      	b.n	8005406 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      break;
 80053fc:	e004      	b.n	8005408 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80053fe:	bf00      	nop
 8005400:	e002      	b.n	8005408 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005402:	bf00      	nop
 8005404:	e000      	b.n	8005408 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005406:	bf00      	nop
    }

    if(status == HAL_OK)
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d108      	bne.n	8005420 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800540e:	4b4c      	ldr	r3, [pc, #304]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f023 0203 	bic.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4949      	ldr	r1, [pc, #292]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 8086 	bne.w	8005534 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005428:	4b45      	ldr	r3, [pc, #276]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a44      	ldr	r2, [pc, #272]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 800542e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005434:	f7fd fb2a 	bl	8002a8c <HAL_GetTick>
 8005438:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800543a:	e009      	b.n	8005450 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800543c:	f7fd fb26 	bl	8002a8c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d902      	bls.n	8005450 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	73fb      	strb	r3, [r7, #15]
        break;
 800544e:	e005      	b.n	800545c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005450:	4b3b      	ldr	r3, [pc, #236]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ef      	bne.n	800543c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d168      	bne.n	8005534 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d113      	bne.n	8005490 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005468:	4b35      	ldr	r3, [pc, #212]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	4b35      	ldr	r3, [pc, #212]	@ (8005544 <RCCEx_PLLSAI1_Config+0x1dc>)
 800546e:	4013      	ands	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6892      	ldr	r2, [r2, #8]
 8005474:	0211      	lsls	r1, r2, #8
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68d2      	ldr	r2, [r2, #12]
 800547a:	06d2      	lsls	r2, r2, #27
 800547c:	4311      	orrs	r1, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6852      	ldr	r2, [r2, #4]
 8005482:	3a01      	subs	r2, #1
 8005484:	0112      	lsls	r2, r2, #4
 8005486:	430a      	orrs	r2, r1
 8005488:	492d      	ldr	r1, [pc, #180]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 800548a:	4313      	orrs	r3, r2
 800548c:	610b      	str	r3, [r1, #16]
 800548e:	e02d      	b.n	80054ec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d115      	bne.n	80054c2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005496:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	4b2b      	ldr	r3, [pc, #172]	@ (8005548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549c:	4013      	ands	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6892      	ldr	r2, [r2, #8]
 80054a2:	0211      	lsls	r1, r2, #8
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6912      	ldr	r2, [r2, #16]
 80054a8:	0852      	lsrs	r2, r2, #1
 80054aa:	3a01      	subs	r2, #1
 80054ac:	0552      	lsls	r2, r2, #21
 80054ae:	4311      	orrs	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6852      	ldr	r2, [r2, #4]
 80054b4:	3a01      	subs	r2, #1
 80054b6:	0112      	lsls	r2, r2, #4
 80054b8:	430a      	orrs	r2, r1
 80054ba:	4921      	ldr	r1, [pc, #132]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	610b      	str	r3, [r1, #16]
 80054c0:	e014      	b.n	80054ec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	4b21      	ldr	r3, [pc, #132]	@ (800554c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6892      	ldr	r2, [r2, #8]
 80054ce:	0211      	lsls	r1, r2, #8
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6952      	ldr	r2, [r2, #20]
 80054d4:	0852      	lsrs	r2, r2, #1
 80054d6:	3a01      	subs	r2, #1
 80054d8:	0652      	lsls	r2, r2, #25
 80054da:	4311      	orrs	r1, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6852      	ldr	r2, [r2, #4]
 80054e0:	3a01      	subs	r2, #1
 80054e2:	0112      	lsls	r2, r2, #4
 80054e4:	430a      	orrs	r2, r1
 80054e6:	4916      	ldr	r1, [pc, #88]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054ec:	4b14      	ldr	r3, [pc, #80]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a13      	ldr	r2, [pc, #76]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f8:	f7fd fac8 	bl	8002a8c <HAL_GetTick>
 80054fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054fe:	e009      	b.n	8005514 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005500:	f7fd fac4 	bl	8002a8c <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d902      	bls.n	8005514 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	73fb      	strb	r3, [r7, #15]
          break;
 8005512:	e005      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0ef      	beq.n	8005500 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005526:	4b06      	ldr	r3, [pc, #24]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	4904      	ldr	r1, [pc, #16]	@ (8005540 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005530:	4313      	orrs	r3, r2
 8005532:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
 8005544:	07ff800f 	.word	0x07ff800f
 8005548:	ff9f800f 	.word	0xff9f800f
 800554c:	f9ff800f 	.word	0xf9ff800f

08005550 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800555e:	4b72      	ldr	r3, [pc, #456]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800556a:	4b6f      	ldr	r3, [pc, #444]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0203 	and.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d103      	bne.n	8005582 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
       ||
 800557e:	2b00      	cmp	r3, #0
 8005580:	d142      	bne.n	8005608 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
 8005586:	e03f      	b.n	8005608 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b03      	cmp	r3, #3
 800558e:	d018      	beq.n	80055c2 <RCCEx_PLLSAI2_Config+0x72>
 8005590:	2b03      	cmp	r3, #3
 8005592:	d825      	bhi.n	80055e0 <RCCEx_PLLSAI2_Config+0x90>
 8005594:	2b01      	cmp	r3, #1
 8005596:	d002      	beq.n	800559e <RCCEx_PLLSAI2_Config+0x4e>
 8005598:	2b02      	cmp	r3, #2
 800559a:	d009      	beq.n	80055b0 <RCCEx_PLLSAI2_Config+0x60>
 800559c:	e020      	b.n	80055e0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800559e:	4b62      	ldr	r3, [pc, #392]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d11d      	bne.n	80055e6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ae:	e01a      	b.n	80055e6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055b0:	4b5d      	ldr	r3, [pc, #372]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d116      	bne.n	80055ea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c0:	e013      	b.n	80055ea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055c2:	4b59      	ldr	r3, [pc, #356]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10f      	bne.n	80055ee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055ce:	4b56      	ldr	r3, [pc, #344]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055de:	e006      	b.n	80055ee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]
      break;
 80055e4:	e004      	b.n	80055f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80055f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4949      	ldr	r1, [pc, #292]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005604:	4313      	orrs	r3, r2
 8005606:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 8086 	bne.w	800571c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005610:	4b45      	ldr	r3, [pc, #276]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a44      	ldr	r2, [pc, #272]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800561a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fd fa36 	bl	8002a8c <HAL_GetTick>
 8005620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005622:	e009      	b.n	8005638 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005624:	f7fd fa32 	bl	8002a8c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d902      	bls.n	8005638 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]
        break;
 8005636:	e005      	b.n	8005644 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005638:	4b3b      	ldr	r3, [pc, #236]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ef      	bne.n	8005624 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d168      	bne.n	800571c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d113      	bne.n	8005678 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005650:	4b35      	ldr	r3, [pc, #212]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	4b35      	ldr	r3, [pc, #212]	@ (800572c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005656:	4013      	ands	r3, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6892      	ldr	r2, [r2, #8]
 800565c:	0211      	lsls	r1, r2, #8
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68d2      	ldr	r2, [r2, #12]
 8005662:	06d2      	lsls	r2, r2, #27
 8005664:	4311      	orrs	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6852      	ldr	r2, [r2, #4]
 800566a:	3a01      	subs	r2, #1
 800566c:	0112      	lsls	r2, r2, #4
 800566e:	430a      	orrs	r2, r1
 8005670:	492d      	ldr	r1, [pc, #180]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005672:	4313      	orrs	r3, r2
 8005674:	614b      	str	r3, [r1, #20]
 8005676:	e02d      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d115      	bne.n	80056aa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800567e:	4b2a      	ldr	r3, [pc, #168]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	4b2b      	ldr	r3, [pc, #172]	@ (8005730 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005684:	4013      	ands	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	0211      	lsls	r1, r2, #8
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6912      	ldr	r2, [r2, #16]
 8005690:	0852      	lsrs	r2, r2, #1
 8005692:	3a01      	subs	r2, #1
 8005694:	0552      	lsls	r2, r2, #21
 8005696:	4311      	orrs	r1, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6852      	ldr	r2, [r2, #4]
 800569c:	3a01      	subs	r2, #1
 800569e:	0112      	lsls	r2, r2, #4
 80056a0:	430a      	orrs	r2, r1
 80056a2:	4921      	ldr	r1, [pc, #132]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	614b      	str	r3, [r1, #20]
 80056a8:	e014      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	4b21      	ldr	r3, [pc, #132]	@ (8005734 <RCCEx_PLLSAI2_Config+0x1e4>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6892      	ldr	r2, [r2, #8]
 80056b6:	0211      	lsls	r1, r2, #8
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6952      	ldr	r2, [r2, #20]
 80056bc:	0852      	lsrs	r2, r2, #1
 80056be:	3a01      	subs	r2, #1
 80056c0:	0652      	lsls	r2, r2, #25
 80056c2:	4311      	orrs	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6852      	ldr	r2, [r2, #4]
 80056c8:	3a01      	subs	r2, #1
 80056ca:	0112      	lsls	r2, r2, #4
 80056cc:	430a      	orrs	r2, r1
 80056ce:	4916      	ldr	r1, [pc, #88]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80056d4:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a13      	ldr	r2, [pc, #76]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fd f9d4 	bl	8002a8c <HAL_GetTick>
 80056e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056e6:	e009      	b.n	80056fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056e8:	f7fd f9d0 	bl	8002a8c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d902      	bls.n	80056fc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	73fb      	strb	r3, [r7, #15]
          break;
 80056fa:	e005      	b.n	8005708 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ef      	beq.n	80056e8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800570e:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	4904      	ldr	r1, [pc, #16]	@ (8005728 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005718:	4313      	orrs	r3, r2
 800571a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000
 800572c:	07ff800f 	.word	0x07ff800f
 8005730:	ff9f800f 	.word	0xff9f800f
 8005734:	f9ff800f 	.word	0xf9ff800f

08005738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e095      	b.n	8005876 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800575a:	d009      	beq.n	8005770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	61da      	str	r2, [r3, #28]
 8005762:	e005      	b.n	8005770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fc ff28 	bl	80025e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057b0:	d902      	bls.n	80057b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e002      	b.n	80057be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80057c6:	d007      	beq.n	80057d8 <HAL_SPI_Init+0xa0>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057d0:	d002      	beq.n	80057d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581a:	ea42 0103 	orr.w	r1, r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	0c1b      	lsrs	r3, r3, #16
 8005834:	f003 0204 	and.w	r2, r3, #4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005854:	ea42 0103 	orr.w	r1, r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b088      	sub	sp, #32
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	603b      	str	r3, [r7, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_SPI_Transmit+0x22>
 800589c:	2302      	movs	r3, #2
 800589e:	e15f      	b.n	8005b60 <HAL_SPI_Transmit+0x2e2>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058a8:	f7fd f8f0 	bl	8002a8c <HAL_GetTick>
 80058ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058be:	2302      	movs	r3, #2
 80058c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058c2:	e148      	b.n	8005b56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_Transmit+0x52>
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058d4:	e13f      	b.n	8005b56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2203      	movs	r2, #3
 80058da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005920:	d10f      	bne.n	8005942 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594c:	2b40      	cmp	r3, #64	@ 0x40
 800594e:	d007      	beq.n	8005960 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800595e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005968:	d94f      	bls.n	8005a0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_SPI_Transmit+0xfa>
 8005972:	8afb      	ldrh	r3, [r7, #22]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d142      	bne.n	80059fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	881a      	ldrh	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800599c:	e02f      	b.n	80059fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d112      	bne.n	80059d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	881a      	ldrh	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059d0:	e015      	b.n	80059fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059d2:	f7fd f85b 	bl	8002a8c <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d803      	bhi.n	80059ea <HAL_SPI_Transmit+0x16c>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d102      	bne.n	80059f0 <HAL_SPI_Transmit+0x172>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d106      	bne.n	80059fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80059fc:	e0ab      	b.n	8005b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1ca      	bne.n	800599e <HAL_SPI_Transmit+0x120>
 8005a08:	e080      	b.n	8005b0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_SPI_Transmit+0x19a>
 8005a12:	8afb      	ldrh	r3, [r7, #22]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d174      	bne.n	8005b02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d912      	bls.n	8005a48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	881a      	ldrh	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a32:	1c9a      	adds	r2, r3, #2
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b02      	subs	r3, #2
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a46:	e05c      	b.n	8005b02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	7812      	ldrb	r2, [r2, #0]
 8005a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a6e:	e048      	b.n	8005b02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d12b      	bne.n	8005ad6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d912      	bls.n	8005aae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b02      	subs	r3, #2
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005aac:	e029      	b.n	8005b02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ad4:	e015      	b.n	8005b02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad6:	f7fc ffd9 	bl	8002a8c <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d803      	bhi.n	8005aee <HAL_SPI_Transmit+0x270>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d102      	bne.n	8005af4 <HAL_SPI_Transmit+0x276>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005b00:	e029      	b.n	8005b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1b1      	bne.n	8005a70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f947 	bl	8005da4 <SPI_EndRxTxTransaction>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e003      	b.n	8005b56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3720      	adds	r7, #32
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b78:	f7fc ff88 	bl	8002a8c <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b88:	f7fc ff80 	bl	8002a8c <HAL_GetTick>
 8005b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b8e:	4b39      	ldr	r3, [pc, #228]	@ (8005c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	015b      	lsls	r3, r3, #5
 8005b94:	0d1b      	lsrs	r3, r3, #20
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b9e:	e054      	b.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d050      	beq.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba8:	f7fc ff70 	bl	8002a8c <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d902      	bls.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d13d      	bne.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bd6:	d111      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005be0:	d004      	beq.n	8005bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bea:	d107      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c04:	d10f      	bne.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e017      	b.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d19b      	bne.n	8005ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000080 	.word	0x20000080

08005c78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	@ 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c8a:	f7fc feff 	bl	8002a8c <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005c9a:	f7fc fef7 	bl	8002a8c <HAL_GetTick>
 8005c9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8005da0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	00da      	lsls	r2, r3, #3
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	0d1b      	lsrs	r3, r3, #20
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005cc0:	e060      	b.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005cc8:	d107      	bne.n	8005cda <SPI_WaitFifoStateUntilTimeout+0x62>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d050      	beq.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce2:	f7fc fed3 	bl	8002a8c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d902      	bls.n	8005cf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d13d      	bne.n	8005d74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d10:	d111      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1a:	d004      	beq.n	8005d26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d24:	d107      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3e:	d10f      	bne.n	8005d60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e010      	b.n	8005d96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d196      	bne.n	8005cc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3728      	adds	r7, #40	@ 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000080 	.word	0x20000080

08005da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff ff5b 	bl	8005c78 <SPI_WaitFifoStateUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e027      	b.n	8005e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2200      	movs	r2, #0
 8005de0:	2180      	movs	r1, #128	@ 0x80
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff fec0 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e014      	b.n	8005e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff ff34 	bl	8005c78 <SPI_WaitFifoStateUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1a:	f043 0220 	orr.w	r2, r3, #32
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e000      	b.n	8005e28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e049      	b.n	8005ed6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fc fc04 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f000 fa9a 	bl	80063a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d001      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e04f      	b.n	8005f98 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a23      	ldr	r2, [pc, #140]	@ (8005fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d01d      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0x76>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f22:	d018      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0x76>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0x76>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1e      	ldr	r2, [pc, #120]	@ (8005fac <HAL_TIM_Base_Start_IT+0xcc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00e      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0x76>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0x76>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0x76>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a19      	ldr	r2, [pc, #100]	@ (8005fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d115      	bne.n	8005f82 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	4b17      	ldr	r3, [pc, #92]	@ (8005fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b06      	cmp	r3, #6
 8005f66:	d015      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0xb4>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f6e:	d011      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f80:	e008      	b.n	8005f94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0201 	orr.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e000      	b.n	8005f96 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40012c00 	.word	0x40012c00
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	00010007 	.word	0x00010007

08005fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d020      	beq.n	8006024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01b      	beq.n	8006024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0202 	mvn.w	r2, #2
 8005ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9ad 	bl	800636a <HAL_TIM_IC_CaptureCallback>
 8006010:	e005      	b.n	800601e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f99f 	bl	8006356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f9b0 	bl	800637e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	2b00      	cmp	r3, #0
 800602c:	d020      	beq.n	8006070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01b      	beq.n	8006070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0204 	mvn.w	r2, #4
 8006040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f987 	bl	800636a <HAL_TIM_IC_CaptureCallback>
 800605c:	e005      	b.n	800606a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f979 	bl	8006356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f98a 	bl	800637e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d020      	beq.n	80060bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01b      	beq.n	80060bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0208 	mvn.w	r2, #8
 800608c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2204      	movs	r2, #4
 8006092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f961 	bl	800636a <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f953 	bl	8006356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f964 	bl	800637e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d020      	beq.n	8006108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01b      	beq.n	8006108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0210 	mvn.w	r2, #16
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2208      	movs	r2, #8
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f93b 	bl	800636a <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f92d 	bl	8006356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f93e 	bl	800637e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0201 	mvn.w	r2, #1
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fb fb84 	bl	8001834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00c      	beq.n	8006150 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 faf2 	bl	8006734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00c      	beq.n	8006174 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800616c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 faea 	bl	8006748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00c      	beq.n	8006198 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f8fd 	bl	8006392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0220 	mvn.w	r2, #32
 80061b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fab2 	bl	8006720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_TIM_ConfigClockSource+0x1c>
 80061dc:	2302      	movs	r3, #2
 80061de:	e0b6      	b.n	800634e <HAL_TIM_ConfigClockSource+0x18a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800620a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800621c:	d03e      	beq.n	800629c <HAL_TIM_ConfigClockSource+0xd8>
 800621e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006222:	f200 8087 	bhi.w	8006334 <HAL_TIM_ConfigClockSource+0x170>
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622a:	f000 8086 	beq.w	800633a <HAL_TIM_ConfigClockSource+0x176>
 800622e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006232:	d87f      	bhi.n	8006334 <HAL_TIM_ConfigClockSource+0x170>
 8006234:	2b70      	cmp	r3, #112	@ 0x70
 8006236:	d01a      	beq.n	800626e <HAL_TIM_ConfigClockSource+0xaa>
 8006238:	2b70      	cmp	r3, #112	@ 0x70
 800623a:	d87b      	bhi.n	8006334 <HAL_TIM_ConfigClockSource+0x170>
 800623c:	2b60      	cmp	r3, #96	@ 0x60
 800623e:	d050      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x11e>
 8006240:	2b60      	cmp	r3, #96	@ 0x60
 8006242:	d877      	bhi.n	8006334 <HAL_TIM_ConfigClockSource+0x170>
 8006244:	2b50      	cmp	r3, #80	@ 0x50
 8006246:	d03c      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0xfe>
 8006248:	2b50      	cmp	r3, #80	@ 0x50
 800624a:	d873      	bhi.n	8006334 <HAL_TIM_ConfigClockSource+0x170>
 800624c:	2b40      	cmp	r3, #64	@ 0x40
 800624e:	d058      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0x13e>
 8006250:	2b40      	cmp	r3, #64	@ 0x40
 8006252:	d86f      	bhi.n	8006334 <HAL_TIM_ConfigClockSource+0x170>
 8006254:	2b30      	cmp	r3, #48	@ 0x30
 8006256:	d064      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x15e>
 8006258:	2b30      	cmp	r3, #48	@ 0x30
 800625a:	d86b      	bhi.n	8006334 <HAL_TIM_ConfigClockSource+0x170>
 800625c:	2b20      	cmp	r3, #32
 800625e:	d060      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x15e>
 8006260:	2b20      	cmp	r3, #32
 8006262:	d867      	bhi.n	8006334 <HAL_TIM_ConfigClockSource+0x170>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d05c      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x15e>
 8006268:	2b10      	cmp	r3, #16
 800626a:	d05a      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x15e>
 800626c:	e062      	b.n	8006334 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800627e:	f000 f9a7 	bl	80065d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	609a      	str	r2, [r3, #8]
      break;
 800629a:	e04f      	b.n	800633c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ac:	f000 f990 	bl	80065d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062be:	609a      	str	r2, [r3, #8]
      break;
 80062c0:	e03c      	b.n	800633c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ce:	461a      	mov	r2, r3
 80062d0:	f000 f904 	bl	80064dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2150      	movs	r1, #80	@ 0x50
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 f95d 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 80062e0:	e02c      	b.n	800633c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ee:	461a      	mov	r2, r3
 80062f0:	f000 f923 	bl	800653a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2160      	movs	r1, #96	@ 0x60
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f94d 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 8006300:	e01c      	b.n	800633c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800630e:	461a      	mov	r2, r3
 8006310:	f000 f8e4 	bl	80064dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2140      	movs	r1, #64	@ 0x40
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f93d 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 8006320:	e00c      	b.n	800633c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f000 f934 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 8006332:	e003      	b.n	800633c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	73fb      	strb	r3, [r7, #15]
      break;
 8006338:	e000      	b.n	800633c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800633a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
	...

080063a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a40      	ldr	r2, [pc, #256]	@ (80064bc <TIM_Base_SetConfig+0x114>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d013      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c6:	d00f      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a3d      	ldr	r2, [pc, #244]	@ (80064c0 <TIM_Base_SetConfig+0x118>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00b      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a3c      	ldr	r2, [pc, #240]	@ (80064c4 <TIM_Base_SetConfig+0x11c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d007      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a3b      	ldr	r2, [pc, #236]	@ (80064c8 <TIM_Base_SetConfig+0x120>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a3a      	ldr	r2, [pc, #232]	@ (80064cc <TIM_Base_SetConfig+0x124>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d108      	bne.n	80063fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2f      	ldr	r2, [pc, #188]	@ (80064bc <TIM_Base_SetConfig+0x114>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01f      	beq.n	8006442 <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006408:	d01b      	beq.n	8006442 <TIM_Base_SetConfig+0x9a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2c      	ldr	r2, [pc, #176]	@ (80064c0 <TIM_Base_SetConfig+0x118>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d017      	beq.n	8006442 <TIM_Base_SetConfig+0x9a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2b      	ldr	r2, [pc, #172]	@ (80064c4 <TIM_Base_SetConfig+0x11c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d013      	beq.n	8006442 <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2a      	ldr	r2, [pc, #168]	@ (80064c8 <TIM_Base_SetConfig+0x120>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00f      	beq.n	8006442 <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a29      	ldr	r2, [pc, #164]	@ (80064cc <TIM_Base_SetConfig+0x124>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00b      	beq.n	8006442 <TIM_Base_SetConfig+0x9a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a28      	ldr	r2, [pc, #160]	@ (80064d0 <TIM_Base_SetConfig+0x128>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d007      	beq.n	8006442 <TIM_Base_SetConfig+0x9a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a27      	ldr	r2, [pc, #156]	@ (80064d4 <TIM_Base_SetConfig+0x12c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_Base_SetConfig+0x9a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a26      	ldr	r2, [pc, #152]	@ (80064d8 <TIM_Base_SetConfig+0x130>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d108      	bne.n	8006454 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a10      	ldr	r2, [pc, #64]	@ (80064bc <TIM_Base_SetConfig+0x114>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00f      	beq.n	80064a0 <TIM_Base_SetConfig+0xf8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a12      	ldr	r2, [pc, #72]	@ (80064cc <TIM_Base_SetConfig+0x124>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00b      	beq.n	80064a0 <TIM_Base_SetConfig+0xf8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a11      	ldr	r2, [pc, #68]	@ (80064d0 <TIM_Base_SetConfig+0x128>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d007      	beq.n	80064a0 <TIM_Base_SetConfig+0xf8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a10      	ldr	r2, [pc, #64]	@ (80064d4 <TIM_Base_SetConfig+0x12c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_Base_SetConfig+0xf8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a0f      	ldr	r2, [pc, #60]	@ (80064d8 <TIM_Base_SetConfig+0x130>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d103      	bne.n	80064a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	615a      	str	r2, [r3, #20]
}
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 030a 	bic.w	r3, r3, #10
 8006518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653a:	b480      	push	{r7}
 800653c:	b087      	sub	sp, #28
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f023 0210 	bic.w	r2, r3, #16
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006576:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f043 0307 	orr.w	r3, r3, #7
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	609a      	str	r2, [r3, #8]
}
 8006604:	bf00      	nop
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006624:	2302      	movs	r3, #2
 8006626:	e068      	b.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2e      	ldr	r2, [pc, #184]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d004      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a2d      	ldr	r2, [pc, #180]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d108      	bne.n	800666e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1e      	ldr	r2, [pc, #120]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d01d      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800669a:	d018      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d013      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00e      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a18      	ldr	r2, [pc, #96]	@ (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d009      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a13      	ldr	r2, [pc, #76]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d004      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a14      	ldr	r2, [pc, #80]	@ (800671c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d10c      	bne.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40000400 	.word	0x40000400
 8006714:	40000800 	.word	0x40000800
 8006718:	40000c00 	.word	0x40000c00
 800671c:	40014000 	.word	0x40014000

08006720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e042      	b.n	80067f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7fb fe7f 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2224      	movs	r2, #36	@ 0x24
 800678a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 ff42 	bl	8007630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fc43 	bl	8007038 <UART_SetConfig>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e01b      	b.n	80067f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 ffc1 	bl	8007774 <UART_CheckIdleState>
 80067f2:	4603      	mov	r3, r0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	@ 0x28
 8006800:	af02      	add	r7, sp, #8
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006812:	2b20      	cmp	r3, #32
 8006814:	d17b      	bne.n	800690e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <HAL_UART_Transmit+0x26>
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e074      	b.n	8006910 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2221      	movs	r2, #33	@ 0x21
 8006832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006836:	f7fc f929 	bl	8002a8c <HAL_GetTick>
 800683a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	88fa      	ldrh	r2, [r7, #6]
 8006848:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006854:	d108      	bne.n	8006868 <HAL_UART_Transmit+0x6c>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e003      	b.n	8006870 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006870:	e030      	b.n	80068d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2200      	movs	r2, #0
 800687a:	2180      	movs	r1, #128	@ 0x80
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f001 f823 	bl	80078c8 <UART_WaitOnFlagUntilTimeout>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e03d      	b.n	8006910 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	881a      	ldrh	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a6:	b292      	uxth	r2, r2
 80068a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	3302      	adds	r3, #2
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	e007      	b.n	80068c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	3301      	adds	r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1c8      	bne.n	8006872 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	2140      	movs	r1, #64	@ 0x40
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 ffec 	bl	80078c8 <UART_WaitOnFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e006      	b.n	8006910 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	e000      	b.n	8006910 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800690e:	2302      	movs	r3, #2
  }
}
 8006910:	4618      	mov	r0, r3
 8006912:	3720      	adds	r7, #32
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	@ 0x28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800692c:	2b20      	cmp	r3, #32
 800692e:	d137      	bne.n	80069a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_UART_Receive_IT+0x24>
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e030      	b.n	80069a2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a18      	ldr	r2, [pc, #96]	@ (80069ac <HAL_UART_Receive_IT+0x94>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d01f      	beq.n	8006990 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d018      	beq.n	8006990 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	613b      	str	r3, [r7, #16]
   return(result);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	623b      	str	r3, [r7, #32]
 800697e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	69f9      	ldr	r1, [r7, #28]
 8006982:	6a3a      	ldr	r2, [r7, #32]
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	61bb      	str	r3, [r7, #24]
   return(result);
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e6      	bne.n	800695e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	461a      	mov	r2, r3
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 fffe 	bl	8007998 <UART_Start_Receive_IT>
 800699c:	4603      	mov	r3, r0
 800699e:	e000      	b.n	80069a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069a0:	2302      	movs	r3, #2
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3728      	adds	r7, #40	@ 0x28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	40008000 	.word	0x40008000

080069b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b0ba      	sub	sp, #232	@ 0xe8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80069da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80069de:	4013      	ands	r3, r2
 80069e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80069e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11b      	bne.n	8006a24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d015      	beq.n	8006a24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d105      	bne.n	8006a10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 82e3 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
      }
      return;
 8006a22:	e2dd      	b.n	8006fe0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8123 	beq.w	8006c74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a32:	4b8d      	ldr	r3, [pc, #564]	@ (8006c68 <HAL_UART_IRQHandler+0x2b8>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c6c <HAL_UART_IRQHandler+0x2bc>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8116 	beq.w	8006c74 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d011      	beq.n	8006a78 <HAL_UART_IRQHandler+0xc8>
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00b      	beq.n	8006a78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2201      	movs	r2, #1
 8006a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d011      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xf8>
 8006a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2202      	movs	r2, #2
 8006a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a9e:	f043 0204 	orr.w	r2, r3, #4
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d011      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x128>
 8006ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ace:	f043 0202 	orr.w	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d017      	beq.n	8006b14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006af0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006af4:	4b5c      	ldr	r3, [pc, #368]	@ (8006c68 <HAL_UART_IRQHandler+0x2b8>)
 8006af6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2208      	movs	r2, #8
 8006b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0a:	f043 0208 	orr.w	r2, r3, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d012      	beq.n	8006b46 <HAL_UART_IRQHandler+0x196>
 8006b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3c:	f043 0220 	orr.w	r2, r3, #32
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8249 	beq.w	8006fe4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d013      	beq.n	8006b86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d105      	bne.n	8006b76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9a:	2b40      	cmp	r3, #64	@ 0x40
 8006b9c:	d005      	beq.n	8006baa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ba2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d054      	beq.n	8006c54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 f816 	bl	8007bdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	d146      	bne.n	8006c4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1d9      	bne.n	8006bbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c1a:	4a15      	ldr	r2, [pc, #84]	@ (8006c70 <HAL_UART_IRQHandler+0x2c0>)
 8006c1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fc f8ce 	bl	8002dc6 <HAL_DMA_Abort_IT>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d019      	beq.n	8006c64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c42:	e00f      	b.n	8006c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f9e1 	bl	800700c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4a:	e00b      	b.n	8006c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f9dd 	bl	800700c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c52:	e007      	b.n	8006c64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9d9 	bl	800700c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c62:	e1bf      	b.n	8006fe4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	bf00      	nop
    return;
 8006c66:	e1bd      	b.n	8006fe4 <HAL_UART_IRQHandler+0x634>
 8006c68:	10000001 	.word	0x10000001
 8006c6c:	04000120 	.word	0x04000120
 8006c70:	08007ca9 	.word	0x08007ca9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	f040 8153 	bne.w	8006f24 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 814c 	beq.w	8006f24 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8145 	beq.w	8006f24 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b40      	cmp	r3, #64	@ 0x40
 8006cae:	f040 80bb 	bne.w	8006e28 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 818f 	beq.w	8006fe8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	f080 8187 	bcs.w	8006fe8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 8087 	bne.w	8006e06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1da      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e1      	bne.n	8006d42 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006da2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006da4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006da8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e3      	bne.n	8006d7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd4:	f023 0310 	bic.w	r3, r3, #16
 8006dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006de6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006de8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e4      	bne.n	8006dc4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fb ff84 	bl	8002d0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8fd 	bl	8007020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e26:	e0df      	b.n	8006fe8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80d1 	beq.w	8006fec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80cc 	beq.w	8006fec <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e4      	bne.n	8006e54 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	623b      	str	r3, [r7, #32]
   return(result);
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006eb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e1      	bne.n	8006e8a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	69b9      	ldr	r1, [r7, #24]
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e4      	bne.n	8006eda <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f87f 	bl	8007020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f22:	e063      	b.n	8006fec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00e      	beq.n	8006f4e <HAL_UART_IRQHandler+0x59e>
 8006f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fc14 	bl	8008774 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f4c:	e051      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d014      	beq.n	8006f84 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d03a      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
    }
    return;
 8006f82:	e035      	b.n	8006ff0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x5f4>
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fe99 	bl	8007cd4 <UART_EndTransmit_IT>
    return;
 8006fa2:	e026      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x614>
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fbed 	bl	800879c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fc2:	e016      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d010      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x642>
 8006fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da0c      	bge.n	8006ff2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 fbd5 	bl	8008788 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fde:	e008      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
      return;
 8006fe0:	bf00      	nop
 8006fe2:	e006      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
    return;
 8006fe4:	bf00      	nop
 8006fe6:	e004      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
      return;
 8006fe8:	bf00      	nop
 8006fea:	e002      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
      return;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <HAL_UART_IRQHandler+0x642>
    return;
 8006ff0:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ff2:	37e8      	adds	r7, #232	@ 0xe8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800703c:	b08c      	sub	sp, #48	@ 0x30
 800703e:	af00      	add	r7, sp, #0
 8007040:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	431a      	orrs	r2, r3
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	431a      	orrs	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	4313      	orrs	r3, r2
 800705e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	4baa      	ldr	r3, [pc, #680]	@ (8007310 <UART_SetConfig+0x2d8>)
 8007068:	4013      	ands	r3, r2
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007070:	430b      	orrs	r3, r1
 8007072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a9f      	ldr	r2, [pc, #636]	@ (8007314 <UART_SetConfig+0x2dc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d004      	beq.n	80070a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070a0:	4313      	orrs	r3, r2
 80070a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80070ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c2:	f023 010f 	bic.w	r1, r3, #15
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a90      	ldr	r2, [pc, #576]	@ (8007318 <UART_SetConfig+0x2e0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d125      	bne.n	8007128 <UART_SetConfig+0xf0>
 80070dc:	4b8f      	ldr	r3, [pc, #572]	@ (800731c <UART_SetConfig+0x2e4>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d81a      	bhi.n	8007120 <UART_SetConfig+0xe8>
 80070ea:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <UART_SetConfig+0xb8>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007101 	.word	0x08007101
 80070f4:	08007111 	.word	0x08007111
 80070f8:	08007109 	.word	0x08007109
 80070fc:	08007119 	.word	0x08007119
 8007100:	2301      	movs	r3, #1
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007106:	e116      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007108:	2302      	movs	r3, #2
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710e:	e112      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007116:	e10e      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e10a      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e106      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a7c      	ldr	r2, [pc, #496]	@ (8007320 <UART_SetConfig+0x2e8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d138      	bne.n	80071a4 <UART_SetConfig+0x16c>
 8007132:	4b7a      	ldr	r3, [pc, #488]	@ (800731c <UART_SetConfig+0x2e4>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007138:	f003 030c 	and.w	r3, r3, #12
 800713c:	2b0c      	cmp	r3, #12
 800713e:	d82d      	bhi.n	800719c <UART_SetConfig+0x164>
 8007140:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <UART_SetConfig+0x110>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	0800717d 	.word	0x0800717d
 800714c:	0800719d 	.word	0x0800719d
 8007150:	0800719d 	.word	0x0800719d
 8007154:	0800719d 	.word	0x0800719d
 8007158:	0800718d 	.word	0x0800718d
 800715c:	0800719d 	.word	0x0800719d
 8007160:	0800719d 	.word	0x0800719d
 8007164:	0800719d 	.word	0x0800719d
 8007168:	08007185 	.word	0x08007185
 800716c:	0800719d 	.word	0x0800719d
 8007170:	0800719d 	.word	0x0800719d
 8007174:	0800719d 	.word	0x0800719d
 8007178:	08007195 	.word	0x08007195
 800717c:	2300      	movs	r3, #0
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e0d8      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007184:	2302      	movs	r3, #2
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e0d4      	b.n	8007336 <UART_SetConfig+0x2fe>
 800718c:	2304      	movs	r3, #4
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e0d0      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007194:	2308      	movs	r3, #8
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e0cc      	b.n	8007336 <UART_SetConfig+0x2fe>
 800719c:	2310      	movs	r3, #16
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a2:	e0c8      	b.n	8007336 <UART_SetConfig+0x2fe>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a5e      	ldr	r2, [pc, #376]	@ (8007324 <UART_SetConfig+0x2ec>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d125      	bne.n	80071fa <UART_SetConfig+0x1c2>
 80071ae:	4b5b      	ldr	r3, [pc, #364]	@ (800731c <UART_SetConfig+0x2e4>)
 80071b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071b8:	2b30      	cmp	r3, #48	@ 0x30
 80071ba:	d016      	beq.n	80071ea <UART_SetConfig+0x1b2>
 80071bc:	2b30      	cmp	r3, #48	@ 0x30
 80071be:	d818      	bhi.n	80071f2 <UART_SetConfig+0x1ba>
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d00a      	beq.n	80071da <UART_SetConfig+0x1a2>
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d814      	bhi.n	80071f2 <UART_SetConfig+0x1ba>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <UART_SetConfig+0x19a>
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d008      	beq.n	80071e2 <UART_SetConfig+0x1aa>
 80071d0:	e00f      	b.n	80071f2 <UART_SetConfig+0x1ba>
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d8:	e0ad      	b.n	8007336 <UART_SetConfig+0x2fe>
 80071da:	2302      	movs	r3, #2
 80071dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e0:	e0a9      	b.n	8007336 <UART_SetConfig+0x2fe>
 80071e2:	2304      	movs	r3, #4
 80071e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e8:	e0a5      	b.n	8007336 <UART_SetConfig+0x2fe>
 80071ea:	2308      	movs	r3, #8
 80071ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f0:	e0a1      	b.n	8007336 <UART_SetConfig+0x2fe>
 80071f2:	2310      	movs	r3, #16
 80071f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f8:	e09d      	b.n	8007336 <UART_SetConfig+0x2fe>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007328 <UART_SetConfig+0x2f0>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d125      	bne.n	8007250 <UART_SetConfig+0x218>
 8007204:	4b45      	ldr	r3, [pc, #276]	@ (800731c <UART_SetConfig+0x2e4>)
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800720e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007210:	d016      	beq.n	8007240 <UART_SetConfig+0x208>
 8007212:	2bc0      	cmp	r3, #192	@ 0xc0
 8007214:	d818      	bhi.n	8007248 <UART_SetConfig+0x210>
 8007216:	2b80      	cmp	r3, #128	@ 0x80
 8007218:	d00a      	beq.n	8007230 <UART_SetConfig+0x1f8>
 800721a:	2b80      	cmp	r3, #128	@ 0x80
 800721c:	d814      	bhi.n	8007248 <UART_SetConfig+0x210>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <UART_SetConfig+0x1f0>
 8007222:	2b40      	cmp	r3, #64	@ 0x40
 8007224:	d008      	beq.n	8007238 <UART_SetConfig+0x200>
 8007226:	e00f      	b.n	8007248 <UART_SetConfig+0x210>
 8007228:	2300      	movs	r3, #0
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722e:	e082      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007230:	2302      	movs	r3, #2
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e07e      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007238:	2304      	movs	r3, #4
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e07a      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007240:	2308      	movs	r3, #8
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007246:	e076      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007248:	2310      	movs	r3, #16
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724e:	e072      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a35      	ldr	r2, [pc, #212]	@ (800732c <UART_SetConfig+0x2f4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d12a      	bne.n	80072b0 <UART_SetConfig+0x278>
 800725a:	4b30      	ldr	r3, [pc, #192]	@ (800731c <UART_SetConfig+0x2e4>)
 800725c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007268:	d01a      	beq.n	80072a0 <UART_SetConfig+0x268>
 800726a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800726e:	d81b      	bhi.n	80072a8 <UART_SetConfig+0x270>
 8007270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007274:	d00c      	beq.n	8007290 <UART_SetConfig+0x258>
 8007276:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800727a:	d815      	bhi.n	80072a8 <UART_SetConfig+0x270>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <UART_SetConfig+0x250>
 8007280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007284:	d008      	beq.n	8007298 <UART_SetConfig+0x260>
 8007286:	e00f      	b.n	80072a8 <UART_SetConfig+0x270>
 8007288:	2300      	movs	r3, #0
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728e:	e052      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007290:	2302      	movs	r3, #2
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007296:	e04e      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007298:	2304      	movs	r3, #4
 800729a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729e:	e04a      	b.n	8007336 <UART_SetConfig+0x2fe>
 80072a0:	2308      	movs	r3, #8
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a6:	e046      	b.n	8007336 <UART_SetConfig+0x2fe>
 80072a8:	2310      	movs	r3, #16
 80072aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ae:	e042      	b.n	8007336 <UART_SetConfig+0x2fe>
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a17      	ldr	r2, [pc, #92]	@ (8007314 <UART_SetConfig+0x2dc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d13a      	bne.n	8007330 <UART_SetConfig+0x2f8>
 80072ba:	4b18      	ldr	r3, [pc, #96]	@ (800731c <UART_SetConfig+0x2e4>)
 80072bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072c8:	d01a      	beq.n	8007300 <UART_SetConfig+0x2c8>
 80072ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072ce:	d81b      	bhi.n	8007308 <UART_SetConfig+0x2d0>
 80072d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d4:	d00c      	beq.n	80072f0 <UART_SetConfig+0x2b8>
 80072d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072da:	d815      	bhi.n	8007308 <UART_SetConfig+0x2d0>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <UART_SetConfig+0x2b0>
 80072e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e4:	d008      	beq.n	80072f8 <UART_SetConfig+0x2c0>
 80072e6:	e00f      	b.n	8007308 <UART_SetConfig+0x2d0>
 80072e8:	2300      	movs	r3, #0
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ee:	e022      	b.n	8007336 <UART_SetConfig+0x2fe>
 80072f0:	2302      	movs	r3, #2
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f6:	e01e      	b.n	8007336 <UART_SetConfig+0x2fe>
 80072f8:	2304      	movs	r3, #4
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fe:	e01a      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007300:	2308      	movs	r3, #8
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007306:	e016      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007308:	2310      	movs	r3, #16
 800730a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730e:	e012      	b.n	8007336 <UART_SetConfig+0x2fe>
 8007310:	cfff69f3 	.word	0xcfff69f3
 8007314:	40008000 	.word	0x40008000
 8007318:	40013800 	.word	0x40013800
 800731c:	40021000 	.word	0x40021000
 8007320:	40004400 	.word	0x40004400
 8007324:	40004800 	.word	0x40004800
 8007328:	40004c00 	.word	0x40004c00
 800732c:	40005000 	.word	0x40005000
 8007330:	2310      	movs	r3, #16
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4aae      	ldr	r2, [pc, #696]	@ (80075f4 <UART_SetConfig+0x5bc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	f040 8097 	bne.w	8007470 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007342:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007346:	2b08      	cmp	r3, #8
 8007348:	d823      	bhi.n	8007392 <UART_SetConfig+0x35a>
 800734a:	a201      	add	r2, pc, #4	@ (adr r2, 8007350 <UART_SetConfig+0x318>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007375 	.word	0x08007375
 8007354:	08007393 	.word	0x08007393
 8007358:	0800737d 	.word	0x0800737d
 800735c:	08007393 	.word	0x08007393
 8007360:	08007383 	.word	0x08007383
 8007364:	08007393 	.word	0x08007393
 8007368:	08007393 	.word	0x08007393
 800736c:	08007393 	.word	0x08007393
 8007370:	0800738b 	.word	0x0800738b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007374:	f7fd fbdc 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8007378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800737a:	e010      	b.n	800739e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800737c:	4b9e      	ldr	r3, [pc, #632]	@ (80075f8 <UART_SetConfig+0x5c0>)
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007380:	e00d      	b.n	800739e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007382:	f7fd fb3d 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8007386:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007388:	e009      	b.n	800739e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007390:	e005      	b.n	800739e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800739c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8130 	beq.w	8007606 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073aa:	4a94      	ldr	r2, [pc, #592]	@ (80075fc <UART_SetConfig+0x5c4>)
 80073ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	4413      	add	r3, r2
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d305      	bcc.n	80073d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d903      	bls.n	80073de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073dc:	e113      	b.n	8007606 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e0:	2200      	movs	r2, #0
 80073e2:	60bb      	str	r3, [r7, #8]
 80073e4:	60fa      	str	r2, [r7, #12]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ea:	4a84      	ldr	r2, [pc, #528]	@ (80075fc <UART_SetConfig+0x5c4>)
 80073ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2200      	movs	r2, #0
 80073f4:	603b      	str	r3, [r7, #0]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007400:	f7f9 fbfa 	bl	8000bf8 <__aeabi_uldivmod>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4610      	mov	r0, r2
 800740a:	4619      	mov	r1, r3
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	020b      	lsls	r3, r1, #8
 8007416:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800741a:	0202      	lsls	r2, r0, #8
 800741c:	6979      	ldr	r1, [r7, #20]
 800741e:	6849      	ldr	r1, [r1, #4]
 8007420:	0849      	lsrs	r1, r1, #1
 8007422:	2000      	movs	r0, #0
 8007424:	460c      	mov	r4, r1
 8007426:	4605      	mov	r5, r0
 8007428:	eb12 0804 	adds.w	r8, r2, r4
 800742c:	eb43 0905 	adc.w	r9, r3, r5
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	469a      	mov	sl, r3
 8007438:	4693      	mov	fp, r2
 800743a:	4652      	mov	r2, sl
 800743c:	465b      	mov	r3, fp
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f9 fbd9 	bl	8000bf8 <__aeabi_uldivmod>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4613      	mov	r3, r2
 800744c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007454:	d308      	bcc.n	8007468 <UART_SetConfig+0x430>
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800745c:	d204      	bcs.n	8007468 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6a3a      	ldr	r2, [r7, #32]
 8007464:	60da      	str	r2, [r3, #12]
 8007466:	e0ce      	b.n	8007606 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800746e:	e0ca      	b.n	8007606 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007478:	d166      	bne.n	8007548 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800747a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800747e:	2b08      	cmp	r3, #8
 8007480:	d827      	bhi.n	80074d2 <UART_SetConfig+0x49a>
 8007482:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0x450>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	080074d3 	.word	0x080074d3
 8007498:	080074c3 	.word	0x080074c3
 800749c:	080074d3 	.word	0x080074d3
 80074a0:	080074d3 	.word	0x080074d3
 80074a4:	080074d3 	.word	0x080074d3
 80074a8:	080074cb 	.word	0x080074cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ac:	f7fd fb40 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074b2:	e014      	b.n	80074de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b4:	f7fd fb52 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 80074b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ba:	e010      	b.n	80074de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074bc:	4b4e      	ldr	r3, [pc, #312]	@ (80075f8 <UART_SetConfig+0x5c0>)
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074c0:	e00d      	b.n	80074de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c2:	f7fd fa9d 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80074c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074c8:	e009      	b.n	80074de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074d0:	e005      	b.n	80074de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8090 	beq.w	8007606 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	4a44      	ldr	r2, [pc, #272]	@ (80075fc <UART_SetConfig+0x5c4>)
 80074ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f0:	461a      	mov	r2, r3
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f8:	005a      	lsls	r2, r3, #1
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	085b      	lsrs	r3, r3, #1
 8007500:	441a      	add	r2, r3
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	fbb2 f3f3 	udiv	r3, r2, r3
 800750a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	2b0f      	cmp	r3, #15
 8007510:	d916      	bls.n	8007540 <UART_SetConfig+0x508>
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007518:	d212      	bcs.n	8007540 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	b29b      	uxth	r3, r3
 800751e:	f023 030f 	bic.w	r3, r3, #15
 8007522:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	b29b      	uxth	r3, r3
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	b29a      	uxth	r2, r3
 8007530:	8bfb      	ldrh	r3, [r7, #30]
 8007532:	4313      	orrs	r3, r2
 8007534:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	8bfa      	ldrh	r2, [r7, #30]
 800753c:	60da      	str	r2, [r3, #12]
 800753e:	e062      	b.n	8007606 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007546:	e05e      	b.n	8007606 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007548:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800754c:	2b08      	cmp	r3, #8
 800754e:	d828      	bhi.n	80075a2 <UART_SetConfig+0x56a>
 8007550:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <UART_SetConfig+0x520>)
 8007552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007556:	bf00      	nop
 8007558:	0800757d 	.word	0x0800757d
 800755c:	08007585 	.word	0x08007585
 8007560:	0800758d 	.word	0x0800758d
 8007564:	080075a3 	.word	0x080075a3
 8007568:	08007593 	.word	0x08007593
 800756c:	080075a3 	.word	0x080075a3
 8007570:	080075a3 	.word	0x080075a3
 8007574:	080075a3 	.word	0x080075a3
 8007578:	0800759b 	.word	0x0800759b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800757c:	f7fd fad8 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007582:	e014      	b.n	80075ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007584:	f7fd faea 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8007588:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800758a:	e010      	b.n	80075ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800758c:	4b1a      	ldr	r3, [pc, #104]	@ (80075f8 <UART_SetConfig+0x5c0>)
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007590:	e00d      	b.n	80075ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007592:	f7fd fa35 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8007596:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007598:	e009      	b.n	80075ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075a0:	e005      	b.n	80075ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075ac:	bf00      	nop
    }

    if (pclk != 0U)
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d028      	beq.n	8007606 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	4a10      	ldr	r2, [pc, #64]	@ (80075fc <UART_SetConfig+0x5c4>)
 80075ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075be:	461a      	mov	r2, r3
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	441a      	add	r2, r3
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	2b0f      	cmp	r3, #15
 80075dc:	d910      	bls.n	8007600 <UART_SetConfig+0x5c8>
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e4:	d20c      	bcs.n	8007600 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60da      	str	r2, [r3, #12]
 80075f0:	e009      	b.n	8007606 <UART_SetConfig+0x5ce>
 80075f2:	bf00      	nop
 80075f4:	40008000 	.word	0x40008000
 80075f8:	00f42400 	.word	0x00f42400
 80075fc:	0800b6d8 	.word	0x0800b6d8
      }
      else
      {
        ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2201      	movs	r2, #1
 800760a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2201      	movs	r2, #1
 8007612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2200      	movs	r2, #0
 8007620:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007622:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007626:	4618      	mov	r0, r3
 8007628:	3730      	adds	r7, #48	@ 0x30
 800762a:	46bd      	mov	sp, r7
 800762c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	f003 0310 	and.w	r3, r3, #16
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01a      	beq.n	8007746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800772e:	d10a      	bne.n	8007746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	605a      	str	r2, [r3, #4]
  }
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b098      	sub	sp, #96	@ 0x60
 8007778:	af02      	add	r7, sp, #8
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007784:	f7fb f982 	bl	8002a8c <HAL_GetTick>
 8007788:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b08      	cmp	r3, #8
 8007796:	d12f      	bne.n	80077f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007798:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a0:	2200      	movs	r2, #0
 80077a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f88e 	bl	80078c8 <UART_WaitOnFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d022      	beq.n	80077f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e063      	b.n	80078c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b04      	cmp	r3, #4
 8007804:	d149      	bne.n	800789a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007806:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800780e:	2200      	movs	r2, #0
 8007810:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f857 	bl	80078c8 <UART_WaitOnFlagUntilTimeout>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d03c      	beq.n	800789a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	623b      	str	r3, [r7, #32]
   return(result);
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800783e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007840:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e6      	bne.n	8007820 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	60fb      	str	r3, [r7, #12]
   return(result);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f023 0301 	bic.w	r3, r3, #1
 8007868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007872:	61fa      	str	r2, [r7, #28]
 8007874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	69b9      	ldr	r1, [r7, #24]
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	617b      	str	r3, [r7, #20]
   return(result);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e5      	bne.n	8007852 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2220      	movs	r2, #32
 800788a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e012      	b.n	80078c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3758      	adds	r7, #88	@ 0x58
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d8:	e049      	b.n	800796e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d045      	beq.n	800796e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e2:	f7fb f8d3 	bl	8002a8c <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d302      	bcc.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e048      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d031      	beq.n	800796e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b08      	cmp	r3, #8
 8007916:	d110      	bne.n	800793a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2208      	movs	r2, #8
 800791e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f95b 	bl	8007bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2208      	movs	r2, #8
 800792a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e029      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007948:	d111      	bne.n	800796e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f941 	bl	8007bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e00f      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4013      	ands	r3, r2
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	429a      	cmp	r2, r3
 800797c:	bf0c      	ite	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	2300      	movne	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	429a      	cmp	r2, r3
 800798a:	d0a6      	beq.n	80078da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007998:	b480      	push	{r7}
 800799a:	b0a3      	sub	sp, #140	@ 0x8c
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ca:	d10e      	bne.n	80079ea <UART_Start_Receive_IT+0x52>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d105      	bne.n	80079e0 <UART_Start_Receive_IT+0x48>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80079da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079de:	e02d      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	22ff      	movs	r2, #255	@ 0xff
 80079e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079e8:	e028      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10d      	bne.n	8007a0e <UART_Start_Receive_IT+0x76>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <UART_Start_Receive_IT+0x6c>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	22ff      	movs	r2, #255	@ 0xff
 80079fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a02:	e01b      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	227f      	movs	r2, #127	@ 0x7f
 8007a08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a0c:	e016      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a16:	d10d      	bne.n	8007a34 <UART_Start_Receive_IT+0x9c>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <UART_Start_Receive_IT+0x92>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	227f      	movs	r2, #127	@ 0x7f
 8007a24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a28:	e008      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	223f      	movs	r2, #63	@ 0x3f
 8007a2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a32:	e003      	b.n	8007a3c <UART_Start_Receive_IT+0xa4>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2222      	movs	r2, #34	@ 0x22
 8007a48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3308      	adds	r3, #8
 8007a52:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a5e:	f043 0301 	orr.w	r3, r3, #1
 8007a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a70:	673a      	str	r2, [r7, #112]	@ 0x70
 8007a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007a76:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007a7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e3      	bne.n	8007a4c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a8c:	d14f      	bne.n	8007b2e <UART_Start_Receive_IT+0x196>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a94:	88fa      	ldrh	r2, [r7, #6]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d349      	bcc.n	8007b2e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa2:	d107      	bne.n	8007ab4 <UART_Start_Receive_IT+0x11c>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d103      	bne.n	8007ab4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4a47      	ldr	r2, [pc, #284]	@ (8007bcc <UART_Start_Receive_IT+0x234>)
 8007ab0:	675a      	str	r2, [r3, #116]	@ 0x74
 8007ab2:	e002      	b.n	8007aba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4a46      	ldr	r2, [pc, #280]	@ (8007bd0 <UART_Start_Receive_IT+0x238>)
 8007ab8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d01a      	beq.n	8007af8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ad6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ae6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007aea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e4      	bne.n	8007ac2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3308      	adds	r3, #8
 8007b16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b18:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007b1a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e5      	bne.n	8007af8 <UART_Start_Receive_IT+0x160>
 8007b2c:	e046      	b.n	8007bbc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b36:	d107      	bne.n	8007b48 <UART_Start_Receive_IT+0x1b0>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d103      	bne.n	8007b48 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a24      	ldr	r2, [pc, #144]	@ (8007bd4 <UART_Start_Receive_IT+0x23c>)
 8007b44:	675a      	str	r2, [r3, #116]	@ 0x74
 8007b46:	e002      	b.n	8007b4e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4a23      	ldr	r2, [pc, #140]	@ (8007bd8 <UART_Start_Receive_IT+0x240>)
 8007b4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d019      	beq.n	8007b8a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007b6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b76:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e6      	bne.n	8007b56 <UART_Start_Receive_IT+0x1be>
 8007b88:	e018      	b.n	8007bbc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	613b      	str	r3, [r7, #16]
   return(result);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f043 0320 	orr.w	r3, r3, #32
 8007b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ba8:	623b      	str	r3, [r7, #32]
 8007baa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	69f9      	ldr	r1, [r7, #28]
 8007bae:	6a3a      	ldr	r2, [r7, #32]
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e6      	bne.n	8007b8a <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	378c      	adds	r7, #140	@ 0x8c
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	08008409 	.word	0x08008409
 8007bd0:	080080a5 	.word	0x080080a5
 8007bd4:	08007ee9 	.word	0x08007ee9
 8007bd8:	08007d2d 	.word	0x08007d2d

08007bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b095      	sub	sp, #84	@ 0x54
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e6      	bne.n	8007be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e3      	bne.n	8007c16 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d118      	bne.n	8007c88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f023 0310 	bic.w	r3, r3, #16
 8007c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6979      	ldr	r1, [r7, #20]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	613b      	str	r3, [r7, #16]
   return(result);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e6      	bne.n	8007c56 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c9c:	bf00      	nop
 8007c9e:	3754      	adds	r7, #84	@ 0x54
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff f9a0 	bl	800700c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6979      	ldr	r1, [r7, #20]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	613b      	str	r3, [r7, #16]
   return(result);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e6      	bne.n	8007cdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff f96b 	bl	8006ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d22:	bf00      	nop
 8007d24:	3720      	adds	r7, #32
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b09c      	sub	sp, #112	@ 0x70
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d44:	2b22      	cmp	r3, #34	@ 0x22
 8007d46:	f040 80be 	bne.w	8007ec6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007d50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007d58:	b2d9      	uxtb	r1, r3
 8007d5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d64:	400a      	ands	r2, r1
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f040 80a3 	bne.w	8007eda <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007da8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007db2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007db4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007db8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e6      	bne.n	8007d94 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3308      	adds	r3, #8
 8007de4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007de6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007de8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e5      	bne.n	8007dc6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a34      	ldr	r2, [pc, #208]	@ (8007ee4 <UART_RxISR_8BIT+0x1b8>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d01f      	beq.n	8007e58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d018      	beq.n	8007e58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	e853 3f00 	ldrex	r3, [r3]
 8007e32:	623b      	str	r3, [r7, #32]
   return(result);
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e6      	bne.n	8007e26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d12e      	bne.n	8007ebe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0310 	bic.w	r3, r3, #16
 8007e7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e84:	61fb      	str	r3, [r7, #28]
 8007e86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	69b9      	ldr	r1, [r7, #24]
 8007e8a:	69fa      	ldr	r2, [r7, #28]
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	617b      	str	r3, [r7, #20]
   return(result);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e6      	bne.n	8007e66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	f003 0310 	and.w	r3, r3, #16
 8007ea2:	2b10      	cmp	r3, #16
 8007ea4:	d103      	bne.n	8007eae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2210      	movs	r2, #16
 8007eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff f8b2 	bl	8007020 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ebc:	e00d      	b.n	8007eda <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7f9 fce2 	bl	8001888 <HAL_UART_RxCpltCallback>
}
 8007ec4:	e009      	b.n	8007eda <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	8b1b      	ldrh	r3, [r3, #24]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0208 	orr.w	r2, r2, #8
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	831a      	strh	r2, [r3, #24]
}
 8007eda:	bf00      	nop
 8007edc:	3770      	adds	r7, #112	@ 0x70
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40008000 	.word	0x40008000

08007ee8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b09c      	sub	sp, #112	@ 0x70
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ef6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f00:	2b22      	cmp	r3, #34	@ 0x22
 8007f02:	f040 80be 	bne.w	8008082 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f14:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007f1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f1e:	4013      	ands	r3, r2
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2a:	1c9a      	adds	r2, r3, #2
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f040 80a3 	bne.w	8008096 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f64:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f70:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e6      	bne.n	8007f50 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007fa2:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e5      	bne.n	8007f82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a34      	ldr	r2, [pc, #208]	@ (80080a0 <UART_RxISR_16BIT+0x1b8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d01f      	beq.n	8008014 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d018      	beq.n	8008014 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008002:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e6      	bne.n	8007fe2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d12e      	bne.n	800807a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f023 0310 	bic.w	r3, r3, #16
 8008036:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008044:	6979      	ldr	r1, [r7, #20]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	613b      	str	r3, [r7, #16]
   return(result);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e6      	bne.n	8008022 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b10      	cmp	r3, #16
 8008060:	d103      	bne.n	800806a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2210      	movs	r2, #16
 8008068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fe ffd4 	bl	8007020 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008078:	e00d      	b.n	8008096 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7f9 fc04 	bl	8001888 <HAL_UART_RxCpltCallback>
}
 8008080:	e009      	b.n	8008096 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	8b1b      	ldrh	r3, [r3, #24]
 8008088:	b29a      	uxth	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0208 	orr.w	r2, r2, #8
 8008092:	b292      	uxth	r2, r2
 8008094:	831a      	strh	r2, [r3, #24]
}
 8008096:	bf00      	nop
 8008098:	3770      	adds	r7, #112	@ 0x70
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40008000 	.word	0x40008000

080080a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b0ac      	sub	sp, #176	@ 0xb0
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080da:	2b22      	cmp	r3, #34	@ 0x22
 80080dc:	f040 8182 	bne.w	80083e4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080ea:	e125      	b.n	8008338 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80080f2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80080fa:	b2d9      	uxtb	r1, r3
 80080fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008100:	b2da      	uxtb	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008106:	400a      	ands	r2, r1
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29a      	uxth	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b00      	cmp	r3, #0
 800813c:	d053      	beq.n	80081e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800813e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d011      	beq.n	800816e <UART_RxISR_8BIT_FIFOEN+0xca>
 800814a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800814e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2201      	movs	r2, #1
 800815c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008164:	f043 0201 	orr.w	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800816e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d011      	beq.n	800819e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800817a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00b      	beq.n	800819e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2202      	movs	r2, #2
 800818c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008194:	f043 0204 	orr.w	r2, r3, #4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800819e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d011      	beq.n	80081ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80081aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00b      	beq.n	80081ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2204      	movs	r2, #4
 80081bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c4:	f043 0202 	orr.w	r2, r3, #2
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fe ff17 	bl	800700c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f040 80a2 	bne.w	8008338 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008216:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008218:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800821c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008224:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e4      	bne.n	80081f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3308      	adds	r3, #8
 8008230:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800823a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800823c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008240:	f023 0301 	bic.w	r3, r3, #1
 8008244:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3308      	adds	r3, #8
 800824e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008252:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008254:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008258:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008260:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e1      	bne.n	800822a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a60      	ldr	r2, [pc, #384]	@ (8008400 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d021      	beq.n	80082c8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01a      	beq.n	80082c8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80082a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80082b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80082c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e4      	bne.n	8008292 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d130      	bne.n	8008332 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	f023 0310 	bic.w	r3, r3, #16
 80082ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80082fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008300:	e841 2300 	strex	r3, r2, [r1]
 8008304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e4      	bne.n	80082d6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	f003 0310 	and.w	r3, r3, #16
 8008316:	2b10      	cmp	r3, #16
 8008318:	d103      	bne.n	8008322 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2210      	movs	r2, #16
 8008320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fe fe78 	bl	8007020 <HAL_UARTEx_RxEventCallback>
 8008330:	e002      	b.n	8008338 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7f9 faa8 	bl	8001888 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008338:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800833c:	2b00      	cmp	r3, #0
 800833e:	d006      	beq.n	800834e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	f47f aecf 	bne.w	80080ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008354:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008358:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800835c:	2b00      	cmp	r3, #0
 800835e:	d04b      	beq.n	80083f8 <UART_RxISR_8BIT_FIFOEN+0x354>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008366:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800836a:	429a      	cmp	r2, r3
 800836c:	d244      	bcs.n	80083f8 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3308      	adds	r3, #8
 8008374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	61fb      	str	r3, [r7, #28]
   return(result);
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3308      	adds	r3, #8
 800838e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e3      	bne.n	800836e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a16      	ldr	r2, [pc, #88]	@ (8008404 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80083aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f043 0320 	orr.w	r3, r3, #32
 80083c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083ce:	61bb      	str	r3, [r7, #24]
 80083d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6979      	ldr	r1, [r7, #20]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	613b      	str	r3, [r7, #16]
   return(result);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e4      	bne.n	80083ac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083e2:	e009      	b.n	80083f8 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	8b1b      	ldrh	r3, [r3, #24]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f042 0208 	orr.w	r2, r2, #8
 80083f4:	b292      	uxth	r2, r2
 80083f6:	831a      	strh	r2, [r3, #24]
}
 80083f8:	bf00      	nop
 80083fa:	37b0      	adds	r7, #176	@ 0xb0
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40008000 	.word	0x40008000
 8008404:	08007d2d 	.word	0x08007d2d

08008408 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b0ae      	sub	sp, #184	@ 0xb8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008416:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800843e:	2b22      	cmp	r3, #34	@ 0x22
 8008440:	f040 8186 	bne.w	8008750 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800844a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800844e:	e129      	b.n	80086a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008456:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008462:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008466:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800846a:	4013      	ands	r3, r2
 800846c:	b29a      	uxth	r2, r3
 800846e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008472:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008478:	1c9a      	adds	r2, r3, #2
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800849a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d053      	beq.n	800854e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d011      	beq.n	80084d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80084b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2201      	movs	r2, #1
 80084c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084cc:	f043 0201 	orr.w	r2, r3, #1
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d011      	beq.n	8008506 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80084e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00b      	beq.n	8008506 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2202      	movs	r2, #2
 80084f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084fc:	f043 0204 	orr.w	r2, r3, #4
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	d011      	beq.n	8008536 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2204      	movs	r2, #4
 8008524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852c:	f043 0202 	orr.w	r2, r3, #2
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800853c:	2b00      	cmp	r3, #0
 800853e:	d006      	beq.n	800854e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7fe fd63 	bl	800700c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	f040 80a4 	bne.w	80086a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800856a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800856c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800857e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008582:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008586:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e2      	bne.n	800855c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3308      	adds	r3, #8
 800859c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80085a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3308      	adds	r3, #8
 80085ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80085be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e1      	bne.n	8008596 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a60      	ldr	r2, [pc, #384]	@ (800876c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d021      	beq.n	8008634 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01a      	beq.n	8008634 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800860c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800860e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008612:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008620:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008622:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008626:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800862e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e4      	bne.n	80085fe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008638:	2b01      	cmp	r3, #1
 800863a:	d130      	bne.n	800869e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008652:	f023 0310 	bic.w	r3, r3, #16
 8008656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008664:	647b      	str	r3, [r7, #68]	@ 0x44
 8008666:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800866a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e4      	bne.n	8008642 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	f003 0310 	and.w	r3, r3, #16
 8008682:	2b10      	cmp	r3, #16
 8008684:	d103      	bne.n	800868e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2210      	movs	r2, #16
 800868c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7fe fcc2 	bl	8007020 <HAL_UARTEx_RxEventCallback>
 800869c:	e002      	b.n	80086a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7f9 f8f2 	bl	8001888 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d006      	beq.n	80086ba <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80086ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f47f aecb 	bne.w	8008450 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086c0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d04b      	beq.n	8008764 <UART_RxISR_16BIT_FIFOEN+0x35c>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80086d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d244      	bcs.n	8008764 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3308      	adds	r3, #8
 80086e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	623b      	str	r3, [r7, #32]
   return(result);
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3308      	adds	r3, #8
 80086fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80086fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e3      	bne.n	80086da <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a16      	ldr	r2, [pc, #88]	@ (8008770 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008716:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	60fb      	str	r3, [r7, #12]
   return(result);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f043 0320 	orr.w	r3, r3, #32
 800872c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	69b9      	ldr	r1, [r7, #24]
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	617b      	str	r3, [r7, #20]
   return(result);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e4      	bne.n	8008718 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800874e:	e009      	b.n	8008764 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	8b1b      	ldrh	r3, [r3, #24]
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0208 	orr.w	r2, r2, #8
 8008760:	b292      	uxth	r2, r2
 8008762:	831a      	strh	r2, [r3, #24]
}
 8008764:	bf00      	nop
 8008766:	37b8      	adds	r7, #184	@ 0xb8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	40008000 	.word	0x40008000
 8008770:	08007ee9 	.word	0x08007ee9

08008774 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e027      	b.n	8008816 <HAL_UARTEx_DisableFifoMode+0x66>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2224      	movs	r2, #36	@ 0x24
 80087d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0201 	bic.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008836:	2302      	movs	r3, #2
 8008838:	e02d      	b.n	8008896 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2224      	movs	r2, #36	@ 0x24
 8008846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f850 	bl	800891c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e02d      	b.n	8008912 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2224      	movs	r2, #36	@ 0x24
 80088c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0201 	bic.w	r2, r2, #1
 80088dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f812 	bl	800891c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008928:	2b00      	cmp	r3, #0
 800892a:	d108      	bne.n	800893e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800893c:	e031      	b.n	80089a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800893e:	2308      	movs	r3, #8
 8008940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008942:	2308      	movs	r3, #8
 8008944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	0e5b      	lsrs	r3, r3, #25
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	0f5b      	lsrs	r3, r3, #29
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	7b3a      	ldrb	r2, [r7, #12]
 800896a:	4911      	ldr	r1, [pc, #68]	@ (80089b0 <UARTEx_SetNbDataToProcess+0x94>)
 800896c:	5c8a      	ldrb	r2, [r1, r2]
 800896e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008972:	7b3a      	ldrb	r2, [r7, #12]
 8008974:	490f      	ldr	r1, [pc, #60]	@ (80089b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008978:	fb93 f3f2 	sdiv	r3, r3, r2
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	7b7a      	ldrb	r2, [r7, #13]
 8008988:	4909      	ldr	r1, [pc, #36]	@ (80089b0 <UARTEx_SetNbDataToProcess+0x94>)
 800898a:	5c8a      	ldrb	r2, [r1, r2]
 800898c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008990:	7b7a      	ldrb	r2, [r7, #13]
 8008992:	4908      	ldr	r1, [pc, #32]	@ (80089b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008996:	fb93 f3f2 	sdiv	r3, r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	0800b6f0 	.word	0x0800b6f0
 80089b4:	0800b6f8 	.word	0x0800b6f8

080089b8 <atoi>:
 80089b8:	220a      	movs	r2, #10
 80089ba:	2100      	movs	r1, #0
 80089bc:	f000 b87a 	b.w	8008ab4 <strtol>

080089c0 <_strtol_l.constprop.0>:
 80089c0:	2b24      	cmp	r3, #36	@ 0x24
 80089c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c6:	4686      	mov	lr, r0
 80089c8:	4690      	mov	r8, r2
 80089ca:	d801      	bhi.n	80089d0 <_strtol_l.constprop.0+0x10>
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d106      	bne.n	80089de <_strtol_l.constprop.0+0x1e>
 80089d0:	f000 ff2e 	bl	8009830 <__errno>
 80089d4:	2316      	movs	r3, #22
 80089d6:	6003      	str	r3, [r0, #0]
 80089d8:	2000      	movs	r0, #0
 80089da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089de:	4834      	ldr	r0, [pc, #208]	@ (8008ab0 <_strtol_l.constprop.0+0xf0>)
 80089e0:	460d      	mov	r5, r1
 80089e2:	462a      	mov	r2, r5
 80089e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089e8:	5d06      	ldrb	r6, [r0, r4]
 80089ea:	f016 0608 	ands.w	r6, r6, #8
 80089ee:	d1f8      	bne.n	80089e2 <_strtol_l.constprop.0+0x22>
 80089f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80089f2:	d12d      	bne.n	8008a50 <_strtol_l.constprop.0+0x90>
 80089f4:	782c      	ldrb	r4, [r5, #0]
 80089f6:	2601      	movs	r6, #1
 80089f8:	1c95      	adds	r5, r2, #2
 80089fa:	f033 0210 	bics.w	r2, r3, #16
 80089fe:	d109      	bne.n	8008a14 <_strtol_l.constprop.0+0x54>
 8008a00:	2c30      	cmp	r4, #48	@ 0x30
 8008a02:	d12a      	bne.n	8008a5a <_strtol_l.constprop.0+0x9a>
 8008a04:	782a      	ldrb	r2, [r5, #0]
 8008a06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a0a:	2a58      	cmp	r2, #88	@ 0x58
 8008a0c:	d125      	bne.n	8008a5a <_strtol_l.constprop.0+0x9a>
 8008a0e:	786c      	ldrb	r4, [r5, #1]
 8008a10:	2310      	movs	r3, #16
 8008a12:	3502      	adds	r5, #2
 8008a14:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008a18:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	fbbc f9f3 	udiv	r9, ip, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a28:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a2c:	2f09      	cmp	r7, #9
 8008a2e:	d81b      	bhi.n	8008a68 <_strtol_l.constprop.0+0xa8>
 8008a30:	463c      	mov	r4, r7
 8008a32:	42a3      	cmp	r3, r4
 8008a34:	dd27      	ble.n	8008a86 <_strtol_l.constprop.0+0xc6>
 8008a36:	1c57      	adds	r7, r2, #1
 8008a38:	d007      	beq.n	8008a4a <_strtol_l.constprop.0+0x8a>
 8008a3a:	4581      	cmp	r9, r0
 8008a3c:	d320      	bcc.n	8008a80 <_strtol_l.constprop.0+0xc0>
 8008a3e:	d101      	bne.n	8008a44 <_strtol_l.constprop.0+0x84>
 8008a40:	45a2      	cmp	sl, r4
 8008a42:	db1d      	blt.n	8008a80 <_strtol_l.constprop.0+0xc0>
 8008a44:	fb00 4003 	mla	r0, r0, r3, r4
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a4e:	e7eb      	b.n	8008a28 <_strtol_l.constprop.0+0x68>
 8008a50:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a52:	bf04      	itt	eq
 8008a54:	782c      	ldrbeq	r4, [r5, #0]
 8008a56:	1c95      	addeq	r5, r2, #2
 8008a58:	e7cf      	b.n	80089fa <_strtol_l.constprop.0+0x3a>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1da      	bne.n	8008a14 <_strtol_l.constprop.0+0x54>
 8008a5e:	2c30      	cmp	r4, #48	@ 0x30
 8008a60:	bf0c      	ite	eq
 8008a62:	2308      	moveq	r3, #8
 8008a64:	230a      	movne	r3, #10
 8008a66:	e7d5      	b.n	8008a14 <_strtol_l.constprop.0+0x54>
 8008a68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a6c:	2f19      	cmp	r7, #25
 8008a6e:	d801      	bhi.n	8008a74 <_strtol_l.constprop.0+0xb4>
 8008a70:	3c37      	subs	r4, #55	@ 0x37
 8008a72:	e7de      	b.n	8008a32 <_strtol_l.constprop.0+0x72>
 8008a74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008a78:	2f19      	cmp	r7, #25
 8008a7a:	d804      	bhi.n	8008a86 <_strtol_l.constprop.0+0xc6>
 8008a7c:	3c57      	subs	r4, #87	@ 0x57
 8008a7e:	e7d8      	b.n	8008a32 <_strtol_l.constprop.0+0x72>
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295
 8008a84:	e7e1      	b.n	8008a4a <_strtol_l.constprop.0+0x8a>
 8008a86:	1c53      	adds	r3, r2, #1
 8008a88:	d108      	bne.n	8008a9c <_strtol_l.constprop.0+0xdc>
 8008a8a:	2322      	movs	r3, #34	@ 0x22
 8008a8c:	f8ce 3000 	str.w	r3, [lr]
 8008a90:	4660      	mov	r0, ip
 8008a92:	f1b8 0f00 	cmp.w	r8, #0
 8008a96:	d0a0      	beq.n	80089da <_strtol_l.constprop.0+0x1a>
 8008a98:	1e69      	subs	r1, r5, #1
 8008a9a:	e006      	b.n	8008aaa <_strtol_l.constprop.0+0xea>
 8008a9c:	b106      	cbz	r6, 8008aa0 <_strtol_l.constprop.0+0xe0>
 8008a9e:	4240      	negs	r0, r0
 8008aa0:	f1b8 0f00 	cmp.w	r8, #0
 8008aa4:	d099      	beq.n	80089da <_strtol_l.constprop.0+0x1a>
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	d1f6      	bne.n	8008a98 <_strtol_l.constprop.0+0xd8>
 8008aaa:	f8c8 1000 	str.w	r1, [r8]
 8008aae:	e794      	b.n	80089da <_strtol_l.constprop.0+0x1a>
 8008ab0:	0800b701 	.word	0x0800b701

08008ab4 <strtol>:
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	460a      	mov	r2, r1
 8008ab8:	4601      	mov	r1, r0
 8008aba:	4802      	ldr	r0, [pc, #8]	@ (8008ac4 <strtol+0x10>)
 8008abc:	6800      	ldr	r0, [r0, #0]
 8008abe:	f7ff bf7f 	b.w	80089c0 <_strtol_l.constprop.0>
 8008ac2:	bf00      	nop
 8008ac4:	20000098 	.word	0x20000098

08008ac8 <__cvt>:
 8008ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008acc:	ec57 6b10 	vmov	r6, r7, d0
 8008ad0:	2f00      	cmp	r7, #0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	bfbb      	ittet	lt
 8008ada:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008ade:	461f      	movlt	r7, r3
 8008ae0:	2300      	movge	r3, #0
 8008ae2:	232d      	movlt	r3, #45	@ 0x2d
 8008ae4:	700b      	strb	r3, [r1, #0]
 8008ae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ae8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008aec:	4691      	mov	r9, r2
 8008aee:	f023 0820 	bic.w	r8, r3, #32
 8008af2:	bfbc      	itt	lt
 8008af4:	4632      	movlt	r2, r6
 8008af6:	4616      	movlt	r6, r2
 8008af8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008afc:	d005      	beq.n	8008b0a <__cvt+0x42>
 8008afe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b02:	d100      	bne.n	8008b06 <__cvt+0x3e>
 8008b04:	3401      	adds	r4, #1
 8008b06:	2102      	movs	r1, #2
 8008b08:	e000      	b.n	8008b0c <__cvt+0x44>
 8008b0a:	2103      	movs	r1, #3
 8008b0c:	ab03      	add	r3, sp, #12
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	ab02      	add	r3, sp, #8
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	ec47 6b10 	vmov	d0, r6, r7
 8008b18:	4653      	mov	r3, sl
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	f000 ff48 	bl	80099b0 <_dtoa_r>
 8008b20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b24:	4605      	mov	r5, r0
 8008b26:	d119      	bne.n	8008b5c <__cvt+0x94>
 8008b28:	f019 0f01 	tst.w	r9, #1
 8008b2c:	d00e      	beq.n	8008b4c <__cvt+0x84>
 8008b2e:	eb00 0904 	add.w	r9, r0, r4
 8008b32:	2200      	movs	r2, #0
 8008b34:	2300      	movs	r3, #0
 8008b36:	4630      	mov	r0, r6
 8008b38:	4639      	mov	r1, r7
 8008b3a:	f7f7 ffed 	bl	8000b18 <__aeabi_dcmpeq>
 8008b3e:	b108      	cbz	r0, 8008b44 <__cvt+0x7c>
 8008b40:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b44:	2230      	movs	r2, #48	@ 0x30
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	454b      	cmp	r3, r9
 8008b4a:	d31e      	bcc.n	8008b8a <__cvt+0xc2>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b50:	1b5b      	subs	r3, r3, r5
 8008b52:	4628      	mov	r0, r5
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	b004      	add	sp, #16
 8008b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b60:	eb00 0904 	add.w	r9, r0, r4
 8008b64:	d1e5      	bne.n	8008b32 <__cvt+0x6a>
 8008b66:	7803      	ldrb	r3, [r0, #0]
 8008b68:	2b30      	cmp	r3, #48	@ 0x30
 8008b6a:	d10a      	bne.n	8008b82 <__cvt+0xba>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2300      	movs	r3, #0
 8008b70:	4630      	mov	r0, r6
 8008b72:	4639      	mov	r1, r7
 8008b74:	f7f7 ffd0 	bl	8000b18 <__aeabi_dcmpeq>
 8008b78:	b918      	cbnz	r0, 8008b82 <__cvt+0xba>
 8008b7a:	f1c4 0401 	rsb	r4, r4, #1
 8008b7e:	f8ca 4000 	str.w	r4, [sl]
 8008b82:	f8da 3000 	ldr.w	r3, [sl]
 8008b86:	4499      	add	r9, r3
 8008b88:	e7d3      	b.n	8008b32 <__cvt+0x6a>
 8008b8a:	1c59      	adds	r1, r3, #1
 8008b8c:	9103      	str	r1, [sp, #12]
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	e7d9      	b.n	8008b46 <__cvt+0x7e>

08008b92 <__exponent>:
 8008b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b94:	2900      	cmp	r1, #0
 8008b96:	bfba      	itte	lt
 8008b98:	4249      	neglt	r1, r1
 8008b9a:	232d      	movlt	r3, #45	@ 0x2d
 8008b9c:	232b      	movge	r3, #43	@ 0x2b
 8008b9e:	2909      	cmp	r1, #9
 8008ba0:	7002      	strb	r2, [r0, #0]
 8008ba2:	7043      	strb	r3, [r0, #1]
 8008ba4:	dd29      	ble.n	8008bfa <__exponent+0x68>
 8008ba6:	f10d 0307 	add.w	r3, sp, #7
 8008baa:	461d      	mov	r5, r3
 8008bac:	270a      	movs	r7, #10
 8008bae:	461a      	mov	r2, r3
 8008bb0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008bb4:	fb07 1416 	mls	r4, r7, r6, r1
 8008bb8:	3430      	adds	r4, #48	@ 0x30
 8008bba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	2c63      	cmp	r4, #99	@ 0x63
 8008bc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	dcf1      	bgt.n	8008bae <__exponent+0x1c>
 8008bca:	3130      	adds	r1, #48	@ 0x30
 8008bcc:	1e94      	subs	r4, r2, #2
 8008bce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bd2:	1c41      	adds	r1, r0, #1
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	42ab      	cmp	r3, r5
 8008bd8:	d30a      	bcc.n	8008bf0 <__exponent+0x5e>
 8008bda:	f10d 0309 	add.w	r3, sp, #9
 8008bde:	1a9b      	subs	r3, r3, r2
 8008be0:	42ac      	cmp	r4, r5
 8008be2:	bf88      	it	hi
 8008be4:	2300      	movhi	r3, #0
 8008be6:	3302      	adds	r3, #2
 8008be8:	4403      	add	r3, r0
 8008bea:	1a18      	subs	r0, r3, r0
 8008bec:	b003      	add	sp, #12
 8008bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008bf4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008bf8:	e7ed      	b.n	8008bd6 <__exponent+0x44>
 8008bfa:	2330      	movs	r3, #48	@ 0x30
 8008bfc:	3130      	adds	r1, #48	@ 0x30
 8008bfe:	7083      	strb	r3, [r0, #2]
 8008c00:	70c1      	strb	r1, [r0, #3]
 8008c02:	1d03      	adds	r3, r0, #4
 8008c04:	e7f1      	b.n	8008bea <__exponent+0x58>
	...

08008c08 <_printf_float>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	b08d      	sub	sp, #52	@ 0x34
 8008c0e:	460c      	mov	r4, r1
 8008c10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c14:	4616      	mov	r6, r2
 8008c16:	461f      	mov	r7, r3
 8008c18:	4605      	mov	r5, r0
 8008c1a:	f000 fdbf 	bl	800979c <_localeconv_r>
 8008c1e:	6803      	ldr	r3, [r0, #0]
 8008c20:	9304      	str	r3, [sp, #16]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7f7 fb4c 	bl	80002c0 <strlen>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c30:	9005      	str	r0, [sp, #20]
 8008c32:	3307      	adds	r3, #7
 8008c34:	f023 0307 	bic.w	r3, r3, #7
 8008c38:	f103 0208 	add.w	r2, r3, #8
 8008c3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c40:	f8d4 b000 	ldr.w	fp, [r4]
 8008c44:	f8c8 2000 	str.w	r2, [r8]
 8008c48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c50:	9307      	str	r3, [sp, #28]
 8008c52:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c5e:	4b9c      	ldr	r3, [pc, #624]	@ (8008ed0 <_printf_float+0x2c8>)
 8008c60:	f04f 32ff 	mov.w	r2, #4294967295
 8008c64:	f7f7 ff8a 	bl	8000b7c <__aeabi_dcmpun>
 8008c68:	bb70      	cbnz	r0, 8008cc8 <_printf_float+0xc0>
 8008c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c6e:	4b98      	ldr	r3, [pc, #608]	@ (8008ed0 <_printf_float+0x2c8>)
 8008c70:	f04f 32ff 	mov.w	r2, #4294967295
 8008c74:	f7f7 ff64 	bl	8000b40 <__aeabi_dcmple>
 8008c78:	bb30      	cbnz	r0, 8008cc8 <_printf_float+0xc0>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4640      	mov	r0, r8
 8008c80:	4649      	mov	r1, r9
 8008c82:	f7f7 ff53 	bl	8000b2c <__aeabi_dcmplt>
 8008c86:	b110      	cbz	r0, 8008c8e <_printf_float+0x86>
 8008c88:	232d      	movs	r3, #45	@ 0x2d
 8008c8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c8e:	4a91      	ldr	r2, [pc, #580]	@ (8008ed4 <_printf_float+0x2cc>)
 8008c90:	4b91      	ldr	r3, [pc, #580]	@ (8008ed8 <_printf_float+0x2d0>)
 8008c92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c96:	bf94      	ite	ls
 8008c98:	4690      	movls	r8, r2
 8008c9a:	4698      	movhi	r8, r3
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	6123      	str	r3, [r4, #16]
 8008ca0:	f02b 0304 	bic.w	r3, fp, #4
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	f04f 0900 	mov.w	r9, #0
 8008caa:	9700      	str	r7, [sp, #0]
 8008cac:	4633      	mov	r3, r6
 8008cae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f9d2 	bl	800905c <_printf_common>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f040 808d 	bne.w	8008dd8 <_printf_float+0x1d0>
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc2:	b00d      	add	sp, #52	@ 0x34
 8008cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc8:	4642      	mov	r2, r8
 8008cca:	464b      	mov	r3, r9
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4649      	mov	r1, r9
 8008cd0:	f7f7 ff54 	bl	8000b7c <__aeabi_dcmpun>
 8008cd4:	b140      	cbz	r0, 8008ce8 <_printf_float+0xe0>
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bfbc      	itt	lt
 8008cdc:	232d      	movlt	r3, #45	@ 0x2d
 8008cde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8008edc <_printf_float+0x2d4>)
 8008ce4:	4b7e      	ldr	r3, [pc, #504]	@ (8008ee0 <_printf_float+0x2d8>)
 8008ce6:	e7d4      	b.n	8008c92 <_printf_float+0x8a>
 8008ce8:	6863      	ldr	r3, [r4, #4]
 8008cea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008cee:	9206      	str	r2, [sp, #24]
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	d13b      	bne.n	8008d6c <_printf_float+0x164>
 8008cf4:	2306      	movs	r3, #6
 8008cf6:	6063      	str	r3, [r4, #4]
 8008cf8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	9303      	str	r3, [sp, #12]
 8008d02:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d08:	ab09      	add	r3, sp, #36	@ 0x24
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	ec49 8b10 	vmov	d0, r8, r9
 8008d12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d16:	4628      	mov	r0, r5
 8008d18:	f7ff fed6 	bl	8008ac8 <__cvt>
 8008d1c:	9b06      	ldr	r3, [sp, #24]
 8008d1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d20:	2b47      	cmp	r3, #71	@ 0x47
 8008d22:	4680      	mov	r8, r0
 8008d24:	d129      	bne.n	8008d7a <_printf_float+0x172>
 8008d26:	1cc8      	adds	r0, r1, #3
 8008d28:	db02      	blt.n	8008d30 <_printf_float+0x128>
 8008d2a:	6863      	ldr	r3, [r4, #4]
 8008d2c:	4299      	cmp	r1, r3
 8008d2e:	dd41      	ble.n	8008db4 <_printf_float+0x1ac>
 8008d30:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d34:	fa5f fa8a 	uxtb.w	sl, sl
 8008d38:	3901      	subs	r1, #1
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d40:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d42:	f7ff ff26 	bl	8008b92 <__exponent>
 8008d46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d48:	1813      	adds	r3, r2, r0
 8008d4a:	2a01      	cmp	r2, #1
 8008d4c:	4681      	mov	r9, r0
 8008d4e:	6123      	str	r3, [r4, #16]
 8008d50:	dc02      	bgt.n	8008d58 <_printf_float+0x150>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	07d2      	lsls	r2, r2, #31
 8008d56:	d501      	bpl.n	8008d5c <_printf_float+0x154>
 8008d58:	3301      	adds	r3, #1
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0a2      	beq.n	8008caa <_printf_float+0xa2>
 8008d64:	232d      	movs	r3, #45	@ 0x2d
 8008d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d6a:	e79e      	b.n	8008caa <_printf_float+0xa2>
 8008d6c:	9a06      	ldr	r2, [sp, #24]
 8008d6e:	2a47      	cmp	r2, #71	@ 0x47
 8008d70:	d1c2      	bne.n	8008cf8 <_printf_float+0xf0>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1c0      	bne.n	8008cf8 <_printf_float+0xf0>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e7bd      	b.n	8008cf6 <_printf_float+0xee>
 8008d7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d7e:	d9db      	bls.n	8008d38 <_printf_float+0x130>
 8008d80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d84:	d118      	bne.n	8008db8 <_printf_float+0x1b0>
 8008d86:	2900      	cmp	r1, #0
 8008d88:	6863      	ldr	r3, [r4, #4]
 8008d8a:	dd0b      	ble.n	8008da4 <_printf_float+0x19c>
 8008d8c:	6121      	str	r1, [r4, #16]
 8008d8e:	b913      	cbnz	r3, 8008d96 <_printf_float+0x18e>
 8008d90:	6822      	ldr	r2, [r4, #0]
 8008d92:	07d0      	lsls	r0, r2, #31
 8008d94:	d502      	bpl.n	8008d9c <_printf_float+0x194>
 8008d96:	3301      	adds	r3, #1
 8008d98:	440b      	add	r3, r1
 8008d9a:	6123      	str	r3, [r4, #16]
 8008d9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d9e:	f04f 0900 	mov.w	r9, #0
 8008da2:	e7db      	b.n	8008d5c <_printf_float+0x154>
 8008da4:	b913      	cbnz	r3, 8008dac <_printf_float+0x1a4>
 8008da6:	6822      	ldr	r2, [r4, #0]
 8008da8:	07d2      	lsls	r2, r2, #31
 8008daa:	d501      	bpl.n	8008db0 <_printf_float+0x1a8>
 8008dac:	3302      	adds	r3, #2
 8008dae:	e7f4      	b.n	8008d9a <_printf_float+0x192>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e7f2      	b.n	8008d9a <_printf_float+0x192>
 8008db4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dba:	4299      	cmp	r1, r3
 8008dbc:	db05      	blt.n	8008dca <_printf_float+0x1c2>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	6121      	str	r1, [r4, #16]
 8008dc2:	07d8      	lsls	r0, r3, #31
 8008dc4:	d5ea      	bpl.n	8008d9c <_printf_float+0x194>
 8008dc6:	1c4b      	adds	r3, r1, #1
 8008dc8:	e7e7      	b.n	8008d9a <_printf_float+0x192>
 8008dca:	2900      	cmp	r1, #0
 8008dcc:	bfd4      	ite	le
 8008dce:	f1c1 0202 	rsble	r2, r1, #2
 8008dd2:	2201      	movgt	r2, #1
 8008dd4:	4413      	add	r3, r2
 8008dd6:	e7e0      	b.n	8008d9a <_printf_float+0x192>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	055a      	lsls	r2, r3, #21
 8008ddc:	d407      	bmi.n	8008dee <_printf_float+0x1e6>
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	4642      	mov	r2, r8
 8008de2:	4631      	mov	r1, r6
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b8      	blx	r7
 8008de8:	3001      	adds	r0, #1
 8008dea:	d12b      	bne.n	8008e44 <_printf_float+0x23c>
 8008dec:	e767      	b.n	8008cbe <_printf_float+0xb6>
 8008dee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008df2:	f240 80dd 	bls.w	8008fb0 <_printf_float+0x3a8>
 8008df6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f7f7 fe8b 	bl	8000b18 <__aeabi_dcmpeq>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d033      	beq.n	8008e6e <_printf_float+0x266>
 8008e06:	4a37      	ldr	r2, [pc, #220]	@ (8008ee4 <_printf_float+0x2dc>)
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	47b8      	blx	r7
 8008e10:	3001      	adds	r0, #1
 8008e12:	f43f af54 	beq.w	8008cbe <_printf_float+0xb6>
 8008e16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e1a:	4543      	cmp	r3, r8
 8008e1c:	db02      	blt.n	8008e24 <_printf_float+0x21c>
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	07d8      	lsls	r0, r3, #31
 8008e22:	d50f      	bpl.n	8008e44 <_printf_float+0x23c>
 8008e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e28:	4631      	mov	r1, r6
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	47b8      	blx	r7
 8008e2e:	3001      	adds	r0, #1
 8008e30:	f43f af45 	beq.w	8008cbe <_printf_float+0xb6>
 8008e34:	f04f 0900 	mov.w	r9, #0
 8008e38:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e3c:	f104 0a1a 	add.w	sl, r4, #26
 8008e40:	45c8      	cmp	r8, r9
 8008e42:	dc09      	bgt.n	8008e58 <_printf_float+0x250>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	079b      	lsls	r3, r3, #30
 8008e48:	f100 8103 	bmi.w	8009052 <_printf_float+0x44a>
 8008e4c:	68e0      	ldr	r0, [r4, #12]
 8008e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e50:	4298      	cmp	r0, r3
 8008e52:	bfb8      	it	lt
 8008e54:	4618      	movlt	r0, r3
 8008e56:	e734      	b.n	8008cc2 <_printf_float+0xba>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4628      	mov	r0, r5
 8008e60:	47b8      	blx	r7
 8008e62:	3001      	adds	r0, #1
 8008e64:	f43f af2b 	beq.w	8008cbe <_printf_float+0xb6>
 8008e68:	f109 0901 	add.w	r9, r9, #1
 8008e6c:	e7e8      	b.n	8008e40 <_printf_float+0x238>
 8008e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dc39      	bgt.n	8008ee8 <_printf_float+0x2e0>
 8008e74:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee4 <_printf_float+0x2dc>)
 8008e76:	2301      	movs	r3, #1
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f af1d 	beq.w	8008cbe <_printf_float+0xb6>
 8008e84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e88:	ea59 0303 	orrs.w	r3, r9, r3
 8008e8c:	d102      	bne.n	8008e94 <_printf_float+0x28c>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	07d9      	lsls	r1, r3, #31
 8008e92:	d5d7      	bpl.n	8008e44 <_printf_float+0x23c>
 8008e94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f43f af0d 	beq.w	8008cbe <_printf_float+0xb6>
 8008ea4:	f04f 0a00 	mov.w	sl, #0
 8008ea8:	f104 0b1a 	add.w	fp, r4, #26
 8008eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eae:	425b      	negs	r3, r3
 8008eb0:	4553      	cmp	r3, sl
 8008eb2:	dc01      	bgt.n	8008eb8 <_printf_float+0x2b0>
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	e793      	b.n	8008de0 <_printf_float+0x1d8>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	465a      	mov	r2, fp
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	47b8      	blx	r7
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f43f aefb 	beq.w	8008cbe <_printf_float+0xb6>
 8008ec8:	f10a 0a01 	add.w	sl, sl, #1
 8008ecc:	e7ee      	b.n	8008eac <_printf_float+0x2a4>
 8008ece:	bf00      	nop
 8008ed0:	7fefffff 	.word	0x7fefffff
 8008ed4:	0800b801 	.word	0x0800b801
 8008ed8:	0800b805 	.word	0x0800b805
 8008edc:	0800b809 	.word	0x0800b809
 8008ee0:	0800b80d 	.word	0x0800b80d
 8008ee4:	0800b811 	.word	0x0800b811
 8008ee8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008eea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008eee:	4553      	cmp	r3, sl
 8008ef0:	bfa8      	it	ge
 8008ef2:	4653      	movge	r3, sl
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	4699      	mov	r9, r3
 8008ef8:	dc36      	bgt.n	8008f68 <_printf_float+0x360>
 8008efa:	f04f 0b00 	mov.w	fp, #0
 8008efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f02:	f104 021a 	add.w	r2, r4, #26
 8008f06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f08:	9306      	str	r3, [sp, #24]
 8008f0a:	eba3 0309 	sub.w	r3, r3, r9
 8008f0e:	455b      	cmp	r3, fp
 8008f10:	dc31      	bgt.n	8008f76 <_printf_float+0x36e>
 8008f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f14:	459a      	cmp	sl, r3
 8008f16:	dc3a      	bgt.n	8008f8e <_printf_float+0x386>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	07da      	lsls	r2, r3, #31
 8008f1c:	d437      	bmi.n	8008f8e <_printf_float+0x386>
 8008f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f20:	ebaa 0903 	sub.w	r9, sl, r3
 8008f24:	9b06      	ldr	r3, [sp, #24]
 8008f26:	ebaa 0303 	sub.w	r3, sl, r3
 8008f2a:	4599      	cmp	r9, r3
 8008f2c:	bfa8      	it	ge
 8008f2e:	4699      	movge	r9, r3
 8008f30:	f1b9 0f00 	cmp.w	r9, #0
 8008f34:	dc33      	bgt.n	8008f9e <_printf_float+0x396>
 8008f36:	f04f 0800 	mov.w	r8, #0
 8008f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f3e:	f104 0b1a 	add.w	fp, r4, #26
 8008f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f44:	ebaa 0303 	sub.w	r3, sl, r3
 8008f48:	eba3 0309 	sub.w	r3, r3, r9
 8008f4c:	4543      	cmp	r3, r8
 8008f4e:	f77f af79 	ble.w	8008e44 <_printf_float+0x23c>
 8008f52:	2301      	movs	r3, #1
 8008f54:	465a      	mov	r2, fp
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f43f aeae 	beq.w	8008cbe <_printf_float+0xb6>
 8008f62:	f108 0801 	add.w	r8, r8, #1
 8008f66:	e7ec      	b.n	8008f42 <_printf_float+0x33a>
 8008f68:	4642      	mov	r2, r8
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	d1c2      	bne.n	8008efa <_printf_float+0x2f2>
 8008f74:	e6a3      	b.n	8008cbe <_printf_float+0xb6>
 8008f76:	2301      	movs	r3, #1
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	9206      	str	r2, [sp, #24]
 8008f7e:	47b8      	blx	r7
 8008f80:	3001      	adds	r0, #1
 8008f82:	f43f ae9c 	beq.w	8008cbe <_printf_float+0xb6>
 8008f86:	9a06      	ldr	r2, [sp, #24]
 8008f88:	f10b 0b01 	add.w	fp, fp, #1
 8008f8c:	e7bb      	b.n	8008f06 <_printf_float+0x2fe>
 8008f8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f92:	4631      	mov	r1, r6
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b8      	blx	r7
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d1c0      	bne.n	8008f1e <_printf_float+0x316>
 8008f9c:	e68f      	b.n	8008cbe <_printf_float+0xb6>
 8008f9e:	9a06      	ldr	r2, [sp, #24]
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	4442      	add	r2, r8
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	d1c3      	bne.n	8008f36 <_printf_float+0x32e>
 8008fae:	e686      	b.n	8008cbe <_printf_float+0xb6>
 8008fb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fb4:	f1ba 0f01 	cmp.w	sl, #1
 8008fb8:	dc01      	bgt.n	8008fbe <_printf_float+0x3b6>
 8008fba:	07db      	lsls	r3, r3, #31
 8008fbc:	d536      	bpl.n	800902c <_printf_float+0x424>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f ae78 	beq.w	8008cbe <_printf_float+0xb6>
 8008fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b8      	blx	r7
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f43f ae70 	beq.w	8008cbe <_printf_float+0xb6>
 8008fde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fea:	f7f7 fd95 	bl	8000b18 <__aeabi_dcmpeq>
 8008fee:	b9c0      	cbnz	r0, 8009022 <_printf_float+0x41a>
 8008ff0:	4653      	mov	r3, sl
 8008ff2:	f108 0201 	add.w	r2, r8, #1
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b8      	blx	r7
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d10c      	bne.n	800901a <_printf_float+0x412>
 8009000:	e65d      	b.n	8008cbe <_printf_float+0xb6>
 8009002:	2301      	movs	r3, #1
 8009004:	465a      	mov	r2, fp
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	f43f ae56 	beq.w	8008cbe <_printf_float+0xb6>
 8009012:	f108 0801 	add.w	r8, r8, #1
 8009016:	45d0      	cmp	r8, sl
 8009018:	dbf3      	blt.n	8009002 <_printf_float+0x3fa>
 800901a:	464b      	mov	r3, r9
 800901c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009020:	e6df      	b.n	8008de2 <_printf_float+0x1da>
 8009022:	f04f 0800 	mov.w	r8, #0
 8009026:	f104 0b1a 	add.w	fp, r4, #26
 800902a:	e7f4      	b.n	8009016 <_printf_float+0x40e>
 800902c:	2301      	movs	r3, #1
 800902e:	4642      	mov	r2, r8
 8009030:	e7e1      	b.n	8008ff6 <_printf_float+0x3ee>
 8009032:	2301      	movs	r3, #1
 8009034:	464a      	mov	r2, r9
 8009036:	4631      	mov	r1, r6
 8009038:	4628      	mov	r0, r5
 800903a:	47b8      	blx	r7
 800903c:	3001      	adds	r0, #1
 800903e:	f43f ae3e 	beq.w	8008cbe <_printf_float+0xb6>
 8009042:	f108 0801 	add.w	r8, r8, #1
 8009046:	68e3      	ldr	r3, [r4, #12]
 8009048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800904a:	1a5b      	subs	r3, r3, r1
 800904c:	4543      	cmp	r3, r8
 800904e:	dcf0      	bgt.n	8009032 <_printf_float+0x42a>
 8009050:	e6fc      	b.n	8008e4c <_printf_float+0x244>
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	f104 0919 	add.w	r9, r4, #25
 800905a:	e7f4      	b.n	8009046 <_printf_float+0x43e>

0800905c <_printf_common>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	4616      	mov	r6, r2
 8009062:	4698      	mov	r8, r3
 8009064:	688a      	ldr	r2, [r1, #8]
 8009066:	690b      	ldr	r3, [r1, #16]
 8009068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800906c:	4293      	cmp	r3, r2
 800906e:	bfb8      	it	lt
 8009070:	4613      	movlt	r3, r2
 8009072:	6033      	str	r3, [r6, #0]
 8009074:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009078:	4607      	mov	r7, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b10a      	cbz	r2, 8009082 <_printf_common+0x26>
 800907e:	3301      	adds	r3, #1
 8009080:	6033      	str	r3, [r6, #0]
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	0699      	lsls	r1, r3, #26
 8009086:	bf42      	ittt	mi
 8009088:	6833      	ldrmi	r3, [r6, #0]
 800908a:	3302      	addmi	r3, #2
 800908c:	6033      	strmi	r3, [r6, #0]
 800908e:	6825      	ldr	r5, [r4, #0]
 8009090:	f015 0506 	ands.w	r5, r5, #6
 8009094:	d106      	bne.n	80090a4 <_printf_common+0x48>
 8009096:	f104 0a19 	add.w	sl, r4, #25
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	6832      	ldr	r2, [r6, #0]
 800909e:	1a9b      	subs	r3, r3, r2
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	dc26      	bgt.n	80090f2 <_printf_common+0x96>
 80090a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	3b00      	subs	r3, #0
 80090ac:	bf18      	it	ne
 80090ae:	2301      	movne	r3, #1
 80090b0:	0692      	lsls	r2, r2, #26
 80090b2:	d42b      	bmi.n	800910c <_printf_common+0xb0>
 80090b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090b8:	4641      	mov	r1, r8
 80090ba:	4638      	mov	r0, r7
 80090bc:	47c8      	blx	r9
 80090be:	3001      	adds	r0, #1
 80090c0:	d01e      	beq.n	8009100 <_printf_common+0xa4>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	6922      	ldr	r2, [r4, #16]
 80090c6:	f003 0306 	and.w	r3, r3, #6
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	bf02      	ittt	eq
 80090ce:	68e5      	ldreq	r5, [r4, #12]
 80090d0:	6833      	ldreq	r3, [r6, #0]
 80090d2:	1aed      	subeq	r5, r5, r3
 80090d4:	68a3      	ldr	r3, [r4, #8]
 80090d6:	bf0c      	ite	eq
 80090d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090dc:	2500      	movne	r5, #0
 80090de:	4293      	cmp	r3, r2
 80090e0:	bfc4      	itt	gt
 80090e2:	1a9b      	subgt	r3, r3, r2
 80090e4:	18ed      	addgt	r5, r5, r3
 80090e6:	2600      	movs	r6, #0
 80090e8:	341a      	adds	r4, #26
 80090ea:	42b5      	cmp	r5, r6
 80090ec:	d11a      	bne.n	8009124 <_printf_common+0xc8>
 80090ee:	2000      	movs	r0, #0
 80090f0:	e008      	b.n	8009104 <_printf_common+0xa8>
 80090f2:	2301      	movs	r3, #1
 80090f4:	4652      	mov	r2, sl
 80090f6:	4641      	mov	r1, r8
 80090f8:	4638      	mov	r0, r7
 80090fa:	47c8      	blx	r9
 80090fc:	3001      	adds	r0, #1
 80090fe:	d103      	bne.n	8009108 <_printf_common+0xac>
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009108:	3501      	adds	r5, #1
 800910a:	e7c6      	b.n	800909a <_printf_common+0x3e>
 800910c:	18e1      	adds	r1, r4, r3
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	2030      	movs	r0, #48	@ 0x30
 8009112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009116:	4422      	add	r2, r4
 8009118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800911c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009120:	3302      	adds	r3, #2
 8009122:	e7c7      	b.n	80090b4 <_printf_common+0x58>
 8009124:	2301      	movs	r3, #1
 8009126:	4622      	mov	r2, r4
 8009128:	4641      	mov	r1, r8
 800912a:	4638      	mov	r0, r7
 800912c:	47c8      	blx	r9
 800912e:	3001      	adds	r0, #1
 8009130:	d0e6      	beq.n	8009100 <_printf_common+0xa4>
 8009132:	3601      	adds	r6, #1
 8009134:	e7d9      	b.n	80090ea <_printf_common+0x8e>
	...

08009138 <_printf_i>:
 8009138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800913c:	7e0f      	ldrb	r7, [r1, #24]
 800913e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009140:	2f78      	cmp	r7, #120	@ 0x78
 8009142:	4691      	mov	r9, r2
 8009144:	4680      	mov	r8, r0
 8009146:	460c      	mov	r4, r1
 8009148:	469a      	mov	sl, r3
 800914a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800914e:	d807      	bhi.n	8009160 <_printf_i+0x28>
 8009150:	2f62      	cmp	r7, #98	@ 0x62
 8009152:	d80a      	bhi.n	800916a <_printf_i+0x32>
 8009154:	2f00      	cmp	r7, #0
 8009156:	f000 80d2 	beq.w	80092fe <_printf_i+0x1c6>
 800915a:	2f58      	cmp	r7, #88	@ 0x58
 800915c:	f000 80b9 	beq.w	80092d2 <_printf_i+0x19a>
 8009160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009168:	e03a      	b.n	80091e0 <_printf_i+0xa8>
 800916a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800916e:	2b15      	cmp	r3, #21
 8009170:	d8f6      	bhi.n	8009160 <_printf_i+0x28>
 8009172:	a101      	add	r1, pc, #4	@ (adr r1, 8009178 <_printf_i+0x40>)
 8009174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009178:	080091d1 	.word	0x080091d1
 800917c:	080091e5 	.word	0x080091e5
 8009180:	08009161 	.word	0x08009161
 8009184:	08009161 	.word	0x08009161
 8009188:	08009161 	.word	0x08009161
 800918c:	08009161 	.word	0x08009161
 8009190:	080091e5 	.word	0x080091e5
 8009194:	08009161 	.word	0x08009161
 8009198:	08009161 	.word	0x08009161
 800919c:	08009161 	.word	0x08009161
 80091a0:	08009161 	.word	0x08009161
 80091a4:	080092e5 	.word	0x080092e5
 80091a8:	0800920f 	.word	0x0800920f
 80091ac:	0800929f 	.word	0x0800929f
 80091b0:	08009161 	.word	0x08009161
 80091b4:	08009161 	.word	0x08009161
 80091b8:	08009307 	.word	0x08009307
 80091bc:	08009161 	.word	0x08009161
 80091c0:	0800920f 	.word	0x0800920f
 80091c4:	08009161 	.word	0x08009161
 80091c8:	08009161 	.word	0x08009161
 80091cc:	080092a7 	.word	0x080092a7
 80091d0:	6833      	ldr	r3, [r6, #0]
 80091d2:	1d1a      	adds	r2, r3, #4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6032      	str	r2, [r6, #0]
 80091d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091e0:	2301      	movs	r3, #1
 80091e2:	e09d      	b.n	8009320 <_printf_i+0x1e8>
 80091e4:	6833      	ldr	r3, [r6, #0]
 80091e6:	6820      	ldr	r0, [r4, #0]
 80091e8:	1d19      	adds	r1, r3, #4
 80091ea:	6031      	str	r1, [r6, #0]
 80091ec:	0606      	lsls	r6, r0, #24
 80091ee:	d501      	bpl.n	80091f4 <_printf_i+0xbc>
 80091f0:	681d      	ldr	r5, [r3, #0]
 80091f2:	e003      	b.n	80091fc <_printf_i+0xc4>
 80091f4:	0645      	lsls	r5, r0, #25
 80091f6:	d5fb      	bpl.n	80091f0 <_printf_i+0xb8>
 80091f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	da03      	bge.n	8009208 <_printf_i+0xd0>
 8009200:	232d      	movs	r3, #45	@ 0x2d
 8009202:	426d      	negs	r5, r5
 8009204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009208:	4859      	ldr	r0, [pc, #356]	@ (8009370 <_printf_i+0x238>)
 800920a:	230a      	movs	r3, #10
 800920c:	e011      	b.n	8009232 <_printf_i+0xfa>
 800920e:	6821      	ldr	r1, [r4, #0]
 8009210:	6833      	ldr	r3, [r6, #0]
 8009212:	0608      	lsls	r0, r1, #24
 8009214:	f853 5b04 	ldr.w	r5, [r3], #4
 8009218:	d402      	bmi.n	8009220 <_printf_i+0xe8>
 800921a:	0649      	lsls	r1, r1, #25
 800921c:	bf48      	it	mi
 800921e:	b2ad      	uxthmi	r5, r5
 8009220:	2f6f      	cmp	r7, #111	@ 0x6f
 8009222:	4853      	ldr	r0, [pc, #332]	@ (8009370 <_printf_i+0x238>)
 8009224:	6033      	str	r3, [r6, #0]
 8009226:	bf14      	ite	ne
 8009228:	230a      	movne	r3, #10
 800922a:	2308      	moveq	r3, #8
 800922c:	2100      	movs	r1, #0
 800922e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009232:	6866      	ldr	r6, [r4, #4]
 8009234:	60a6      	str	r6, [r4, #8]
 8009236:	2e00      	cmp	r6, #0
 8009238:	bfa2      	ittt	ge
 800923a:	6821      	ldrge	r1, [r4, #0]
 800923c:	f021 0104 	bicge.w	r1, r1, #4
 8009240:	6021      	strge	r1, [r4, #0]
 8009242:	b90d      	cbnz	r5, 8009248 <_printf_i+0x110>
 8009244:	2e00      	cmp	r6, #0
 8009246:	d04b      	beq.n	80092e0 <_printf_i+0x1a8>
 8009248:	4616      	mov	r6, r2
 800924a:	fbb5 f1f3 	udiv	r1, r5, r3
 800924e:	fb03 5711 	mls	r7, r3, r1, r5
 8009252:	5dc7      	ldrb	r7, [r0, r7]
 8009254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009258:	462f      	mov	r7, r5
 800925a:	42bb      	cmp	r3, r7
 800925c:	460d      	mov	r5, r1
 800925e:	d9f4      	bls.n	800924a <_printf_i+0x112>
 8009260:	2b08      	cmp	r3, #8
 8009262:	d10b      	bne.n	800927c <_printf_i+0x144>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	07df      	lsls	r7, r3, #31
 8009268:	d508      	bpl.n	800927c <_printf_i+0x144>
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	6861      	ldr	r1, [r4, #4]
 800926e:	4299      	cmp	r1, r3
 8009270:	bfde      	ittt	le
 8009272:	2330      	movle	r3, #48	@ 0x30
 8009274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009278:	f106 36ff 	addle.w	r6, r6, #4294967295
 800927c:	1b92      	subs	r2, r2, r6
 800927e:	6122      	str	r2, [r4, #16]
 8009280:	f8cd a000 	str.w	sl, [sp]
 8009284:	464b      	mov	r3, r9
 8009286:	aa03      	add	r2, sp, #12
 8009288:	4621      	mov	r1, r4
 800928a:	4640      	mov	r0, r8
 800928c:	f7ff fee6 	bl	800905c <_printf_common>
 8009290:	3001      	adds	r0, #1
 8009292:	d14a      	bne.n	800932a <_printf_i+0x1f2>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	b004      	add	sp, #16
 800929a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	f043 0320 	orr.w	r3, r3, #32
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	4833      	ldr	r0, [pc, #204]	@ (8009374 <_printf_i+0x23c>)
 80092a8:	2778      	movs	r7, #120	@ 0x78
 80092aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	6831      	ldr	r1, [r6, #0]
 80092b2:	061f      	lsls	r7, r3, #24
 80092b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80092b8:	d402      	bmi.n	80092c0 <_printf_i+0x188>
 80092ba:	065f      	lsls	r7, r3, #25
 80092bc:	bf48      	it	mi
 80092be:	b2ad      	uxthmi	r5, r5
 80092c0:	6031      	str	r1, [r6, #0]
 80092c2:	07d9      	lsls	r1, r3, #31
 80092c4:	bf44      	itt	mi
 80092c6:	f043 0320 	orrmi.w	r3, r3, #32
 80092ca:	6023      	strmi	r3, [r4, #0]
 80092cc:	b11d      	cbz	r5, 80092d6 <_printf_i+0x19e>
 80092ce:	2310      	movs	r3, #16
 80092d0:	e7ac      	b.n	800922c <_printf_i+0xf4>
 80092d2:	4827      	ldr	r0, [pc, #156]	@ (8009370 <_printf_i+0x238>)
 80092d4:	e7e9      	b.n	80092aa <_printf_i+0x172>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	f023 0320 	bic.w	r3, r3, #32
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	e7f6      	b.n	80092ce <_printf_i+0x196>
 80092e0:	4616      	mov	r6, r2
 80092e2:	e7bd      	b.n	8009260 <_printf_i+0x128>
 80092e4:	6833      	ldr	r3, [r6, #0]
 80092e6:	6825      	ldr	r5, [r4, #0]
 80092e8:	6961      	ldr	r1, [r4, #20]
 80092ea:	1d18      	adds	r0, r3, #4
 80092ec:	6030      	str	r0, [r6, #0]
 80092ee:	062e      	lsls	r6, r5, #24
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	d501      	bpl.n	80092f8 <_printf_i+0x1c0>
 80092f4:	6019      	str	r1, [r3, #0]
 80092f6:	e002      	b.n	80092fe <_printf_i+0x1c6>
 80092f8:	0668      	lsls	r0, r5, #25
 80092fa:	d5fb      	bpl.n	80092f4 <_printf_i+0x1bc>
 80092fc:	8019      	strh	r1, [r3, #0]
 80092fe:	2300      	movs	r3, #0
 8009300:	6123      	str	r3, [r4, #16]
 8009302:	4616      	mov	r6, r2
 8009304:	e7bc      	b.n	8009280 <_printf_i+0x148>
 8009306:	6833      	ldr	r3, [r6, #0]
 8009308:	1d1a      	adds	r2, r3, #4
 800930a:	6032      	str	r2, [r6, #0]
 800930c:	681e      	ldr	r6, [r3, #0]
 800930e:	6862      	ldr	r2, [r4, #4]
 8009310:	2100      	movs	r1, #0
 8009312:	4630      	mov	r0, r6
 8009314:	f7f6 ff84 	bl	8000220 <memchr>
 8009318:	b108      	cbz	r0, 800931e <_printf_i+0x1e6>
 800931a:	1b80      	subs	r0, r0, r6
 800931c:	6060      	str	r0, [r4, #4]
 800931e:	6863      	ldr	r3, [r4, #4]
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	2300      	movs	r3, #0
 8009324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009328:	e7aa      	b.n	8009280 <_printf_i+0x148>
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	4632      	mov	r2, r6
 800932e:	4649      	mov	r1, r9
 8009330:	4640      	mov	r0, r8
 8009332:	47d0      	blx	sl
 8009334:	3001      	adds	r0, #1
 8009336:	d0ad      	beq.n	8009294 <_printf_i+0x15c>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	079b      	lsls	r3, r3, #30
 800933c:	d413      	bmi.n	8009366 <_printf_i+0x22e>
 800933e:	68e0      	ldr	r0, [r4, #12]
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	4298      	cmp	r0, r3
 8009344:	bfb8      	it	lt
 8009346:	4618      	movlt	r0, r3
 8009348:	e7a6      	b.n	8009298 <_printf_i+0x160>
 800934a:	2301      	movs	r3, #1
 800934c:	4632      	mov	r2, r6
 800934e:	4649      	mov	r1, r9
 8009350:	4640      	mov	r0, r8
 8009352:	47d0      	blx	sl
 8009354:	3001      	adds	r0, #1
 8009356:	d09d      	beq.n	8009294 <_printf_i+0x15c>
 8009358:	3501      	adds	r5, #1
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	9903      	ldr	r1, [sp, #12]
 800935e:	1a5b      	subs	r3, r3, r1
 8009360:	42ab      	cmp	r3, r5
 8009362:	dcf2      	bgt.n	800934a <_printf_i+0x212>
 8009364:	e7eb      	b.n	800933e <_printf_i+0x206>
 8009366:	2500      	movs	r5, #0
 8009368:	f104 0619 	add.w	r6, r4, #25
 800936c:	e7f5      	b.n	800935a <_printf_i+0x222>
 800936e:	bf00      	nop
 8009370:	0800b813 	.word	0x0800b813
 8009374:	0800b824 	.word	0x0800b824

08009378 <std>:
 8009378:	2300      	movs	r3, #0
 800937a:	b510      	push	{r4, lr}
 800937c:	4604      	mov	r4, r0
 800937e:	e9c0 3300 	strd	r3, r3, [r0]
 8009382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009386:	6083      	str	r3, [r0, #8]
 8009388:	8181      	strh	r1, [r0, #12]
 800938a:	6643      	str	r3, [r0, #100]	@ 0x64
 800938c:	81c2      	strh	r2, [r0, #14]
 800938e:	6183      	str	r3, [r0, #24]
 8009390:	4619      	mov	r1, r3
 8009392:	2208      	movs	r2, #8
 8009394:	305c      	adds	r0, #92	@ 0x5c
 8009396:	f000 f9f9 	bl	800978c <memset>
 800939a:	4b0d      	ldr	r3, [pc, #52]	@ (80093d0 <std+0x58>)
 800939c:	6263      	str	r3, [r4, #36]	@ 0x24
 800939e:	4b0d      	ldr	r3, [pc, #52]	@ (80093d4 <std+0x5c>)
 80093a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093a2:	4b0d      	ldr	r3, [pc, #52]	@ (80093d8 <std+0x60>)
 80093a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093a6:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <std+0x64>)
 80093a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80093aa:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <std+0x68>)
 80093ac:	6224      	str	r4, [r4, #32]
 80093ae:	429c      	cmp	r4, r3
 80093b0:	d006      	beq.n	80093c0 <std+0x48>
 80093b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093b6:	4294      	cmp	r4, r2
 80093b8:	d002      	beq.n	80093c0 <std+0x48>
 80093ba:	33d0      	adds	r3, #208	@ 0xd0
 80093bc:	429c      	cmp	r4, r3
 80093be:	d105      	bne.n	80093cc <std+0x54>
 80093c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c8:	f000 ba5c 	b.w	8009884 <__retarget_lock_init_recursive>
 80093cc:	bd10      	pop	{r4, pc}
 80093ce:	bf00      	nop
 80093d0:	080095dd 	.word	0x080095dd
 80093d4:	080095ff 	.word	0x080095ff
 80093d8:	08009637 	.word	0x08009637
 80093dc:	0800965b 	.word	0x0800965b
 80093e0:	20000658 	.word	0x20000658

080093e4 <stdio_exit_handler>:
 80093e4:	4a02      	ldr	r2, [pc, #8]	@ (80093f0 <stdio_exit_handler+0xc>)
 80093e6:	4903      	ldr	r1, [pc, #12]	@ (80093f4 <stdio_exit_handler+0x10>)
 80093e8:	4803      	ldr	r0, [pc, #12]	@ (80093f8 <stdio_exit_handler+0x14>)
 80093ea:	f000 b869 	b.w	80094c0 <_fwalk_sglue>
 80093ee:	bf00      	nop
 80093f0:	2000008c 	.word	0x2000008c
 80093f4:	0800b1c9 	.word	0x0800b1c9
 80093f8:	2000009c 	.word	0x2000009c

080093fc <cleanup_stdio>:
 80093fc:	6841      	ldr	r1, [r0, #4]
 80093fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009430 <cleanup_stdio+0x34>)
 8009400:	4299      	cmp	r1, r3
 8009402:	b510      	push	{r4, lr}
 8009404:	4604      	mov	r4, r0
 8009406:	d001      	beq.n	800940c <cleanup_stdio+0x10>
 8009408:	f001 fede 	bl	800b1c8 <_fflush_r>
 800940c:	68a1      	ldr	r1, [r4, #8]
 800940e:	4b09      	ldr	r3, [pc, #36]	@ (8009434 <cleanup_stdio+0x38>)
 8009410:	4299      	cmp	r1, r3
 8009412:	d002      	beq.n	800941a <cleanup_stdio+0x1e>
 8009414:	4620      	mov	r0, r4
 8009416:	f001 fed7 	bl	800b1c8 <_fflush_r>
 800941a:	68e1      	ldr	r1, [r4, #12]
 800941c:	4b06      	ldr	r3, [pc, #24]	@ (8009438 <cleanup_stdio+0x3c>)
 800941e:	4299      	cmp	r1, r3
 8009420:	d004      	beq.n	800942c <cleanup_stdio+0x30>
 8009422:	4620      	mov	r0, r4
 8009424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009428:	f001 bece 	b.w	800b1c8 <_fflush_r>
 800942c:	bd10      	pop	{r4, pc}
 800942e:	bf00      	nop
 8009430:	20000658 	.word	0x20000658
 8009434:	200006c0 	.word	0x200006c0
 8009438:	20000728 	.word	0x20000728

0800943c <global_stdio_init.part.0>:
 800943c:	b510      	push	{r4, lr}
 800943e:	4b0b      	ldr	r3, [pc, #44]	@ (800946c <global_stdio_init.part.0+0x30>)
 8009440:	4c0b      	ldr	r4, [pc, #44]	@ (8009470 <global_stdio_init.part.0+0x34>)
 8009442:	4a0c      	ldr	r2, [pc, #48]	@ (8009474 <global_stdio_init.part.0+0x38>)
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	4620      	mov	r0, r4
 8009448:	2200      	movs	r2, #0
 800944a:	2104      	movs	r1, #4
 800944c:	f7ff ff94 	bl	8009378 <std>
 8009450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009454:	2201      	movs	r2, #1
 8009456:	2109      	movs	r1, #9
 8009458:	f7ff ff8e 	bl	8009378 <std>
 800945c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009460:	2202      	movs	r2, #2
 8009462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009466:	2112      	movs	r1, #18
 8009468:	f7ff bf86 	b.w	8009378 <std>
 800946c:	20000790 	.word	0x20000790
 8009470:	20000658 	.word	0x20000658
 8009474:	080093e5 	.word	0x080093e5

08009478 <__sfp_lock_acquire>:
 8009478:	4801      	ldr	r0, [pc, #4]	@ (8009480 <__sfp_lock_acquire+0x8>)
 800947a:	f000 ba04 	b.w	8009886 <__retarget_lock_acquire_recursive>
 800947e:	bf00      	nop
 8009480:	20000799 	.word	0x20000799

08009484 <__sfp_lock_release>:
 8009484:	4801      	ldr	r0, [pc, #4]	@ (800948c <__sfp_lock_release+0x8>)
 8009486:	f000 b9ff 	b.w	8009888 <__retarget_lock_release_recursive>
 800948a:	bf00      	nop
 800948c:	20000799 	.word	0x20000799

08009490 <__sinit>:
 8009490:	b510      	push	{r4, lr}
 8009492:	4604      	mov	r4, r0
 8009494:	f7ff fff0 	bl	8009478 <__sfp_lock_acquire>
 8009498:	6a23      	ldr	r3, [r4, #32]
 800949a:	b11b      	cbz	r3, 80094a4 <__sinit+0x14>
 800949c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a0:	f7ff bff0 	b.w	8009484 <__sfp_lock_release>
 80094a4:	4b04      	ldr	r3, [pc, #16]	@ (80094b8 <__sinit+0x28>)
 80094a6:	6223      	str	r3, [r4, #32]
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <__sinit+0x2c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1f5      	bne.n	800949c <__sinit+0xc>
 80094b0:	f7ff ffc4 	bl	800943c <global_stdio_init.part.0>
 80094b4:	e7f2      	b.n	800949c <__sinit+0xc>
 80094b6:	bf00      	nop
 80094b8:	080093fd 	.word	0x080093fd
 80094bc:	20000790 	.word	0x20000790

080094c0 <_fwalk_sglue>:
 80094c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c4:	4607      	mov	r7, r0
 80094c6:	4688      	mov	r8, r1
 80094c8:	4614      	mov	r4, r2
 80094ca:	2600      	movs	r6, #0
 80094cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094d0:	f1b9 0901 	subs.w	r9, r9, #1
 80094d4:	d505      	bpl.n	80094e2 <_fwalk_sglue+0x22>
 80094d6:	6824      	ldr	r4, [r4, #0]
 80094d8:	2c00      	cmp	r4, #0
 80094da:	d1f7      	bne.n	80094cc <_fwalk_sglue+0xc>
 80094dc:	4630      	mov	r0, r6
 80094de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094e2:	89ab      	ldrh	r3, [r5, #12]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d907      	bls.n	80094f8 <_fwalk_sglue+0x38>
 80094e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094ec:	3301      	adds	r3, #1
 80094ee:	d003      	beq.n	80094f8 <_fwalk_sglue+0x38>
 80094f0:	4629      	mov	r1, r5
 80094f2:	4638      	mov	r0, r7
 80094f4:	47c0      	blx	r8
 80094f6:	4306      	orrs	r6, r0
 80094f8:	3568      	adds	r5, #104	@ 0x68
 80094fa:	e7e9      	b.n	80094d0 <_fwalk_sglue+0x10>

080094fc <iprintf>:
 80094fc:	b40f      	push	{r0, r1, r2, r3}
 80094fe:	b507      	push	{r0, r1, r2, lr}
 8009500:	4906      	ldr	r1, [pc, #24]	@ (800951c <iprintf+0x20>)
 8009502:	ab04      	add	r3, sp, #16
 8009504:	6808      	ldr	r0, [r1, #0]
 8009506:	f853 2b04 	ldr.w	r2, [r3], #4
 800950a:	6881      	ldr	r1, [r0, #8]
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	f001 fcbf 	bl	800ae90 <_vfiprintf_r>
 8009512:	b003      	add	sp, #12
 8009514:	f85d eb04 	ldr.w	lr, [sp], #4
 8009518:	b004      	add	sp, #16
 800951a:	4770      	bx	lr
 800951c:	20000098 	.word	0x20000098

08009520 <_puts_r>:
 8009520:	6a03      	ldr	r3, [r0, #32]
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	6884      	ldr	r4, [r0, #8]
 8009526:	4605      	mov	r5, r0
 8009528:	460e      	mov	r6, r1
 800952a:	b90b      	cbnz	r3, 8009530 <_puts_r+0x10>
 800952c:	f7ff ffb0 	bl	8009490 <__sinit>
 8009530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009532:	07db      	lsls	r3, r3, #31
 8009534:	d405      	bmi.n	8009542 <_puts_r+0x22>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	0598      	lsls	r0, r3, #22
 800953a:	d402      	bmi.n	8009542 <_puts_r+0x22>
 800953c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800953e:	f000 f9a2 	bl	8009886 <__retarget_lock_acquire_recursive>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	0719      	lsls	r1, r3, #28
 8009546:	d502      	bpl.n	800954e <_puts_r+0x2e>
 8009548:	6923      	ldr	r3, [r4, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d135      	bne.n	80095ba <_puts_r+0x9a>
 800954e:	4621      	mov	r1, r4
 8009550:	4628      	mov	r0, r5
 8009552:	f000 f8c5 	bl	80096e0 <__swsetup_r>
 8009556:	b380      	cbz	r0, 80095ba <_puts_r+0x9a>
 8009558:	f04f 35ff 	mov.w	r5, #4294967295
 800955c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800955e:	07da      	lsls	r2, r3, #31
 8009560:	d405      	bmi.n	800956e <_puts_r+0x4e>
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	059b      	lsls	r3, r3, #22
 8009566:	d402      	bmi.n	800956e <_puts_r+0x4e>
 8009568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800956a:	f000 f98d 	bl	8009888 <__retarget_lock_release_recursive>
 800956e:	4628      	mov	r0, r5
 8009570:	bd70      	pop	{r4, r5, r6, pc}
 8009572:	2b00      	cmp	r3, #0
 8009574:	da04      	bge.n	8009580 <_puts_r+0x60>
 8009576:	69a2      	ldr	r2, [r4, #24]
 8009578:	429a      	cmp	r2, r3
 800957a:	dc17      	bgt.n	80095ac <_puts_r+0x8c>
 800957c:	290a      	cmp	r1, #10
 800957e:	d015      	beq.n	80095ac <_puts_r+0x8c>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	6022      	str	r2, [r4, #0]
 8009586:	7019      	strb	r1, [r3, #0]
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800958e:	3b01      	subs	r3, #1
 8009590:	60a3      	str	r3, [r4, #8]
 8009592:	2900      	cmp	r1, #0
 8009594:	d1ed      	bne.n	8009572 <_puts_r+0x52>
 8009596:	2b00      	cmp	r3, #0
 8009598:	da11      	bge.n	80095be <_puts_r+0x9e>
 800959a:	4622      	mov	r2, r4
 800959c:	210a      	movs	r1, #10
 800959e:	4628      	mov	r0, r5
 80095a0:	f000 f85f 	bl	8009662 <__swbuf_r>
 80095a4:	3001      	adds	r0, #1
 80095a6:	d0d7      	beq.n	8009558 <_puts_r+0x38>
 80095a8:	250a      	movs	r5, #10
 80095aa:	e7d7      	b.n	800955c <_puts_r+0x3c>
 80095ac:	4622      	mov	r2, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f857 	bl	8009662 <__swbuf_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1e7      	bne.n	8009588 <_puts_r+0x68>
 80095b8:	e7ce      	b.n	8009558 <_puts_r+0x38>
 80095ba:	3e01      	subs	r6, #1
 80095bc:	e7e4      	b.n	8009588 <_puts_r+0x68>
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	6022      	str	r2, [r4, #0]
 80095c4:	220a      	movs	r2, #10
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	e7ee      	b.n	80095a8 <_puts_r+0x88>
	...

080095cc <puts>:
 80095cc:	4b02      	ldr	r3, [pc, #8]	@ (80095d8 <puts+0xc>)
 80095ce:	4601      	mov	r1, r0
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	f7ff bfa5 	b.w	8009520 <_puts_r>
 80095d6:	bf00      	nop
 80095d8:	20000098 	.word	0x20000098

080095dc <__sread>:
 80095dc:	b510      	push	{r4, lr}
 80095de:	460c      	mov	r4, r1
 80095e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e4:	f000 f900 	bl	80097e8 <_read_r>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	bfab      	itete	ge
 80095ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80095ee:	89a3      	ldrhlt	r3, [r4, #12]
 80095f0:	181b      	addge	r3, r3, r0
 80095f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80095f6:	bfac      	ite	ge
 80095f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80095fa:	81a3      	strhlt	r3, [r4, #12]
 80095fc:	bd10      	pop	{r4, pc}

080095fe <__swrite>:
 80095fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009602:	461f      	mov	r7, r3
 8009604:	898b      	ldrh	r3, [r1, #12]
 8009606:	05db      	lsls	r3, r3, #23
 8009608:	4605      	mov	r5, r0
 800960a:	460c      	mov	r4, r1
 800960c:	4616      	mov	r6, r2
 800960e:	d505      	bpl.n	800961c <__swrite+0x1e>
 8009610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009614:	2302      	movs	r3, #2
 8009616:	2200      	movs	r2, #0
 8009618:	f000 f8d4 	bl	80097c4 <_lseek_r>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	4632      	mov	r2, r6
 800962a:	463b      	mov	r3, r7
 800962c:	4628      	mov	r0, r5
 800962e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009632:	f000 b8eb 	b.w	800980c <_write_r>

08009636 <__sseek>:
 8009636:	b510      	push	{r4, lr}
 8009638:	460c      	mov	r4, r1
 800963a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963e:	f000 f8c1 	bl	80097c4 <_lseek_r>
 8009642:	1c43      	adds	r3, r0, #1
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	bf15      	itete	ne
 8009648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800964a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800964e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009652:	81a3      	strheq	r3, [r4, #12]
 8009654:	bf18      	it	ne
 8009656:	81a3      	strhne	r3, [r4, #12]
 8009658:	bd10      	pop	{r4, pc}

0800965a <__sclose>:
 800965a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965e:	f000 b8a1 	b.w	80097a4 <_close_r>

08009662 <__swbuf_r>:
 8009662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009664:	460e      	mov	r6, r1
 8009666:	4614      	mov	r4, r2
 8009668:	4605      	mov	r5, r0
 800966a:	b118      	cbz	r0, 8009674 <__swbuf_r+0x12>
 800966c:	6a03      	ldr	r3, [r0, #32]
 800966e:	b90b      	cbnz	r3, 8009674 <__swbuf_r+0x12>
 8009670:	f7ff ff0e 	bl	8009490 <__sinit>
 8009674:	69a3      	ldr	r3, [r4, #24]
 8009676:	60a3      	str	r3, [r4, #8]
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	071a      	lsls	r2, r3, #28
 800967c:	d501      	bpl.n	8009682 <__swbuf_r+0x20>
 800967e:	6923      	ldr	r3, [r4, #16]
 8009680:	b943      	cbnz	r3, 8009694 <__swbuf_r+0x32>
 8009682:	4621      	mov	r1, r4
 8009684:	4628      	mov	r0, r5
 8009686:	f000 f82b 	bl	80096e0 <__swsetup_r>
 800968a:	b118      	cbz	r0, 8009694 <__swbuf_r+0x32>
 800968c:	f04f 37ff 	mov.w	r7, #4294967295
 8009690:	4638      	mov	r0, r7
 8009692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	6922      	ldr	r2, [r4, #16]
 8009698:	1a98      	subs	r0, r3, r2
 800969a:	6963      	ldr	r3, [r4, #20]
 800969c:	b2f6      	uxtb	r6, r6
 800969e:	4283      	cmp	r3, r0
 80096a0:	4637      	mov	r7, r6
 80096a2:	dc05      	bgt.n	80096b0 <__swbuf_r+0x4e>
 80096a4:	4621      	mov	r1, r4
 80096a6:	4628      	mov	r0, r5
 80096a8:	f001 fd8e 	bl	800b1c8 <_fflush_r>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d1ed      	bne.n	800968c <__swbuf_r+0x2a>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	6022      	str	r2, [r4, #0]
 80096bc:	701e      	strb	r6, [r3, #0]
 80096be:	6962      	ldr	r2, [r4, #20]
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d004      	beq.n	80096d0 <__swbuf_r+0x6e>
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	07db      	lsls	r3, r3, #31
 80096ca:	d5e1      	bpl.n	8009690 <__swbuf_r+0x2e>
 80096cc:	2e0a      	cmp	r6, #10
 80096ce:	d1df      	bne.n	8009690 <__swbuf_r+0x2e>
 80096d0:	4621      	mov	r1, r4
 80096d2:	4628      	mov	r0, r5
 80096d4:	f001 fd78 	bl	800b1c8 <_fflush_r>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d0d9      	beq.n	8009690 <__swbuf_r+0x2e>
 80096dc:	e7d6      	b.n	800968c <__swbuf_r+0x2a>
	...

080096e0 <__swsetup_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4b29      	ldr	r3, [pc, #164]	@ (8009788 <__swsetup_r+0xa8>)
 80096e4:	4605      	mov	r5, r0
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	460c      	mov	r4, r1
 80096ea:	b118      	cbz	r0, 80096f4 <__swsetup_r+0x14>
 80096ec:	6a03      	ldr	r3, [r0, #32]
 80096ee:	b90b      	cbnz	r3, 80096f4 <__swsetup_r+0x14>
 80096f0:	f7ff fece 	bl	8009490 <__sinit>
 80096f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f8:	0719      	lsls	r1, r3, #28
 80096fa:	d422      	bmi.n	8009742 <__swsetup_r+0x62>
 80096fc:	06da      	lsls	r2, r3, #27
 80096fe:	d407      	bmi.n	8009710 <__swsetup_r+0x30>
 8009700:	2209      	movs	r2, #9
 8009702:	602a      	str	r2, [r5, #0]
 8009704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	f04f 30ff 	mov.w	r0, #4294967295
 800970e:	e033      	b.n	8009778 <__swsetup_r+0x98>
 8009710:	0758      	lsls	r0, r3, #29
 8009712:	d512      	bpl.n	800973a <__swsetup_r+0x5a>
 8009714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009716:	b141      	cbz	r1, 800972a <__swsetup_r+0x4a>
 8009718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800971c:	4299      	cmp	r1, r3
 800971e:	d002      	beq.n	8009726 <__swsetup_r+0x46>
 8009720:	4628      	mov	r0, r5
 8009722:	f000 ff09 	bl	800a538 <_free_r>
 8009726:	2300      	movs	r3, #0
 8009728:	6363      	str	r3, [r4, #52]	@ 0x34
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	2300      	movs	r3, #0
 8009734:	6063      	str	r3, [r4, #4]
 8009736:	6923      	ldr	r3, [r4, #16]
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	f043 0308 	orr.w	r3, r3, #8
 8009740:	81a3      	strh	r3, [r4, #12]
 8009742:	6923      	ldr	r3, [r4, #16]
 8009744:	b94b      	cbnz	r3, 800975a <__swsetup_r+0x7a>
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800974c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009750:	d003      	beq.n	800975a <__swsetup_r+0x7a>
 8009752:	4621      	mov	r1, r4
 8009754:	4628      	mov	r0, r5
 8009756:	f001 fd85 	bl	800b264 <__smakebuf_r>
 800975a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975e:	f013 0201 	ands.w	r2, r3, #1
 8009762:	d00a      	beq.n	800977a <__swsetup_r+0x9a>
 8009764:	2200      	movs	r2, #0
 8009766:	60a2      	str	r2, [r4, #8]
 8009768:	6962      	ldr	r2, [r4, #20]
 800976a:	4252      	negs	r2, r2
 800976c:	61a2      	str	r2, [r4, #24]
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	b942      	cbnz	r2, 8009784 <__swsetup_r+0xa4>
 8009772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009776:	d1c5      	bne.n	8009704 <__swsetup_r+0x24>
 8009778:	bd38      	pop	{r3, r4, r5, pc}
 800977a:	0799      	lsls	r1, r3, #30
 800977c:	bf58      	it	pl
 800977e:	6962      	ldrpl	r2, [r4, #20]
 8009780:	60a2      	str	r2, [r4, #8]
 8009782:	e7f4      	b.n	800976e <__swsetup_r+0x8e>
 8009784:	2000      	movs	r0, #0
 8009786:	e7f7      	b.n	8009778 <__swsetup_r+0x98>
 8009788:	20000098 	.word	0x20000098

0800978c <memset>:
 800978c:	4402      	add	r2, r0
 800978e:	4603      	mov	r3, r0
 8009790:	4293      	cmp	r3, r2
 8009792:	d100      	bne.n	8009796 <memset+0xa>
 8009794:	4770      	bx	lr
 8009796:	f803 1b01 	strb.w	r1, [r3], #1
 800979a:	e7f9      	b.n	8009790 <memset+0x4>

0800979c <_localeconv_r>:
 800979c:	4800      	ldr	r0, [pc, #0]	@ (80097a0 <_localeconv_r+0x4>)
 800979e:	4770      	bx	lr
 80097a0:	200001d8 	.word	0x200001d8

080097a4 <_close_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4d06      	ldr	r5, [pc, #24]	@ (80097c0 <_close_r+0x1c>)
 80097a8:	2300      	movs	r3, #0
 80097aa:	4604      	mov	r4, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	602b      	str	r3, [r5, #0]
 80097b0:	f7f9 f85e 	bl	8002870 <_close>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_close_r+0x1a>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_close_r+0x1a>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20000794 	.word	0x20000794

080097c4 <_lseek_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d07      	ldr	r5, [pc, #28]	@ (80097e4 <_lseek_r+0x20>)
 80097c8:	4604      	mov	r4, r0
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	602a      	str	r2, [r5, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f7f9 f873 	bl	80028be <_lseek>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_lseek_r+0x1e>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_lseek_r+0x1e>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	20000794 	.word	0x20000794

080097e8 <_read_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d07      	ldr	r5, [pc, #28]	@ (8009808 <_read_r+0x20>)
 80097ec:	4604      	mov	r4, r0
 80097ee:	4608      	mov	r0, r1
 80097f0:	4611      	mov	r1, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	602a      	str	r2, [r5, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f7f9 f801 	bl	80027fe <_read>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_read_r+0x1e>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_read_r+0x1e>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	20000794 	.word	0x20000794

0800980c <_write_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d07      	ldr	r5, [pc, #28]	@ (800982c <_write_r+0x20>)
 8009810:	4604      	mov	r4, r0
 8009812:	4608      	mov	r0, r1
 8009814:	4611      	mov	r1, r2
 8009816:	2200      	movs	r2, #0
 8009818:	602a      	str	r2, [r5, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	f7f9 f80c 	bl	8002838 <_write>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_write_r+0x1e>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_write_r+0x1e>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20000794 	.word	0x20000794

08009830 <__errno>:
 8009830:	4b01      	ldr	r3, [pc, #4]	@ (8009838 <__errno+0x8>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	20000098 	.word	0x20000098

0800983c <__libc_init_array>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	4d0d      	ldr	r5, [pc, #52]	@ (8009874 <__libc_init_array+0x38>)
 8009840:	4c0d      	ldr	r4, [pc, #52]	@ (8009878 <__libc_init_array+0x3c>)
 8009842:	1b64      	subs	r4, r4, r5
 8009844:	10a4      	asrs	r4, r4, #2
 8009846:	2600      	movs	r6, #0
 8009848:	42a6      	cmp	r6, r4
 800984a:	d109      	bne.n	8009860 <__libc_init_array+0x24>
 800984c:	4d0b      	ldr	r5, [pc, #44]	@ (800987c <__libc_init_array+0x40>)
 800984e:	4c0c      	ldr	r4, [pc, #48]	@ (8009880 <__libc_init_array+0x44>)
 8009850:	f001 fe34 	bl	800b4bc <_init>
 8009854:	1b64      	subs	r4, r4, r5
 8009856:	10a4      	asrs	r4, r4, #2
 8009858:	2600      	movs	r6, #0
 800985a:	42a6      	cmp	r6, r4
 800985c:	d105      	bne.n	800986a <__libc_init_array+0x2e>
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	f855 3b04 	ldr.w	r3, [r5], #4
 8009864:	4798      	blx	r3
 8009866:	3601      	adds	r6, #1
 8009868:	e7ee      	b.n	8009848 <__libc_init_array+0xc>
 800986a:	f855 3b04 	ldr.w	r3, [r5], #4
 800986e:	4798      	blx	r3
 8009870:	3601      	adds	r6, #1
 8009872:	e7f2      	b.n	800985a <__libc_init_array+0x1e>
 8009874:	0800ba78 	.word	0x0800ba78
 8009878:	0800ba78 	.word	0x0800ba78
 800987c:	0800ba78 	.word	0x0800ba78
 8009880:	0800ba7c 	.word	0x0800ba7c

08009884 <__retarget_lock_init_recursive>:
 8009884:	4770      	bx	lr

08009886 <__retarget_lock_acquire_recursive>:
 8009886:	4770      	bx	lr

08009888 <__retarget_lock_release_recursive>:
 8009888:	4770      	bx	lr

0800988a <strcpy>:
 800988a:	4603      	mov	r3, r0
 800988c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009890:	f803 2b01 	strb.w	r2, [r3], #1
 8009894:	2a00      	cmp	r2, #0
 8009896:	d1f9      	bne.n	800988c <strcpy+0x2>
 8009898:	4770      	bx	lr

0800989a <quorem>:
 800989a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989e:	6903      	ldr	r3, [r0, #16]
 80098a0:	690c      	ldr	r4, [r1, #16]
 80098a2:	42a3      	cmp	r3, r4
 80098a4:	4607      	mov	r7, r0
 80098a6:	db7e      	blt.n	80099a6 <quorem+0x10c>
 80098a8:	3c01      	subs	r4, #1
 80098aa:	f101 0814 	add.w	r8, r1, #20
 80098ae:	00a3      	lsls	r3, r4, #2
 80098b0:	f100 0514 	add.w	r5, r0, #20
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098c4:	3301      	adds	r3, #1
 80098c6:	429a      	cmp	r2, r3
 80098c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80098d0:	d32e      	bcc.n	8009930 <quorem+0x96>
 80098d2:	f04f 0a00 	mov.w	sl, #0
 80098d6:	46c4      	mov	ip, r8
 80098d8:	46ae      	mov	lr, r5
 80098da:	46d3      	mov	fp, sl
 80098dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098e0:	b298      	uxth	r0, r3
 80098e2:	fb06 a000 	mla	r0, r6, r0, sl
 80098e6:	0c02      	lsrs	r2, r0, #16
 80098e8:	0c1b      	lsrs	r3, r3, #16
 80098ea:	fb06 2303 	mla	r3, r6, r3, r2
 80098ee:	f8de 2000 	ldr.w	r2, [lr]
 80098f2:	b280      	uxth	r0, r0
 80098f4:	b292      	uxth	r2, r2
 80098f6:	1a12      	subs	r2, r2, r0
 80098f8:	445a      	add	r2, fp
 80098fa:	f8de 0000 	ldr.w	r0, [lr]
 80098fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009902:	b29b      	uxth	r3, r3
 8009904:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009908:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800990c:	b292      	uxth	r2, r2
 800990e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009912:	45e1      	cmp	r9, ip
 8009914:	f84e 2b04 	str.w	r2, [lr], #4
 8009918:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800991c:	d2de      	bcs.n	80098dc <quorem+0x42>
 800991e:	9b00      	ldr	r3, [sp, #0]
 8009920:	58eb      	ldr	r3, [r5, r3]
 8009922:	b92b      	cbnz	r3, 8009930 <quorem+0x96>
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	3b04      	subs	r3, #4
 8009928:	429d      	cmp	r5, r3
 800992a:	461a      	mov	r2, r3
 800992c:	d32f      	bcc.n	800998e <quorem+0xf4>
 800992e:	613c      	str	r4, [r7, #16]
 8009930:	4638      	mov	r0, r7
 8009932:	f001 f97b 	bl	800ac2c <__mcmp>
 8009936:	2800      	cmp	r0, #0
 8009938:	db25      	blt.n	8009986 <quorem+0xec>
 800993a:	4629      	mov	r1, r5
 800993c:	2000      	movs	r0, #0
 800993e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009942:	f8d1 c000 	ldr.w	ip, [r1]
 8009946:	fa1f fe82 	uxth.w	lr, r2
 800994a:	fa1f f38c 	uxth.w	r3, ip
 800994e:	eba3 030e 	sub.w	r3, r3, lr
 8009952:	4403      	add	r3, r0
 8009954:	0c12      	lsrs	r2, r2, #16
 8009956:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800995a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800995e:	b29b      	uxth	r3, r3
 8009960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009964:	45c1      	cmp	r9, r8
 8009966:	f841 3b04 	str.w	r3, [r1], #4
 800996a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800996e:	d2e6      	bcs.n	800993e <quorem+0xa4>
 8009970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009974:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009978:	b922      	cbnz	r2, 8009984 <quorem+0xea>
 800997a:	3b04      	subs	r3, #4
 800997c:	429d      	cmp	r5, r3
 800997e:	461a      	mov	r2, r3
 8009980:	d30b      	bcc.n	800999a <quorem+0x100>
 8009982:	613c      	str	r4, [r7, #16]
 8009984:	3601      	adds	r6, #1
 8009986:	4630      	mov	r0, r6
 8009988:	b003      	add	sp, #12
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	3b04      	subs	r3, #4
 8009992:	2a00      	cmp	r2, #0
 8009994:	d1cb      	bne.n	800992e <quorem+0x94>
 8009996:	3c01      	subs	r4, #1
 8009998:	e7c6      	b.n	8009928 <quorem+0x8e>
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	3b04      	subs	r3, #4
 800999e:	2a00      	cmp	r2, #0
 80099a0:	d1ef      	bne.n	8009982 <quorem+0xe8>
 80099a2:	3c01      	subs	r4, #1
 80099a4:	e7ea      	b.n	800997c <quorem+0xe2>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e7ee      	b.n	8009988 <quorem+0xee>
 80099aa:	0000      	movs	r0, r0
 80099ac:	0000      	movs	r0, r0
	...

080099b0 <_dtoa_r>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	69c7      	ldr	r7, [r0, #28]
 80099b6:	b099      	sub	sp, #100	@ 0x64
 80099b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099bc:	ec55 4b10 	vmov	r4, r5, d0
 80099c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80099c4:	4683      	mov	fp, r0
 80099c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80099c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ca:	b97f      	cbnz	r7, 80099ec <_dtoa_r+0x3c>
 80099cc:	2010      	movs	r0, #16
 80099ce:	f000 fdfd 	bl	800a5cc <malloc>
 80099d2:	4602      	mov	r2, r0
 80099d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80099d8:	b920      	cbnz	r0, 80099e4 <_dtoa_r+0x34>
 80099da:	4ba7      	ldr	r3, [pc, #668]	@ (8009c78 <_dtoa_r+0x2c8>)
 80099dc:	21ef      	movs	r1, #239	@ 0xef
 80099de:	48a7      	ldr	r0, [pc, #668]	@ (8009c7c <_dtoa_r+0x2cc>)
 80099e0:	f001 fcbc 	bl	800b35c <__assert_func>
 80099e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099e8:	6007      	str	r7, [r0, #0]
 80099ea:	60c7      	str	r7, [r0, #12]
 80099ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099f0:	6819      	ldr	r1, [r3, #0]
 80099f2:	b159      	cbz	r1, 8009a0c <_dtoa_r+0x5c>
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	604a      	str	r2, [r1, #4]
 80099f8:	2301      	movs	r3, #1
 80099fa:	4093      	lsls	r3, r2
 80099fc:	608b      	str	r3, [r1, #8]
 80099fe:	4658      	mov	r0, fp
 8009a00:	f000 feda 	bl	800a7b8 <_Bfree>
 8009a04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	1e2b      	subs	r3, r5, #0
 8009a0e:	bfb9      	ittee	lt
 8009a10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a14:	9303      	strlt	r3, [sp, #12]
 8009a16:	2300      	movge	r3, #0
 8009a18:	6033      	strge	r3, [r6, #0]
 8009a1a:	9f03      	ldr	r7, [sp, #12]
 8009a1c:	4b98      	ldr	r3, [pc, #608]	@ (8009c80 <_dtoa_r+0x2d0>)
 8009a1e:	bfbc      	itt	lt
 8009a20:	2201      	movlt	r2, #1
 8009a22:	6032      	strlt	r2, [r6, #0]
 8009a24:	43bb      	bics	r3, r7
 8009a26:	d112      	bne.n	8009a4e <_dtoa_r+0x9e>
 8009a28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a34:	4323      	orrs	r3, r4
 8009a36:	f000 854d 	beq.w	800a4d4 <_dtoa_r+0xb24>
 8009a3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c94 <_dtoa_r+0x2e4>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 854f 	beq.w	800a4e4 <_dtoa_r+0xb34>
 8009a46:	f10a 0303 	add.w	r3, sl, #3
 8009a4a:	f000 bd49 	b.w	800a4e0 <_dtoa_r+0xb30>
 8009a4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	ec51 0b17 	vmov	r0, r1, d7
 8009a58:	2300      	movs	r3, #0
 8009a5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a5e:	f7f7 f85b 	bl	8000b18 <__aeabi_dcmpeq>
 8009a62:	4680      	mov	r8, r0
 8009a64:	b158      	cbz	r0, 8009a7e <_dtoa_r+0xce>
 8009a66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a68:	2301      	movs	r3, #1
 8009a6a:	6013      	str	r3, [r2, #0]
 8009a6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a6e:	b113      	cbz	r3, 8009a76 <_dtoa_r+0xc6>
 8009a70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a72:	4b84      	ldr	r3, [pc, #528]	@ (8009c84 <_dtoa_r+0x2d4>)
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009c98 <_dtoa_r+0x2e8>
 8009a7a:	f000 bd33 	b.w	800a4e4 <_dtoa_r+0xb34>
 8009a7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a82:	aa16      	add	r2, sp, #88	@ 0x58
 8009a84:	a917      	add	r1, sp, #92	@ 0x5c
 8009a86:	4658      	mov	r0, fp
 8009a88:	f001 f980 	bl	800ad8c <__d2b>
 8009a8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a90:	4681      	mov	r9, r0
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	d077      	beq.n	8009b86 <_dtoa_r+0x1d6>
 8009a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009aa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009aac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4b74      	ldr	r3, [pc, #464]	@ (8009c88 <_dtoa_r+0x2d8>)
 8009ab6:	f7f6 fc0f 	bl	80002d8 <__aeabi_dsub>
 8009aba:	a369      	add	r3, pc, #420	@ (adr r3, 8009c60 <_dtoa_r+0x2b0>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fdc2 	bl	8000648 <__aeabi_dmul>
 8009ac4:	a368      	add	r3, pc, #416	@ (adr r3, 8009c68 <_dtoa_r+0x2b8>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fc07 	bl	80002dc <__adddf3>
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	f7f6 fd4e 	bl	8000574 <__aeabi_i2d>
 8009ad8:	a365      	add	r3, pc, #404	@ (adr r3, 8009c70 <_dtoa_r+0x2c0>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7f6 fdb3 	bl	8000648 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7f6 fbf7 	bl	80002dc <__adddf3>
 8009aee:	4604      	mov	r4, r0
 8009af0:	460d      	mov	r5, r1
 8009af2:	f7f7 f859 	bl	8000ba8 <__aeabi_d2iz>
 8009af6:	2200      	movs	r2, #0
 8009af8:	4607      	mov	r7, r0
 8009afa:	2300      	movs	r3, #0
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	f7f7 f814 	bl	8000b2c <__aeabi_dcmplt>
 8009b04:	b140      	cbz	r0, 8009b18 <_dtoa_r+0x168>
 8009b06:	4638      	mov	r0, r7
 8009b08:	f7f6 fd34 	bl	8000574 <__aeabi_i2d>
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	462b      	mov	r3, r5
 8009b10:	f7f7 f802 	bl	8000b18 <__aeabi_dcmpeq>
 8009b14:	b900      	cbnz	r0, 8009b18 <_dtoa_r+0x168>
 8009b16:	3f01      	subs	r7, #1
 8009b18:	2f16      	cmp	r7, #22
 8009b1a:	d851      	bhi.n	8009bc0 <_dtoa_r+0x210>
 8009b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8009c8c <_dtoa_r+0x2dc>)
 8009b1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b2a:	f7f6 ffff 	bl	8000b2c <__aeabi_dcmplt>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d048      	beq.n	8009bc4 <_dtoa_r+0x214>
 8009b32:	3f01      	subs	r7, #1
 8009b34:	2300      	movs	r3, #0
 8009b36:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b3a:	1b9b      	subs	r3, r3, r6
 8009b3c:	1e5a      	subs	r2, r3, #1
 8009b3e:	bf44      	itt	mi
 8009b40:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b44:	2300      	movmi	r3, #0
 8009b46:	9208      	str	r2, [sp, #32]
 8009b48:	bf54      	ite	pl
 8009b4a:	f04f 0800 	movpl.w	r8, #0
 8009b4e:	9308      	strmi	r3, [sp, #32]
 8009b50:	2f00      	cmp	r7, #0
 8009b52:	db39      	blt.n	8009bc8 <_dtoa_r+0x218>
 8009b54:	9b08      	ldr	r3, [sp, #32]
 8009b56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b58:	443b      	add	r3, r7
 8009b5a:	9308      	str	r3, [sp, #32]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b62:	2b09      	cmp	r3, #9
 8009b64:	d864      	bhi.n	8009c30 <_dtoa_r+0x280>
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	bfc4      	itt	gt
 8009b6a:	3b04      	subgt	r3, #4
 8009b6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b70:	f1a3 0302 	sub.w	r3, r3, #2
 8009b74:	bfcc      	ite	gt
 8009b76:	2400      	movgt	r4, #0
 8009b78:	2401      	movle	r4, #1
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d863      	bhi.n	8009c46 <_dtoa_r+0x296>
 8009b7e:	e8df f003 	tbb	[pc, r3]
 8009b82:	372a      	.short	0x372a
 8009b84:	5535      	.short	0x5535
 8009b86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009b8a:	441e      	add	r6, r3
 8009b8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	bfc1      	itttt	gt
 8009b94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b98:	409f      	lslgt	r7, r3
 8009b9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009ba2:	bfd6      	itet	le
 8009ba4:	f1c3 0320 	rsble	r3, r3, #32
 8009ba8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009bac:	fa04 f003 	lslle.w	r0, r4, r3
 8009bb0:	f7f6 fcd0 	bl	8000554 <__aeabi_ui2d>
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009bba:	3e01      	subs	r6, #1
 8009bbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009bbe:	e777      	b.n	8009ab0 <_dtoa_r+0x100>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e7b8      	b.n	8009b36 <_dtoa_r+0x186>
 8009bc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009bc6:	e7b7      	b.n	8009b38 <_dtoa_r+0x188>
 8009bc8:	427b      	negs	r3, r7
 8009bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bcc:	2300      	movs	r3, #0
 8009bce:	eba8 0807 	sub.w	r8, r8, r7
 8009bd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bd4:	e7c4      	b.n	8009b60 <_dtoa_r+0x1b0>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dc35      	bgt.n	8009c4c <_dtoa_r+0x29c>
 8009be0:	2301      	movs	r3, #1
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	9307      	str	r3, [sp, #28]
 8009be6:	461a      	mov	r2, r3
 8009be8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bea:	e00b      	b.n	8009c04 <_dtoa_r+0x254>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e7f3      	b.n	8009bd8 <_dtoa_r+0x228>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	9307      	str	r3, [sp, #28]
 8009c00:	bfb8      	it	lt
 8009c02:	2301      	movlt	r3, #1
 8009c04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c08:	2100      	movs	r1, #0
 8009c0a:	2204      	movs	r2, #4
 8009c0c:	f102 0514 	add.w	r5, r2, #20
 8009c10:	429d      	cmp	r5, r3
 8009c12:	d91f      	bls.n	8009c54 <_dtoa_r+0x2a4>
 8009c14:	6041      	str	r1, [r0, #4]
 8009c16:	4658      	mov	r0, fp
 8009c18:	f000 fd8e 	bl	800a738 <_Balloc>
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d13c      	bne.n	8009c9c <_dtoa_r+0x2ec>
 8009c22:	4b1b      	ldr	r3, [pc, #108]	@ (8009c90 <_dtoa_r+0x2e0>)
 8009c24:	4602      	mov	r2, r0
 8009c26:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c2a:	e6d8      	b.n	80099de <_dtoa_r+0x2e>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e7e0      	b.n	8009bf2 <_dtoa_r+0x242>
 8009c30:	2401      	movs	r4, #1
 8009c32:	2300      	movs	r3, #0
 8009c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c38:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	2200      	movs	r2, #0
 8009c42:	2312      	movs	r3, #18
 8009c44:	e7d0      	b.n	8009be8 <_dtoa_r+0x238>
 8009c46:	2301      	movs	r3, #1
 8009c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c4a:	e7f5      	b.n	8009c38 <_dtoa_r+0x288>
 8009c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	9307      	str	r3, [sp, #28]
 8009c52:	e7d7      	b.n	8009c04 <_dtoa_r+0x254>
 8009c54:	3101      	adds	r1, #1
 8009c56:	0052      	lsls	r2, r2, #1
 8009c58:	e7d8      	b.n	8009c0c <_dtoa_r+0x25c>
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w
 8009c60:	636f4361 	.word	0x636f4361
 8009c64:	3fd287a7 	.word	0x3fd287a7
 8009c68:	8b60c8b3 	.word	0x8b60c8b3
 8009c6c:	3fc68a28 	.word	0x3fc68a28
 8009c70:	509f79fb 	.word	0x509f79fb
 8009c74:	3fd34413 	.word	0x3fd34413
 8009c78:	0800b842 	.word	0x0800b842
 8009c7c:	0800b859 	.word	0x0800b859
 8009c80:	7ff00000 	.word	0x7ff00000
 8009c84:	0800b812 	.word	0x0800b812
 8009c88:	3ff80000 	.word	0x3ff80000
 8009c8c:	0800b950 	.word	0x0800b950
 8009c90:	0800b8b1 	.word	0x0800b8b1
 8009c94:	0800b83e 	.word	0x0800b83e
 8009c98:	0800b811 	.word	0x0800b811
 8009c9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ca0:	6018      	str	r0, [r3, #0]
 8009ca2:	9b07      	ldr	r3, [sp, #28]
 8009ca4:	2b0e      	cmp	r3, #14
 8009ca6:	f200 80a4 	bhi.w	8009df2 <_dtoa_r+0x442>
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	f000 80a1 	beq.w	8009df2 <_dtoa_r+0x442>
 8009cb0:	2f00      	cmp	r7, #0
 8009cb2:	dd33      	ble.n	8009d1c <_dtoa_r+0x36c>
 8009cb4:	4bad      	ldr	r3, [pc, #692]	@ (8009f6c <_dtoa_r+0x5bc>)
 8009cb6:	f007 020f 	and.w	r2, r7, #15
 8009cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cbe:	ed93 7b00 	vldr	d7, [r3]
 8009cc2:	05f8      	lsls	r0, r7, #23
 8009cc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009cc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ccc:	d516      	bpl.n	8009cfc <_dtoa_r+0x34c>
 8009cce:	4ba8      	ldr	r3, [pc, #672]	@ (8009f70 <_dtoa_r+0x5c0>)
 8009cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cd8:	f7f6 fde0 	bl	800089c <__aeabi_ddiv>
 8009cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce0:	f004 040f 	and.w	r4, r4, #15
 8009ce4:	2603      	movs	r6, #3
 8009ce6:	4da2      	ldr	r5, [pc, #648]	@ (8009f70 <_dtoa_r+0x5c0>)
 8009ce8:	b954      	cbnz	r4, 8009d00 <_dtoa_r+0x350>
 8009cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf2:	f7f6 fdd3 	bl	800089c <__aeabi_ddiv>
 8009cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cfa:	e028      	b.n	8009d4e <_dtoa_r+0x39e>
 8009cfc:	2602      	movs	r6, #2
 8009cfe:	e7f2      	b.n	8009ce6 <_dtoa_r+0x336>
 8009d00:	07e1      	lsls	r1, r4, #31
 8009d02:	d508      	bpl.n	8009d16 <_dtoa_r+0x366>
 8009d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d0c:	f7f6 fc9c 	bl	8000648 <__aeabi_dmul>
 8009d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d14:	3601      	adds	r6, #1
 8009d16:	1064      	asrs	r4, r4, #1
 8009d18:	3508      	adds	r5, #8
 8009d1a:	e7e5      	b.n	8009ce8 <_dtoa_r+0x338>
 8009d1c:	f000 80d2 	beq.w	8009ec4 <_dtoa_r+0x514>
 8009d20:	427c      	negs	r4, r7
 8009d22:	4b92      	ldr	r3, [pc, #584]	@ (8009f6c <_dtoa_r+0x5bc>)
 8009d24:	4d92      	ldr	r5, [pc, #584]	@ (8009f70 <_dtoa_r+0x5c0>)
 8009d26:	f004 020f 	and.w	r2, r4, #15
 8009d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d36:	f7f6 fc87 	bl	8000648 <__aeabi_dmul>
 8009d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d3e:	1124      	asrs	r4, r4, #4
 8009d40:	2300      	movs	r3, #0
 8009d42:	2602      	movs	r6, #2
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	f040 80b2 	bne.w	8009eae <_dtoa_r+0x4fe>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1d3      	bne.n	8009cf6 <_dtoa_r+0x346>
 8009d4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 80b7 	beq.w	8009ec8 <_dtoa_r+0x518>
 8009d5a:	4b86      	ldr	r3, [pc, #536]	@ (8009f74 <_dtoa_r+0x5c4>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4620      	mov	r0, r4
 8009d60:	4629      	mov	r1, r5
 8009d62:	f7f6 fee3 	bl	8000b2c <__aeabi_dcmplt>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f000 80ae 	beq.w	8009ec8 <_dtoa_r+0x518>
 8009d6c:	9b07      	ldr	r3, [sp, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 80aa 	beq.w	8009ec8 <_dtoa_r+0x518>
 8009d74:	9b00      	ldr	r3, [sp, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dd37      	ble.n	8009dea <_dtoa_r+0x43a>
 8009d7a:	1e7b      	subs	r3, r7, #1
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4b7d      	ldr	r3, [pc, #500]	@ (8009f78 <_dtoa_r+0x5c8>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	4629      	mov	r1, r5
 8009d86:	f7f6 fc5f 	bl	8000648 <__aeabi_dmul>
 8009d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d8e:	9c00      	ldr	r4, [sp, #0]
 8009d90:	3601      	adds	r6, #1
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7f6 fbee 	bl	8000574 <__aeabi_i2d>
 8009d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d9c:	f7f6 fc54 	bl	8000648 <__aeabi_dmul>
 8009da0:	4b76      	ldr	r3, [pc, #472]	@ (8009f7c <_dtoa_r+0x5cc>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	f7f6 fa9a 	bl	80002dc <__adddf3>
 8009da8:	4605      	mov	r5, r0
 8009daa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	f040 808d 	bne.w	8009ece <_dtoa_r+0x51e>
 8009db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db8:	4b71      	ldr	r3, [pc, #452]	@ (8009f80 <_dtoa_r+0x5d0>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f7f6 fa8c 	bl	80002d8 <__aeabi_dsub>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dc8:	462a      	mov	r2, r5
 8009dca:	4633      	mov	r3, r6
 8009dcc:	f7f6 fecc 	bl	8000b68 <__aeabi_dcmpgt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f040 828b 	bne.w	800a2ec <_dtoa_r+0x93c>
 8009dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dda:	462a      	mov	r2, r5
 8009ddc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009de0:	f7f6 fea4 	bl	8000b2c <__aeabi_dcmplt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f040 8128 	bne.w	800a03a <_dtoa_r+0x68a>
 8009dea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009dee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009df2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f2c0 815a 	blt.w	800a0ae <_dtoa_r+0x6fe>
 8009dfa:	2f0e      	cmp	r7, #14
 8009dfc:	f300 8157 	bgt.w	800a0ae <_dtoa_r+0x6fe>
 8009e00:	4b5a      	ldr	r3, [pc, #360]	@ (8009f6c <_dtoa_r+0x5bc>)
 8009e02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e06:	ed93 7b00 	vldr	d7, [r3]
 8009e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	ed8d 7b00 	vstr	d7, [sp]
 8009e12:	da03      	bge.n	8009e1c <_dtoa_r+0x46c>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f340 8101 	ble.w	800a01e <_dtoa_r+0x66e>
 8009e1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e20:	4656      	mov	r6, sl
 8009e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e26:	4620      	mov	r0, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	f7f6 fd37 	bl	800089c <__aeabi_ddiv>
 8009e2e:	f7f6 febb 	bl	8000ba8 <__aeabi_d2iz>
 8009e32:	4680      	mov	r8, r0
 8009e34:	f7f6 fb9e 	bl	8000574 <__aeabi_i2d>
 8009e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e3c:	f7f6 fc04 	bl	8000648 <__aeabi_dmul>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e4c:	f7f6 fa44 	bl	80002d8 <__aeabi_dsub>
 8009e50:	f806 4b01 	strb.w	r4, [r6], #1
 8009e54:	9d07      	ldr	r5, [sp, #28]
 8009e56:	eba6 040a 	sub.w	r4, r6, sl
 8009e5a:	42a5      	cmp	r5, r4
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	f040 8117 	bne.w	800a092 <_dtoa_r+0x6e2>
 8009e64:	f7f6 fa3a 	bl	80002dc <__adddf3>
 8009e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	460d      	mov	r5, r1
 8009e70:	f7f6 fe7a 	bl	8000b68 <__aeabi_dcmpgt>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	f040 80f9 	bne.w	800a06c <_dtoa_r+0x6bc>
 8009e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 fe49 	bl	8000b18 <__aeabi_dcmpeq>
 8009e86:	b118      	cbz	r0, 8009e90 <_dtoa_r+0x4e0>
 8009e88:	f018 0f01 	tst.w	r8, #1
 8009e8c:	f040 80ee 	bne.w	800a06c <_dtoa_r+0x6bc>
 8009e90:	4649      	mov	r1, r9
 8009e92:	4658      	mov	r0, fp
 8009e94:	f000 fc90 	bl	800a7b8 <_Bfree>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	7033      	strb	r3, [r6, #0]
 8009e9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e9e:	3701      	adds	r7, #1
 8009ea0:	601f      	str	r7, [r3, #0]
 8009ea2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 831d 	beq.w	800a4e4 <_dtoa_r+0xb34>
 8009eaa:	601e      	str	r6, [r3, #0]
 8009eac:	e31a      	b.n	800a4e4 <_dtoa_r+0xb34>
 8009eae:	07e2      	lsls	r2, r4, #31
 8009eb0:	d505      	bpl.n	8009ebe <_dtoa_r+0x50e>
 8009eb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009eb6:	f7f6 fbc7 	bl	8000648 <__aeabi_dmul>
 8009eba:	3601      	adds	r6, #1
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	1064      	asrs	r4, r4, #1
 8009ec0:	3508      	adds	r5, #8
 8009ec2:	e73f      	b.n	8009d44 <_dtoa_r+0x394>
 8009ec4:	2602      	movs	r6, #2
 8009ec6:	e742      	b.n	8009d4e <_dtoa_r+0x39e>
 8009ec8:	9c07      	ldr	r4, [sp, #28]
 8009eca:	9704      	str	r7, [sp, #16]
 8009ecc:	e761      	b.n	8009d92 <_dtoa_r+0x3e2>
 8009ece:	4b27      	ldr	r3, [pc, #156]	@ (8009f6c <_dtoa_r+0x5bc>)
 8009ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ed6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009eda:	4454      	add	r4, sl
 8009edc:	2900      	cmp	r1, #0
 8009ede:	d053      	beq.n	8009f88 <_dtoa_r+0x5d8>
 8009ee0:	4928      	ldr	r1, [pc, #160]	@ (8009f84 <_dtoa_r+0x5d4>)
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	f7f6 fcda 	bl	800089c <__aeabi_ddiv>
 8009ee8:	4633      	mov	r3, r6
 8009eea:	462a      	mov	r2, r5
 8009eec:	f7f6 f9f4 	bl	80002d8 <__aeabi_dsub>
 8009ef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ef4:	4656      	mov	r6, sl
 8009ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efa:	f7f6 fe55 	bl	8000ba8 <__aeabi_d2iz>
 8009efe:	4605      	mov	r5, r0
 8009f00:	f7f6 fb38 	bl	8000574 <__aeabi_i2d>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0c:	f7f6 f9e4 	bl	80002d8 <__aeabi_dsub>
 8009f10:	3530      	adds	r5, #48	@ 0x30
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f1a:	f806 5b01 	strb.w	r5, [r6], #1
 8009f1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f22:	f7f6 fe03 	bl	8000b2c <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d171      	bne.n	800a00e <_dtoa_r+0x65e>
 8009f2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f2e:	4911      	ldr	r1, [pc, #68]	@ (8009f74 <_dtoa_r+0x5c4>)
 8009f30:	2000      	movs	r0, #0
 8009f32:	f7f6 f9d1 	bl	80002d8 <__aeabi_dsub>
 8009f36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f3a:	f7f6 fdf7 	bl	8000b2c <__aeabi_dcmplt>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f040 8095 	bne.w	800a06e <_dtoa_r+0x6be>
 8009f44:	42a6      	cmp	r6, r4
 8009f46:	f43f af50 	beq.w	8009dea <_dtoa_r+0x43a>
 8009f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f78 <_dtoa_r+0x5c8>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	f7f6 fb79 	bl	8000648 <__aeabi_dmul>
 8009f56:	4b08      	ldr	r3, [pc, #32]	@ (8009f78 <_dtoa_r+0x5c8>)
 8009f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f62:	f7f6 fb71 	bl	8000648 <__aeabi_dmul>
 8009f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f6a:	e7c4      	b.n	8009ef6 <_dtoa_r+0x546>
 8009f6c:	0800b950 	.word	0x0800b950
 8009f70:	0800b928 	.word	0x0800b928
 8009f74:	3ff00000 	.word	0x3ff00000
 8009f78:	40240000 	.word	0x40240000
 8009f7c:	401c0000 	.word	0x401c0000
 8009f80:	40140000 	.word	0x40140000
 8009f84:	3fe00000 	.word	0x3fe00000
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f7f6 fb5c 	bl	8000648 <__aeabi_dmul>
 8009f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f94:	9415      	str	r4, [sp, #84]	@ 0x54
 8009f96:	4656      	mov	r6, sl
 8009f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9c:	f7f6 fe04 	bl	8000ba8 <__aeabi_d2iz>
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	f7f6 fae7 	bl	8000574 <__aeabi_i2d>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fae:	f7f6 f993 	bl	80002d8 <__aeabi_dsub>
 8009fb2:	3530      	adds	r5, #48	@ 0x30
 8009fb4:	f806 5b01 	strb.w	r5, [r6], #1
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	42a6      	cmp	r6, r4
 8009fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	d124      	bne.n	800a012 <_dtoa_r+0x662>
 8009fc8:	4bac      	ldr	r3, [pc, #688]	@ (800a27c <_dtoa_r+0x8cc>)
 8009fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fce:	f7f6 f985 	bl	80002dc <__adddf3>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fda:	f7f6 fdc5 	bl	8000b68 <__aeabi_dcmpgt>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d145      	bne.n	800a06e <_dtoa_r+0x6be>
 8009fe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fe6:	49a5      	ldr	r1, [pc, #660]	@ (800a27c <_dtoa_r+0x8cc>)
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f7f6 f975 	bl	80002d8 <__aeabi_dsub>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff6:	f7f6 fd99 	bl	8000b2c <__aeabi_dcmplt>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	f43f aef5 	beq.w	8009dea <_dtoa_r+0x43a>
 800a000:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a002:	1e73      	subs	r3, r6, #1
 800a004:	9315      	str	r3, [sp, #84]	@ 0x54
 800a006:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a00a:	2b30      	cmp	r3, #48	@ 0x30
 800a00c:	d0f8      	beq.n	800a000 <_dtoa_r+0x650>
 800a00e:	9f04      	ldr	r7, [sp, #16]
 800a010:	e73e      	b.n	8009e90 <_dtoa_r+0x4e0>
 800a012:	4b9b      	ldr	r3, [pc, #620]	@ (800a280 <_dtoa_r+0x8d0>)
 800a014:	f7f6 fb18 	bl	8000648 <__aeabi_dmul>
 800a018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a01c:	e7bc      	b.n	8009f98 <_dtoa_r+0x5e8>
 800a01e:	d10c      	bne.n	800a03a <_dtoa_r+0x68a>
 800a020:	4b98      	ldr	r3, [pc, #608]	@ (800a284 <_dtoa_r+0x8d4>)
 800a022:	2200      	movs	r2, #0
 800a024:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a028:	f7f6 fb0e 	bl	8000648 <__aeabi_dmul>
 800a02c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a030:	f7f6 fd90 	bl	8000b54 <__aeabi_dcmpge>
 800a034:	2800      	cmp	r0, #0
 800a036:	f000 8157 	beq.w	800a2e8 <_dtoa_r+0x938>
 800a03a:	2400      	movs	r4, #0
 800a03c:	4625      	mov	r5, r4
 800a03e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a040:	43db      	mvns	r3, r3
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	4656      	mov	r6, sl
 800a046:	2700      	movs	r7, #0
 800a048:	4621      	mov	r1, r4
 800a04a:	4658      	mov	r0, fp
 800a04c:	f000 fbb4 	bl	800a7b8 <_Bfree>
 800a050:	2d00      	cmp	r5, #0
 800a052:	d0dc      	beq.n	800a00e <_dtoa_r+0x65e>
 800a054:	b12f      	cbz	r7, 800a062 <_dtoa_r+0x6b2>
 800a056:	42af      	cmp	r7, r5
 800a058:	d003      	beq.n	800a062 <_dtoa_r+0x6b2>
 800a05a:	4639      	mov	r1, r7
 800a05c:	4658      	mov	r0, fp
 800a05e:	f000 fbab 	bl	800a7b8 <_Bfree>
 800a062:	4629      	mov	r1, r5
 800a064:	4658      	mov	r0, fp
 800a066:	f000 fba7 	bl	800a7b8 <_Bfree>
 800a06a:	e7d0      	b.n	800a00e <_dtoa_r+0x65e>
 800a06c:	9704      	str	r7, [sp, #16]
 800a06e:	4633      	mov	r3, r6
 800a070:	461e      	mov	r6, r3
 800a072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a076:	2a39      	cmp	r2, #57	@ 0x39
 800a078:	d107      	bne.n	800a08a <_dtoa_r+0x6da>
 800a07a:	459a      	cmp	sl, r3
 800a07c:	d1f8      	bne.n	800a070 <_dtoa_r+0x6c0>
 800a07e:	9a04      	ldr	r2, [sp, #16]
 800a080:	3201      	adds	r2, #1
 800a082:	9204      	str	r2, [sp, #16]
 800a084:	2230      	movs	r2, #48	@ 0x30
 800a086:	f88a 2000 	strb.w	r2, [sl]
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	3201      	adds	r2, #1
 800a08e:	701a      	strb	r2, [r3, #0]
 800a090:	e7bd      	b.n	800a00e <_dtoa_r+0x65e>
 800a092:	4b7b      	ldr	r3, [pc, #492]	@ (800a280 <_dtoa_r+0x8d0>)
 800a094:	2200      	movs	r2, #0
 800a096:	f7f6 fad7 	bl	8000648 <__aeabi_dmul>
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	f7f6 fd39 	bl	8000b18 <__aeabi_dcmpeq>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f43f aebb 	beq.w	8009e22 <_dtoa_r+0x472>
 800a0ac:	e6f0      	b.n	8009e90 <_dtoa_r+0x4e0>
 800a0ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	f000 80db 	beq.w	800a26c <_dtoa_r+0x8bc>
 800a0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0b8:	2a01      	cmp	r2, #1
 800a0ba:	f300 80bf 	bgt.w	800a23c <_dtoa_r+0x88c>
 800a0be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0c0:	2a00      	cmp	r2, #0
 800a0c2:	f000 80b7 	beq.w	800a234 <_dtoa_r+0x884>
 800a0c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0cc:	4646      	mov	r6, r8
 800a0ce:	9a08      	ldr	r2, [sp, #32]
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	441a      	add	r2, r3
 800a0d4:	4658      	mov	r0, fp
 800a0d6:	4498      	add	r8, r3
 800a0d8:	9208      	str	r2, [sp, #32]
 800a0da:	f000 fc21 	bl	800a920 <__i2b>
 800a0de:	4605      	mov	r5, r0
 800a0e0:	b15e      	cbz	r6, 800a0fa <_dtoa_r+0x74a>
 800a0e2:	9b08      	ldr	r3, [sp, #32]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd08      	ble.n	800a0fa <_dtoa_r+0x74a>
 800a0e8:	42b3      	cmp	r3, r6
 800a0ea:	9a08      	ldr	r2, [sp, #32]
 800a0ec:	bfa8      	it	ge
 800a0ee:	4633      	movge	r3, r6
 800a0f0:	eba8 0803 	sub.w	r8, r8, r3
 800a0f4:	1af6      	subs	r6, r6, r3
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	9308      	str	r3, [sp, #32]
 800a0fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0fc:	b1f3      	cbz	r3, 800a13c <_dtoa_r+0x78c>
 800a0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 80b7 	beq.w	800a274 <_dtoa_r+0x8c4>
 800a106:	b18c      	cbz	r4, 800a12c <_dtoa_r+0x77c>
 800a108:	4629      	mov	r1, r5
 800a10a:	4622      	mov	r2, r4
 800a10c:	4658      	mov	r0, fp
 800a10e:	f000 fcc7 	bl	800aaa0 <__pow5mult>
 800a112:	464a      	mov	r2, r9
 800a114:	4601      	mov	r1, r0
 800a116:	4605      	mov	r5, r0
 800a118:	4658      	mov	r0, fp
 800a11a:	f000 fc17 	bl	800a94c <__multiply>
 800a11e:	4649      	mov	r1, r9
 800a120:	9004      	str	r0, [sp, #16]
 800a122:	4658      	mov	r0, fp
 800a124:	f000 fb48 	bl	800a7b8 <_Bfree>
 800a128:	9b04      	ldr	r3, [sp, #16]
 800a12a:	4699      	mov	r9, r3
 800a12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a12e:	1b1a      	subs	r2, r3, r4
 800a130:	d004      	beq.n	800a13c <_dtoa_r+0x78c>
 800a132:	4649      	mov	r1, r9
 800a134:	4658      	mov	r0, fp
 800a136:	f000 fcb3 	bl	800aaa0 <__pow5mult>
 800a13a:	4681      	mov	r9, r0
 800a13c:	2101      	movs	r1, #1
 800a13e:	4658      	mov	r0, fp
 800a140:	f000 fbee 	bl	800a920 <__i2b>
 800a144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a146:	4604      	mov	r4, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 81cf 	beq.w	800a4ec <_dtoa_r+0xb3c>
 800a14e:	461a      	mov	r2, r3
 800a150:	4601      	mov	r1, r0
 800a152:	4658      	mov	r0, fp
 800a154:	f000 fca4 	bl	800aaa0 <__pow5mult>
 800a158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	4604      	mov	r4, r0
 800a15e:	f300 8095 	bgt.w	800a28c <_dtoa_r+0x8dc>
 800a162:	9b02      	ldr	r3, [sp, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 8087 	bne.w	800a278 <_dtoa_r+0x8c8>
 800a16a:	9b03      	ldr	r3, [sp, #12]
 800a16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 8089 	bne.w	800a288 <_dtoa_r+0x8d8>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a17c:	0d1b      	lsrs	r3, r3, #20
 800a17e:	051b      	lsls	r3, r3, #20
 800a180:	b12b      	cbz	r3, 800a18e <_dtoa_r+0x7de>
 800a182:	9b08      	ldr	r3, [sp, #32]
 800a184:	3301      	adds	r3, #1
 800a186:	9308      	str	r3, [sp, #32]
 800a188:	f108 0801 	add.w	r8, r8, #1
 800a18c:	2301      	movs	r3, #1
 800a18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 81b0 	beq.w	800a4f8 <_dtoa_r+0xb48>
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a19e:	6918      	ldr	r0, [r3, #16]
 800a1a0:	f000 fb72 	bl	800a888 <__hi0bits>
 800a1a4:	f1c0 0020 	rsb	r0, r0, #32
 800a1a8:	9b08      	ldr	r3, [sp, #32]
 800a1aa:	4418      	add	r0, r3
 800a1ac:	f010 001f 	ands.w	r0, r0, #31
 800a1b0:	d077      	beq.n	800a2a2 <_dtoa_r+0x8f2>
 800a1b2:	f1c0 0320 	rsb	r3, r0, #32
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	dd6b      	ble.n	800a292 <_dtoa_r+0x8e2>
 800a1ba:	9b08      	ldr	r3, [sp, #32]
 800a1bc:	f1c0 001c 	rsb	r0, r0, #28
 800a1c0:	4403      	add	r3, r0
 800a1c2:	4480      	add	r8, r0
 800a1c4:	4406      	add	r6, r0
 800a1c6:	9308      	str	r3, [sp, #32]
 800a1c8:	f1b8 0f00 	cmp.w	r8, #0
 800a1cc:	dd05      	ble.n	800a1da <_dtoa_r+0x82a>
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	4658      	mov	r0, fp
 800a1d4:	f000 fcbe 	bl	800ab54 <__lshift>
 800a1d8:	4681      	mov	r9, r0
 800a1da:	9b08      	ldr	r3, [sp, #32]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dd05      	ble.n	800a1ec <_dtoa_r+0x83c>
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4658      	mov	r0, fp
 800a1e6:	f000 fcb5 	bl	800ab54 <__lshift>
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d059      	beq.n	800a2a6 <_dtoa_r+0x8f6>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4648      	mov	r0, r9
 800a1f6:	f000 fd19 	bl	800ac2c <__mcmp>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	da53      	bge.n	800a2a6 <_dtoa_r+0x8f6>
 800a1fe:	1e7b      	subs	r3, r7, #1
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	4649      	mov	r1, r9
 800a204:	2300      	movs	r3, #0
 800a206:	220a      	movs	r2, #10
 800a208:	4658      	mov	r0, fp
 800a20a:	f000 faf7 	bl	800a7fc <__multadd>
 800a20e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a210:	4681      	mov	r9, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 8172 	beq.w	800a4fc <_dtoa_r+0xb4c>
 800a218:	2300      	movs	r3, #0
 800a21a:	4629      	mov	r1, r5
 800a21c:	220a      	movs	r2, #10
 800a21e:	4658      	mov	r0, fp
 800a220:	f000 faec 	bl	800a7fc <__multadd>
 800a224:	9b00      	ldr	r3, [sp, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	4605      	mov	r5, r0
 800a22a:	dc67      	bgt.n	800a2fc <_dtoa_r+0x94c>
 800a22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a22e:	2b02      	cmp	r3, #2
 800a230:	dc41      	bgt.n	800a2b6 <_dtoa_r+0x906>
 800a232:	e063      	b.n	800a2fc <_dtoa_r+0x94c>
 800a234:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a236:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a23a:	e746      	b.n	800a0ca <_dtoa_r+0x71a>
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	1e5c      	subs	r4, r3, #1
 800a240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a242:	42a3      	cmp	r3, r4
 800a244:	bfbf      	itttt	lt
 800a246:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a248:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a24a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a24c:	1ae3      	sublt	r3, r4, r3
 800a24e:	bfb4      	ite	lt
 800a250:	18d2      	addlt	r2, r2, r3
 800a252:	1b1c      	subge	r4, r3, r4
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	bfbc      	itt	lt
 800a258:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a25a:	2400      	movlt	r4, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfb5      	itete	lt
 800a260:	eba8 0603 	sublt.w	r6, r8, r3
 800a264:	9b07      	ldrge	r3, [sp, #28]
 800a266:	2300      	movlt	r3, #0
 800a268:	4646      	movge	r6, r8
 800a26a:	e730      	b.n	800a0ce <_dtoa_r+0x71e>
 800a26c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a26e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a270:	4646      	mov	r6, r8
 800a272:	e735      	b.n	800a0e0 <_dtoa_r+0x730>
 800a274:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a276:	e75c      	b.n	800a132 <_dtoa_r+0x782>
 800a278:	2300      	movs	r3, #0
 800a27a:	e788      	b.n	800a18e <_dtoa_r+0x7de>
 800a27c:	3fe00000 	.word	0x3fe00000
 800a280:	40240000 	.word	0x40240000
 800a284:	40140000 	.word	0x40140000
 800a288:	9b02      	ldr	r3, [sp, #8]
 800a28a:	e780      	b.n	800a18e <_dtoa_r+0x7de>
 800a28c:	2300      	movs	r3, #0
 800a28e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a290:	e782      	b.n	800a198 <_dtoa_r+0x7e8>
 800a292:	d099      	beq.n	800a1c8 <_dtoa_r+0x818>
 800a294:	9a08      	ldr	r2, [sp, #32]
 800a296:	331c      	adds	r3, #28
 800a298:	441a      	add	r2, r3
 800a29a:	4498      	add	r8, r3
 800a29c:	441e      	add	r6, r3
 800a29e:	9208      	str	r2, [sp, #32]
 800a2a0:	e792      	b.n	800a1c8 <_dtoa_r+0x818>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	e7f6      	b.n	800a294 <_dtoa_r+0x8e4>
 800a2a6:	9b07      	ldr	r3, [sp, #28]
 800a2a8:	9704      	str	r7, [sp, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dc20      	bgt.n	800a2f0 <_dtoa_r+0x940>
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	dd1e      	ble.n	800a2f4 <_dtoa_r+0x944>
 800a2b6:	9b00      	ldr	r3, [sp, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f47f aec0 	bne.w	800a03e <_dtoa_r+0x68e>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	2205      	movs	r2, #5
 800a2c2:	4658      	mov	r0, fp
 800a2c4:	f000 fa9a 	bl	800a7fc <__multadd>
 800a2c8:	4601      	mov	r1, r0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4648      	mov	r0, r9
 800a2ce:	f000 fcad 	bl	800ac2c <__mcmp>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f77f aeb3 	ble.w	800a03e <_dtoa_r+0x68e>
 800a2d8:	4656      	mov	r6, sl
 800a2da:	2331      	movs	r3, #49	@ 0x31
 800a2dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9304      	str	r3, [sp, #16]
 800a2e6:	e6ae      	b.n	800a046 <_dtoa_r+0x696>
 800a2e8:	9c07      	ldr	r4, [sp, #28]
 800a2ea:	9704      	str	r7, [sp, #16]
 800a2ec:	4625      	mov	r5, r4
 800a2ee:	e7f3      	b.n	800a2d8 <_dtoa_r+0x928>
 800a2f0:	9b07      	ldr	r3, [sp, #28]
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 8104 	beq.w	800a504 <_dtoa_r+0xb54>
 800a2fc:	2e00      	cmp	r6, #0
 800a2fe:	dd05      	ble.n	800a30c <_dtoa_r+0x95c>
 800a300:	4629      	mov	r1, r5
 800a302:	4632      	mov	r2, r6
 800a304:	4658      	mov	r0, fp
 800a306:	f000 fc25 	bl	800ab54 <__lshift>
 800a30a:	4605      	mov	r5, r0
 800a30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d05a      	beq.n	800a3c8 <_dtoa_r+0xa18>
 800a312:	6869      	ldr	r1, [r5, #4]
 800a314:	4658      	mov	r0, fp
 800a316:	f000 fa0f 	bl	800a738 <_Balloc>
 800a31a:	4606      	mov	r6, r0
 800a31c:	b928      	cbnz	r0, 800a32a <_dtoa_r+0x97a>
 800a31e:	4b84      	ldr	r3, [pc, #528]	@ (800a530 <_dtoa_r+0xb80>)
 800a320:	4602      	mov	r2, r0
 800a322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a326:	f7ff bb5a 	b.w	80099de <_dtoa_r+0x2e>
 800a32a:	692a      	ldr	r2, [r5, #16]
 800a32c:	3202      	adds	r2, #2
 800a32e:	0092      	lsls	r2, r2, #2
 800a330:	f105 010c 	add.w	r1, r5, #12
 800a334:	300c      	adds	r0, #12
 800a336:	f001 f803 	bl	800b340 <memcpy>
 800a33a:	2201      	movs	r2, #1
 800a33c:	4631      	mov	r1, r6
 800a33e:	4658      	mov	r0, fp
 800a340:	f000 fc08 	bl	800ab54 <__lshift>
 800a344:	f10a 0301 	add.w	r3, sl, #1
 800a348:	9307      	str	r3, [sp, #28]
 800a34a:	9b00      	ldr	r3, [sp, #0]
 800a34c:	4453      	add	r3, sl
 800a34e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a350:	9b02      	ldr	r3, [sp, #8]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	462f      	mov	r7, r5
 800a358:	930a      	str	r3, [sp, #40]	@ 0x28
 800a35a:	4605      	mov	r5, r0
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	4621      	mov	r1, r4
 800a360:	3b01      	subs	r3, #1
 800a362:	4648      	mov	r0, r9
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	f7ff fa98 	bl	800989a <quorem>
 800a36a:	4639      	mov	r1, r7
 800a36c:	9002      	str	r0, [sp, #8]
 800a36e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a372:	4648      	mov	r0, r9
 800a374:	f000 fc5a 	bl	800ac2c <__mcmp>
 800a378:	462a      	mov	r2, r5
 800a37a:	9008      	str	r0, [sp, #32]
 800a37c:	4621      	mov	r1, r4
 800a37e:	4658      	mov	r0, fp
 800a380:	f000 fc70 	bl	800ac64 <__mdiff>
 800a384:	68c2      	ldr	r2, [r0, #12]
 800a386:	4606      	mov	r6, r0
 800a388:	bb02      	cbnz	r2, 800a3cc <_dtoa_r+0xa1c>
 800a38a:	4601      	mov	r1, r0
 800a38c:	4648      	mov	r0, r9
 800a38e:	f000 fc4d 	bl	800ac2c <__mcmp>
 800a392:	4602      	mov	r2, r0
 800a394:	4631      	mov	r1, r6
 800a396:	4658      	mov	r0, fp
 800a398:	920e      	str	r2, [sp, #56]	@ 0x38
 800a39a:	f000 fa0d 	bl	800a7b8 <_Bfree>
 800a39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3a2:	9e07      	ldr	r6, [sp, #28]
 800a3a4:	ea43 0102 	orr.w	r1, r3, r2
 800a3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3aa:	4319      	orrs	r1, r3
 800a3ac:	d110      	bne.n	800a3d0 <_dtoa_r+0xa20>
 800a3ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3b2:	d029      	beq.n	800a408 <_dtoa_r+0xa58>
 800a3b4:	9b08      	ldr	r3, [sp, #32]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	dd02      	ble.n	800a3c0 <_dtoa_r+0xa10>
 800a3ba:	9b02      	ldr	r3, [sp, #8]
 800a3bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3c0:	9b00      	ldr	r3, [sp, #0]
 800a3c2:	f883 8000 	strb.w	r8, [r3]
 800a3c6:	e63f      	b.n	800a048 <_dtoa_r+0x698>
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	e7bb      	b.n	800a344 <_dtoa_r+0x994>
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	e7e1      	b.n	800a394 <_dtoa_r+0x9e4>
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	db04      	blt.n	800a3e0 <_dtoa_r+0xa30>
 800a3d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3dc:	430b      	orrs	r3, r1
 800a3de:	d120      	bne.n	800a422 <_dtoa_r+0xa72>
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	dded      	ble.n	800a3c0 <_dtoa_r+0xa10>
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	4658      	mov	r0, fp
 800a3ea:	f000 fbb3 	bl	800ab54 <__lshift>
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	4681      	mov	r9, r0
 800a3f2:	f000 fc1b 	bl	800ac2c <__mcmp>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	dc03      	bgt.n	800a402 <_dtoa_r+0xa52>
 800a3fa:	d1e1      	bne.n	800a3c0 <_dtoa_r+0xa10>
 800a3fc:	f018 0f01 	tst.w	r8, #1
 800a400:	d0de      	beq.n	800a3c0 <_dtoa_r+0xa10>
 800a402:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a406:	d1d8      	bne.n	800a3ba <_dtoa_r+0xa0a>
 800a408:	9a00      	ldr	r2, [sp, #0]
 800a40a:	2339      	movs	r3, #57	@ 0x39
 800a40c:	7013      	strb	r3, [r2, #0]
 800a40e:	4633      	mov	r3, r6
 800a410:	461e      	mov	r6, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a418:	2a39      	cmp	r2, #57	@ 0x39
 800a41a:	d052      	beq.n	800a4c2 <_dtoa_r+0xb12>
 800a41c:	3201      	adds	r2, #1
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	e612      	b.n	800a048 <_dtoa_r+0x698>
 800a422:	2a00      	cmp	r2, #0
 800a424:	dd07      	ble.n	800a436 <_dtoa_r+0xa86>
 800a426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a42a:	d0ed      	beq.n	800a408 <_dtoa_r+0xa58>
 800a42c:	9a00      	ldr	r2, [sp, #0]
 800a42e:	f108 0301 	add.w	r3, r8, #1
 800a432:	7013      	strb	r3, [r2, #0]
 800a434:	e608      	b.n	800a048 <_dtoa_r+0x698>
 800a436:	9b07      	ldr	r3, [sp, #28]
 800a438:	9a07      	ldr	r2, [sp, #28]
 800a43a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a440:	4293      	cmp	r3, r2
 800a442:	d028      	beq.n	800a496 <_dtoa_r+0xae6>
 800a444:	4649      	mov	r1, r9
 800a446:	2300      	movs	r3, #0
 800a448:	220a      	movs	r2, #10
 800a44a:	4658      	mov	r0, fp
 800a44c:	f000 f9d6 	bl	800a7fc <__multadd>
 800a450:	42af      	cmp	r7, r5
 800a452:	4681      	mov	r9, r0
 800a454:	f04f 0300 	mov.w	r3, #0
 800a458:	f04f 020a 	mov.w	r2, #10
 800a45c:	4639      	mov	r1, r7
 800a45e:	4658      	mov	r0, fp
 800a460:	d107      	bne.n	800a472 <_dtoa_r+0xac2>
 800a462:	f000 f9cb 	bl	800a7fc <__multadd>
 800a466:	4607      	mov	r7, r0
 800a468:	4605      	mov	r5, r0
 800a46a:	9b07      	ldr	r3, [sp, #28]
 800a46c:	3301      	adds	r3, #1
 800a46e:	9307      	str	r3, [sp, #28]
 800a470:	e774      	b.n	800a35c <_dtoa_r+0x9ac>
 800a472:	f000 f9c3 	bl	800a7fc <__multadd>
 800a476:	4629      	mov	r1, r5
 800a478:	4607      	mov	r7, r0
 800a47a:	2300      	movs	r3, #0
 800a47c:	220a      	movs	r2, #10
 800a47e:	4658      	mov	r0, fp
 800a480:	f000 f9bc 	bl	800a7fc <__multadd>
 800a484:	4605      	mov	r5, r0
 800a486:	e7f0      	b.n	800a46a <_dtoa_r+0xaba>
 800a488:	9b00      	ldr	r3, [sp, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	bfcc      	ite	gt
 800a48e:	461e      	movgt	r6, r3
 800a490:	2601      	movle	r6, #1
 800a492:	4456      	add	r6, sl
 800a494:	2700      	movs	r7, #0
 800a496:	4649      	mov	r1, r9
 800a498:	2201      	movs	r2, #1
 800a49a:	4658      	mov	r0, fp
 800a49c:	f000 fb5a 	bl	800ab54 <__lshift>
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	4681      	mov	r9, r0
 800a4a4:	f000 fbc2 	bl	800ac2c <__mcmp>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	dcb0      	bgt.n	800a40e <_dtoa_r+0xa5e>
 800a4ac:	d102      	bne.n	800a4b4 <_dtoa_r+0xb04>
 800a4ae:	f018 0f01 	tst.w	r8, #1
 800a4b2:	d1ac      	bne.n	800a40e <_dtoa_r+0xa5e>
 800a4b4:	4633      	mov	r3, r6
 800a4b6:	461e      	mov	r6, r3
 800a4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4bc:	2a30      	cmp	r2, #48	@ 0x30
 800a4be:	d0fa      	beq.n	800a4b6 <_dtoa_r+0xb06>
 800a4c0:	e5c2      	b.n	800a048 <_dtoa_r+0x698>
 800a4c2:	459a      	cmp	sl, r3
 800a4c4:	d1a4      	bne.n	800a410 <_dtoa_r+0xa60>
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	2331      	movs	r3, #49	@ 0x31
 800a4ce:	f88a 3000 	strb.w	r3, [sl]
 800a4d2:	e5b9      	b.n	800a048 <_dtoa_r+0x698>
 800a4d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a534 <_dtoa_r+0xb84>
 800a4da:	b11b      	cbz	r3, 800a4e4 <_dtoa_r+0xb34>
 800a4dc:	f10a 0308 	add.w	r3, sl, #8
 800a4e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	b019      	add	sp, #100	@ 0x64
 800a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	f77f ae37 	ble.w	800a162 <_dtoa_r+0x7b2>
 800a4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	e655      	b.n	800a1a8 <_dtoa_r+0x7f8>
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f77f aed6 	ble.w	800a2b0 <_dtoa_r+0x900>
 800a504:	4656      	mov	r6, sl
 800a506:	4621      	mov	r1, r4
 800a508:	4648      	mov	r0, r9
 800a50a:	f7ff f9c6 	bl	800989a <quorem>
 800a50e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a512:	f806 8b01 	strb.w	r8, [r6], #1
 800a516:	9b00      	ldr	r3, [sp, #0]
 800a518:	eba6 020a 	sub.w	r2, r6, sl
 800a51c:	4293      	cmp	r3, r2
 800a51e:	ddb3      	ble.n	800a488 <_dtoa_r+0xad8>
 800a520:	4649      	mov	r1, r9
 800a522:	2300      	movs	r3, #0
 800a524:	220a      	movs	r2, #10
 800a526:	4658      	mov	r0, fp
 800a528:	f000 f968 	bl	800a7fc <__multadd>
 800a52c:	4681      	mov	r9, r0
 800a52e:	e7ea      	b.n	800a506 <_dtoa_r+0xb56>
 800a530:	0800b8b1 	.word	0x0800b8b1
 800a534:	0800b835 	.word	0x0800b835

0800a538 <_free_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4605      	mov	r5, r0
 800a53c:	2900      	cmp	r1, #0
 800a53e:	d041      	beq.n	800a5c4 <_free_r+0x8c>
 800a540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a544:	1f0c      	subs	r4, r1, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfb8      	it	lt
 800a54a:	18e4      	addlt	r4, r4, r3
 800a54c:	f000 f8e8 	bl	800a720 <__malloc_lock>
 800a550:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c8 <_free_r+0x90>)
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	b933      	cbnz	r3, 800a564 <_free_r+0x2c>
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	6014      	str	r4, [r2, #0]
 800a55a:	4628      	mov	r0, r5
 800a55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a560:	f000 b8e4 	b.w	800a72c <__malloc_unlock>
 800a564:	42a3      	cmp	r3, r4
 800a566:	d908      	bls.n	800a57a <_free_r+0x42>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	1821      	adds	r1, r4, r0
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1809      	addeq	r1, r1, r0
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	e7ed      	b.n	800a556 <_free_r+0x1e>
 800a57a:	461a      	mov	r2, r3
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	b10b      	cbz	r3, 800a584 <_free_r+0x4c>
 800a580:	42a3      	cmp	r3, r4
 800a582:	d9fa      	bls.n	800a57a <_free_r+0x42>
 800a584:	6811      	ldr	r1, [r2, #0]
 800a586:	1850      	adds	r0, r2, r1
 800a588:	42a0      	cmp	r0, r4
 800a58a:	d10b      	bne.n	800a5a4 <_free_r+0x6c>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	4401      	add	r1, r0
 800a590:	1850      	adds	r0, r2, r1
 800a592:	4283      	cmp	r3, r0
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	d1e0      	bne.n	800a55a <_free_r+0x22>
 800a598:	6818      	ldr	r0, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	6053      	str	r3, [r2, #4]
 800a59e:	4408      	add	r0, r1
 800a5a0:	6010      	str	r0, [r2, #0]
 800a5a2:	e7da      	b.n	800a55a <_free_r+0x22>
 800a5a4:	d902      	bls.n	800a5ac <_free_r+0x74>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	e7d6      	b.n	800a55a <_free_r+0x22>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf04      	itt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	6063      	str	r3, [r4, #4]
 800a5ba:	bf04      	itt	eq
 800a5bc:	1809      	addeq	r1, r1, r0
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	6054      	str	r4, [r2, #4]
 800a5c2:	e7ca      	b.n	800a55a <_free_r+0x22>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	bf00      	nop
 800a5c8:	200007a0 	.word	0x200007a0

0800a5cc <malloc>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	@ (800a5d8 <malloc+0xc>)
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	f000 b825 	b.w	800a620 <_malloc_r>
 800a5d6:	bf00      	nop
 800a5d8:	20000098 	.word	0x20000098

0800a5dc <sbrk_aligned>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	4e0f      	ldr	r6, [pc, #60]	@ (800a61c <sbrk_aligned+0x40>)
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	6831      	ldr	r1, [r6, #0]
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	b911      	cbnz	r1, 800a5ee <sbrk_aligned+0x12>
 800a5e8:	f000 fe9a 	bl	800b320 <_sbrk_r>
 800a5ec:	6030      	str	r0, [r6, #0]
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f000 fe95 	bl	800b320 <_sbrk_r>
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	d103      	bne.n	800a602 <sbrk_aligned+0x26>
 800a5fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a5fe:	4620      	mov	r0, r4
 800a600:	bd70      	pop	{r4, r5, r6, pc}
 800a602:	1cc4      	adds	r4, r0, #3
 800a604:	f024 0403 	bic.w	r4, r4, #3
 800a608:	42a0      	cmp	r0, r4
 800a60a:	d0f8      	beq.n	800a5fe <sbrk_aligned+0x22>
 800a60c:	1a21      	subs	r1, r4, r0
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 fe86 	bl	800b320 <_sbrk_r>
 800a614:	3001      	adds	r0, #1
 800a616:	d1f2      	bne.n	800a5fe <sbrk_aligned+0x22>
 800a618:	e7ef      	b.n	800a5fa <sbrk_aligned+0x1e>
 800a61a:	bf00      	nop
 800a61c:	2000079c 	.word	0x2000079c

0800a620 <_malloc_r>:
 800a620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a624:	1ccd      	adds	r5, r1, #3
 800a626:	f025 0503 	bic.w	r5, r5, #3
 800a62a:	3508      	adds	r5, #8
 800a62c:	2d0c      	cmp	r5, #12
 800a62e:	bf38      	it	cc
 800a630:	250c      	movcc	r5, #12
 800a632:	2d00      	cmp	r5, #0
 800a634:	4606      	mov	r6, r0
 800a636:	db01      	blt.n	800a63c <_malloc_r+0x1c>
 800a638:	42a9      	cmp	r1, r5
 800a63a:	d904      	bls.n	800a646 <_malloc_r+0x26>
 800a63c:	230c      	movs	r3, #12
 800a63e:	6033      	str	r3, [r6, #0]
 800a640:	2000      	movs	r0, #0
 800a642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a71c <_malloc_r+0xfc>
 800a64a:	f000 f869 	bl	800a720 <__malloc_lock>
 800a64e:	f8d8 3000 	ldr.w	r3, [r8]
 800a652:	461c      	mov	r4, r3
 800a654:	bb44      	cbnz	r4, 800a6a8 <_malloc_r+0x88>
 800a656:	4629      	mov	r1, r5
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ffbf 	bl	800a5dc <sbrk_aligned>
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	4604      	mov	r4, r0
 800a662:	d158      	bne.n	800a716 <_malloc_r+0xf6>
 800a664:	f8d8 4000 	ldr.w	r4, [r8]
 800a668:	4627      	mov	r7, r4
 800a66a:	2f00      	cmp	r7, #0
 800a66c:	d143      	bne.n	800a6f6 <_malloc_r+0xd6>
 800a66e:	2c00      	cmp	r4, #0
 800a670:	d04b      	beq.n	800a70a <_malloc_r+0xea>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	4639      	mov	r1, r7
 800a676:	4630      	mov	r0, r6
 800a678:	eb04 0903 	add.w	r9, r4, r3
 800a67c:	f000 fe50 	bl	800b320 <_sbrk_r>
 800a680:	4581      	cmp	r9, r0
 800a682:	d142      	bne.n	800a70a <_malloc_r+0xea>
 800a684:	6821      	ldr	r1, [r4, #0]
 800a686:	1a6d      	subs	r5, r5, r1
 800a688:	4629      	mov	r1, r5
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffa6 	bl	800a5dc <sbrk_aligned>
 800a690:	3001      	adds	r0, #1
 800a692:	d03a      	beq.n	800a70a <_malloc_r+0xea>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	442b      	add	r3, r5
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	f8d8 3000 	ldr.w	r3, [r8]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	bb62      	cbnz	r2, 800a6fc <_malloc_r+0xdc>
 800a6a2:	f8c8 7000 	str.w	r7, [r8]
 800a6a6:	e00f      	b.n	800a6c8 <_malloc_r+0xa8>
 800a6a8:	6822      	ldr	r2, [r4, #0]
 800a6aa:	1b52      	subs	r2, r2, r5
 800a6ac:	d420      	bmi.n	800a6f0 <_malloc_r+0xd0>
 800a6ae:	2a0b      	cmp	r2, #11
 800a6b0:	d917      	bls.n	800a6e2 <_malloc_r+0xc2>
 800a6b2:	1961      	adds	r1, r4, r5
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	6025      	str	r5, [r4, #0]
 800a6b8:	bf18      	it	ne
 800a6ba:	6059      	strne	r1, [r3, #4]
 800a6bc:	6863      	ldr	r3, [r4, #4]
 800a6be:	bf08      	it	eq
 800a6c0:	f8c8 1000 	streq.w	r1, [r8]
 800a6c4:	5162      	str	r2, [r4, r5]
 800a6c6:	604b      	str	r3, [r1, #4]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f82f 	bl	800a72c <__malloc_unlock>
 800a6ce:	f104 000b 	add.w	r0, r4, #11
 800a6d2:	1d23      	adds	r3, r4, #4
 800a6d4:	f020 0007 	bic.w	r0, r0, #7
 800a6d8:	1ac2      	subs	r2, r0, r3
 800a6da:	bf1c      	itt	ne
 800a6dc:	1a1b      	subne	r3, r3, r0
 800a6de:	50a3      	strne	r3, [r4, r2]
 800a6e0:	e7af      	b.n	800a642 <_malloc_r+0x22>
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	42a3      	cmp	r3, r4
 800a6e6:	bf0c      	ite	eq
 800a6e8:	f8c8 2000 	streq.w	r2, [r8]
 800a6ec:	605a      	strne	r2, [r3, #4]
 800a6ee:	e7eb      	b.n	800a6c8 <_malloc_r+0xa8>
 800a6f0:	4623      	mov	r3, r4
 800a6f2:	6864      	ldr	r4, [r4, #4]
 800a6f4:	e7ae      	b.n	800a654 <_malloc_r+0x34>
 800a6f6:	463c      	mov	r4, r7
 800a6f8:	687f      	ldr	r7, [r7, #4]
 800a6fa:	e7b6      	b.n	800a66a <_malloc_r+0x4a>
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	42a3      	cmp	r3, r4
 800a702:	d1fb      	bne.n	800a6fc <_malloc_r+0xdc>
 800a704:	2300      	movs	r3, #0
 800a706:	6053      	str	r3, [r2, #4]
 800a708:	e7de      	b.n	800a6c8 <_malloc_r+0xa8>
 800a70a:	230c      	movs	r3, #12
 800a70c:	6033      	str	r3, [r6, #0]
 800a70e:	4630      	mov	r0, r6
 800a710:	f000 f80c 	bl	800a72c <__malloc_unlock>
 800a714:	e794      	b.n	800a640 <_malloc_r+0x20>
 800a716:	6005      	str	r5, [r0, #0]
 800a718:	e7d6      	b.n	800a6c8 <_malloc_r+0xa8>
 800a71a:	bf00      	nop
 800a71c:	200007a0 	.word	0x200007a0

0800a720 <__malloc_lock>:
 800a720:	4801      	ldr	r0, [pc, #4]	@ (800a728 <__malloc_lock+0x8>)
 800a722:	f7ff b8b0 	b.w	8009886 <__retarget_lock_acquire_recursive>
 800a726:	bf00      	nop
 800a728:	20000798 	.word	0x20000798

0800a72c <__malloc_unlock>:
 800a72c:	4801      	ldr	r0, [pc, #4]	@ (800a734 <__malloc_unlock+0x8>)
 800a72e:	f7ff b8ab 	b.w	8009888 <__retarget_lock_release_recursive>
 800a732:	bf00      	nop
 800a734:	20000798 	.word	0x20000798

0800a738 <_Balloc>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	69c6      	ldr	r6, [r0, #28]
 800a73c:	4604      	mov	r4, r0
 800a73e:	460d      	mov	r5, r1
 800a740:	b976      	cbnz	r6, 800a760 <_Balloc+0x28>
 800a742:	2010      	movs	r0, #16
 800a744:	f7ff ff42 	bl	800a5cc <malloc>
 800a748:	4602      	mov	r2, r0
 800a74a:	61e0      	str	r0, [r4, #28]
 800a74c:	b920      	cbnz	r0, 800a758 <_Balloc+0x20>
 800a74e:	4b18      	ldr	r3, [pc, #96]	@ (800a7b0 <_Balloc+0x78>)
 800a750:	4818      	ldr	r0, [pc, #96]	@ (800a7b4 <_Balloc+0x7c>)
 800a752:	216b      	movs	r1, #107	@ 0x6b
 800a754:	f000 fe02 	bl	800b35c <__assert_func>
 800a758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a75c:	6006      	str	r6, [r0, #0]
 800a75e:	60c6      	str	r6, [r0, #12]
 800a760:	69e6      	ldr	r6, [r4, #28]
 800a762:	68f3      	ldr	r3, [r6, #12]
 800a764:	b183      	cbz	r3, 800a788 <_Balloc+0x50>
 800a766:	69e3      	ldr	r3, [r4, #28]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a76e:	b9b8      	cbnz	r0, 800a7a0 <_Balloc+0x68>
 800a770:	2101      	movs	r1, #1
 800a772:	fa01 f605 	lsl.w	r6, r1, r5
 800a776:	1d72      	adds	r2, r6, #5
 800a778:	0092      	lsls	r2, r2, #2
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fe0c 	bl	800b398 <_calloc_r>
 800a780:	b160      	cbz	r0, 800a79c <_Balloc+0x64>
 800a782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a786:	e00e      	b.n	800a7a6 <_Balloc+0x6e>
 800a788:	2221      	movs	r2, #33	@ 0x21
 800a78a:	2104      	movs	r1, #4
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 fe03 	bl	800b398 <_calloc_r>
 800a792:	69e3      	ldr	r3, [r4, #28]
 800a794:	60f0      	str	r0, [r6, #12]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e4      	bne.n	800a766 <_Balloc+0x2e>
 800a79c:	2000      	movs	r0, #0
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	6802      	ldr	r2, [r0, #0]
 800a7a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7ac:	e7f7      	b.n	800a79e <_Balloc+0x66>
 800a7ae:	bf00      	nop
 800a7b0:	0800b842 	.word	0x0800b842
 800a7b4:	0800b8c2 	.word	0x0800b8c2

0800a7b8 <_Bfree>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	69c6      	ldr	r6, [r0, #28]
 800a7bc:	4605      	mov	r5, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	b976      	cbnz	r6, 800a7e0 <_Bfree+0x28>
 800a7c2:	2010      	movs	r0, #16
 800a7c4:	f7ff ff02 	bl	800a5cc <malloc>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	61e8      	str	r0, [r5, #28]
 800a7cc:	b920      	cbnz	r0, 800a7d8 <_Bfree+0x20>
 800a7ce:	4b09      	ldr	r3, [pc, #36]	@ (800a7f4 <_Bfree+0x3c>)
 800a7d0:	4809      	ldr	r0, [pc, #36]	@ (800a7f8 <_Bfree+0x40>)
 800a7d2:	218f      	movs	r1, #143	@ 0x8f
 800a7d4:	f000 fdc2 	bl	800b35c <__assert_func>
 800a7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7dc:	6006      	str	r6, [r0, #0]
 800a7de:	60c6      	str	r6, [r0, #12]
 800a7e0:	b13c      	cbz	r4, 800a7f2 <_Bfree+0x3a>
 800a7e2:	69eb      	ldr	r3, [r5, #28]
 800a7e4:	6862      	ldr	r2, [r4, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7ec:	6021      	str	r1, [r4, #0]
 800a7ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	0800b842 	.word	0x0800b842
 800a7f8:	0800b8c2 	.word	0x0800b8c2

0800a7fc <__multadd>:
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	690d      	ldr	r5, [r1, #16]
 800a802:	4607      	mov	r7, r0
 800a804:	460c      	mov	r4, r1
 800a806:	461e      	mov	r6, r3
 800a808:	f101 0c14 	add.w	ip, r1, #20
 800a80c:	2000      	movs	r0, #0
 800a80e:	f8dc 3000 	ldr.w	r3, [ip]
 800a812:	b299      	uxth	r1, r3
 800a814:	fb02 6101 	mla	r1, r2, r1, r6
 800a818:	0c1e      	lsrs	r6, r3, #16
 800a81a:	0c0b      	lsrs	r3, r1, #16
 800a81c:	fb02 3306 	mla	r3, r2, r6, r3
 800a820:	b289      	uxth	r1, r1
 800a822:	3001      	adds	r0, #1
 800a824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a828:	4285      	cmp	r5, r0
 800a82a:	f84c 1b04 	str.w	r1, [ip], #4
 800a82e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a832:	dcec      	bgt.n	800a80e <__multadd+0x12>
 800a834:	b30e      	cbz	r6, 800a87a <__multadd+0x7e>
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dc19      	bgt.n	800a870 <__multadd+0x74>
 800a83c:	6861      	ldr	r1, [r4, #4]
 800a83e:	4638      	mov	r0, r7
 800a840:	3101      	adds	r1, #1
 800a842:	f7ff ff79 	bl	800a738 <_Balloc>
 800a846:	4680      	mov	r8, r0
 800a848:	b928      	cbnz	r0, 800a856 <__multadd+0x5a>
 800a84a:	4602      	mov	r2, r0
 800a84c:	4b0c      	ldr	r3, [pc, #48]	@ (800a880 <__multadd+0x84>)
 800a84e:	480d      	ldr	r0, [pc, #52]	@ (800a884 <__multadd+0x88>)
 800a850:	21ba      	movs	r1, #186	@ 0xba
 800a852:	f000 fd83 	bl	800b35c <__assert_func>
 800a856:	6922      	ldr	r2, [r4, #16]
 800a858:	3202      	adds	r2, #2
 800a85a:	f104 010c 	add.w	r1, r4, #12
 800a85e:	0092      	lsls	r2, r2, #2
 800a860:	300c      	adds	r0, #12
 800a862:	f000 fd6d 	bl	800b340 <memcpy>
 800a866:	4621      	mov	r1, r4
 800a868:	4638      	mov	r0, r7
 800a86a:	f7ff ffa5 	bl	800a7b8 <_Bfree>
 800a86e:	4644      	mov	r4, r8
 800a870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a874:	3501      	adds	r5, #1
 800a876:	615e      	str	r6, [r3, #20]
 800a878:	6125      	str	r5, [r4, #16]
 800a87a:	4620      	mov	r0, r4
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	0800b8b1 	.word	0x0800b8b1
 800a884:	0800b8c2 	.word	0x0800b8c2

0800a888 <__hi0bits>:
 800a888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a88c:	4603      	mov	r3, r0
 800a88e:	bf36      	itet	cc
 800a890:	0403      	lslcc	r3, r0, #16
 800a892:	2000      	movcs	r0, #0
 800a894:	2010      	movcc	r0, #16
 800a896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a89a:	bf3c      	itt	cc
 800a89c:	021b      	lslcc	r3, r3, #8
 800a89e:	3008      	addcc	r0, #8
 800a8a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a4:	bf3c      	itt	cc
 800a8a6:	011b      	lslcc	r3, r3, #4
 800a8a8:	3004      	addcc	r0, #4
 800a8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ae:	bf3c      	itt	cc
 800a8b0:	009b      	lslcc	r3, r3, #2
 800a8b2:	3002      	addcc	r0, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	db05      	blt.n	800a8c4 <__hi0bits+0x3c>
 800a8b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8bc:	f100 0001 	add.w	r0, r0, #1
 800a8c0:	bf08      	it	eq
 800a8c2:	2020      	moveq	r0, #32
 800a8c4:	4770      	bx	lr

0800a8c6 <__lo0bits>:
 800a8c6:	6803      	ldr	r3, [r0, #0]
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	f013 0007 	ands.w	r0, r3, #7
 800a8ce:	d00b      	beq.n	800a8e8 <__lo0bits+0x22>
 800a8d0:	07d9      	lsls	r1, r3, #31
 800a8d2:	d421      	bmi.n	800a918 <__lo0bits+0x52>
 800a8d4:	0798      	lsls	r0, r3, #30
 800a8d6:	bf49      	itett	mi
 800a8d8:	085b      	lsrmi	r3, r3, #1
 800a8da:	089b      	lsrpl	r3, r3, #2
 800a8dc:	2001      	movmi	r0, #1
 800a8de:	6013      	strmi	r3, [r2, #0]
 800a8e0:	bf5c      	itt	pl
 800a8e2:	6013      	strpl	r3, [r2, #0]
 800a8e4:	2002      	movpl	r0, #2
 800a8e6:	4770      	bx	lr
 800a8e8:	b299      	uxth	r1, r3
 800a8ea:	b909      	cbnz	r1, 800a8f0 <__lo0bits+0x2a>
 800a8ec:	0c1b      	lsrs	r3, r3, #16
 800a8ee:	2010      	movs	r0, #16
 800a8f0:	b2d9      	uxtb	r1, r3
 800a8f2:	b909      	cbnz	r1, 800a8f8 <__lo0bits+0x32>
 800a8f4:	3008      	adds	r0, #8
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	0719      	lsls	r1, r3, #28
 800a8fa:	bf04      	itt	eq
 800a8fc:	091b      	lsreq	r3, r3, #4
 800a8fe:	3004      	addeq	r0, #4
 800a900:	0799      	lsls	r1, r3, #30
 800a902:	bf04      	itt	eq
 800a904:	089b      	lsreq	r3, r3, #2
 800a906:	3002      	addeq	r0, #2
 800a908:	07d9      	lsls	r1, r3, #31
 800a90a:	d403      	bmi.n	800a914 <__lo0bits+0x4e>
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	f100 0001 	add.w	r0, r0, #1
 800a912:	d003      	beq.n	800a91c <__lo0bits+0x56>
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	4770      	bx	lr
 800a918:	2000      	movs	r0, #0
 800a91a:	4770      	bx	lr
 800a91c:	2020      	movs	r0, #32
 800a91e:	4770      	bx	lr

0800a920 <__i2b>:
 800a920:	b510      	push	{r4, lr}
 800a922:	460c      	mov	r4, r1
 800a924:	2101      	movs	r1, #1
 800a926:	f7ff ff07 	bl	800a738 <_Balloc>
 800a92a:	4602      	mov	r2, r0
 800a92c:	b928      	cbnz	r0, 800a93a <__i2b+0x1a>
 800a92e:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <__i2b+0x24>)
 800a930:	4805      	ldr	r0, [pc, #20]	@ (800a948 <__i2b+0x28>)
 800a932:	f240 1145 	movw	r1, #325	@ 0x145
 800a936:	f000 fd11 	bl	800b35c <__assert_func>
 800a93a:	2301      	movs	r3, #1
 800a93c:	6144      	str	r4, [r0, #20]
 800a93e:	6103      	str	r3, [r0, #16]
 800a940:	bd10      	pop	{r4, pc}
 800a942:	bf00      	nop
 800a944:	0800b8b1 	.word	0x0800b8b1
 800a948:	0800b8c2 	.word	0x0800b8c2

0800a94c <__multiply>:
 800a94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a950:	4614      	mov	r4, r2
 800a952:	690a      	ldr	r2, [r1, #16]
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	bfa8      	it	ge
 800a95a:	4623      	movge	r3, r4
 800a95c:	460f      	mov	r7, r1
 800a95e:	bfa4      	itt	ge
 800a960:	460c      	movge	r4, r1
 800a962:	461f      	movge	r7, r3
 800a964:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a968:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a96c:	68a3      	ldr	r3, [r4, #8]
 800a96e:	6861      	ldr	r1, [r4, #4]
 800a970:	eb0a 0609 	add.w	r6, sl, r9
 800a974:	42b3      	cmp	r3, r6
 800a976:	b085      	sub	sp, #20
 800a978:	bfb8      	it	lt
 800a97a:	3101      	addlt	r1, #1
 800a97c:	f7ff fedc 	bl	800a738 <_Balloc>
 800a980:	b930      	cbnz	r0, 800a990 <__multiply+0x44>
 800a982:	4602      	mov	r2, r0
 800a984:	4b44      	ldr	r3, [pc, #272]	@ (800aa98 <__multiply+0x14c>)
 800a986:	4845      	ldr	r0, [pc, #276]	@ (800aa9c <__multiply+0x150>)
 800a988:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a98c:	f000 fce6 	bl	800b35c <__assert_func>
 800a990:	f100 0514 	add.w	r5, r0, #20
 800a994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a998:	462b      	mov	r3, r5
 800a99a:	2200      	movs	r2, #0
 800a99c:	4543      	cmp	r3, r8
 800a99e:	d321      	bcc.n	800a9e4 <__multiply+0x98>
 800a9a0:	f107 0114 	add.w	r1, r7, #20
 800a9a4:	f104 0214 	add.w	r2, r4, #20
 800a9a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9b0:	9302      	str	r3, [sp, #8]
 800a9b2:	1b13      	subs	r3, r2, r4
 800a9b4:	3b15      	subs	r3, #21
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	f104 0715 	add.w	r7, r4, #21
 800a9c0:	42ba      	cmp	r2, r7
 800a9c2:	bf38      	it	cc
 800a9c4:	2304      	movcc	r3, #4
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	9b02      	ldr	r3, [sp, #8]
 800a9ca:	9103      	str	r1, [sp, #12]
 800a9cc:	428b      	cmp	r3, r1
 800a9ce:	d80c      	bhi.n	800a9ea <__multiply+0x9e>
 800a9d0:	2e00      	cmp	r6, #0
 800a9d2:	dd03      	ble.n	800a9dc <__multiply+0x90>
 800a9d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d05b      	beq.n	800aa94 <__multiply+0x148>
 800a9dc:	6106      	str	r6, [r0, #16]
 800a9de:	b005      	add	sp, #20
 800a9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e4:	f843 2b04 	str.w	r2, [r3], #4
 800a9e8:	e7d8      	b.n	800a99c <__multiply+0x50>
 800a9ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9ee:	f1ba 0f00 	cmp.w	sl, #0
 800a9f2:	d024      	beq.n	800aa3e <__multiply+0xf2>
 800a9f4:	f104 0e14 	add.w	lr, r4, #20
 800a9f8:	46a9      	mov	r9, r5
 800a9fa:	f04f 0c00 	mov.w	ip, #0
 800a9fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa02:	f8d9 3000 	ldr.w	r3, [r9]
 800aa06:	fa1f fb87 	uxth.w	fp, r7
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa14:	f8d9 7000 	ldr.w	r7, [r9]
 800aa18:	4463      	add	r3, ip
 800aa1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa1e:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa2c:	4572      	cmp	r2, lr
 800aa2e:	f849 3b04 	str.w	r3, [r9], #4
 800aa32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa36:	d8e2      	bhi.n	800a9fe <__multiply+0xb2>
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	f845 c003 	str.w	ip, [r5, r3]
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa44:	3104      	adds	r1, #4
 800aa46:	f1b9 0f00 	cmp.w	r9, #0
 800aa4a:	d021      	beq.n	800aa90 <__multiply+0x144>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	f104 0c14 	add.w	ip, r4, #20
 800aa52:	46ae      	mov	lr, r5
 800aa54:	f04f 0a00 	mov.w	sl, #0
 800aa58:	f8bc b000 	ldrh.w	fp, [ip]
 800aa5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa60:	fb09 770b 	mla	r7, r9, fp, r7
 800aa64:	4457      	add	r7, sl
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa6c:	f84e 3b04 	str.w	r3, [lr], #4
 800aa70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa78:	f8be 3000 	ldrh.w	r3, [lr]
 800aa7c:	fb09 330a 	mla	r3, r9, sl, r3
 800aa80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa84:	4562      	cmp	r2, ip
 800aa86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa8a:	d8e5      	bhi.n	800aa58 <__multiply+0x10c>
 800aa8c:	9f01      	ldr	r7, [sp, #4]
 800aa8e:	51eb      	str	r3, [r5, r7]
 800aa90:	3504      	adds	r5, #4
 800aa92:	e799      	b.n	800a9c8 <__multiply+0x7c>
 800aa94:	3e01      	subs	r6, #1
 800aa96:	e79b      	b.n	800a9d0 <__multiply+0x84>
 800aa98:	0800b8b1 	.word	0x0800b8b1
 800aa9c:	0800b8c2 	.word	0x0800b8c2

0800aaa0 <__pow5mult>:
 800aaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	f012 0203 	ands.w	r2, r2, #3
 800aaaa:	4607      	mov	r7, r0
 800aaac:	460e      	mov	r6, r1
 800aaae:	d007      	beq.n	800aac0 <__pow5mult+0x20>
 800aab0:	4c25      	ldr	r4, [pc, #148]	@ (800ab48 <__pow5mult+0xa8>)
 800aab2:	3a01      	subs	r2, #1
 800aab4:	2300      	movs	r3, #0
 800aab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaba:	f7ff fe9f 	bl	800a7fc <__multadd>
 800aabe:	4606      	mov	r6, r0
 800aac0:	10ad      	asrs	r5, r5, #2
 800aac2:	d03d      	beq.n	800ab40 <__pow5mult+0xa0>
 800aac4:	69fc      	ldr	r4, [r7, #28]
 800aac6:	b97c      	cbnz	r4, 800aae8 <__pow5mult+0x48>
 800aac8:	2010      	movs	r0, #16
 800aaca:	f7ff fd7f 	bl	800a5cc <malloc>
 800aace:	4602      	mov	r2, r0
 800aad0:	61f8      	str	r0, [r7, #28]
 800aad2:	b928      	cbnz	r0, 800aae0 <__pow5mult+0x40>
 800aad4:	4b1d      	ldr	r3, [pc, #116]	@ (800ab4c <__pow5mult+0xac>)
 800aad6:	481e      	ldr	r0, [pc, #120]	@ (800ab50 <__pow5mult+0xb0>)
 800aad8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aadc:	f000 fc3e 	bl	800b35c <__assert_func>
 800aae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aae4:	6004      	str	r4, [r0, #0]
 800aae6:	60c4      	str	r4, [r0, #12]
 800aae8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aaec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaf0:	b94c      	cbnz	r4, 800ab06 <__pow5mult+0x66>
 800aaf2:	f240 2171 	movw	r1, #625	@ 0x271
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f7ff ff12 	bl	800a920 <__i2b>
 800aafc:	2300      	movs	r3, #0
 800aafe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab02:	4604      	mov	r4, r0
 800ab04:	6003      	str	r3, [r0, #0]
 800ab06:	f04f 0900 	mov.w	r9, #0
 800ab0a:	07eb      	lsls	r3, r5, #31
 800ab0c:	d50a      	bpl.n	800ab24 <__pow5mult+0x84>
 800ab0e:	4631      	mov	r1, r6
 800ab10:	4622      	mov	r2, r4
 800ab12:	4638      	mov	r0, r7
 800ab14:	f7ff ff1a 	bl	800a94c <__multiply>
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4680      	mov	r8, r0
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff fe4b 	bl	800a7b8 <_Bfree>
 800ab22:	4646      	mov	r6, r8
 800ab24:	106d      	asrs	r5, r5, #1
 800ab26:	d00b      	beq.n	800ab40 <__pow5mult+0xa0>
 800ab28:	6820      	ldr	r0, [r4, #0]
 800ab2a:	b938      	cbnz	r0, 800ab3c <__pow5mult+0x9c>
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4638      	mov	r0, r7
 800ab32:	f7ff ff0b 	bl	800a94c <__multiply>
 800ab36:	6020      	str	r0, [r4, #0]
 800ab38:	f8c0 9000 	str.w	r9, [r0]
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	e7e4      	b.n	800ab0a <__pow5mult+0x6a>
 800ab40:	4630      	mov	r0, r6
 800ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab46:	bf00      	nop
 800ab48:	0800b91c 	.word	0x0800b91c
 800ab4c:	0800b842 	.word	0x0800b842
 800ab50:	0800b8c2 	.word	0x0800b8c2

0800ab54 <__lshift>:
 800ab54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab58:	460c      	mov	r4, r1
 800ab5a:	6849      	ldr	r1, [r1, #4]
 800ab5c:	6923      	ldr	r3, [r4, #16]
 800ab5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	4607      	mov	r7, r0
 800ab66:	4691      	mov	r9, r2
 800ab68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab6c:	f108 0601 	add.w	r6, r8, #1
 800ab70:	42b3      	cmp	r3, r6
 800ab72:	db0b      	blt.n	800ab8c <__lshift+0x38>
 800ab74:	4638      	mov	r0, r7
 800ab76:	f7ff fddf 	bl	800a738 <_Balloc>
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	b948      	cbnz	r0, 800ab92 <__lshift+0x3e>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	4b28      	ldr	r3, [pc, #160]	@ (800ac24 <__lshift+0xd0>)
 800ab82:	4829      	ldr	r0, [pc, #164]	@ (800ac28 <__lshift+0xd4>)
 800ab84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab88:	f000 fbe8 	bl	800b35c <__assert_func>
 800ab8c:	3101      	adds	r1, #1
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	e7ee      	b.n	800ab70 <__lshift+0x1c>
 800ab92:	2300      	movs	r3, #0
 800ab94:	f100 0114 	add.w	r1, r0, #20
 800ab98:	f100 0210 	add.w	r2, r0, #16
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	4553      	cmp	r3, sl
 800aba0:	db33      	blt.n	800ac0a <__lshift+0xb6>
 800aba2:	6920      	ldr	r0, [r4, #16]
 800aba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aba8:	f104 0314 	add.w	r3, r4, #20
 800abac:	f019 091f 	ands.w	r9, r9, #31
 800abb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abb8:	d02b      	beq.n	800ac12 <__lshift+0xbe>
 800abba:	f1c9 0e20 	rsb	lr, r9, #32
 800abbe:	468a      	mov	sl, r1
 800abc0:	2200      	movs	r2, #0
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	fa00 f009 	lsl.w	r0, r0, r9
 800abc8:	4310      	orrs	r0, r2
 800abca:	f84a 0b04 	str.w	r0, [sl], #4
 800abce:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd2:	459c      	cmp	ip, r3
 800abd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800abd8:	d8f3      	bhi.n	800abc2 <__lshift+0x6e>
 800abda:	ebac 0304 	sub.w	r3, ip, r4
 800abde:	3b15      	subs	r3, #21
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	3304      	adds	r3, #4
 800abe6:	f104 0015 	add.w	r0, r4, #21
 800abea:	4584      	cmp	ip, r0
 800abec:	bf38      	it	cc
 800abee:	2304      	movcc	r3, #4
 800abf0:	50ca      	str	r2, [r1, r3]
 800abf2:	b10a      	cbz	r2, 800abf8 <__lshift+0xa4>
 800abf4:	f108 0602 	add.w	r6, r8, #2
 800abf8:	3e01      	subs	r6, #1
 800abfa:	4638      	mov	r0, r7
 800abfc:	612e      	str	r6, [r5, #16]
 800abfe:	4621      	mov	r1, r4
 800ac00:	f7ff fdda 	bl	800a7b8 <_Bfree>
 800ac04:	4628      	mov	r0, r5
 800ac06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac0e:	3301      	adds	r3, #1
 800ac10:	e7c5      	b.n	800ab9e <__lshift+0x4a>
 800ac12:	3904      	subs	r1, #4
 800ac14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac1c:	459c      	cmp	ip, r3
 800ac1e:	d8f9      	bhi.n	800ac14 <__lshift+0xc0>
 800ac20:	e7ea      	b.n	800abf8 <__lshift+0xa4>
 800ac22:	bf00      	nop
 800ac24:	0800b8b1 	.word	0x0800b8b1
 800ac28:	0800b8c2 	.word	0x0800b8c2

0800ac2c <__mcmp>:
 800ac2c:	690a      	ldr	r2, [r1, #16]
 800ac2e:	4603      	mov	r3, r0
 800ac30:	6900      	ldr	r0, [r0, #16]
 800ac32:	1a80      	subs	r0, r0, r2
 800ac34:	b530      	push	{r4, r5, lr}
 800ac36:	d10e      	bne.n	800ac56 <__mcmp+0x2a>
 800ac38:	3314      	adds	r3, #20
 800ac3a:	3114      	adds	r1, #20
 800ac3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac4c:	4295      	cmp	r5, r2
 800ac4e:	d003      	beq.n	800ac58 <__mcmp+0x2c>
 800ac50:	d205      	bcs.n	800ac5e <__mcmp+0x32>
 800ac52:	f04f 30ff 	mov.w	r0, #4294967295
 800ac56:	bd30      	pop	{r4, r5, pc}
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d3f3      	bcc.n	800ac44 <__mcmp+0x18>
 800ac5c:	e7fb      	b.n	800ac56 <__mcmp+0x2a>
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e7f9      	b.n	800ac56 <__mcmp+0x2a>
	...

0800ac64 <__mdiff>:
 800ac64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	4689      	mov	r9, r1
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4648      	mov	r0, r9
 800ac70:	4614      	mov	r4, r2
 800ac72:	f7ff ffdb 	bl	800ac2c <__mcmp>
 800ac76:	1e05      	subs	r5, r0, #0
 800ac78:	d112      	bne.n	800aca0 <__mdiff+0x3c>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fd5b 	bl	800a738 <_Balloc>
 800ac82:	4602      	mov	r2, r0
 800ac84:	b928      	cbnz	r0, 800ac92 <__mdiff+0x2e>
 800ac86:	4b3f      	ldr	r3, [pc, #252]	@ (800ad84 <__mdiff+0x120>)
 800ac88:	f240 2137 	movw	r1, #567	@ 0x237
 800ac8c:	483e      	ldr	r0, [pc, #248]	@ (800ad88 <__mdiff+0x124>)
 800ac8e:	f000 fb65 	bl	800b35c <__assert_func>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac98:	4610      	mov	r0, r2
 800ac9a:	b003      	add	sp, #12
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	bfbc      	itt	lt
 800aca2:	464b      	movlt	r3, r9
 800aca4:	46a1      	movlt	r9, r4
 800aca6:	4630      	mov	r0, r6
 800aca8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800acac:	bfba      	itte	lt
 800acae:	461c      	movlt	r4, r3
 800acb0:	2501      	movlt	r5, #1
 800acb2:	2500      	movge	r5, #0
 800acb4:	f7ff fd40 	bl	800a738 <_Balloc>
 800acb8:	4602      	mov	r2, r0
 800acba:	b918      	cbnz	r0, 800acc4 <__mdiff+0x60>
 800acbc:	4b31      	ldr	r3, [pc, #196]	@ (800ad84 <__mdiff+0x120>)
 800acbe:	f240 2145 	movw	r1, #581	@ 0x245
 800acc2:	e7e3      	b.n	800ac8c <__mdiff+0x28>
 800acc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acc8:	6926      	ldr	r6, [r4, #16]
 800acca:	60c5      	str	r5, [r0, #12]
 800accc:	f109 0310 	add.w	r3, r9, #16
 800acd0:	f109 0514 	add.w	r5, r9, #20
 800acd4:	f104 0e14 	add.w	lr, r4, #20
 800acd8:	f100 0b14 	add.w	fp, r0, #20
 800acdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ace0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	46d9      	mov	r9, fp
 800ace8:	f04f 0c00 	mov.w	ip, #0
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800acf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	fa1f f38a 	uxth.w	r3, sl
 800acfc:	4619      	mov	r1, r3
 800acfe:	b283      	uxth	r3, r0
 800ad00:	1acb      	subs	r3, r1, r3
 800ad02:	0c00      	lsrs	r0, r0, #16
 800ad04:	4463      	add	r3, ip
 800ad06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad14:	4576      	cmp	r6, lr
 800ad16:	f849 3b04 	str.w	r3, [r9], #4
 800ad1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad1e:	d8e5      	bhi.n	800acec <__mdiff+0x88>
 800ad20:	1b33      	subs	r3, r6, r4
 800ad22:	3b15      	subs	r3, #21
 800ad24:	f023 0303 	bic.w	r3, r3, #3
 800ad28:	3415      	adds	r4, #21
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	42a6      	cmp	r6, r4
 800ad2e:	bf38      	it	cc
 800ad30:	2304      	movcc	r3, #4
 800ad32:	441d      	add	r5, r3
 800ad34:	445b      	add	r3, fp
 800ad36:	461e      	mov	r6, r3
 800ad38:	462c      	mov	r4, r5
 800ad3a:	4544      	cmp	r4, r8
 800ad3c:	d30e      	bcc.n	800ad5c <__mdiff+0xf8>
 800ad3e:	f108 0103 	add.w	r1, r8, #3
 800ad42:	1b49      	subs	r1, r1, r5
 800ad44:	f021 0103 	bic.w	r1, r1, #3
 800ad48:	3d03      	subs	r5, #3
 800ad4a:	45a8      	cmp	r8, r5
 800ad4c:	bf38      	it	cc
 800ad4e:	2100      	movcc	r1, #0
 800ad50:	440b      	add	r3, r1
 800ad52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad56:	b191      	cbz	r1, 800ad7e <__mdiff+0x11a>
 800ad58:	6117      	str	r7, [r2, #16]
 800ad5a:	e79d      	b.n	800ac98 <__mdiff+0x34>
 800ad5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad60:	46e6      	mov	lr, ip
 800ad62:	0c08      	lsrs	r0, r1, #16
 800ad64:	fa1c fc81 	uxtah	ip, ip, r1
 800ad68:	4471      	add	r1, lr
 800ad6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad6e:	b289      	uxth	r1, r1
 800ad70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad74:	f846 1b04 	str.w	r1, [r6], #4
 800ad78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad7c:	e7dd      	b.n	800ad3a <__mdiff+0xd6>
 800ad7e:	3f01      	subs	r7, #1
 800ad80:	e7e7      	b.n	800ad52 <__mdiff+0xee>
 800ad82:	bf00      	nop
 800ad84:	0800b8b1 	.word	0x0800b8b1
 800ad88:	0800b8c2 	.word	0x0800b8c2

0800ad8c <__d2b>:
 800ad8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad90:	460f      	mov	r7, r1
 800ad92:	2101      	movs	r1, #1
 800ad94:	ec59 8b10 	vmov	r8, r9, d0
 800ad98:	4616      	mov	r6, r2
 800ad9a:	f7ff fccd 	bl	800a738 <_Balloc>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	b930      	cbnz	r0, 800adb0 <__d2b+0x24>
 800ada2:	4602      	mov	r2, r0
 800ada4:	4b23      	ldr	r3, [pc, #140]	@ (800ae34 <__d2b+0xa8>)
 800ada6:	4824      	ldr	r0, [pc, #144]	@ (800ae38 <__d2b+0xac>)
 800ada8:	f240 310f 	movw	r1, #783	@ 0x30f
 800adac:	f000 fad6 	bl	800b35c <__assert_func>
 800adb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adb8:	b10d      	cbz	r5, 800adbe <__d2b+0x32>
 800adba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	f1b8 0300 	subs.w	r3, r8, #0
 800adc4:	d023      	beq.n	800ae0e <__d2b+0x82>
 800adc6:	4668      	mov	r0, sp
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	f7ff fd7c 	bl	800a8c6 <__lo0bits>
 800adce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800add2:	b1d0      	cbz	r0, 800ae0a <__d2b+0x7e>
 800add4:	f1c0 0320 	rsb	r3, r0, #32
 800add8:	fa02 f303 	lsl.w	r3, r2, r3
 800addc:	430b      	orrs	r3, r1
 800adde:	40c2      	lsrs	r2, r0
 800ade0:	6163      	str	r3, [r4, #20]
 800ade2:	9201      	str	r2, [sp, #4]
 800ade4:	9b01      	ldr	r3, [sp, #4]
 800ade6:	61a3      	str	r3, [r4, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	bf0c      	ite	eq
 800adec:	2201      	moveq	r2, #1
 800adee:	2202      	movne	r2, #2
 800adf0:	6122      	str	r2, [r4, #16]
 800adf2:	b1a5      	cbz	r5, 800ae1e <__d2b+0x92>
 800adf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800adf8:	4405      	add	r5, r0
 800adfa:	603d      	str	r5, [r7, #0]
 800adfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae00:	6030      	str	r0, [r6, #0]
 800ae02:	4620      	mov	r0, r4
 800ae04:	b003      	add	sp, #12
 800ae06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae0a:	6161      	str	r1, [r4, #20]
 800ae0c:	e7ea      	b.n	800ade4 <__d2b+0x58>
 800ae0e:	a801      	add	r0, sp, #4
 800ae10:	f7ff fd59 	bl	800a8c6 <__lo0bits>
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	6163      	str	r3, [r4, #20]
 800ae18:	3020      	adds	r0, #32
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	e7e8      	b.n	800adf0 <__d2b+0x64>
 800ae1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae26:	6038      	str	r0, [r7, #0]
 800ae28:	6918      	ldr	r0, [r3, #16]
 800ae2a:	f7ff fd2d 	bl	800a888 <__hi0bits>
 800ae2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae32:	e7e5      	b.n	800ae00 <__d2b+0x74>
 800ae34:	0800b8b1 	.word	0x0800b8b1
 800ae38:	0800b8c2 	.word	0x0800b8c2

0800ae3c <__sfputc_r>:
 800ae3c:	6893      	ldr	r3, [r2, #8]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	b410      	push	{r4}
 800ae44:	6093      	str	r3, [r2, #8]
 800ae46:	da08      	bge.n	800ae5a <__sfputc_r+0x1e>
 800ae48:	6994      	ldr	r4, [r2, #24]
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	db01      	blt.n	800ae52 <__sfputc_r+0x16>
 800ae4e:	290a      	cmp	r1, #10
 800ae50:	d103      	bne.n	800ae5a <__sfputc_r+0x1e>
 800ae52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae56:	f7fe bc04 	b.w	8009662 <__swbuf_r>
 800ae5a:	6813      	ldr	r3, [r2, #0]
 800ae5c:	1c58      	adds	r0, r3, #1
 800ae5e:	6010      	str	r0, [r2, #0]
 800ae60:	7019      	strb	r1, [r3, #0]
 800ae62:	4608      	mov	r0, r1
 800ae64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <__sfputs_r>:
 800ae6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	4614      	mov	r4, r2
 800ae72:	18d5      	adds	r5, r2, r3
 800ae74:	42ac      	cmp	r4, r5
 800ae76:	d101      	bne.n	800ae7c <__sfputs_r+0x12>
 800ae78:	2000      	movs	r0, #0
 800ae7a:	e007      	b.n	800ae8c <__sfputs_r+0x22>
 800ae7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae80:	463a      	mov	r2, r7
 800ae82:	4630      	mov	r0, r6
 800ae84:	f7ff ffda 	bl	800ae3c <__sfputc_r>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d1f3      	bne.n	800ae74 <__sfputs_r+0xa>
 800ae8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae90 <_vfiprintf_r>:
 800ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	460d      	mov	r5, r1
 800ae96:	b09d      	sub	sp, #116	@ 0x74
 800ae98:	4614      	mov	r4, r2
 800ae9a:	4698      	mov	r8, r3
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	b118      	cbz	r0, 800aea8 <_vfiprintf_r+0x18>
 800aea0:	6a03      	ldr	r3, [r0, #32]
 800aea2:	b90b      	cbnz	r3, 800aea8 <_vfiprintf_r+0x18>
 800aea4:	f7fe faf4 	bl	8009490 <__sinit>
 800aea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeaa:	07d9      	lsls	r1, r3, #31
 800aeac:	d405      	bmi.n	800aeba <_vfiprintf_r+0x2a>
 800aeae:	89ab      	ldrh	r3, [r5, #12]
 800aeb0:	059a      	lsls	r2, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_vfiprintf_r+0x2a>
 800aeb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeb6:	f7fe fce6 	bl	8009886 <__retarget_lock_acquire_recursive>
 800aeba:	89ab      	ldrh	r3, [r5, #12]
 800aebc:	071b      	lsls	r3, r3, #28
 800aebe:	d501      	bpl.n	800aec4 <_vfiprintf_r+0x34>
 800aec0:	692b      	ldr	r3, [r5, #16]
 800aec2:	b99b      	cbnz	r3, 800aeec <_vfiprintf_r+0x5c>
 800aec4:	4629      	mov	r1, r5
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7fe fc0a 	bl	80096e0 <__swsetup_r>
 800aecc:	b170      	cbz	r0, 800aeec <_vfiprintf_r+0x5c>
 800aece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aed0:	07dc      	lsls	r4, r3, #31
 800aed2:	d504      	bpl.n	800aede <_vfiprintf_r+0x4e>
 800aed4:	f04f 30ff 	mov.w	r0, #4294967295
 800aed8:	b01d      	add	sp, #116	@ 0x74
 800aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	0598      	lsls	r0, r3, #22
 800aee2:	d4f7      	bmi.n	800aed4 <_vfiprintf_r+0x44>
 800aee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aee6:	f7fe fccf 	bl	8009888 <__retarget_lock_release_recursive>
 800aeea:	e7f3      	b.n	800aed4 <_vfiprintf_r+0x44>
 800aeec:	2300      	movs	r3, #0
 800aeee:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef0:	2320      	movs	r3, #32
 800aef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aefa:	2330      	movs	r3, #48	@ 0x30
 800aefc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b0ac <_vfiprintf_r+0x21c>
 800af00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af04:	f04f 0901 	mov.w	r9, #1
 800af08:	4623      	mov	r3, r4
 800af0a:	469a      	mov	sl, r3
 800af0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af10:	b10a      	cbz	r2, 800af16 <_vfiprintf_r+0x86>
 800af12:	2a25      	cmp	r2, #37	@ 0x25
 800af14:	d1f9      	bne.n	800af0a <_vfiprintf_r+0x7a>
 800af16:	ebba 0b04 	subs.w	fp, sl, r4
 800af1a:	d00b      	beq.n	800af34 <_vfiprintf_r+0xa4>
 800af1c:	465b      	mov	r3, fp
 800af1e:	4622      	mov	r2, r4
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ffa1 	bl	800ae6a <__sfputs_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	f000 80a7 	beq.w	800b07c <_vfiprintf_r+0x1ec>
 800af2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af30:	445a      	add	r2, fp
 800af32:	9209      	str	r2, [sp, #36]	@ 0x24
 800af34:	f89a 3000 	ldrb.w	r3, [sl]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 809f 	beq.w	800b07c <_vfiprintf_r+0x1ec>
 800af3e:	2300      	movs	r3, #0
 800af40:	f04f 32ff 	mov.w	r2, #4294967295
 800af44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af48:	f10a 0a01 	add.w	sl, sl, #1
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	9307      	str	r3, [sp, #28]
 800af50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af54:	931a      	str	r3, [sp, #104]	@ 0x68
 800af56:	4654      	mov	r4, sl
 800af58:	2205      	movs	r2, #5
 800af5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af5e:	4853      	ldr	r0, [pc, #332]	@ (800b0ac <_vfiprintf_r+0x21c>)
 800af60:	f7f5 f95e 	bl	8000220 <memchr>
 800af64:	9a04      	ldr	r2, [sp, #16]
 800af66:	b9d8      	cbnz	r0, 800afa0 <_vfiprintf_r+0x110>
 800af68:	06d1      	lsls	r1, r2, #27
 800af6a:	bf44      	itt	mi
 800af6c:	2320      	movmi	r3, #32
 800af6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af72:	0713      	lsls	r3, r2, #28
 800af74:	bf44      	itt	mi
 800af76:	232b      	movmi	r3, #43	@ 0x2b
 800af78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af7c:	f89a 3000 	ldrb.w	r3, [sl]
 800af80:	2b2a      	cmp	r3, #42	@ 0x2a
 800af82:	d015      	beq.n	800afb0 <_vfiprintf_r+0x120>
 800af84:	9a07      	ldr	r2, [sp, #28]
 800af86:	4654      	mov	r4, sl
 800af88:	2000      	movs	r0, #0
 800af8a:	f04f 0c0a 	mov.w	ip, #10
 800af8e:	4621      	mov	r1, r4
 800af90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af94:	3b30      	subs	r3, #48	@ 0x30
 800af96:	2b09      	cmp	r3, #9
 800af98:	d94b      	bls.n	800b032 <_vfiprintf_r+0x1a2>
 800af9a:	b1b0      	cbz	r0, 800afca <_vfiprintf_r+0x13a>
 800af9c:	9207      	str	r2, [sp, #28]
 800af9e:	e014      	b.n	800afca <_vfiprintf_r+0x13a>
 800afa0:	eba0 0308 	sub.w	r3, r0, r8
 800afa4:	fa09 f303 	lsl.w	r3, r9, r3
 800afa8:	4313      	orrs	r3, r2
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	46a2      	mov	sl, r4
 800afae:	e7d2      	b.n	800af56 <_vfiprintf_r+0xc6>
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	1d19      	adds	r1, r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	9103      	str	r1, [sp, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	bfbb      	ittet	lt
 800afbc:	425b      	neglt	r3, r3
 800afbe:	f042 0202 	orrlt.w	r2, r2, #2
 800afc2:	9307      	strge	r3, [sp, #28]
 800afc4:	9307      	strlt	r3, [sp, #28]
 800afc6:	bfb8      	it	lt
 800afc8:	9204      	strlt	r2, [sp, #16]
 800afca:	7823      	ldrb	r3, [r4, #0]
 800afcc:	2b2e      	cmp	r3, #46	@ 0x2e
 800afce:	d10a      	bne.n	800afe6 <_vfiprintf_r+0x156>
 800afd0:	7863      	ldrb	r3, [r4, #1]
 800afd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800afd4:	d132      	bne.n	800b03c <_vfiprintf_r+0x1ac>
 800afd6:	9b03      	ldr	r3, [sp, #12]
 800afd8:	1d1a      	adds	r2, r3, #4
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	9203      	str	r2, [sp, #12]
 800afde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afe2:	3402      	adds	r4, #2
 800afe4:	9305      	str	r3, [sp, #20]
 800afe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b0bc <_vfiprintf_r+0x22c>
 800afea:	7821      	ldrb	r1, [r4, #0]
 800afec:	2203      	movs	r2, #3
 800afee:	4650      	mov	r0, sl
 800aff0:	f7f5 f916 	bl	8000220 <memchr>
 800aff4:	b138      	cbz	r0, 800b006 <_vfiprintf_r+0x176>
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	eba0 000a 	sub.w	r0, r0, sl
 800affc:	2240      	movs	r2, #64	@ 0x40
 800affe:	4082      	lsls	r2, r0
 800b000:	4313      	orrs	r3, r2
 800b002:	3401      	adds	r4, #1
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b00a:	4829      	ldr	r0, [pc, #164]	@ (800b0b0 <_vfiprintf_r+0x220>)
 800b00c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b010:	2206      	movs	r2, #6
 800b012:	f7f5 f905 	bl	8000220 <memchr>
 800b016:	2800      	cmp	r0, #0
 800b018:	d03f      	beq.n	800b09a <_vfiprintf_r+0x20a>
 800b01a:	4b26      	ldr	r3, [pc, #152]	@ (800b0b4 <_vfiprintf_r+0x224>)
 800b01c:	bb1b      	cbnz	r3, 800b066 <_vfiprintf_r+0x1d6>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	3307      	adds	r3, #7
 800b022:	f023 0307 	bic.w	r3, r3, #7
 800b026:	3308      	adds	r3, #8
 800b028:	9303      	str	r3, [sp, #12]
 800b02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02c:	443b      	add	r3, r7
 800b02e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b030:	e76a      	b.n	800af08 <_vfiprintf_r+0x78>
 800b032:	fb0c 3202 	mla	r2, ip, r2, r3
 800b036:	460c      	mov	r4, r1
 800b038:	2001      	movs	r0, #1
 800b03a:	e7a8      	b.n	800af8e <_vfiprintf_r+0xfe>
 800b03c:	2300      	movs	r3, #0
 800b03e:	3401      	adds	r4, #1
 800b040:	9305      	str	r3, [sp, #20]
 800b042:	4619      	mov	r1, r3
 800b044:	f04f 0c0a 	mov.w	ip, #10
 800b048:	4620      	mov	r0, r4
 800b04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b04e:	3a30      	subs	r2, #48	@ 0x30
 800b050:	2a09      	cmp	r2, #9
 800b052:	d903      	bls.n	800b05c <_vfiprintf_r+0x1cc>
 800b054:	2b00      	cmp	r3, #0
 800b056:	d0c6      	beq.n	800afe6 <_vfiprintf_r+0x156>
 800b058:	9105      	str	r1, [sp, #20]
 800b05a:	e7c4      	b.n	800afe6 <_vfiprintf_r+0x156>
 800b05c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b060:	4604      	mov	r4, r0
 800b062:	2301      	movs	r3, #1
 800b064:	e7f0      	b.n	800b048 <_vfiprintf_r+0x1b8>
 800b066:	ab03      	add	r3, sp, #12
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	462a      	mov	r2, r5
 800b06c:	4b12      	ldr	r3, [pc, #72]	@ (800b0b8 <_vfiprintf_r+0x228>)
 800b06e:	a904      	add	r1, sp, #16
 800b070:	4630      	mov	r0, r6
 800b072:	f7fd fdc9 	bl	8008c08 <_printf_float>
 800b076:	4607      	mov	r7, r0
 800b078:	1c78      	adds	r0, r7, #1
 800b07a:	d1d6      	bne.n	800b02a <_vfiprintf_r+0x19a>
 800b07c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b07e:	07d9      	lsls	r1, r3, #31
 800b080:	d405      	bmi.n	800b08e <_vfiprintf_r+0x1fe>
 800b082:	89ab      	ldrh	r3, [r5, #12]
 800b084:	059a      	lsls	r2, r3, #22
 800b086:	d402      	bmi.n	800b08e <_vfiprintf_r+0x1fe>
 800b088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b08a:	f7fe fbfd 	bl	8009888 <__retarget_lock_release_recursive>
 800b08e:	89ab      	ldrh	r3, [r5, #12]
 800b090:	065b      	lsls	r3, r3, #25
 800b092:	f53f af1f 	bmi.w	800aed4 <_vfiprintf_r+0x44>
 800b096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b098:	e71e      	b.n	800aed8 <_vfiprintf_r+0x48>
 800b09a:	ab03      	add	r3, sp, #12
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	462a      	mov	r2, r5
 800b0a0:	4b05      	ldr	r3, [pc, #20]	@ (800b0b8 <_vfiprintf_r+0x228>)
 800b0a2:	a904      	add	r1, sp, #16
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	f7fe f847 	bl	8009138 <_printf_i>
 800b0aa:	e7e4      	b.n	800b076 <_vfiprintf_r+0x1e6>
 800b0ac:	0800ba18 	.word	0x0800ba18
 800b0b0:	0800ba22 	.word	0x0800ba22
 800b0b4:	08008c09 	.word	0x08008c09
 800b0b8:	0800ae6b 	.word	0x0800ae6b
 800b0bc:	0800ba1e 	.word	0x0800ba1e

0800b0c0 <__sflush_r>:
 800b0c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c8:	0716      	lsls	r6, r2, #28
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	d454      	bmi.n	800b17a <__sflush_r+0xba>
 800b0d0:	684b      	ldr	r3, [r1, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	dc02      	bgt.n	800b0dc <__sflush_r+0x1c>
 800b0d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	dd48      	ble.n	800b16e <__sflush_r+0xae>
 800b0dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0de:	2e00      	cmp	r6, #0
 800b0e0:	d045      	beq.n	800b16e <__sflush_r+0xae>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0e8:	682f      	ldr	r7, [r5, #0]
 800b0ea:	6a21      	ldr	r1, [r4, #32]
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	d030      	beq.n	800b152 <__sflush_r+0x92>
 800b0f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	0759      	lsls	r1, r3, #29
 800b0f6:	d505      	bpl.n	800b104 <__sflush_r+0x44>
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	1ad2      	subs	r2, r2, r3
 800b0fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0fe:	b10b      	cbz	r3, 800b104 <__sflush_r+0x44>
 800b100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b102:	1ad2      	subs	r2, r2, r3
 800b104:	2300      	movs	r3, #0
 800b106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b108:	6a21      	ldr	r1, [r4, #32]
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b0      	blx	r6
 800b10e:	1c43      	adds	r3, r0, #1
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	d106      	bne.n	800b122 <__sflush_r+0x62>
 800b114:	6829      	ldr	r1, [r5, #0]
 800b116:	291d      	cmp	r1, #29
 800b118:	d82b      	bhi.n	800b172 <__sflush_r+0xb2>
 800b11a:	4a2a      	ldr	r2, [pc, #168]	@ (800b1c4 <__sflush_r+0x104>)
 800b11c:	410a      	asrs	r2, r1
 800b11e:	07d6      	lsls	r6, r2, #31
 800b120:	d427      	bmi.n	800b172 <__sflush_r+0xb2>
 800b122:	2200      	movs	r2, #0
 800b124:	6062      	str	r2, [r4, #4]
 800b126:	04d9      	lsls	r1, r3, #19
 800b128:	6922      	ldr	r2, [r4, #16]
 800b12a:	6022      	str	r2, [r4, #0]
 800b12c:	d504      	bpl.n	800b138 <__sflush_r+0x78>
 800b12e:	1c42      	adds	r2, r0, #1
 800b130:	d101      	bne.n	800b136 <__sflush_r+0x76>
 800b132:	682b      	ldr	r3, [r5, #0]
 800b134:	b903      	cbnz	r3, 800b138 <__sflush_r+0x78>
 800b136:	6560      	str	r0, [r4, #84]	@ 0x54
 800b138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b13a:	602f      	str	r7, [r5, #0]
 800b13c:	b1b9      	cbz	r1, 800b16e <__sflush_r+0xae>
 800b13e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b142:	4299      	cmp	r1, r3
 800b144:	d002      	beq.n	800b14c <__sflush_r+0x8c>
 800b146:	4628      	mov	r0, r5
 800b148:	f7ff f9f6 	bl	800a538 <_free_r>
 800b14c:	2300      	movs	r3, #0
 800b14e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b150:	e00d      	b.n	800b16e <__sflush_r+0xae>
 800b152:	2301      	movs	r3, #1
 800b154:	4628      	mov	r0, r5
 800b156:	47b0      	blx	r6
 800b158:	4602      	mov	r2, r0
 800b15a:	1c50      	adds	r0, r2, #1
 800b15c:	d1c9      	bne.n	800b0f2 <__sflush_r+0x32>
 800b15e:	682b      	ldr	r3, [r5, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0c6      	beq.n	800b0f2 <__sflush_r+0x32>
 800b164:	2b1d      	cmp	r3, #29
 800b166:	d001      	beq.n	800b16c <__sflush_r+0xac>
 800b168:	2b16      	cmp	r3, #22
 800b16a:	d11e      	bne.n	800b1aa <__sflush_r+0xea>
 800b16c:	602f      	str	r7, [r5, #0]
 800b16e:	2000      	movs	r0, #0
 800b170:	e022      	b.n	800b1b8 <__sflush_r+0xf8>
 800b172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b176:	b21b      	sxth	r3, r3
 800b178:	e01b      	b.n	800b1b2 <__sflush_r+0xf2>
 800b17a:	690f      	ldr	r7, [r1, #16]
 800b17c:	2f00      	cmp	r7, #0
 800b17e:	d0f6      	beq.n	800b16e <__sflush_r+0xae>
 800b180:	0793      	lsls	r3, r2, #30
 800b182:	680e      	ldr	r6, [r1, #0]
 800b184:	bf08      	it	eq
 800b186:	694b      	ldreq	r3, [r1, #20]
 800b188:	600f      	str	r7, [r1, #0]
 800b18a:	bf18      	it	ne
 800b18c:	2300      	movne	r3, #0
 800b18e:	eba6 0807 	sub.w	r8, r6, r7
 800b192:	608b      	str	r3, [r1, #8]
 800b194:	f1b8 0f00 	cmp.w	r8, #0
 800b198:	dde9      	ble.n	800b16e <__sflush_r+0xae>
 800b19a:	6a21      	ldr	r1, [r4, #32]
 800b19c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b19e:	4643      	mov	r3, r8
 800b1a0:	463a      	mov	r2, r7
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b0      	blx	r6
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	dc08      	bgt.n	800b1bc <__sflush_r+0xfc>
 800b1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1bc:	4407      	add	r7, r0
 800b1be:	eba8 0800 	sub.w	r8, r8, r0
 800b1c2:	e7e7      	b.n	800b194 <__sflush_r+0xd4>
 800b1c4:	dfbffffe 	.word	0xdfbffffe

0800b1c8 <_fflush_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	690b      	ldr	r3, [r1, #16]
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	b913      	cbnz	r3, 800b1d8 <_fflush_r+0x10>
 800b1d2:	2500      	movs	r5, #0
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	b118      	cbz	r0, 800b1e2 <_fflush_r+0x1a>
 800b1da:	6a03      	ldr	r3, [r0, #32]
 800b1dc:	b90b      	cbnz	r3, 800b1e2 <_fflush_r+0x1a>
 800b1de:	f7fe f957 	bl	8009490 <__sinit>
 800b1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d0f3      	beq.n	800b1d2 <_fflush_r+0xa>
 800b1ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1ec:	07d0      	lsls	r0, r2, #31
 800b1ee:	d404      	bmi.n	800b1fa <_fflush_r+0x32>
 800b1f0:	0599      	lsls	r1, r3, #22
 800b1f2:	d402      	bmi.n	800b1fa <_fflush_r+0x32>
 800b1f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1f6:	f7fe fb46 	bl	8009886 <__retarget_lock_acquire_recursive>
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	f7ff ff5f 	bl	800b0c0 <__sflush_r>
 800b202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b204:	07da      	lsls	r2, r3, #31
 800b206:	4605      	mov	r5, r0
 800b208:	d4e4      	bmi.n	800b1d4 <_fflush_r+0xc>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	059b      	lsls	r3, r3, #22
 800b20e:	d4e1      	bmi.n	800b1d4 <_fflush_r+0xc>
 800b210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b212:	f7fe fb39 	bl	8009888 <__retarget_lock_release_recursive>
 800b216:	e7dd      	b.n	800b1d4 <_fflush_r+0xc>

0800b218 <__swhatbuf_r>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	460c      	mov	r4, r1
 800b21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b220:	2900      	cmp	r1, #0
 800b222:	b096      	sub	sp, #88	@ 0x58
 800b224:	4615      	mov	r5, r2
 800b226:	461e      	mov	r6, r3
 800b228:	da0d      	bge.n	800b246 <__swhatbuf_r+0x2e>
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b230:	f04f 0100 	mov.w	r1, #0
 800b234:	bf14      	ite	ne
 800b236:	2340      	movne	r3, #64	@ 0x40
 800b238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b23c:	2000      	movs	r0, #0
 800b23e:	6031      	str	r1, [r6, #0]
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	b016      	add	sp, #88	@ 0x58
 800b244:	bd70      	pop	{r4, r5, r6, pc}
 800b246:	466a      	mov	r2, sp
 800b248:	f000 f848 	bl	800b2dc <_fstat_r>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	dbec      	blt.n	800b22a <__swhatbuf_r+0x12>
 800b250:	9901      	ldr	r1, [sp, #4]
 800b252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b25a:	4259      	negs	r1, r3
 800b25c:	4159      	adcs	r1, r3
 800b25e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b262:	e7eb      	b.n	800b23c <__swhatbuf_r+0x24>

0800b264 <__smakebuf_r>:
 800b264:	898b      	ldrh	r3, [r1, #12]
 800b266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b268:	079d      	lsls	r5, r3, #30
 800b26a:	4606      	mov	r6, r0
 800b26c:	460c      	mov	r4, r1
 800b26e:	d507      	bpl.n	800b280 <__smakebuf_r+0x1c>
 800b270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	6123      	str	r3, [r4, #16]
 800b278:	2301      	movs	r3, #1
 800b27a:	6163      	str	r3, [r4, #20]
 800b27c:	b003      	add	sp, #12
 800b27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b280:	ab01      	add	r3, sp, #4
 800b282:	466a      	mov	r2, sp
 800b284:	f7ff ffc8 	bl	800b218 <__swhatbuf_r>
 800b288:	9f00      	ldr	r7, [sp, #0]
 800b28a:	4605      	mov	r5, r0
 800b28c:	4639      	mov	r1, r7
 800b28e:	4630      	mov	r0, r6
 800b290:	f7ff f9c6 	bl	800a620 <_malloc_r>
 800b294:	b948      	cbnz	r0, 800b2aa <__smakebuf_r+0x46>
 800b296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29a:	059a      	lsls	r2, r3, #22
 800b29c:	d4ee      	bmi.n	800b27c <__smakebuf_r+0x18>
 800b29e:	f023 0303 	bic.w	r3, r3, #3
 800b2a2:	f043 0302 	orr.w	r3, r3, #2
 800b2a6:	81a3      	strh	r3, [r4, #12]
 800b2a8:	e7e2      	b.n	800b270 <__smakebuf_r+0xc>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	6020      	str	r0, [r4, #0]
 800b2ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2ba:	b15b      	cbz	r3, 800b2d4 <__smakebuf_r+0x70>
 800b2bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f000 f81d 	bl	800b300 <_isatty_r>
 800b2c6:	b128      	cbz	r0, 800b2d4 <__smakebuf_r+0x70>
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	f023 0303 	bic.w	r3, r3, #3
 800b2ce:	f043 0301 	orr.w	r3, r3, #1
 800b2d2:	81a3      	strh	r3, [r4, #12]
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	431d      	orrs	r5, r3
 800b2d8:	81a5      	strh	r5, [r4, #12]
 800b2da:	e7cf      	b.n	800b27c <__smakebuf_r+0x18>

0800b2dc <_fstat_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4d07      	ldr	r5, [pc, #28]	@ (800b2fc <_fstat_r+0x20>)
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	4608      	mov	r0, r1
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	602b      	str	r3, [r5, #0]
 800b2ea:	f7f7 facd 	bl	8002888 <_fstat>
 800b2ee:	1c43      	adds	r3, r0, #1
 800b2f0:	d102      	bne.n	800b2f8 <_fstat_r+0x1c>
 800b2f2:	682b      	ldr	r3, [r5, #0]
 800b2f4:	b103      	cbz	r3, 800b2f8 <_fstat_r+0x1c>
 800b2f6:	6023      	str	r3, [r4, #0]
 800b2f8:	bd38      	pop	{r3, r4, r5, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20000794 	.word	0x20000794

0800b300 <_isatty_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4d06      	ldr	r5, [pc, #24]	@ (800b31c <_isatty_r+0x1c>)
 800b304:	2300      	movs	r3, #0
 800b306:	4604      	mov	r4, r0
 800b308:	4608      	mov	r0, r1
 800b30a:	602b      	str	r3, [r5, #0]
 800b30c:	f7f7 facc 	bl	80028a8 <_isatty>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d102      	bne.n	800b31a <_isatty_r+0x1a>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	b103      	cbz	r3, 800b31a <_isatty_r+0x1a>
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	20000794 	.word	0x20000794

0800b320 <_sbrk_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4d06      	ldr	r5, [pc, #24]	@ (800b33c <_sbrk_r+0x1c>)
 800b324:	2300      	movs	r3, #0
 800b326:	4604      	mov	r4, r0
 800b328:	4608      	mov	r0, r1
 800b32a:	602b      	str	r3, [r5, #0]
 800b32c:	f7f7 fad4 	bl	80028d8 <_sbrk>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_sbrk_r+0x1a>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_sbrk_r+0x1a>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	20000794 	.word	0x20000794

0800b340 <memcpy>:
 800b340:	440a      	add	r2, r1
 800b342:	4291      	cmp	r1, r2
 800b344:	f100 33ff 	add.w	r3, r0, #4294967295
 800b348:	d100      	bne.n	800b34c <memcpy+0xc>
 800b34a:	4770      	bx	lr
 800b34c:	b510      	push	{r4, lr}
 800b34e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b352:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b356:	4291      	cmp	r1, r2
 800b358:	d1f9      	bne.n	800b34e <memcpy+0xe>
 800b35a:	bd10      	pop	{r4, pc}

0800b35c <__assert_func>:
 800b35c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b35e:	4614      	mov	r4, r2
 800b360:	461a      	mov	r2, r3
 800b362:	4b09      	ldr	r3, [pc, #36]	@ (800b388 <__assert_func+0x2c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4605      	mov	r5, r0
 800b368:	68d8      	ldr	r0, [r3, #12]
 800b36a:	b954      	cbnz	r4, 800b382 <__assert_func+0x26>
 800b36c:	4b07      	ldr	r3, [pc, #28]	@ (800b38c <__assert_func+0x30>)
 800b36e:	461c      	mov	r4, r3
 800b370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b374:	9100      	str	r1, [sp, #0]
 800b376:	462b      	mov	r3, r5
 800b378:	4905      	ldr	r1, [pc, #20]	@ (800b390 <__assert_func+0x34>)
 800b37a:	f000 f841 	bl	800b400 <fiprintf>
 800b37e:	f000 f851 	bl	800b424 <abort>
 800b382:	4b04      	ldr	r3, [pc, #16]	@ (800b394 <__assert_func+0x38>)
 800b384:	e7f4      	b.n	800b370 <__assert_func+0x14>
 800b386:	bf00      	nop
 800b388:	20000098 	.word	0x20000098
 800b38c:	0800ba6e 	.word	0x0800ba6e
 800b390:	0800ba40 	.word	0x0800ba40
 800b394:	0800ba33 	.word	0x0800ba33

0800b398 <_calloc_r>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	fba1 5402 	umull	r5, r4, r1, r2
 800b39e:	b93c      	cbnz	r4, 800b3b0 <_calloc_r+0x18>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f7ff f93d 	bl	800a620 <_malloc_r>
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	b928      	cbnz	r0, 800b3b6 <_calloc_r+0x1e>
 800b3aa:	2600      	movs	r6, #0
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	220c      	movs	r2, #12
 800b3b2:	6002      	str	r2, [r0, #0]
 800b3b4:	e7f9      	b.n	800b3aa <_calloc_r+0x12>
 800b3b6:	462a      	mov	r2, r5
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	f7fe f9e7 	bl	800978c <memset>
 800b3be:	e7f5      	b.n	800b3ac <_calloc_r+0x14>

0800b3c0 <__ascii_mbtowc>:
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	b901      	cbnz	r1, 800b3c6 <__ascii_mbtowc+0x6>
 800b3c4:	a901      	add	r1, sp, #4
 800b3c6:	b142      	cbz	r2, 800b3da <__ascii_mbtowc+0x1a>
 800b3c8:	b14b      	cbz	r3, 800b3de <__ascii_mbtowc+0x1e>
 800b3ca:	7813      	ldrb	r3, [r2, #0]
 800b3cc:	600b      	str	r3, [r1, #0]
 800b3ce:	7812      	ldrb	r2, [r2, #0]
 800b3d0:	1e10      	subs	r0, r2, #0
 800b3d2:	bf18      	it	ne
 800b3d4:	2001      	movne	r0, #1
 800b3d6:	b002      	add	sp, #8
 800b3d8:	4770      	bx	lr
 800b3da:	4610      	mov	r0, r2
 800b3dc:	e7fb      	b.n	800b3d6 <__ascii_mbtowc+0x16>
 800b3de:	f06f 0001 	mvn.w	r0, #1
 800b3e2:	e7f8      	b.n	800b3d6 <__ascii_mbtowc+0x16>

0800b3e4 <__ascii_wctomb>:
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	4608      	mov	r0, r1
 800b3e8:	b141      	cbz	r1, 800b3fc <__ascii_wctomb+0x18>
 800b3ea:	2aff      	cmp	r2, #255	@ 0xff
 800b3ec:	d904      	bls.n	800b3f8 <__ascii_wctomb+0x14>
 800b3ee:	228a      	movs	r2, #138	@ 0x8a
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f6:	4770      	bx	lr
 800b3f8:	700a      	strb	r2, [r1, #0]
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	4770      	bx	lr
	...

0800b400 <fiprintf>:
 800b400:	b40e      	push	{r1, r2, r3}
 800b402:	b503      	push	{r0, r1, lr}
 800b404:	4601      	mov	r1, r0
 800b406:	ab03      	add	r3, sp, #12
 800b408:	4805      	ldr	r0, [pc, #20]	@ (800b420 <fiprintf+0x20>)
 800b40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40e:	6800      	ldr	r0, [r0, #0]
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	f7ff fd3d 	bl	800ae90 <_vfiprintf_r>
 800b416:	b002      	add	sp, #8
 800b418:	f85d eb04 	ldr.w	lr, [sp], #4
 800b41c:	b003      	add	sp, #12
 800b41e:	4770      	bx	lr
 800b420:	20000098 	.word	0x20000098

0800b424 <abort>:
 800b424:	b508      	push	{r3, lr}
 800b426:	2006      	movs	r0, #6
 800b428:	f000 f82c 	bl	800b484 <raise>
 800b42c:	2001      	movs	r0, #1
 800b42e:	f7f7 f9db 	bl	80027e8 <_exit>

0800b432 <_raise_r>:
 800b432:	291f      	cmp	r1, #31
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4605      	mov	r5, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	d904      	bls.n	800b446 <_raise_r+0x14>
 800b43c:	2316      	movs	r3, #22
 800b43e:	6003      	str	r3, [r0, #0]
 800b440:	f04f 30ff 	mov.w	r0, #4294967295
 800b444:	bd38      	pop	{r3, r4, r5, pc}
 800b446:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b448:	b112      	cbz	r2, 800b450 <_raise_r+0x1e>
 800b44a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b44e:	b94b      	cbnz	r3, 800b464 <_raise_r+0x32>
 800b450:	4628      	mov	r0, r5
 800b452:	f000 f831 	bl	800b4b8 <_getpid_r>
 800b456:	4622      	mov	r2, r4
 800b458:	4601      	mov	r1, r0
 800b45a:	4628      	mov	r0, r5
 800b45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b460:	f000 b818 	b.w	800b494 <_kill_r>
 800b464:	2b01      	cmp	r3, #1
 800b466:	d00a      	beq.n	800b47e <_raise_r+0x4c>
 800b468:	1c59      	adds	r1, r3, #1
 800b46a:	d103      	bne.n	800b474 <_raise_r+0x42>
 800b46c:	2316      	movs	r3, #22
 800b46e:	6003      	str	r3, [r0, #0]
 800b470:	2001      	movs	r0, #1
 800b472:	e7e7      	b.n	800b444 <_raise_r+0x12>
 800b474:	2100      	movs	r1, #0
 800b476:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b47a:	4620      	mov	r0, r4
 800b47c:	4798      	blx	r3
 800b47e:	2000      	movs	r0, #0
 800b480:	e7e0      	b.n	800b444 <_raise_r+0x12>
	...

0800b484 <raise>:
 800b484:	4b02      	ldr	r3, [pc, #8]	@ (800b490 <raise+0xc>)
 800b486:	4601      	mov	r1, r0
 800b488:	6818      	ldr	r0, [r3, #0]
 800b48a:	f7ff bfd2 	b.w	800b432 <_raise_r>
 800b48e:	bf00      	nop
 800b490:	20000098 	.word	0x20000098

0800b494 <_kill_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4d07      	ldr	r5, [pc, #28]	@ (800b4b4 <_kill_r+0x20>)
 800b498:	2300      	movs	r3, #0
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	4611      	mov	r1, r2
 800b4a0:	602b      	str	r3, [r5, #0]
 800b4a2:	f7f7 f991 	bl	80027c8 <_kill>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	d102      	bne.n	800b4b0 <_kill_r+0x1c>
 800b4aa:	682b      	ldr	r3, [r5, #0]
 800b4ac:	b103      	cbz	r3, 800b4b0 <_kill_r+0x1c>
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	bd38      	pop	{r3, r4, r5, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000794 	.word	0x20000794

0800b4b8 <_getpid_r>:
 800b4b8:	f7f7 b97e 	b.w	80027b8 <_getpid>

0800b4bc <_init>:
 800b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4be:	bf00      	nop
 800b4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c2:	bc08      	pop	{r3}
 800b4c4:	469e      	mov	lr, r3
 800b4c6:	4770      	bx	lr

0800b4c8 <_fini>:
 800b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ca:	bf00      	nop
 800b4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ce:	bc08      	pop	{r3}
 800b4d0:	469e      	mov	lr, r3
 800b4d2:	4770      	bx	lr
