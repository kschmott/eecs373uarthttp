
eecs373uarthttp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c37c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  0800c540  0800c540  0000d540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d158  0800d158  0000f254  2**0
                  CONTENTS
  4 .ARM          00000008  0800d158  0800d158  0000e158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d160  0800d160  0000f254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d160  0800d160  0000e160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d164  0800d164  0000e164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800d168  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  20000254  0800d3bc  0000f254  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800d3bc  0000f8c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c19  00000000  00000000  0000f284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9e  00000000  00000000  00028e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0002bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124d  00000000  00000000  0002d348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c594  00000000  00000000  0002e595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd28  00000000  00000000  0005ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fbf6  00000000  00000000  00076851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186447  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007614  00000000  00000000  0018648c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000254 	.word	0x20000254
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c524 	.word	0x0800c524

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000258 	.word	0x20000258
 80001fc:	0800c524 	.word	0x0800c524

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <FoodOrder_Init>:
    uint8_t valid;
    int id;
    int box; // 0 when it has not been delivered
    DeliveryState state;
} FoodOrder;
void FoodOrder_Init(FoodOrder* order) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    order->valid = 0;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	751a      	strb	r2, [r3, #20]
    order->box = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
    for(int i = 0; i < 20; ++i){
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e007      	b.n	8000f12 <FoodOrder_Init+0x2a>
    	order->name[i] = '\0';
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 20; ++i){
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b13      	cmp	r3, #19
 8000f16:	ddf4      	ble.n	8000f02 <FoodOrder_Init+0x1a>
    }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <FoodOrder_Equal>:

int FoodOrder_Equal(FoodOrder* lhs, FoodOrder* rhs) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
	if (rhs->valid == 0 && lhs->valid == 0) return 1;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	7d1b      	ldrb	r3, [r3, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d105      	bne.n	8000f44 <FoodOrder_Equal+0x1e>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7d1b      	ldrb	r3, [r3, #20]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <FoodOrder_Equal+0x1e>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e031      	b.n	8000fa8 <FoodOrder_Equal+0x82>
	if (rhs->valid == 0 || lhs->valid == 0) return 0;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	7d1b      	ldrb	r3, [r3, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <FoodOrder_Equal+0x2e>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7d1b      	ldrb	r3, [r3, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <FoodOrder_Equal+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	e027      	b.n	8000fa8 <FoodOrder_Equal+0x82>

	if (strcmp(lhs->name, rhs->name)) return 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff f94e 	bl	8000200 <strcmp>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <FoodOrder_Equal+0x48>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e01c      	b.n	8000fa8 <FoodOrder_Equal+0x82>
	return lhs->id == rhs->id && lhs->valid == rhs->valid && lhs->box == rhs->box && lhs->state == rhs->state;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699a      	ldr	r2, [r3, #24]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d115      	bne.n	8000fa6 <FoodOrder_Equal+0x80>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7d1a      	ldrb	r2, [r3, #20]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	7d1b      	ldrb	r3, [r3, #20]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d10f      	bne.n	8000fa6 <FoodOrder_Equal+0x80>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d109      	bne.n	8000fa6 <FoodOrder_Equal+0x80>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d101      	bne.n	8000fa6 <FoodOrder_Equal+0x80>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <FoodOrder_Equal+0x82>
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <FoodOrders_Equal>:

int FoodOrders_Equal(FoodOrder lhs[MAX_FOOD_ORDERS], FoodOrder rhs[MAX_FOOD_ORDERS]) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e01a      	b.n	8000ff6 <FoodOrders_Equal+0x46>
		if (!FoodOrder_Equal(&lhs[i], &rhs[i])) return 0;
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1898      	adds	r0, r3, r2
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff ffa0 	bl	8000f26 <FoodOrder_Equal>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <FoodOrders_Equal+0x40>
 8000fec:	2300      	movs	r3, #0
 8000fee:	e006      	b.n	8000ffe <FoodOrders_Equal+0x4e>
	for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	dde1      	ble.n	8000fc0 <FoodOrders_Equal+0x10>
	}
	return 1;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <FoodOrders_Copy>:

void FoodOrders_Copy(FoodOrder dest[MAX_FOOD_ORDERS], FoodOrder src[MAX_FOOD_ORDERS]){
 8001006:	b4b0      	push	{r4, r5, r7}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e01a      	b.n	800104c <FoodOrders_Copy+0x46>
			dest[i] = src[i];
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	461a      	mov	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	1899      	adds	r1, r3, r2
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	461c      	mov	r4, r3
 8001038:	460d      	mov	r5, r1
 800103a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001042:	682b      	ldr	r3, [r5, #0]
 8001044:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3301      	adds	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b03      	cmp	r3, #3
 8001050:	dde1      	ble.n	8001016 <FoodOrders_Copy+0x10>
		}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bcb0      	pop	{r4, r5, r7}
 800105c:	4770      	bx	lr
	...

08001060 <FoodOrders_FindEmpty>:

int FoodOrders_FindEmpty(FoodOrder orders[MAX_FOOD_ORDERS]) {
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b089      	sub	sp, #36	@ 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	int boxes[MAX_FOOD_ORDERS] = {1, 1, 1, 1};
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <FoodOrders_FindEmpty+0x9c>)
 800106a:	f107 0408 	add.w	r4, r7, #8
 800106e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	e01d      	b.n	80010b6 <FoodOrders_FindEmpty+0x56>
		if (orders[i].box) {
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00f      	beq.n	80010b0 <FoodOrders_FindEmpty+0x50>
			boxes[orders[i].box - 1] = 0;
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	3320      	adds	r3, #32
 80010a8:	443b      	add	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	f843 2c18 	str.w	r2, [r3, #-24]
	for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	ddde      	ble.n	800107a <FoodOrders_FindEmpty+0x1a>
		}
	}

	for (int i = 0; i < box_count; i++) {
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	e00d      	b.n	80010de <FoodOrders_FindEmpty+0x7e>
		if (boxes[i]) return i + 1;
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	3320      	adds	r3, #32
 80010c8:	443b      	add	r3, r7
 80010ca:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <FoodOrders_FindEmpty+0x78>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	3301      	adds	r3, #1
 80010d6:	e00c      	b.n	80010f2 <FoodOrders_FindEmpty+0x92>
	for (int i = 0; i < box_count; i++) {
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	3301      	adds	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <FoodOrders_FindEmpty+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbec      	blt.n	80010c2 <FoodOrders_FindEmpty+0x62>
	}

	printf("Find empty: failed to find an empty box.\r\n");
 80010e8:	4806      	ldr	r0, [pc, #24]	@ (8001104 <FoodOrders_FindEmpty+0xa4>)
 80010ea:	f009 f8db 	bl	800a2a4 <puts>
	return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0800c56c 	.word	0x0800c56c
 8001100:	20000270 	.word	0x20000270
 8001104:	0800c540 	.word	0x0800c540

08001108 <FoodOrder_FindIndex>:

int FoodOrder_FindIndex(int id, FoodOrder orders[MAX_FOOD_ORDERS]) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e010      	b.n	800113a <FoodOrder_FindIndex+0x32>
		if (orders[i].id == id) return i;
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	461a      	mov	r2, r3
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d101      	bne.n	8001134 <FoodOrder_FindIndex+0x2c>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e00a      	b.n	800114a <FoodOrder_FindIndex+0x42>
	for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b03      	cmp	r3, #3
 800113e:	ddeb      	ble.n	8001118 <FoodOrder_FindIndex+0x10>
	}

	printf("Find index: failed to find button corresponding to a given id.\r\n");
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <FoodOrder_FindIndex+0x4c>)
 8001142:	f009 f8af 	bl	800a2a4 <puts>
	return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	0800c57c 	.word	0x0800c57c

08001158 <big>:
    0x01, 0x01, 0x1E, 0x00, 0x19, 0x1D, 0x17, 0x12, 0x00, 0x3C, 0x3C, 0x3C,
    0x3C, 0x00, 0x00, 0x00, 0x00, 0x00 // #255 NBSP
};

// convert a little endian 16 bit number to big endian
uint16_t big(uint16_t original) {
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	uint16_t result = original << 8;
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	81fb      	strh	r3, [r7, #14]
	result |= original >> 8;
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b29a      	uxth	r2, r3
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	4313      	orrs	r3, r2
 8001172:	81fb      	strh	r3, [r7, #14]
	return result;
 8001174:	89fb      	ldrh	r3, [r7, #14]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <sendCommand>:

// send an SPI command in the correct format
void sendCommand(SPI_HandleTypeDef* spi, uint8_t commandByte, uint8_t *dataBytes, uint16_t numDataBytes) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	461a      	mov	r2, r3
 8001190:	460b      	mov	r3, r1
 8001192:	72fb      	strb	r3, [r7, #11]
 8001194:	4613      	mov	r3, r2
 8001196:	813b      	strh	r3, [r7, #8]
	//printf("Sending command: cmd %x, args %d\r\n", commandByte, numDataBytes);

	// first send the command byte
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET); // pull DC low
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800119e:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <sendCommand+0x50>)
 80011a0:	f002 fda4 	bl	8003cec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &commandByte, 1, 100); // write the byte
 80011a4:	f107 010b 	add.w	r1, r7, #11
 80011a8:	2364      	movs	r3, #100	@ 0x64
 80011aa:	2201      	movs	r2, #1
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f005 f908 	bl	80063c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET); // pull DC back high
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b8:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <sendCommand+0x50>)
 80011ba:	f002 fd97 	bl	8003cec <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spi, dataBytes, numDataBytes, 100);
 80011be:	893a      	ldrh	r2, [r7, #8]
 80011c0:	2364      	movs	r3, #100	@ 0x64
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f005 f8fc 	bl	80063c2 <HAL_SPI_Transmit>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	48001400 	.word	0x48001400

080011d8 <plasterPixel>:

void plasterPixel(uint16_t *buffer, uint16_t buttonWidth, uint16_t buttonHeight, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t color) {
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	4608      	mov	r0, r1
 80011e2:	4611      	mov	r1, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	817b      	strh	r3, [r7, #10]
 80011ea:	460b      	mov	r3, r1
 80011ec:	813b      	strh	r3, [r7, #8]
 80011ee:	4613      	mov	r3, r2
 80011f0:	80fb      	strh	r3, [r7, #6]
	if (x1 < 0 || x2 > buttonWidth || y1 < 0 || y2 > buttonHeight) {
 80011f2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80011f4:	897b      	ldrh	r3, [r7, #10]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d803      	bhi.n	8001202 <plasterPixel+0x2a>
 80011fa:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80011fc:	893b      	ldrh	r3, [r7, #8]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d903      	bls.n	800120a <plasterPixel+0x32>
		printf("plasterPixel: trying to write off the end.\r\n");
 8001202:	4815      	ldr	r0, [pc, #84]	@ (8001258 <plasterPixel+0x80>)
 8001204:	f009 f84e 	bl	800a2a4 <puts>
		return;
 8001208:	e022      	b.n	8001250 <plasterPixel+0x78>
	}

	// the buffer is left to right top to bottom
	for (uint16_t x = x1; x <= x2; x++) {
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	82fb      	strh	r3, [r7, #22]
 800120e:	e01b      	b.n	8001248 <plasterPixel+0x70>
		for (uint16_t y = y1; y <= y2; y++) {
 8001210:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001212:	82bb      	strh	r3, [r7, #20]
 8001214:	e011      	b.n	800123a <plasterPixel+0x62>
			buffer[y * buttonWidth + x] = big(color);
 8001216:	8abb      	ldrh	r3, [r7, #20]
 8001218:	897a      	ldrh	r2, [r7, #10]
 800121a:	fb03 f202 	mul.w	r2, r3, r2
 800121e:	8afb      	ldrh	r3, [r7, #22]
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	18d4      	adds	r4, r2, r3
 8001228:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff94 	bl	8001158 <big>
 8001230:	4603      	mov	r3, r0
 8001232:	8023      	strh	r3, [r4, #0]
		for (uint16_t y = y1; y <= y2; y++) {
 8001234:	8abb      	ldrh	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	82bb      	strh	r3, [r7, #20]
 800123a:	8aba      	ldrh	r2, [r7, #20]
 800123c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800123e:	429a      	cmp	r2, r3
 8001240:	d9e9      	bls.n	8001216 <plasterPixel+0x3e>
	for (uint16_t x = x1; x <= x2; x++) {
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	3301      	adds	r3, #1
 8001246:	82fb      	strh	r3, [r7, #22]
 8001248:	8afa      	ldrh	r2, [r7, #22]
 800124a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800124c:	429a      	cmp	r2, r3
 800124e:	d9df      	bls.n	8001210 <plasterPixel+0x38>
		}
	}
}
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}
 8001256:	bf00      	nop
 8001258:	0800c5bc 	.word	0x0800c5bc

0800125c <plasterCharacter>:

void plasterCharacter(uint16_t *buffer, uint16_t buttonWidth, uint16_t buttonHeight, uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size_x, uint8_t size_y) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	@ 0x30
 8001260:	af04      	add	r7, sp, #16
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4603      	mov	r3, r0
 800126c:	817b      	strh	r3, [r7, #10]
 800126e:	460b      	mov	r3, r1
 8001270:	813b      	strh	r3, [r7, #8]
 8001272:	4613      	mov	r3, r2
 8001274:	80fb      	strh	r3, [r7, #6]
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001276:	2300      	movs	r3, #0
 8001278:	77fb      	strb	r3, [r7, #31]
 800127a:	e05c      	b.n	8001336 <plasterCharacter+0xda>
    	uint8_t line = font[c * 5 + i];
 800127c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	441a      	add	r2, r3
 8001286:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800128a:	4413      	add	r3, r2
 800128c:	4a2e      	ldr	r2, [pc, #184]	@ (8001348 <plasterCharacter+0xec>)
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	77bb      	strb	r3, [r7, #30]
    	for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001292:	2300      	movs	r3, #0
 8001294:	777b      	strb	r3, [r7, #29]
 8001296:	e044      	b.n	8001322 <plasterCharacter+0xc6>
    		if (line & 1) {
 8001298:	7fbb      	ldrb	r3, [r7, #30]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d036      	beq.n	8001310 <plasterCharacter+0xb4>
    			uint16_t x1 = x + i * size_x;
 80012a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	fb12 f303 	smulbb	r3, r2, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4413      	add	r3, r2
 80012b8:	837b      	strh	r3, [r7, #26]
    			uint16_t y1 = y + j * size_y;
 80012ba:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	fb12 f303 	smulbb	r3, r2, r3
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012ce:	4413      	add	r3, r2
 80012d0:	833b      	strh	r3, [r7, #24]
    			uint16_t x2 = x1 + size_x - 1;
 80012d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	8b7b      	ldrh	r3, [r7, #26]
 80012da:	4413      	add	r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	3b01      	subs	r3, #1
 80012e0:	82fb      	strh	r3, [r7, #22]
    			uint16_t y2 = y1 + size_y - 1;
 80012e2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3b01      	subs	r3, #1
 80012f0:	82bb      	strh	r3, [r7, #20]
    			plasterPixel(buffer, buttonWidth, buttonHeight, x1, x2, y1, y2, color);
 80012f2:	8b78      	ldrh	r0, [r7, #26]
 80012f4:	893a      	ldrh	r2, [r7, #8]
 80012f6:	8979      	ldrh	r1, [r7, #10]
 80012f8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	8abb      	ldrh	r3, [r7, #20]
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	8b3b      	ldrh	r3, [r7, #24]
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	8afb      	ldrh	r3, [r7, #22]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4603      	mov	r3, r0
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff ff64 	bl	80011d8 <plasterPixel>
    	for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001310:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	777b      	strb	r3, [r7, #29]
 800131c:	7fbb      	ldrb	r3, [r7, #30]
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	77bb      	strb	r3, [r7, #30]
 8001322:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001326:	2b07      	cmp	r3, #7
 8001328:	ddb6      	ble.n	8001298 <plasterCharacter+0x3c>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800132a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3301      	adds	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	77fb      	strb	r3, [r7, #31]
 8001336:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800133a:	2b04      	cmp	r3, #4
 800133c:	dd9e      	ble.n	800127c <plasterCharacter+0x20>
    		}
    	}
    }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800c874 	.word	0x0800c874

0800134c <plasterString>:

void plasterString(uint16_t *buffer, uint16_t buttonWidth, uint16_t buttonHeight, uint16_t x, uint16_t y, char *s, uint16_t color, uint8_t size_x, uint8_t size_y) {
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b08d      	sub	sp, #52	@ 0x34
 8001350:	af06      	add	r7, sp, #24
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	4608      	mov	r0, r1
 8001356:	4611      	mov	r1, r2
 8001358:	461a      	mov	r2, r3
 800135a:	4603      	mov	r3, r0
 800135c:	817b      	strh	r3, [r7, #10]
 800135e:	460b      	mov	r3, r1
 8001360:	813b      	strh	r3, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	80fb      	strh	r3, [r7, #6]
	uint16_t width = (5 + 1) * size_x; // because character has 5 columns, +1 to add space between characters
 8001366:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800136a:	b29b      	uxth	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	0052      	lsls	r2, r2, #1
 8001370:	4413      	add	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	82bb      	strh	r3, [r7, #20]
	//x += width / 2; // indent it by half of one character
	for (uint8_t i = 0; s[i] != 0; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
 800137a:	e028      	b.n	80013ce <plasterString+0x82>
		uint16_t offset = x + i * width;
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	b29b      	uxth	r3, r3
 8001380:	8aba      	ldrh	r2, [r7, #20]
 8001382:	fb12 f303 	smulbb	r3, r2, r3
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	827b      	strh	r3, [r7, #18]
		if (offset + width > 479) return; // off the end of the screen
 800138e:	8a7a      	ldrh	r2, [r7, #18]
 8001390:	8abb      	ldrh	r3, [r7, #20]
 8001392:	4413      	add	r3, r2
 8001394:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001398:	da20      	bge.n	80013dc <plasterString+0x90>
		plasterCharacter(buffer, buttonWidth, buttonHeight, offset, y, s[i], color, size_x, size_y);
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	8a7c      	ldrh	r4, [r7, #18]
 80013a4:	8938      	ldrh	r0, [r7, #8]
 80013a6:	8979      	ldrh	r1, [r7, #10]
 80013a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80013ac:	9204      	str	r2, [sp, #16]
 80013ae:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80013b2:	9203      	str	r2, [sp, #12]
 80013b4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80013b6:	9202      	str	r2, [sp, #8]
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4623      	mov	r3, r4
 80013c0:	4602      	mov	r2, r0
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f7ff ff4a 	bl	800125c <plasterCharacter>
	for (uint8_t i = 0; s[i] != 0; i++) {
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	3301      	adds	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1d0      	bne.n	800137c <plasterString+0x30>
 80013da:	e000      	b.n	80013de <plasterString+0x92>
		if (offset + width > 479) return; // off the end of the screen
 80013dc:	bf00      	nop
	}
}
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}

080013e4 <sendButton>:

void sendButton(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t value, char* s) {
 80013e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013e8:	b095      	sub	sp, #84	@ 0x54
 80013ea:	af06      	add	r7, sp, #24
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	4608      	mov	r0, r1
 80013f0:	4611      	mov	r1, r2
 80013f2:	461a      	mov	r2, r3
 80013f4:	4603      	mov	r3, r0
 80013f6:	817b      	strh	r3, [r7, #10]
 80013f8:	460b      	mov	r3, r1
 80013fa:	813b      	strh	r3, [r7, #8]
 80013fc:	4613      	mov	r3, r2
 80013fe:	80fb      	strh	r3, [r7, #6]
 8001400:	466b      	mov	r3, sp
 8001402:	461e      	mov	r6, r3

	uint16_t width = (x2-x1+1);
 8001404:	893a      	ldrh	r2, [r7, #8]
 8001406:	897b      	ldrh	r3, [r7, #10]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29b      	uxth	r3, r3
 800140c:	3301      	adds	r3, #1
 800140e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t height = (y2-y1+1);
 8001410:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	b29b      	uxth	r3, r3
 800141a:	3301      	adds	r3, #1
 800141c:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint32_t amount = (uint32_t)width * (uint32_t)height; // amount of pixels to send
 800141e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001420:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t widthSpan[2] = {big(x1), big(x2)};
 8001428:	897b      	ldrh	r3, [r7, #10]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe94 	bl	8001158 <big>
 8001430:	4603      	mov	r3, r0
 8001432:	833b      	strh	r3, [r7, #24]
 8001434:	893b      	ldrh	r3, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fe8e 	bl	8001158 <big>
 800143c:	4603      	mov	r3, r0
 800143e:	837b      	strh	r3, [r7, #26]
	uint16_t heightSpan[2] = {big(y1), big(y2)};
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fe88 	bl	8001158 <big>
 8001448:	4603      	mov	r3, r0
 800144a:	82bb      	strh	r3, [r7, #20]
 800144c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe81 	bl	8001158 <big>
 8001456:	4603      	mov	r3, r0
 8001458:	82fb      	strh	r3, [r7, #22]
	sendCommand(spi, HX8357_CASET, (uint8_t*)widthSpan, 4);
 800145a:	f107 0218 	add.w	r2, r7, #24
 800145e:	2304      	movs	r3, #4
 8001460:	212a      	movs	r1, #42	@ 0x2a
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fe8e 	bl	8001184 <sendCommand>
	sendCommand(spi, HX8357_PASET, (uint8_t*)heightSpan, 4);
 8001468:	f107 0214 	add.w	r2, r7, #20
 800146c:	2304      	movs	r3, #4
 800146e:	212b      	movs	r1, #43	@ 0x2b
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff fe87 	bl	8001184 <sendCommand>
	// This sends the pixels. There are likely more than 2^16 to send,
	// however the HAL SPI can only send 2^16 at a time, so break up the
	// transaction into chunks of 2^16. Don't send one at a time because that
	// is much much slower. It is still fairly slow so in the future I
	// could try to optimize it.
	sendCommand(spi, HX8357_RAMWR, NULL, 0);
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	212c      	movs	r1, #44	@ 0x2c
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff fe81 	bl	8001184 <sendCommand>
	const uint32_t fullLength = 32767; // maximum amount of pixels that can be sent at once
 8001482:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (amount > fullLength) {
 8001488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	429a      	cmp	r2, r3
 800148e:	d904      	bls.n	800149a <sendButton+0xb6>
		printf("Can't buffer more than one small button!\r\n");
 8001490:	4837      	ldr	r0, [pc, #220]	@ (8001570 <sendButton+0x18c>)
 8001492:	f008 ff07 	bl	800a2a4 <puts>
		return;
 8001496:	46b5      	mov	sp, r6
 8001498:	e065      	b.n	8001566 <sendButton+0x182>
	}

	uint16_t buffer[fullLength];
 800149a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149c:	3b01      	subs	r3, #1
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a2:	2200      	movs	r2, #0
 80014a4:	4698      	mov	r8, r3
 80014a6:	4691      	mov	r9, r2
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80014b4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80014b8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80014bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014be:	2200      	movs	r2, #0
 80014c0:	461c      	mov	r4, r3
 80014c2:	4615      	mov	r5, r2
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	012b      	lsls	r3, r5, #4
 80014ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80014d2:	0122      	lsls	r2, r4, #4
 80014d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	3307      	adds	r3, #7
 80014da:	08db      	lsrs	r3, r3, #3
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	ebad 0d03 	sub.w	sp, sp, r3
 80014e2:	ab06      	add	r3, sp, #24
 80014e4:	3301      	adds	r3, #1
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
	for (uint16_t i = 0; i < amount; i++) buffer[i] = big(value); // fill the buffer
 80014ec:	2300      	movs	r3, #0
 80014ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80014f0:	e00d      	b.n	800150e <sendButton+0x12a>
 80014f2:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 80014f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe2d 	bl	8001158 <big>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001508:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800150a:	3301      	adds	r3, #1
 800150c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800150e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001512:	429a      	cmp	r2, r3
 8001514:	d8ed      	bhi.n	80014f2 <sendButton+0x10e>

	uint16_t textPixelSize = 3;
 8001516:	2303      	movs	r3, #3
 8001518:	83fb      	strh	r3, [r7, #30]
	plasterString(&buffer, width, height, textPixelSize * 2, textPixelSize * 5, s, 0xffff, textPixelSize, textPixelSize);
 800151a:	8bfb      	ldrh	r3, [r7, #30]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	b29d      	uxth	r5, r3
 8001520:	8bfb      	ldrh	r3, [r7, #30]
 8001522:	461a      	mov	r2, r3
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	4413      	add	r3, r2
 8001528:	b29b      	uxth	r3, r3
 800152a:	8bfa      	ldrh	r2, [r7, #30]
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	8bf9      	ldrh	r1, [r7, #30]
 8001530:	b2c9      	uxtb	r1, r1
 8001532:	8e7c      	ldrh	r4, [r7, #50]	@ 0x32
 8001534:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8001536:	9104      	str	r1, [sp, #16]
 8001538:	9203      	str	r2, [sp, #12]
 800153a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153e:	9202      	str	r2, [sp, #8]
 8001540:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001542:	9201      	str	r2, [sp, #4]
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	462b      	mov	r3, r5
 8001548:	4622      	mov	r2, r4
 800154a:	4601      	mov	r1, r0
 800154c:	6a38      	ldr	r0, [r7, #32]
 800154e:	f7ff fefd 	bl	800134c <plasterString>

	HAL_SPI_Transmit(spi, (uint8_t*)&buffer, amount * 2, 100);
 8001552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001554:	b29b      	uxth	r3, r3
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	2364      	movs	r3, #100	@ 0x64
 800155c:	6a39      	ldr	r1, [r7, #32]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f004 ff2f 	bl	80063c2 <HAL_SPI_Transmit>
 8001564:	46b5      	mov	sp, r6
}
 8001566:	373c      	adds	r7, #60	@ 0x3c
 8001568:	46bd      	mov	sp, r7
 800156a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800156e:	bf00      	nop
 8001570:	0800c5e8 	.word	0x0800c5e8

08001574 <sendBlock>:

// x1 <= x2, y1 <= y2
void sendBlock(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t value) {
 8001574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001578:	b08f      	sub	sp, #60	@ 0x3c
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	4608      	mov	r0, r1
 8001580:	4611      	mov	r1, r2
 8001582:	461a      	mov	r2, r3
 8001584:	4603      	mov	r3, r0
 8001586:	817b      	strh	r3, [r7, #10]
 8001588:	460b      	mov	r3, r1
 800158a:	813b      	strh	r3, [r7, #8]
 800158c:	4613      	mov	r3, r2
 800158e:	80fb      	strh	r3, [r7, #6]
 8001590:	466b      	mov	r3, sp
 8001592:	461e      	mov	r6, r3

	uint32_t amount = (uint32_t)(x2-x1+1) * (uint32_t)(y2-y1+1); // amount of pixels to send
 8001594:	893a      	ldrh	r2, [r7, #8]
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	3301      	adds	r3, #1
 800159c:	4619      	mov	r1, r3
 800159e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t widthSpan[2] = {big(x1), big(x2)};
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fdd1 	bl	8001158 <big>
 80015b6:	4603      	mov	r3, r0
 80015b8:	82bb      	strh	r3, [r7, #20]
 80015ba:	893b      	ldrh	r3, [r7, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fdcb 	bl	8001158 <big>
 80015c2:	4603      	mov	r3, r0
 80015c4:	82fb      	strh	r3, [r7, #22]
	uint16_t heightSpan[2] = {big(y1), big(y2)};
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fdc5 	bl	8001158 <big>
 80015ce:	4603      	mov	r3, r0
 80015d0:	823b      	strh	r3, [r7, #16]
 80015d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fdbe 	bl	8001158 <big>
 80015dc:	4603      	mov	r3, r0
 80015de:	827b      	strh	r3, [r7, #18]
	sendCommand(spi, HX8357_CASET, (uint8_t*)widthSpan, 4);
 80015e0:	f107 0214 	add.w	r2, r7, #20
 80015e4:	2304      	movs	r3, #4
 80015e6:	212a      	movs	r1, #42	@ 0x2a
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7ff fdcb 	bl	8001184 <sendCommand>
	sendCommand(spi, HX8357_PASET, (uint8_t*)heightSpan, 4);
 80015ee:	f107 0210 	add.w	r2, r7, #16
 80015f2:	2304      	movs	r3, #4
 80015f4:	212b      	movs	r1, #43	@ 0x2b
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff fdc4 	bl	8001184 <sendCommand>
	// This sends the pixels. There are likely more than 2^16 to send,
	// however the HAL SPI can only send 2^16 at a time, so break up the
	// transaction into chunks of 2^16. Don't send one at a time because that
	// is much much slower. It is still fairly slow so in the future I
	// could try to optimize it.
	sendCommand(spi, HX8357_RAMWR, NULL, 0);
 80015fc:	2300      	movs	r3, #0
 80015fe:	2200      	movs	r2, #0
 8001600:	212c      	movs	r1, #44	@ 0x2c
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f7ff fdbe 	bl	8001184 <sendCommand>
	uint16_t fullLength = 32767; // maximum amount of pixels that can be sent at once
 8001608:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800160c:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t buffer[fullLength];
 800160e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001610:	460b      	mov	r3, r1
 8001612:	3b01      	subs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
 8001616:	b28b      	uxth	r3, r1
 8001618:	2200      	movs	r2, #0
 800161a:	4698      	mov	r8, r3
 800161c:	4691      	mov	r9, r2
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800162a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800162e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001632:	b28b      	uxth	r3, r1
 8001634:	2200      	movs	r2, #0
 8001636:	461c      	mov	r4, r3
 8001638:	4615      	mov	r5, r2
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	012b      	lsls	r3, r5, #4
 8001644:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001648:	0122      	lsls	r2, r4, #4
 800164a:	460b      	mov	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	3307      	adds	r3, #7
 8001650:	08db      	lsrs	r3, r3, #3
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	ebad 0d03 	sub.w	sp, sp, r3
 8001658:	466b      	mov	r3, sp
 800165a:	3301      	adds	r3, #1
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	623b      	str	r3, [r7, #32]
	for (uint16_t i = 0; i < fullLength; i++) buffer[i] = big(value); // fill the buffer
 8001662:	2300      	movs	r3, #0
 8001664:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001666:	e00d      	b.n	8001684 <sendBlock+0x110>
 8001668:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 800166a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fd72 	bl	8001158 <big>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800167e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001680:	3301      	adds	r3, #1
 8001682:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001684:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001686:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001688:	429a      	cmp	r2, r3
 800168a:	d3ed      	bcc.n	8001668 <sendBlock+0xf4>
	uint32_t fullTransactions = amount / fullLength; // amount of full transactions to send
 800168c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800168e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	61fb      	str	r3, [r7, #28]
	uint16_t weirdLength = amount % fullLength; // one transaction will be a different amount
 8001696:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800169a:	fbb3 f1f2 	udiv	r1, r3, r2
 800169e:	fb01 f202 	mul.w	r2, r1, r2
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	837b      	strh	r3, [r7, #26]
	if (weirdLength != 0) {
 80016a6:	8b7b      	ldrh	r3, [r7, #26]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <sendBlock+0x148>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, weirdLength * 2, 100);
 80016ac:	8b7b      	ldrh	r3, [r7, #26]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	2364      	movs	r3, #100	@ 0x64
 80016b4:	6a39      	ldr	r1, [r7, #32]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f004 fe83 	bl	80063c2 <HAL_SPI_Transmit>
	}
	for (uint32_t i = 0; i < fullTransactions; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	@ 0x30
 80016c0:	e00a      	b.n	80016d8 <sendBlock+0x164>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, fullLength * 2, 100);
 80016c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	2364      	movs	r3, #100	@ 0x64
 80016ca:	6a39      	ldr	r1, [r7, #32]
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f004 fe78 	bl	80063c2 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < fullTransactions; i++) {
 80016d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016d4:	3301      	adds	r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80016d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3f0      	bcc.n	80016c2 <sendBlock+0x14e>
 80016e0:	46b5      	mov	sp, r6
	}
}
 80016e2:	bf00      	nop
 80016e4:	373c      	adds	r7, #60	@ 0x3c
 80016e6:	46bd      	mov	sp, r7
 80016e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080016ec <initialize_screen>:
		if (offset + width > 479) return; // off the end of the screen
		sendCharacter(spi, offset, y, s[i], color, size_x, size_y);
	}
}

void initialize_screen(SPI_HandleTypeDef* spi) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	printf("Starting initialization.\r\n");
 80016f4:	4827      	ldr	r0, [pc, #156]	@ (8001794 <initialize_screen+0xa8>)
 80016f6:	f008 fdd5 	bl	800a2a4 <puts>

	// hardware reset the display
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001700:	4825      	ldr	r0, [pc, #148]	@ (8001798 <initialize_screen+0xac>)
 8001702:	f002 faf3 	bl	8003cec <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001706:	20fa      	movs	r0, #250	@ 0xfa
 8001708:	f001 ff6e 	bl	80035e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001712:	4821      	ldr	r0, [pc, #132]	@ (8001798 <initialize_screen+0xac>)
 8001714:	f002 faea 	bl	8003cec <HAL_GPIO_WritePin>

	uint8_t *addr = initd;
 8001718:	4b20      	ldr	r3, [pc, #128]	@ (800179c <initialize_screen+0xb0>)
 800171a:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 800171c:	e02c      	b.n	8001778 <initialize_screen+0x8c>
		x = *(addr++);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60fa      	str	r2, [r7, #12]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	72bb      	strb	r3, [r7, #10]
		numArgs = x & 0x7F;
 8001728:	7abb      	ldrb	r3, [r7, #10]
 800172a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800172e:	727b      	strb	r3, [r7, #9]
		if (cmd != 0xFF) { // '255' is ignored
 8001730:	7afb      	ldrb	r3, [r7, #11]
 8001732:	2bff      	cmp	r3, #255	@ 0xff
 8001734:	d015      	beq.n	8001762 <initialize_screen+0x76>
		  if (x & 0x80) {  // If high bit set, numArgs is a delay time
 8001736:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da06      	bge.n	800174c <initialize_screen+0x60>
			sendCommand(spi, cmd, NULL, 0);
 800173e:	7af9      	ldrb	r1, [r7, #11]
 8001740:	2300      	movs	r3, #0
 8001742:	2200      	movs	r2, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fd1d 	bl	8001184 <sendCommand>
 800174a:	e00a      	b.n	8001762 <initialize_screen+0x76>
		  } else {
			sendCommand(spi, cmd, addr, numArgs);
 800174c:	7a7b      	ldrb	r3, [r7, #9]
 800174e:	b29b      	uxth	r3, r3
 8001750:	7af9      	ldrb	r1, [r7, #11]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fd15 	bl	8001184 <sendCommand>
			addr += numArgs;
 800175a:	7a7b      	ldrb	r3, [r7, #9]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
		  }
		}
		if (x & 0x80) {       // If high bit set...
 8001762:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001766:	2b00      	cmp	r3, #0
 8001768:	da06      	bge.n	8001778 <initialize_screen+0x8c>
		  HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800176a:	7a7a      	ldrb	r2, [r7, #9]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f001 ff38 	bl	80035e8 <HAL_Delay>
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60fa      	str	r2, [r7, #12]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	72fb      	strb	r3, [r7, #11]
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ca      	bne.n	800171e <initialize_screen+0x32>
		}
	}
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0800c614 	.word	0x0800c614
 8001798:	48001400 	.word	0x48001400
 800179c:	20000000 	.word	0x20000000

080017a0 <drawButton>:
		{0x0, 0x0}
};

uint8_t states[5] = {0, 0, 0, 0, 0};

void drawButton(SPI_HandleTypeDef* spi, uint8_t button, uint8_t on, char* s) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	72fb      	strb	r3, [r7, #11]
 80017ae:	4613      	mov	r3, r2
 80017b0:	72bb      	strb	r3, [r7, #10]
	switch (button) {
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	f200 8088 	bhi.w	80018ca <drawButton+0x12a>
 80017ba:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <drawButton+0x20>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017d5 	.word	0x080017d5
 80017c4:	08001803 	.word	0x08001803
 80017c8:	08001835 	.word	0x08001835
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800189f 	.word	0x0800189f
	case 0:
		sendButton(spi, 0, xend, yend-96, yend, colors[button][0], s);
 80017d4:	f240 143f 	movw	r4, #319	@ 0x13f
 80017d8:	f240 13df 	movw	r3, #479	@ 0x1df
 80017dc:	3b60      	subs	r3, #96	@ 0x60
 80017de:	b299      	uxth	r1, r3
 80017e0:	f240 10df 	movw	r0, #479	@ 0x1df
 80017e4:	7afb      	ldrb	r3, [r7, #11]
 80017e6:	4a3a      	ldr	r2, [pc, #232]	@ (80018d0 <drawButton+0x130>)
 80017e8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	9202      	str	r2, [sp, #8]
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	9000      	str	r0, [sp, #0]
 80017f4:	460b      	mov	r3, r1
 80017f6:	4622      	mov	r2, r4
 80017f8:	2100      	movs	r1, #0
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fdf2 	bl	80013e4 <sendButton>
		//sendString(spi, 20, yend-48, "Delivering for?", 0xffff, 2, 2);
		return;
 8001800:	e063      	b.n	80018ca <drawButton+0x12a>
	case 1: sendButton(spi, 0, xend, yend-(96*2), yend-96-1, colors[button][0], s); return;
 8001802:	f240 143f 	movw	r4, #319	@ 0x13f
 8001806:	f240 13df 	movw	r3, #479	@ 0x1df
 800180a:	3bc0      	subs	r3, #192	@ 0xc0
 800180c:	b298      	uxth	r0, r3
 800180e:	f240 13df 	movw	r3, #479	@ 0x1df
 8001812:	3b61      	subs	r3, #97	@ 0x61
 8001814:	b29b      	uxth	r3, r3
 8001816:	7afa      	ldrb	r2, [r7, #11]
 8001818:	492d      	ldr	r1, [pc, #180]	@ (80018d0 <drawButton+0x130>)
 800181a:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	9102      	str	r1, [sp, #8]
 8001822:	9201      	str	r2, [sp, #4]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	4603      	mov	r3, r0
 8001828:	4622      	mov	r2, r4
 800182a:	2100      	movs	r1, #0
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7ff fdd9 	bl	80013e4 <sendButton>
 8001832:	e04a      	b.n	80018ca <drawButton+0x12a>
	case 2: sendButton(spi, 0, xend, yend-(96*3), yend-(96*2)-1, colors[button][0], s); return;
 8001834:	f240 143f 	movw	r4, #319	@ 0x13f
 8001838:	f240 13df 	movw	r3, #479	@ 0x1df
 800183c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001840:	b298      	uxth	r0, r3
 8001842:	f240 13df 	movw	r3, #479	@ 0x1df
 8001846:	3bc1      	subs	r3, #193	@ 0xc1
 8001848:	b29b      	uxth	r3, r3
 800184a:	7afa      	ldrb	r2, [r7, #11]
 800184c:	4920      	ldr	r1, [pc, #128]	@ (80018d0 <drawButton+0x130>)
 800184e:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	9102      	str	r1, [sp, #8]
 8001856:	9201      	str	r2, [sp, #4]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4603      	mov	r3, r0
 800185c:	4622      	mov	r2, r4
 800185e:	2100      	movs	r1, #0
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff fdbf 	bl	80013e4 <sendButton>
 8001866:	e030      	b.n	80018ca <drawButton+0x12a>
	case 3: sendButton(spi, 0, xend, yend-(96*4), yend-(96*3)-1, colors[button][0], s); return;
 8001868:	f240 143f 	movw	r4, #319	@ 0x13f
 800186c:	f240 13df 	movw	r3, #479	@ 0x1df
 8001870:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001874:	b298      	uxth	r0, r3
 8001876:	f240 13df 	movw	r3, #479	@ 0x1df
 800187a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800187e:	b29b      	uxth	r3, r3
 8001880:	7afa      	ldrb	r2, [r7, #11]
 8001882:	4913      	ldr	r1, [pc, #76]	@ (80018d0 <drawButton+0x130>)
 8001884:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	9102      	str	r1, [sp, #8]
 800188c:	9201      	str	r2, [sp, #4]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4603      	mov	r3, r0
 8001892:	4622      	mov	r2, r4
 8001894:	2100      	movs	r1, #0
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f7ff fda4 	bl	80013e4 <sendButton>
 800189c:	e015      	b.n	80018ca <drawButton+0x12a>
	case 4: sendButton(spi, 0, xend, 0, yend-(96*4)-1, colors[button][0], s); return;
 800189e:	f240 103f 	movw	r0, #319	@ 0x13f
 80018a2:	f240 13df 	movw	r3, #479	@ 0x1df
 80018a6:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	7afa      	ldrb	r2, [r7, #11]
 80018ae:	4908      	ldr	r1, [pc, #32]	@ (80018d0 <drawButton+0x130>)
 80018b0:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	9102      	str	r1, [sp, #8]
 80018b8:	9201      	str	r2, [sp, #4]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2300      	movs	r3, #0
 80018be:	4602      	mov	r2, r0
 80018c0:	2100      	movs	r1, #0
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff fd8e 	bl	80013e4 <sendButton>
 80018c8:	bf00      	nop
	}
}
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	20000068 	.word	0x20000068

080018d4 <drawAll>:

void drawAll(SPI_HandleTypeDef* spi) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	6078      	str	r0, [r7, #4]
//	drawButton(spi, 0, 0);
//	drawButton(spi, 1, 0);
//	drawButton(spi, 2, 0);
//	drawButton(spi, 3, 0);
//	drawButton(spi, 4, 0);
	sendBlock(spi, 0, xend, 0, yend, 0);
 80018dc:	f240 113f 	movw	r1, #319	@ 0x13f
 80018e0:	f240 13df 	movw	r3, #479	@ 0x1df
 80018e4:	2200      	movs	r2, #0
 80018e6:	9201      	str	r2, [sp, #4]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	460a      	mov	r2, r1
 80018ee:	2100      	movs	r1, #0
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fe3f 	bl	8001574 <sendBlock>
	for (uint8_t i = 0; i < 5; i++) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e00a      	b.n	8001912 <drawAll+0x3e>
		drawButton(spi, i, states[i], "");
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	4a09      	ldr	r2, [pc, #36]	@ (8001924 <drawAll+0x50>)
 8001900:	5cd2      	ldrb	r2, [r2, r3]
 8001902:	7bf9      	ldrb	r1, [r7, #15]
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <drawAll+0x54>)
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff4a 	bl	80017a0 <drawButton>
	for (uint8_t i = 0; i < 5; i++) {
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	3301      	adds	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d9f1      	bls.n	80018fc <drawAll+0x28>
	}
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000274 	.word	0x20000274
 8001928:	0800c630 	.word	0x0800c630

0800192c <draw>:
void flip(SPI_HandleTypeDef* spi, uint8_t button) {
	states[button] = !states[button];
	drawButton(spi, button, states[button], "Text");
}

void draw(SPI_HandleTypeDef* spi) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	printf("Sending pixels.\r\n");
 8001934:	4804      	ldr	r0, [pc, #16]	@ (8001948 <draw+0x1c>)
 8001936:	f008 fcb5 	bl	800a2a4 <puts>



	// use https://rgbcolorpicker.com/565 to find pixel values
	//sendBlock(spi, 0, xend, 0, yend, 0);
	drawAll(spi);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffca 	bl	80018d4 <drawAll>
	//sendString(spi, xend-70, 20, "Delivering for?", 0xffff, 2, 2);
	//sendString(spi, 25+75+25 + 10, 50 + 10, "B. Obama", 0x0, 2, 2);
	//sendString(spi, 25 + 10, 50 + 10, "Benton E.", 0x0, 5, 5);
	//sendBlock(spi, 0, 0, 0, 0, 0x17e0);
	//sendBlock(spi, xend, xend, yend, yend, 0xf880);
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	0800c63c 	.word	0x0800c63c

0800194c <writeRegister8>:
#include "touch-defines.h"

// plan is to try stmpe. if it flops, switch to manual
// i2c1_sda is PB9, i2c1_scl is PB8

void writeRegister8(I2C_HandleTypeDef* i2c, uint8_t reg, uint8_t value){
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]
 8001958:	4613      	mov	r3, r2
 800195a:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {reg, value};
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	733b      	strb	r3, [r7, #12]
 8001960:	78bb      	ldrb	r3, [r7, #2]
 8001962:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, buffer, 2, 1000);
 8001964:	f107 020c 	add.w	r2, r7, #12
 8001968:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2302      	movs	r3, #2
 8001970:	2182      	movs	r1, #130	@ 0x82
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f002 fa86 	bl	8003e84 <HAL_I2C_Master_Transmit>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <writeRegister8+0x40>
		printf("I2C write to STMPE failed with %d.\r\n", status);
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	4619      	mov	r1, r3
 8001986:	4803      	ldr	r0, [pc, #12]	@ (8001994 <writeRegister8+0x48>)
 8001988:	f008 fc24 	bl	800a1d4 <iprintf>
	}
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	0800c650 	.word	0x0800c650

08001998 <readRegister8>:

uint8_t readRegister8(I2C_HandleTypeDef* i2c, uint8_t reg) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af02      	add	r7, sp, #8
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
	// problem is don't know what restart is
	// You are supposed to i2c write the address, then do an empty i2c read
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, &reg, 1, 1000);
 80019a4:	1cfa      	adds	r2, r7, #3
 80019a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	2182      	movs	r1, #130	@ 0x82
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f002 fa67 	bl	8003e84 <HAL_I2C_Master_Transmit>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <readRegister8+0x32>
		printf("I2C write (for the purpose of reading) to STMPE failed with %d.\r\n", status);
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	4619      	mov	r1, r3
 80019c4:	480f      	ldr	r0, [pc, #60]	@ (8001a04 <readRegister8+0x6c>)
 80019c6:	f008 fc05 	bl	800a1d4 <iprintf>
	}

	uint8_t result = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73bb      	strb	r3, [r7, #14]
	// TODO: maybe the byte value here should be 1
	status = HAL_I2C_Master_Receive(i2c, (STMPE_ADDR << 1) | 1, &result, 1, 1000);
 80019ce:	f107 020e 	add.w	r2, r7, #14
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	2183      	movs	r1, #131	@ 0x83
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f002 fb69 	bl	80040b4 <HAL_I2C_Master_Receive>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <readRegister8+0x62>
		printf("I2C read from STMPE failed with %d.\r\n", status);
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <readRegister8+0x70>)
 80019f2:	f008 fbef 	bl	800a1d4 <iprintf>
		return 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <readRegister8+0x64>
	}
	return result;
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0800c678 	.word	0x0800c678
 8001a08:	0800c6bc 	.word	0x0800c6bc

08001a0c <bufferEmpty>:
// 1 is true, 0 is false
uint8_t touched(I2C_HandleTypeDef* i2c) {
	return readRegister8(i2c, STMPE_TSC_CTRL) & 0x80;
}

uint8_t bufferEmpty(I2C_HandleTypeDef* i2c) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	return (readRegister8(i2c, STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
 8001a14:	214b      	movs	r1, #75	@ 0x4b
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffbe 	bl	8001998 <readRegister8>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	b2db      	uxtb	r3, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <readPosition>:

void readPosition(I2C_HandleTypeDef* i2c, uint16_t *x, uint16_t *y, uint8_t *z) {
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
  uint8_t data[4];

  for (uint8_t i = 0; i < 4; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
 8001a3e:	e00e      	b.n	8001a5e <readPosition+0x32>
    data[i] = readRegister8(i2c, 0xD7);
 8001a40:	7dfc      	ldrb	r4, [r7, #23]
 8001a42:	21d7      	movs	r1, #215	@ 0xd7
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff ffa7 	bl	8001998 <readRegister8>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f104 0318 	add.w	r3, r4, #24
 8001a52:	443b      	add	r3, r7
 8001a54:	f803 2c08 	strb.w	r2, [r3, #-8]
  for (uint8_t i = 0; i < 4; i++) {
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d9ed      	bls.n	8001a40 <readPosition+0x14>
  }
  *x = data[0];
 8001a64:	7c3b      	ldrb	r3, [r7, #16]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	801a      	strh	r2, [r3, #0]
  *x <<= 4;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	801a      	strh	r2, [r3, #0]
  *x |= (data[1] >> 4);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	7c7a      	ldrb	r2, [r7, #17]
 8001a7e:	0912      	lsrs	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	801a      	strh	r2, [r3, #0]
  *y = data[1] & 0x0F;
 8001a8a:	7c7b      	ldrb	r3, [r7, #17]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	801a      	strh	r2, [r3, #0]
  *y <<= 8;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	801a      	strh	r2, [r3, #0]
  *y |= data[2];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	7cba      	ldrb	r2, [r7, #18]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	801a      	strh	r2, [r3, #0]
  *z = data[3];
 8001ab0:	7cfa      	ldrb	r2, [r7, #19]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	701a      	strb	r2, [r3, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd90      	pop	{r4, r7, pc}

08001abe <map>:

// from: https://github.com/arduino/ArduinoCore-API/blob/0c853c5cded2768122fae258d42b2b4c06cdb3b1/api/Common.cpp
uint16_t map(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 8001abe:	b480      	push	{r7}
 8001ac0:	b087      	sub	sp, #28
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
	uint32_t result = (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	6a39      	ldr	r1, [r7, #32]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	1a8a      	subs	r2, r1, r2
 8001ad8:	fb03 f202 	mul.w	r2, r3, r2
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1acb      	subs	r3, r1, r3
 8001ae2:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
	if (result > out_max) return out_max;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d902      	bls.n	8001afa <map+0x3c>
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	e008      	b.n	8001b0c <map+0x4e>
	if (result < out_min) return out_min;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d202      	bcs.n	8001b08 <map+0x4a>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	e001      	b.n	8001b0c <map+0x4e>
	return result;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	b29b      	uxth	r3, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <touchHook>:
uint8_t within(uint16_t x, uint16_t y, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
	return (x > x1) && (x < x2) && (y > y1) && (y < y2);
}

// returns the button that was touched
int8_t touchHook(I2C_HandleTypeDef* i2c) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	6078      	str	r0, [r7, #4]
	writeRegister8(i2c, STMPE_INT_STA, 0xFF);
 8001b20:	22ff      	movs	r2, #255	@ 0xff
 8001b22:	210b      	movs	r1, #11
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff11 	bl	800194c <writeRegister8>
	uint16_t x, y;
	uint8_t z;

	// clear the buffer and take the last thing from the buffer
	while (!bufferEmpty(i2c)) {
 8001b2a:	e008      	b.n	8001b3e <touchHook+0x26>
		readPosition(i2c, &x, &y, &z);
 8001b2c:	f107 0309 	add.w	r3, r7, #9
 8001b30:	f107 020a 	add.w	r2, r7, #10
 8001b34:	f107 010c 	add.w	r1, r7, #12
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff77 	bl	8001a2c <readPosition>
	while (!bufferEmpty(i2c)) {
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff64 	bl	8001a0c <bufferEmpty>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <touchHook+0x14>
	}

	if (y > 3700 || y < 450) { // was 700
 8001b4a:	897b      	ldrh	r3, [r7, #10]
 8001b4c:	f640 6274 	movw	r2, #3700	@ 0xe74
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d803      	bhi.n	8001b5c <touchHook+0x44>
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001b5a:	d207      	bcs.n	8001b6c <touchHook+0x54>
		printf("Off the end with %d\r\n", y);
 8001b5c:	897b      	ldrh	r3, [r7, #10]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4817      	ldr	r0, [pc, #92]	@ (8001bc0 <touchHook+0xa8>)
 8001b62:	f008 fb37 	bl	800a1d4 <iprintf>
		return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e025      	b.n	8001bb8 <touchHook+0xa0>
	}
	y = map(y, 3700, 450, 0, 479);
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f240 13df 	movw	r3, #479	@ 0x1df
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001b7c:	f640 6174 	movw	r1, #3700	@ 0xe74
 8001b80:	f7ff ff9d 	bl	8001abe <map>
 8001b84:	4603      	mov	r3, r0
 8001b86:	817b      	strh	r3, [r7, #10]

	uint16_t button = 4 - y / 96;
 8001b88:	897b      	ldrh	r3, [r7, #10]
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <touchHook+0xac>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	099b      	lsrs	r3, r3, #6
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	f1c3 0304 	rsb	r3, r3, #4
 8001b98:	81fb      	strh	r3, [r7, #14]
	if (button == 4) return -1;
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d102      	bne.n	8001ba6 <touchHook+0x8e>
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	e008      	b.n	8001bb8 <touchHook+0xa0>

	printf("Touched button %d %d.\r\n", y, button);
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	@ (8001bc8 <touchHook+0xb0>)
 8001bb0:	f008 fb10 	bl	800a1d4 <iprintf>

	return button;
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	b25b      	sxtb	r3, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	0800c6e4 	.word	0x0800c6e4
 8001bc4:	aaaaaaab 	.word	0xaaaaaaab
 8001bc8:	0800c6fc 	.word	0x0800c6fc

08001bcc <initialize_touch>:

void initialize_touch(I2C_HandleTypeDef* i2c) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	//HAL_Delay(1000); // When restarted, QR code is spamming, need to let it cool down
	// TODO: only thing I can think of is that you need to read the version here for some reason
	// the problem is that I need to do some sort of request response thing, for read
	// it is a write then request

	printf("Initializing touch.\r\n");
 8001bd4:	483c      	ldr	r0, [pc, #240]	@ (8001cc8 <initialize_touch+0xfc>)
 8001bd6:	f008 fb65 	bl	800a2a4 <puts>

	  uint16_t v;
	  v = readRegister8(i2c, 0);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fedb 	bl	8001998 <readRegister8>
 8001be2:	4603      	mov	r3, r0
 8001be4:	81bb      	strh	r3, [r7, #12]
	  v <<= 8;
 8001be6:	89bb      	ldrh	r3, [r7, #12]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	81bb      	strh	r3, [r7, #12]
	  v |= readRegister8(i2c, 1);
 8001bec:	2101      	movs	r1, #1
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fed2 	bl	8001998 <readRegister8>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	89bb      	ldrh	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	81bb      	strh	r3, [r7, #12]
	  printf("STMPE version is 0x%x\r\n", v);
 8001bfe:	89bb      	ldrh	r3, [r7, #12]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4832      	ldr	r0, [pc, #200]	@ (8001ccc <initialize_touch+0x100>)
 8001c04:	f008 fae6 	bl	800a1d4 <iprintf>

	  writeRegister8(i2c, STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
 8001c08:	2202      	movs	r2, #2
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fe9d 	bl	800194c <writeRegister8>

	  HAL_Delay(1000);
 8001c12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c16:	f001 fce7 	bl	80035e8 <HAL_Delay>

	  for (uint8_t i = 0; i < 65; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e007      	b.n	8001c30 <initialize_touch+0x64>
	    readRegister8(i2c, i);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff feb7 	bl	8001998 <readRegister8>
	  for (uint8_t i = 0; i < 65; i++) {
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b40      	cmp	r3, #64	@ 0x40
 8001c34:	d9f4      	bls.n	8001c20 <initialize_touch+0x54>
	  }

	  writeRegister8(i2c, STMPE_SYS_CTRL2, 0x0); // turn on clocks!
 8001c36:	2200      	movs	r2, #0
 8001c38:	2104      	movs	r1, #4
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fe86 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CTRL,
 8001c40:	2201      	movs	r2, #1
 8001c42:	2140      	movs	r1, #64	@ 0x40
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fe81 	bl	800194c <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(i2c, STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	210a      	movs	r1, #10
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fe7c 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
 8001c54:	2260      	movs	r2, #96	@ 0x60
 8001c56:	2120      	movs	r1, #32
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fe77 	bl	800194c <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(i2c, STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
 8001c5e:	2202      	movs	r2, #2
 8001c60:	2121      	movs	r1, #33	@ 0x21
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fe72 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
 8001c68:	22a4      	movs	r2, #164	@ 0xa4
 8001c6a:	2141      	movs	r1, #65	@ 0x41
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fe6d 	bl	800194c <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(i2c, STMPE_TSC_FRACTION_Z, 0x6);
 8001c72:	2206      	movs	r2, #6
 8001c74:	2156      	movs	r1, #86	@ 0x56
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fe68 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_TH, 1);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	214a      	movs	r1, #74	@ 0x4a
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fe63 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	214b      	movs	r1, #75	@ 0x4b
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fe5e 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, 0); // unreset
 8001c90:	2200      	movs	r2, #0
 8001c92:	214b      	movs	r1, #75	@ 0x4b
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fe59 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2158      	movs	r1, #88	@ 0x58
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fe54 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_STA, 0xFF); // reset all ints
 8001ca4:	22ff      	movs	r2, #255	@ 0xff
 8001ca6:	210b      	movs	r1, #11
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fe4f 	bl	800194c <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_CTRL,
 8001cae:	2203      	movs	r2, #3
 8001cb0:	2109      	movs	r1, #9
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fe4a 	bl	800194c <writeRegister8>
	                 STMPE_INT_CTRL_POL_LOW | STMPE_INT_CTRL_EDGE | STMPE_INT_CTRL_ENABLE);

	  printf("Finished touch setup.\r\n");
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <initialize_touch+0x104>)
 8001cba:	f008 faf3 	bl	800a2a4 <puts>
//			  readPosition(i2c, &x, &y, &z);
//			  //printf("yes touch: (%d, %d, %d)\r", x, y, z);
//			  //printf("no  touch: \r");
//		  }
//	  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	0800c714 	.word	0x0800c714
 8001ccc:	0800c72c 	.word	0x0800c72c
 8001cd0:	0800c744 	.word	0x0800c744

08001cd4 <init_stream>:
    If there are no lockers, it will take the full 8 seconds to timeout.

    Requires the huart variable address. "&huart_"
    Returns the number of lockers as an int.
*/ 
int init_stream(UART_HandleTypeDef *huart) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    uint8_t buffer[1] = {0xFF};
 8001cdc:	23ff      	movs	r3, #255	@ 0xff
 8001cde:	733b      	strb	r3, [r7, #12]
    HAL_StatusTypeDef receiveStatus = HAL_UART_Transmit(huart, buffer, 1, 1000);
 8001ce0:	f107 010c 	add.w	r1, r7, #12
 8001ce4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce8:	2201      	movs	r2, #1
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f005 fb28 	bl	8007340 <HAL_UART_Transmit>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]
    if (receiveStatus != HAL_OK) {
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <init_stream+0x34>
    	printf("Transmit to init box returned error %d", receiveStatus);
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480e      	ldr	r0, [pc, #56]	@ (8001d38 <init_stream+0x64>)
 8001d00:	f008 fa68 	bl	800a1d4 <iprintf>
    	return 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e012      	b.n	8001d2e <init_stream+0x5a>
    }
    receiveStatus = HAL_UART_Receive(huart, buffer, 1, 7000);
 8001d08:	f107 010c 	add.w	r1, r7, #12
 8001d0c:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8001d10:	2201      	movs	r2, #1
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f005 fba2 	bl	800745c <HAL_UART_Receive>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	73fb      	strb	r3, [r7, #15]
    if(receiveStatus == HAL_OK) {
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d104      	bne.n	8001d2c <init_stream+0x58>
        return (buffer[0] >> 2) + 1;
 8001d22:	7b3b      	ldrb	r3, [r7, #12]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	e000      	b.n	8001d2e <init_stream+0x5a>
    }
    return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	0800c75c 	.word	0x0800c75c

08001d3c <close_locker>:
/* 
    Sends the close signal to the designated locker number.
    Index must be less than or equal to 64
    One based indexing
*/ 
void close_locker(UART_HandleTypeDef *huart, uint32_t index) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
    uint8_t buffer[1] = {0x00};
 8001d46:	2300      	movs	r3, #0
 8001d48:	733b      	strb	r3, [r7, #12]
    buffer[0] = 4 * (index - 1); // remove the ' - 1' for zero based indexing
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	733b      	strb	r3, [r7, #12]
    HAL_StatusTypeDef status = HAL_UART_Transmit(huart, buffer, 1, 1000);
 8001d56:	f107 010c 	add.w	r1, r7, #12
 8001d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5e:	2201      	movs	r2, #1
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f005 faed 	bl	8007340 <HAL_UART_Transmit>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK != status) {
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d004      	beq.n	8001d7a <close_locker+0x3e>
    	printf("Failed to close locker with %d", status);
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4803      	ldr	r0, [pc, #12]	@ (8001d84 <close_locker+0x48>)
 8001d76:	f008 fa2d 	bl	800a1d4 <iprintf>
    }
} 
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	0800c784 	.word	0x0800c784

08001d88 <open_locker>:
/* 
    Sends the open signal to the designated locker number.
    Index must be less than or equal to 64
    One based indexing
*/ 
void open_locker(UART_HandleTypeDef *huart, uint32_t index) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    uint8_t buffer[1] = {0x00};
 8001d92:	2300      	movs	r3, #0
 8001d94:	733b      	strb	r3, [r7, #12]
    buffer[0] = (4 * (index - 1) ) + 1; // remove the ' - 1' for zero based indexing
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(huart, buffer, 1, 1000);
 8001da6:	f107 010c 	add.w	r1, r7, #12
 8001daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dae:	2201      	movs	r2, #1
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f005 fac5 	bl	8007340 <HAL_UART_Transmit>
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <openDoor>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void uartSend (char *str);
int prevIdCode = -1;
void openDoor(int id){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	printf("Open The door signal sent with id %d\r\n", id);
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4815      	ldr	r0, [pc, #84]	@ (8001e20 <openDoor+0x60>)
 8001dcc:	f008 fa02 	bl	800a1d4 <iprintf>
	int index = FoodOrder_FindIndex(id, foodOrders);
 8001dd0:	4914      	ldr	r1, [pc, #80]	@ (8001e24 <openDoor+0x64>)
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff f998 	bl	8001108 <FoodOrder_FindIndex>
 8001dd8:	60f8      	str	r0, [r7, #12]
	if (index == -1) {
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d103      	bne.n	8001dea <openDoor+0x2a>
		printf("Invariant broken: couldn't find button corresponding to ID.\r\n");
 8001de2:	4811      	ldr	r0, [pc, #68]	@ (8001e28 <openDoor+0x68>)
 8001de4:	f008 fa5e 	bl	800a2a4 <puts>
		return;
 8001de8:	e016      	b.n	8001e18 <openDoor+0x58>
	}
	foodOrders[index].state = OpenedQR;
 8001dea:	490e      	ldr	r1, [pc, #56]	@ (8001e24 <openDoor+0x64>)
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3320      	adds	r3, #32
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	701a      	strb	r2, [r3, #0]
	open_locker(&huart2, foodOrders[index].box);
 8001dfe:	4909      	ldr	r1, [pc, #36]	@ (8001e24 <openDoor+0x64>)
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	331c      	adds	r3, #28
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4806      	ldr	r0, [pc, #24]	@ (8001e2c <openDoor+0x6c>)
 8001e14:	f7ff ffb8 	bl	8001d88 <open_locker>
}
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	0800c7a4 	.word	0x0800c7a4
 8001e24:	2000063c 	.word	0x2000063c
 8001e28:	0800c7cc 	.word	0x0800c7cc
 8001e2c:	20000364 	.word	0x20000364

08001e30 <readTinyCodeData>:

void readTinyCodeData(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0c4      	sub	sp, #272	@ 0x110
 8001e34:	af02      	add	r7, sp, #8
    uint8_t readBuffer[256]; // Buffer to store the read data
    uint16_t contentLength = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106

    // First, read the content length
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, READ_LEN, 1000);
 8001e3c:	463a      	mov	r2, r7
 8001e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2302      	movs	r3, #2
 8001e46:	2118      	movs	r1, #24
 8001e48:	4831      	ldr	r0, [pc, #196]	@ (8001f10 <readTinyCodeData+0xe0>)
 8001e4a:	f002 f933 	bl	80040b4 <HAL_I2C_Master_Receive>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
    if(status != HAL_OK) {
 8001e54:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d155      	bne.n	8001f08 <readTinyCodeData+0xd8>
        // Handle communication error
    } else {
        // If read is successful, parse the content length
        contentLength = readBuffer[0] | (readBuffer[1] << 8);
 8001e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e70:	785b      	ldrb	r3, [r3, #1]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
        if(contentLength == 0){
 8001e7e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03d      	beq.n	8001f02 <readTinyCodeData+0xd2>
        	return;
        }
        if(contentLength > 0 && contentLength <= 254) {
 8001e86:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03c      	beq.n	8001f08 <readTinyCodeData+0xd8>
 8001e8e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001e92:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e94:	d838      	bhi.n	8001f08 <readTinyCodeData+0xd8>
            // Now, read the actual content based on the content length
            status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, contentLength + 2, 1000);
 8001e96:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	463a      	mov	r2, r7
 8001ea0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ea4:	9100      	str	r1, [sp, #0]
 8001ea6:	2118      	movs	r1, #24
 8001ea8:	4819      	ldr	r0, [pc, #100]	@ (8001f10 <readTinyCodeData+0xe0>)
 8001eaa:	f002 f903 	bl	80040b4 <HAL_I2C_Master_Receive>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
            if(status != HAL_OK) {
 8001eb4:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d125      	bne.n	8001f08 <readTinyCodeData+0xd8>
                // Handle communication error
            } else {
                // Data is now in readBuffer[2] to readBuffer[contentLength+1], process it as needed
                // Remember to handle non-UTF-8 or other data safely
            	readBuffer[contentLength + 3] = '\0';
 8001ebc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001ec0:	3303      	adds	r3, #3
 8001ec2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001ec6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001eca:	2100      	movs	r1, #0
 8001ecc:	54d1      	strb	r1, [r2, r3]
//            	for(int i =0; i < contentLength; ++i){
//            		printf("%c",readBuffer[2 + i]);
//            	}

            	int parsedId = atoi((char *)readBuffer + 2);
 8001ece:	463b      	mov	r3, r7
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f007 fbdc 	bl	8009690 <atoi>
 8001ed8:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
            	if(parsedId == 0){
 8001edc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <readTinyCodeData+0xd6>
                       return;
                        	}
            	if (parsedId != prevIdCode){
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <readTinyCodeData+0xe4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d00b      	beq.n	8001f08 <readTinyCodeData+0xd8>
            		prevIdCode = parsedId;
 8001ef0:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <readTinyCodeData+0xe4>)
 8001ef2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
            		openDoor(parsedId);
 8001ef8:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001efc:	f7ff ff60 	bl	8001dc0 <openDoor>
 8001f00:	e002      	b.n	8001f08 <readTinyCodeData+0xd8>
        	return;
 8001f02:	bf00      	nop
 8001f04:	e000      	b.n	8001f08 <readTinyCodeData+0xd8>
                       return;
 8001f06:	bf00      	nop
            }
        } else {
            // No content or content length invalid
        }
    }
}
 8001f08:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000027c 	.word	0x2000027c
 8001f14:	2000007c 	.word	0x2000007c

08001f18 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	printf("Timer triggered.\r\n");
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001f22:	f008 f9bf 	bl	800a2a4 <puts>
	if(htim->Instance == TIM1){
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10d      	bne.n	8001f4c <HAL_TIM_PeriodElapsedCallback+0x34>
		  uartSend("LIST\n");
 8001f30:	480a      	ldr	r0, [pc, #40]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001f32:	f000 f9c9 	bl	80022c8 <uartSend>
		  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f40:	4413      	add	r3, r2
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	4808      	ldr	r0, [pc, #32]	@ (8001f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f48:	f005 fb52 	bl	80075f0 <HAL_UART_Receive_IT>
	}
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	0800c80c 	.word	0x0800c80c
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	0800c820 	.word	0x0800c820
 8001f60:	20000760 	.word	0x20000760
 8001f64:	2000053c 	.word	0x2000053c
 8001f68:	200003f8 	.word	0x200003f8

08001f6c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a25      	ldr	r2, [pc, #148]	@ (8002010 <HAL_UART_RxCpltCallback+0xa4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d143      	bne.n	8002006 <HAL_UART_RxCpltCallback+0x9a>

		 ++i;
 8001f7e:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_UART_RxCpltCallback+0xa8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <HAL_UART_RxCpltCallback+0xa8>)
 8001f86:	6013      	str	r3, [r2, #0]
		 while(i > 0){
 8001f88:	e039      	b.n	8001ffe <HAL_UART_RxCpltCallback+0x92>
		 //		  printf("%c", rxBuffer[rxIndex]);
		 	 	if (rxBuffer[rxIndex] == '\n' || rxIndex >= RX_BUFFER_SIZE - 1 ||rxBuffer[rxIndex] == '\r' ) {
 8001f8a:	4b23      	ldr	r3, [pc, #140]	@ (8002018 <HAL_UART_RxCpltCallback+0xac>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b22      	ldr	r3, [pc, #136]	@ (800201c <HAL_UART_RxCpltCallback+0xb0>)
 8001f94:	5c9b      	ldrb	r3, [r3, r2]
 8001f96:	2b0a      	cmp	r3, #10
 8001f98:	d00c      	beq.n	8001fb4 <HAL_UART_RxCpltCallback+0x48>
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <HAL_UART_RxCpltCallback+0xac>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2bfe      	cmp	r3, #254	@ 0xfe
 8001fa2:	d807      	bhi.n	8001fb4 <HAL_UART_RxCpltCallback+0x48>
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <HAL_UART_RxCpltCallback+0xac>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_UART_RxCpltCallback+0xb0>)
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	2b0d      	cmp	r3, #13
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_UART_RxCpltCallback+0x64>
		 	 		// Null-terminate the string
		 	 		rxBuffer[rxIndex] = '\0';
 8001fb4:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <HAL_UART_RxCpltCallback+0xac>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b17      	ldr	r3, [pc, #92]	@ (800201c <HAL_UART_RxCpltCallback+0xb0>)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	5499      	strb	r1, [r3, r2]

		 	 		// Process received data
		 	 		processReceivedData(rxBuffer);
 8001fc2:	4816      	ldr	r0, [pc, #88]	@ (800201c <HAL_UART_RxCpltCallback+0xb0>)
 8001fc4:	f000 f85c 	bl	8002080 <processReceivedData>

		 	 		// Reset index
		 	 		rxIndex = 0;
 8001fc8:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <HAL_UART_RxCpltCallback+0xac>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	e006      	b.n	8001fde <HAL_UART_RxCpltCallback+0x72>
		 	 		} else {
		 	 		// Increment index to receive the next byte
		 	 		rxIndex++;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <HAL_UART_RxCpltCallback+0xac>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <HAL_UART_RxCpltCallback+0xac>)
 8001fdc:	801a      	strh	r2, [r3, #0]
		 	 	}
		 	 		// Prepare to receive the next byte
		 	 		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 8001fde:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <HAL_UART_RxCpltCallback+0xac>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_UART_RxCpltCallback+0xb0>)
 8001fe8:	4413      	add	r3, r2
 8001fea:	2201      	movs	r2, #1
 8001fec:	4619      	mov	r1, r3
 8001fee:	480c      	ldr	r0, [pc, #48]	@ (8002020 <HAL_UART_RxCpltCallback+0xb4>)
 8001ff0:	f005 fafe 	bl	80075f0 <HAL_UART_Receive_IT>

		 	 		  --i;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <HAL_UART_RxCpltCallback+0xa8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	4a06      	ldr	r2, [pc, #24]	@ (8002014 <HAL_UART_RxCpltCallback+0xa8>)
 8001ffc:	6013      	str	r3, [r2, #0]
		 while(i > 0){
 8001ffe:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_UART_RxCpltCallback+0xa8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1c1      	bne.n	8001f8a <HAL_UART_RxCpltCallback+0x1e>
		 	 	  }
	}

}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40004800 	.word	0x40004800
 8002014:	20000764 	.word	0x20000764
 8002018:	20000760 	.word	0x20000760
 800201c:	2000053c 	.word	0x2000053c
 8002020:	200003f8 	.word	0x200003f8

08002024 <setBox>:
void setBox(int id, int box){
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
	 char command[10];
	 sprintf(command, "PUT%d%d\n", box, id);
 800202e:	f107 000c 	add.w	r0, r7, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4906      	ldr	r1, [pc, #24]	@ (8002050 <setBox+0x2c>)
 8002038:	f008 f93c 	bl	800a2b4 <siprintf>
	 uartSend(command);
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f941 	bl	80022c8 <uartSend>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	0800c828 	.word	0x0800c828

08002054 <deleteBox>:
void deleteBox(int id){
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	 char command[17];
	 sprintf(command, "DELETE%d\n", id);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4906      	ldr	r1, [pc, #24]	@ (800207c <deleteBox+0x28>)
 8002064:	4618      	mov	r0, r3
 8002066:	f008 f925 	bl	800a2b4 <siprintf>
	 uartSend(command);
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f92a 	bl	80022c8 <uartSend>
}
 8002074:	bf00      	nop
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0800c834 	.word	0x0800c834

08002080 <processReceivedData>:
void processReceivedData(char* data) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	if(ignore_next_request){
 8002088:	4b88      	ldr	r3, [pc, #544]	@ (80022ac <processReceivedData+0x22c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <processReceivedData+0x18>
		ignore_next_request = 0;
 8002090:	4b86      	ldr	r3, [pc, #536]	@ (80022ac <processReceivedData+0x22c>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
		return;
 8002096:	e106      	b.n	80022a6 <processReceivedData+0x226>
	}
	if(strcmp(data, "DATA") != 0){
 8002098:	4985      	ldr	r1, [pc, #532]	@ (80022b0 <processReceivedData+0x230>)
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe f8b0 	bl	8000200 <strcmp>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80fc 	bne.w	80022a0 <processReceivedData+0x220>
		return;
	}
  data += 5;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3305      	adds	r3, #5
 80020ac:	607b      	str	r3, [r7, #4]
    int totalOrders = atoi(data);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f007 faee 	bl	8009690 <atoi>
 80020b4:	60b8      	str	r0, [r7, #8]
    data += 3;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3303      	adds	r3, #3
 80020ba:	607b      	str	r3, [r7, #4]
    int processedOrders = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e00c      	b.n	80020e0 <processReceivedData+0x60>
          		FoodOrder_Init(&foodOrders[i]);
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4a78      	ldr	r2, [pc, #480]	@ (80022b4 <processReceivedData+0x234>)
 80020d2:	4413      	add	r3, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe ff07 	bl	8000ee8 <FoodOrder_Init>
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	3301      	adds	r3, #1
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	ddef      	ble.n	80020c6 <processReceivedData+0x46>
          	}
    if(totalOrders == 0){
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80db 	beq.w	80022a4 <processReceivedData+0x224>
    	return;
    }

    while(processedOrders < totalOrders){
 80020ee:	e095      	b.n	800221c <processReceivedData+0x19c>

    	foodOrders[processedOrders].id = atoi(data);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f007 facd 	bl	8009690 <atoi>
 80020f6:	4601      	mov	r1, r0
 80020f8:	486e      	ldr	r0, [pc, #440]	@ (80022b4 <processReceivedData+0x234>)
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4403      	add	r3, r0
 8002106:	3318      	adds	r3, #24
 8002108:	6019      	str	r1, [r3, #0]
    	data += 11;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	330b      	adds	r3, #11
 800210e:	607b      	str	r3, [r7, #4]
    	strcpy(foodOrders[processedOrders].name, data);
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4a66      	ldr	r2, [pc, #408]	@ (80022b4 <processReceivedData+0x234>)
 800211c:	4413      	add	r3, r2
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4618      	mov	r0, r3
 8002122:	f008 fa3e 	bl	800a5a2 <strcpy>
    	while(*data != '\0'){
 8002126:	e002      	b.n	800212e <processReceivedData+0xae>
    		++data;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3301      	adds	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
    	while(*data != '\0'){
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f8      	bne.n	8002128 <processReceivedData+0xa8>
    	}
    	++data;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3301      	adds	r3, #1
 800213a:	607b      	str	r3, [r7, #4]
    	foodOrders[processedOrders].box = atoi(data);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f007 faa7 	bl	8009690 <atoi>
 8002142:	4601      	mov	r1, r0
 8002144:	485b      	ldr	r0, [pc, #364]	@ (80022b4 <processReceivedData+0x234>)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4403      	add	r3, r0
 8002152:	331c      	adds	r3, #28
 8002154:	6019      	str	r1, [r3, #0]
    	data += 2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3302      	adds	r3, #2
 800215a:	607b      	str	r3, [r7, #4]
    	foodOrders[processedOrders].valid = 1;
 800215c:	4955      	ldr	r1, [pc, #340]	@ (80022b4 <processReceivedData+0x234>)
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	3314      	adds	r3, #20
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
    	if (prevFoodOrders[processedOrders].id == foodOrders[processedOrders].id && prevFoodOrders[processedOrders].valid){
 8002170:	4951      	ldr	r1, [pc, #324]	@ (80022b8 <processReceivedData+0x238>)
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3318      	adds	r3, #24
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	484c      	ldr	r0, [pc, #304]	@ (80022b4 <processReceivedData+0x234>)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4403      	add	r3, r0
 8002190:	3318      	adds	r3, #24
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4299      	cmp	r1, r3
 8002196:	d11e      	bne.n	80021d6 <processReceivedData+0x156>
 8002198:	4947      	ldr	r1, [pc, #284]	@ (80022b8 <processReceivedData+0x238>)
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3314      	adds	r3, #20
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d013      	beq.n	80021d6 <processReceivedData+0x156>
    		foodOrders[processedOrders].state = prevFoodOrders[processedOrders].state;
 80021ae:	4942      	ldr	r1, [pc, #264]	@ (80022b8 <processReceivedData+0x238>)
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3320      	adds	r3, #32
 80021be:	7818      	ldrb	r0, [r3, #0]
 80021c0:	493c      	ldr	r1, [pc, #240]	@ (80022b4 <processReceivedData+0x234>)
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3320      	adds	r3, #32
 80021d0:	4602      	mov	r2, r0
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e01f      	b.n	8002216 <processReceivedData+0x196>
    	}
    	else if (foodOrders[processedOrders].box != 0) {
 80021d6:	4937      	ldr	r1, [pc, #220]	@ (80022b4 <processReceivedData+0x234>)
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	331c      	adds	r3, #28
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <processReceivedData+0x182>
    		foodOrders[processedOrders].state = Occupied;
 80021ec:	4931      	ldr	r1, [pc, #196]	@ (80022b4 <processReceivedData+0x234>)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	3320      	adds	r3, #32
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e009      	b.n	8002216 <processReceivedData+0x196>
    	}else{
    		foodOrders[processedOrders].state = Empty;
 8002202:	492c      	ldr	r1, [pc, #176]	@ (80022b4 <processReceivedData+0x234>)
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	3320      	adds	r3, #32
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
    	}
    	++processedOrders;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
    while(processedOrders < totalOrders){
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	429a      	cmp	r2, r3
 8002222:	f6ff af65 	blt.w	80020f0 <processReceivedData+0x70>
    }
    for(int i = 0; i < processedOrders; ++i){
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e034      	b.n	8002296 <processReceivedData+0x216>
    	if(!foodOrders[i].valid) continue;
 800222c:	4921      	ldr	r1, [pc, #132]	@ (80022b4 <processReceivedData+0x234>)
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3314      	adds	r3, #20
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d025      	beq.n	800228e <processReceivedData+0x20e>
    	printf("Name: %s\r\n", foodOrders[i].name);
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4a19      	ldr	r2, [pc, #100]	@ (80022b4 <processReceivedData+0x234>)
 800224e:	4413      	add	r3, r2
 8002250:	4619      	mov	r1, r3
 8002252:	481a      	ldr	r0, [pc, #104]	@ (80022bc <processReceivedData+0x23c>)
 8002254:	f007 ffbe 	bl	800a1d4 <iprintf>
    	printf("id: %d\r\n", foodOrders[i].id);
 8002258:	4916      	ldr	r1, [pc, #88]	@ (80022b4 <processReceivedData+0x234>)
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3318      	adds	r3, #24
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4619      	mov	r1, r3
 800226c:	4814      	ldr	r0, [pc, #80]	@ (80022c0 <processReceivedData+0x240>)
 800226e:	f007 ffb1 	bl	800a1d4 <iprintf>
    	printf("box: %d\r\n", foodOrders[i].box);
 8002272:	4910      	ldr	r1, [pc, #64]	@ (80022b4 <processReceivedData+0x234>)
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	331c      	adds	r3, #28
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	480f      	ldr	r0, [pc, #60]	@ (80022c4 <processReceivedData+0x244>)
 8002288:	f007 ffa4 	bl	800a1d4 <iprintf>
 800228c:	e000      	b.n	8002290 <processReceivedData+0x210>
    	if(!foodOrders[i].valid) continue;
 800228e:	bf00      	nop
    for(int i = 0; i < processedOrders; ++i){
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	429a      	cmp	r2, r3
 800229c:	dbc6      	blt.n	800222c <processReceivedData+0x1ac>
 800229e:	e002      	b.n	80022a6 <processReceivedData+0x226>
		return;
 80022a0:	bf00      	nop
 80022a2:	e000      	b.n	80022a6 <processReceivedData+0x226>
    	return;
 80022a4:	bf00      	nop
    }
}
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2000075c 	.word	0x2000075c
 80022b0:	0800c840 	.word	0x0800c840
 80022b4:	2000063c 	.word	0x2000063c
 80022b8:	200006cc 	.word	0x200006cc
 80022bc:	0800c848 	.word	0x0800c848
 80022c0:	0800c854 	.word	0x0800c854
 80022c4:	0800c860 	.word	0x0800c860

080022c8 <uartSend>:
static void uartSend (char *str)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen (str), 1000);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fd fff5 	bl	80002c0 <strlen>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29a      	uxth	r2, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <uartSend+0x28>)
 80022e2:	f005 f82d 	bl	8007340 <HAL_UART_Transmit>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200003f8 	.word	0x200003f8

080022f4 <HAL_GPIO_EXTI_Callback>:

int pendingTouch = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	80fb      	strh	r3, [r7, #6]
  	pendingTouch = 1;
 80022fe:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	20000768 	.word	0x20000768

08002314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b090      	sub	sp, #64	@ 0x40
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 800231a:	2300      	movs	r3, #0
 800231c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231e:	e016      	b.n	800234e <main+0x3a>
		FoodOrder_Init(&foodOrders[i]);
 8002320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4a97      	ldr	r2, [pc, #604]	@ (8002588 <main+0x274>)
 800232c:	4413      	add	r3, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fdda 	bl	8000ee8 <FoodOrder_Init>
		foodOrders[i].state = Empty;
 8002334:	4994      	ldr	r1, [pc, #592]	@ (8002588 <main+0x274>)
 8002336:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3320      	adds	r3, #32
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8002348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800234a:	3301      	adds	r3, #1
 800234c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800234e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002350:	2b03      	cmp	r3, #3
 8002352:	dde5      	ble.n	8002320 <main+0xc>
	}
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8002354:	2300      	movs	r3, #0
 8002356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002358:	e016      	b.n	8002388 <main+0x74>
		FoodOrder_Init(&prevFoodOrders[i]);
 800235a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4a89      	ldr	r2, [pc, #548]	@ (800258c <main+0x278>)
 8002366:	4413      	add	r3, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fdbd 	bl	8000ee8 <FoodOrder_Init>
		prevFoodOrders[i].state = Empty;
 800236e:	4987      	ldr	r1, [pc, #540]	@ (800258c <main+0x278>)
 8002370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3320      	adds	r3, #32
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8002382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002384:	3301      	adds	r3, #1
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238a:	2b03      	cmp	r3, #3
 800238c:	dde5      	ble.n	800235a <main+0x46>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800238e:	f001 f8b6 	bl	80034fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002392:	f000 f915 	bl	80025c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002396:	f000 fb1b 	bl	80029d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800239a:	f000 fa3b 	bl	8002814 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 800239e:	f000 f9a1 	bl	80026e4 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80023a2:	f000 fac1 	bl	8002928 <MX_TIM1_Init>
  MX_I2C2_Init();
 80023a6:	f000 f95d 	bl	8002664 <MX_I2C2_Init>
  MX_SPI1_Init();
 80023aa:	f000 fa7f 	bl	80028ac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80023ae:	f000 f9e5 	bl	800277c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 80023b2:	4877      	ldr	r0, [pc, #476]	@ (8002590 <main+0x27c>)
 80023b4:	f004 fb36 	bl	8006a24 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  box_count = init_stream(&huart2);
 80023b8:	4876      	ldr	r0, [pc, #472]	@ (8002594 <main+0x280>)
 80023ba:	f7ff fc8b 	bl	8001cd4 <init_stream>
 80023be:	4603      	mov	r3, r0
 80023c0:	4a75      	ldr	r2, [pc, #468]	@ (8002598 <main+0x284>)
 80023c2:	6013      	str	r3, [r2, #0]
  box_count = MAX_FOOD_ORDERS < box_count ? MAX_FOOD_ORDERS : box_count;
 80023c4:	4b74      	ldr	r3, [pc, #464]	@ (8002598 <main+0x284>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	bfa8      	it	ge
 80023cc:	2304      	movge	r3, #4
 80023ce:	4a72      	ldr	r2, [pc, #456]	@ (8002598 <main+0x284>)
 80023d0:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < box_count; i++) {
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023d6:	e008      	b.n	80023ea <main+0xd6>
	  close_locker(&huart2, i+1);
 80023d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023da:	3301      	adds	r3, #1
 80023dc:	4619      	mov	r1, r3
 80023de:	486d      	ldr	r0, [pc, #436]	@ (8002594 <main+0x280>)
 80023e0:	f7ff fcac 	bl	8001d3c <close_locker>
  for (int i = 0; i < box_count; i++) {
 80023e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e6:	3301      	adds	r3, #1
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002598 <main+0x284>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023f0:	429a      	cmp	r2, r3
 80023f2:	dbf1      	blt.n	80023d8 <main+0xc4>
  }
  initialize_touch(&hi2c2);
 80023f4:	4869      	ldr	r0, [pc, #420]	@ (800259c <main+0x288>)
 80023f6:	f7ff fbe9 	bl	8001bcc <initialize_touch>
  initialize_screen(&hspi1);
 80023fa:	4869      	ldr	r0, [pc, #420]	@ (80025a0 <main+0x28c>)
 80023fc:	f7ff f976 	bl	80016ec <initialize_screen>
  draw(&hspi1);
 8002400:	4867      	ldr	r0, [pc, #412]	@ (80025a0 <main+0x28c>)
 8002402:	f7ff fa93 	bl	800192c <draw>
  uartSend("LIST\n");
 8002406:	4867      	ldr	r0, [pc, #412]	@ (80025a4 <main+0x290>)
 8002408:	f7ff ff5e 	bl	80022c8 <uartSend>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 800240c:	4b66      	ldr	r3, [pc, #408]	@ (80025a8 <main+0x294>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	4b65      	ldr	r3, [pc, #404]	@ (80025ac <main+0x298>)
 8002416:	4413      	add	r3, r2
 8002418:	2201      	movs	r2, #1
 800241a:	4619      	mov	r1, r3
 800241c:	4864      	ldr	r0, [pc, #400]	@ (80025b0 <main+0x29c>)
 800241e:	f005 f8e7 	bl	80075f0 <HAL_UART_Receive_IT>

  while (1)
  {

	  if (pendingTouch) {
 8002422:	4b64      	ldr	r3, [pc, #400]	@ (80025b4 <main+0x2a0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d065      	beq.n	80024f6 <main+0x1e2>
		  pendingTouch = 0; // put this at the end to debounce or something
 800242a:	4b62      	ldr	r3, [pc, #392]	@ (80025b4 <main+0x2a0>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

		  uint8_t button = touchHook(&hi2c2);
 8002430:	485a      	ldr	r0, [pc, #360]	@ (800259c <main+0x288>)
 8002432:	f7ff fb71 	bl	8001b18 <touchHook>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  FoodOrder* order = &foodOrders[button];
 800243c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4a4f      	ldr	r2, [pc, #316]	@ (8002588 <main+0x274>)
 800244a:	4413      	add	r3, r2
 800244c:	62bb      	str	r3, [r7, #40]	@ 0x28

		  switch (order->state) {
 800244e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d84e      	bhi.n	80024f6 <main+0x1e2>
 8002458:	a201      	add	r2, pc, #4	@ (adr r2, 8002460 <main+0x14c>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	08002471 	.word	0x08002471
 8002464:	080024ad 	.word	0x080024ad
 8002468:	080024f7 	.word	0x080024f7
 800246c:	080024c3 	.word	0x080024c3
		  case Empty:
			  // Select box and open it

			  int newBox = FoodOrders_FindEmpty(foodOrders);
 8002470:	4845      	ldr	r0, [pc, #276]	@ (8002588 <main+0x274>)
 8002472:	f7fe fdf5 	bl	8001060 <FoodOrders_FindEmpty>
 8002476:	6278      	str	r0, [r7, #36]	@ 0x24
			  if (newBox == -1) break;
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247e:	d039      	beq.n	80024f4 <main+0x1e0>
			  order->box = newBox;
 8002480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002484:	61da      	str	r2, [r3, #28]
			  order->state = OpenedDelivery;
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2020 	strb.w	r2, [r3, #32]

			  setBox(order->id, order->box);
 800248e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f7ff fdc3 	bl	8002024 <setBox>

			  open_locker(&huart2, order->box);
 800249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4619      	mov	r1, r3
 80024a4:	483b      	ldr	r0, [pc, #236]	@ (8002594 <main+0x280>)
 80024a6:	f7ff fc6f 	bl	8001d88 <open_locker>

			  break;
 80024aa:	e024      	b.n	80024f6 <main+0x1e2>
		  case OpenedDelivery:
			  // Close box
			  order->state = Occupied;
 80024ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]

			  close_locker(&huart2, order->box);
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4619      	mov	r1, r3
 80024ba:	4836      	ldr	r0, [pc, #216]	@ (8002594 <main+0x280>)
 80024bc:	f7ff fc3e 	bl	8001d3c <close_locker>

			  break;
 80024c0:	e019      	b.n	80024f6 <main+0x1e2>
			  // Ignore because locked
			  break;
		  case OpenedQR:
			  // Close box

			  close_locker(&huart2, order->box);
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4832      	ldr	r0, [pc, #200]	@ (8002594 <main+0x280>)
 80024ca:	f7ff fc37 	bl	8001d3c <close_locker>

			  order->state = Empty;
 80024ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2020 	strb.w	r2, [r3, #32]
			  order->valid = 0;
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	2200      	movs	r2, #0
 80024da:	751a      	strb	r2, [r3, #20]
			  order->box = 0;
 80024dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
			  ignore_next_request = 1;
 80024e2:	4b35      	ldr	r3, [pc, #212]	@ (80025b8 <main+0x2a4>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
			  deleteBox(order->id);
 80024e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fdb1 	bl	8002054 <deleteBox>

			  break;
 80024f2:	e000      	b.n	80024f6 <main+0x1e2>
			  if (newBox == -1) break;
 80024f4:	bf00      	nop
		  }
	  }

	  if (!FoodOrders_Equal(prevFoodOrders, foodOrders)) {
 80024f6:	4924      	ldr	r1, [pc, #144]	@ (8002588 <main+0x274>)
 80024f8:	4824      	ldr	r0, [pc, #144]	@ (800258c <main+0x278>)
 80024fa:	f7fe fd59 	bl	8000fb0 <FoodOrders_Equal>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d13b      	bne.n	800257c <main+0x268>
		   FoodOrders_Copy(prevFoodOrders, foodOrders);
 8002504:	4920      	ldr	r1, [pc, #128]	@ (8002588 <main+0x274>)
 8002506:	4821      	ldr	r0, [pc, #132]	@ (800258c <main+0x278>)
 8002508:	f7fe fd7d 	bl	8001006 <FoodOrders_Copy>

		  for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 800250c:	2300      	movs	r3, #0
 800250e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002510:	e031      	b.n	8002576 <main+0x262>
			  FoodOrder* order = &foodOrders[i];
 8002512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4a1a      	ldr	r2, [pc, #104]	@ (8002588 <main+0x274>)
 800251e:	4413      	add	r3, r2
 8002520:	623b      	str	r3, [r7, #32]

			  char message[25];
			  if (!order->valid) {
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	7d1b      	ldrb	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <main+0x21c>
				  message[0] = '\0';
 800252a:	2300      	movs	r3, #0
 800252c:	713b      	strb	r3, [r7, #4]
 800252e:	e018      	b.n	8002562 <main+0x24e>
			  } else if (order->state == Empty) {
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <main+0x240>
				  strcpy(message, foodOrders[i].name);
 800253a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4a10      	ldr	r2, [pc, #64]	@ (8002588 <main+0x274>)
 8002546:	441a      	add	r2, r3
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f008 f828 	bl	800a5a2 <strcpy>
 8002552:	e006      	b.n	8002562 <main+0x24e>
			  } else {
				  sprintf(message, "[%d] %s", order->box, order->name);
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	1d38      	adds	r0, r7, #4
 800255c:	4917      	ldr	r1, [pc, #92]	@ (80025bc <main+0x2a8>)
 800255e:	f007 fea9 	bl	800a2b4 <siprintf>
			  }

			  drawButton(&hspi1, i, 1, message);
 8002562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002564:	b2d9      	uxtb	r1, r3
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	2201      	movs	r2, #1
 800256a:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <main+0x28c>)
 800256c:	f7ff f918 	bl	80017a0 <drawButton>
		  for (int i = 0; i < MAX_FOOD_ORDERS; i++) {
 8002570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002572:	3301      	adds	r3, #1
 8002574:	633b      	str	r3, [r7, #48]	@ 0x30
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	2b03      	cmp	r3, #3
 800257a:	ddca      	ble.n	8002512 <main+0x1fe>
	  }




	  HAL_Delay(10);
 800257c:	200a      	movs	r0, #10
 800257e:	f001 f833 	bl	80035e8 <HAL_Delay>
	  readTinyCodeData();
 8002582:	f7ff fc55 	bl	8001e30 <readTinyCodeData>
	  if (pendingTouch) {
 8002586:	e74c      	b.n	8002422 <main+0x10e>
 8002588:	2000063c 	.word	0x2000063c
 800258c:	200006cc 	.word	0x200006cc
 8002590:	200004f0 	.word	0x200004f0
 8002594:	20000364 	.word	0x20000364
 8002598:	20000270 	.word	0x20000270
 800259c:	2000027c 	.word	0x2000027c
 80025a0:	2000048c 	.word	0x2000048c
 80025a4:	0800c820 	.word	0x0800c820
 80025a8:	20000760 	.word	0x20000760
 80025ac:	2000053c 	.word	0x2000053c
 80025b0:	200003f8 	.word	0x200003f8
 80025b4:	20000768 	.word	0x20000768
 80025b8:	2000075c 	.word	0x2000075c
 80025bc:	0800c86c 	.word	0x0800c86c

080025c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b096      	sub	sp, #88	@ 0x58
 80025c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	2244      	movs	r2, #68	@ 0x44
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f007 ff68 	bl	800a4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80025e6:	f002 f9a5 	bl	8004934 <HAL_PWREx_ControlVoltageScaling>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80025f0:	f000 fc0a 	bl	8002e08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80025f4:	2310      	movs	r3, #16
 80025f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80025f8:	2301      	movs	r3, #1
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002600:	2360      	movs	r3, #96	@ 0x60
 8002602:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002604:	2302      	movs	r3, #2
 8002606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002608:	2301      	movs	r3, #1
 800260a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800260c:	2301      	movs	r3, #1
 800260e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002610:	2320      	movs	r3, #32
 8002612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002614:	2302      	movs	r3, #2
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002618:	2302      	movs	r3, #2
 800261a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800261c:	2302      	movs	r3, #2
 800261e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4618      	mov	r0, r3
 8002626:	f002 fa39 	bl	8004a9c <HAL_RCC_OscConfig>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002630:	f000 fbea 	bl	8002e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002634:	230f      	movs	r3, #15
 8002636:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002638:	2303      	movs	r3, #3
 800263a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002648:	463b      	mov	r3, r7
 800264a:	2103      	movs	r1, #3
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fe3f 	bl	80052d0 <HAL_RCC_ClockConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002658:	f000 fbd6 	bl	8002e08 <Error_Handler>
  }
}
 800265c:	bf00      	nop
 800265e:	3758      	adds	r7, #88	@ 0x58
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <MX_I2C2_Init+0x74>)
 800266a:	4a1c      	ldr	r2, [pc, #112]	@ (80026dc <MX_I2C2_Init+0x78>)
 800266c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <MX_I2C2_Init+0x74>)
 8002670:	4a1b      	ldr	r2, [pc, #108]	@ (80026e0 <MX_I2C2_Init+0x7c>)
 8002672:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002674:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <MX_I2C2_Init+0x74>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800267a:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <MX_I2C2_Init+0x74>)
 800267c:	2201      	movs	r2, #1
 800267e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <MX_I2C2_Init+0x74>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002686:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <MX_I2C2_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800268c:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <MX_I2C2_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <MX_I2C2_Init+0x74>)
 8002694:	2200      	movs	r2, #0
 8002696:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002698:	4b0f      	ldr	r3, [pc, #60]	@ (80026d8 <MX_I2C2_Init+0x74>)
 800269a:	2200      	movs	r2, #0
 800269c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800269e:	480e      	ldr	r0, [pc, #56]	@ (80026d8 <MX_I2C2_Init+0x74>)
 80026a0:	f001 fb54 	bl	8003d4c <HAL_I2C_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80026aa:	f000 fbad 	bl	8002e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026ae:	2100      	movs	r1, #0
 80026b0:	4809      	ldr	r0, [pc, #36]	@ (80026d8 <MX_I2C2_Init+0x74>)
 80026b2:	f002 f887 	bl	80047c4 <HAL_I2CEx_ConfigAnalogFilter>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80026bc:	f000 fba4 	bl	8002e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026c0:	2100      	movs	r1, #0
 80026c2:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_I2C2_Init+0x74>)
 80026c4:	f002 f8c9 	bl	800485a <HAL_I2CEx_ConfigDigitalFilter>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80026ce:	f000 fb9b 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000027c 	.word	0x2000027c
 80026dc:	40005800 	.word	0x40005800
 80026e0:	10707dbc 	.word	0x10707dbc

080026e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80026e8:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 80026ea:	4a23      	ldr	r2, [pc, #140]	@ (8002778 <MX_LPUART1_UART_Init+0x94>)
 80026ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80026ee:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 80026f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002702:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 8002716:	2200      	movs	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800271a:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002720:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 8002722:	2200      	movs	r2, #0
 8002724:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800272c:	4811      	ldr	r0, [pc, #68]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 800272e:	f004 fdb7 	bl	80072a0 <HAL_UART_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002738:	f000 fb66 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800273c:	2100      	movs	r1, #0
 800273e:	480d      	ldr	r0, [pc, #52]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 8002740:	f006 fedb 	bl	80094fa <HAL_UARTEx_SetTxFifoThreshold>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800274a:	f000 fb5d 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274e:	2100      	movs	r1, #0
 8002750:	4808      	ldr	r0, [pc, #32]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 8002752:	f006 ff10 	bl	8009576 <HAL_UARTEx_SetRxFifoThreshold>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800275c:	f000 fb54 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	@ (8002774 <MX_LPUART1_UART_Init+0x90>)
 8002762:	f006 fe91 	bl	8009488 <HAL_UARTEx_DisableFifoMode>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800276c:	f000 fb4c 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200002d0 	.word	0x200002d0
 8002778:	40008000 	.word	0x40008000

0800277c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <MX_USART2_UART_Init+0x90>)
 8002782:	4a23      	ldr	r2, [pc, #140]	@ (8002810 <MX_USART2_UART_Init+0x94>)
 8002784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002786:	4b21      	ldr	r3, [pc, #132]	@ (800280c <MX_USART2_UART_Init+0x90>)
 8002788:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800278c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800278e:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <MX_USART2_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002794:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <MX_USART2_UART_Init+0x90>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800279a:	4b1c      	ldr	r3, [pc, #112]	@ (800280c <MX_USART2_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a0:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027a2:	220c      	movs	r2, #12
 80027a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a6:	4b19      	ldr	r3, [pc, #100]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ac:	4b17      	ldr	r3, [pc, #92]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b2:	4b16      	ldr	r3, [pc, #88]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b8:	4b14      	ldr	r3, [pc, #80]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027be:	4b13      	ldr	r3, [pc, #76]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027c4:	4811      	ldr	r0, [pc, #68]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027c6:	f004 fd6b 	bl	80072a0 <HAL_UART_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027d0:	f000 fb1a 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d4:	2100      	movs	r1, #0
 80027d6:	480d      	ldr	r0, [pc, #52]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027d8:	f006 fe8f 	bl	80094fa <HAL_UARTEx_SetTxFifoThreshold>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027e2:	f000 fb11 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027e6:	2100      	movs	r1, #0
 80027e8:	4808      	ldr	r0, [pc, #32]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027ea:	f006 fec4 	bl	8009576 <HAL_UARTEx_SetRxFifoThreshold>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027f4:	f000 fb08 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027f8:	4804      	ldr	r0, [pc, #16]	@ (800280c <MX_USART2_UART_Init+0x90>)
 80027fa:	f006 fe45 	bl	8009488 <HAL_UARTEx_DisableFifoMode>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002804:	f000 fb00 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000364 	.word	0x20000364
 8002810:	40004400 	.word	0x40004400

08002814 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002818:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 800281a:	4a23      	ldr	r2, [pc, #140]	@ (80028a8 <MX_USART3_UART_Init+0x94>)
 800281c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800281e:	4b21      	ldr	r3, [pc, #132]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002820:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002824:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002826:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 800283a:	220c      	movs	r2, #12
 800283c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002844:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800284a:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 800284c:	2200      	movs	r2, #0
 800284e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002852:	2200      	movs	r2, #0
 8002854:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002858:	2200      	movs	r2, #0
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800285c:	4811      	ldr	r0, [pc, #68]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 800285e:	f004 fd1f 	bl	80072a0 <HAL_UART_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002868:	f000 face 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800286c:	2100      	movs	r1, #0
 800286e:	480d      	ldr	r0, [pc, #52]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002870:	f006 fe43 	bl	80094fa <HAL_UARTEx_SetTxFifoThreshold>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800287a:	f000 fac5 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800287e:	2100      	movs	r1, #0
 8002880:	4808      	ldr	r0, [pc, #32]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002882:	f006 fe78 	bl	8009576 <HAL_UARTEx_SetRxFifoThreshold>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800288c:	f000 fabc 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002890:	4804      	ldr	r0, [pc, #16]	@ (80028a4 <MX_USART3_UART_Init+0x90>)
 8002892:	f006 fdf9 	bl	8009488 <HAL_UARTEx_DisableFifoMode>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800289c:	f000 fab4 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200003f8 	.word	0x200003f8
 80028a8:	40004800 	.word	0x40004800

080028ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <MX_SPI1_Init+0x78>)
 80028b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028be:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c4:	4b16      	ldr	r3, [pc, #88]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028cc:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d2:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80028d8:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80028de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028e2:	2208      	movs	r2, #8
 80028e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028f8:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MX_SPI1_Init+0x74>)
 80028fa:	2207      	movs	r2, #7
 80028fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <MX_SPI1_Init+0x74>)
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <MX_SPI1_Init+0x74>)
 8002906:	2208      	movs	r2, #8
 8002908:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800290a:	4805      	ldr	r0, [pc, #20]	@ (8002920 <MX_SPI1_Init+0x74>)
 800290c:	f003 fcb6 	bl	800627c <HAL_SPI_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002916:	f000 fa77 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000048c 	.word	0x2000048c
 8002924:	40013000 	.word	0x40013000

08002928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 8002948:	4a20      	ldr	r2, [pc, #128]	@ (80029cc <MX_TIM1_Init+0xa4>)
 800294a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30000;
 800294c:	4b1e      	ldr	r3, [pc, #120]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 800294e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002952:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002954:	4b1c      	ldr	r3, [pc, #112]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 800295a:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 800295c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002960:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002968:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 800296a:	2200      	movs	r2, #0
 800296c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296e:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002974:	4814      	ldr	r0, [pc, #80]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 8002976:	f003 fffd 	bl	8006974 <HAL_TIM_Base_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002980:	f000 fa42 	bl	8002e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002988:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	4619      	mov	r1, r3
 8002990:	480d      	ldr	r0, [pc, #52]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 8002992:	f004 f9b9 	bl	8006d08 <HAL_TIM_ConfigClockSource>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800299c:	f000 fa34 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a0:	2300      	movs	r3, #0
 80029a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4805      	ldr	r0, [pc, #20]	@ (80029c8 <MX_TIM1_Init+0xa0>)
 80029b2:	f004 fbcf 	bl	8007154 <HAL_TIMEx_MasterConfigSynchronization>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80029bc:	f000 fa24 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200004f0 	.word	0x200004f0
 80029cc:	40012c00 	.word	0x40012c00

080029d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08e      	sub	sp, #56	@ 0x38
 80029d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e6:	4bb2      	ldr	r3, [pc, #712]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ea:	4ab1      	ldr	r2, [pc, #708]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 80029ec:	f043 0310 	orr.w	r3, r3, #16
 80029f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029f2:	4baf      	ldr	r3, [pc, #700]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	623b      	str	r3, [r7, #32]
 80029fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	4bac      	ldr	r3, [pc, #688]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	4aab      	ldr	r2, [pc, #684]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0a:	4ba9      	ldr	r3, [pc, #676]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a16:	4ba6      	ldr	r3, [pc, #664]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	4aa5      	ldr	r2, [pc, #660]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a1c:	f043 0320 	orr.w	r3, r3, #32
 8002a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a22:	4ba3      	ldr	r3, [pc, #652]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a2e:	4ba0      	ldr	r3, [pc, #640]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	4a9f      	ldr	r2, [pc, #636]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3a:	4b9d      	ldr	r3, [pc, #628]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b9a      	ldr	r3, [pc, #616]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4a:	4a99      	ldr	r2, [pc, #612]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a52:	4b97      	ldr	r3, [pc, #604]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b94      	ldr	r3, [pc, #592]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a62:	4a93      	ldr	r2, [pc, #588]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a6a:	4b91      	ldr	r3, [pc, #580]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a76:	4b8e      	ldr	r3, [pc, #568]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7a:	4a8d      	ldr	r2, [pc, #564]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a82:	4b8b      	ldr	r3, [pc, #556]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a8e:	4b88      	ldr	r3, [pc, #544]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	4a87      	ldr	r2, [pc, #540]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9a:	4b85      	ldr	r3, [pc, #532]	@ (8002cb0 <MX_GPIO_Init+0x2e0>)
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002aa6:	f001 ffe9 	bl	8004a7c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002ab0:	4880      	ldr	r0, [pc, #512]	@ (8002cb4 <MX_GPIO_Init+0x2e4>)
 8002ab2:	f001 f91b 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002ac6:	230d      	movs	r3, #13
 8002ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4879      	ldr	r0, [pc, #484]	@ (8002cb8 <MX_GPIO_Init+0x2e8>)
 8002ad2:	f000 ff79 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002ae6:	230d      	movs	r3, #13
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aee:	4619      	mov	r1, r3
 8002af0:	4870      	ldr	r0, [pc, #448]	@ (8002cb4 <MX_GPIO_Init+0x2e4>)
 8002af2:	f000 ff69 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002af6:	230f      	movs	r3, #15
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002afa:	230b      	movs	r3, #11
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b06:	4619      	mov	r1, r3
 8002b08:	486c      	ldr	r0, [pc, #432]	@ (8002cbc <MX_GPIO_Init+0x2ec>)
 8002b0a:	f000 ff5d 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b2c:	f000 ff4c 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b30:	2308      	movs	r3, #8
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b34:	230b      	movs	r3, #11
 8002b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b46:	f000 ff3f 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b62:	4619      	mov	r1, r3
 8002b64:	4856      	ldr	r0, [pc, #344]	@ (8002cc0 <MX_GPIO_Init+0x2f0>)
 8002b66:	f000 ff2f 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b6e:	230b      	movs	r3, #11
 8002b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4850      	ldr	r0, [pc, #320]	@ (8002cc0 <MX_GPIO_Init+0x2f0>)
 8002b7e:	f000 ff23 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002b82:	2344      	movs	r3, #68	@ 0x44
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b86:	2303      	movs	r3, #3
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b92:	4619      	mov	r1, r3
 8002b94:	484a      	ldr	r0, [pc, #296]	@ (8002cc0 <MX_GPIO_Init+0x2f0>)
 8002b96:	f000 ff17 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002b9a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4840      	ldr	r0, [pc, #256]	@ (8002cb4 <MX_GPIO_Init+0x2e4>)
 8002bb4:	f000 ff08 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bbe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4839      	ldr	r0, [pc, #228]	@ (8002cb4 <MX_GPIO_Init+0x2e4>)
 8002bd0:	f000 fefa 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be6:	2301      	movs	r3, #1
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4833      	ldr	r0, [pc, #204]	@ (8002cc0 <MX_GPIO_Init+0x2f0>)
 8002bf2:	f000 fee9 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002bf6:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c08:	230d      	movs	r3, #13
 8002c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	482b      	ldr	r0, [pc, #172]	@ (8002cc0 <MX_GPIO_Init+0x2f0>)
 8002c14:	f000 fed8 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002c2a:	230e      	movs	r3, #14
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c32:	4619      	mov	r1, r3
 8002c34:	4822      	ldr	r0, [pc, #136]	@ (8002cc0 <MX_GPIO_Init+0x2f0>)
 8002c36:	f000 fec7 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c3a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c54:	4619      	mov	r1, r3
 8002c56:	481b      	ldr	r0, [pc, #108]	@ (8002cc4 <MX_GPIO_Init+0x2f4>)
 8002c58:	f000 feb6 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c5c:	2340      	movs	r3, #64	@ 0x40
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c6c:	230d      	movs	r3, #13
 8002c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c74:	4619      	mov	r1, r3
 8002c76:	4811      	ldr	r0, [pc, #68]	@ (8002cbc <MX_GPIO_Init+0x2ec>)
 8002c78:	f000 fea6 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c94:	4619      	mov	r1, r3
 8002c96:	4809      	ldr	r0, [pc, #36]	@ (8002cbc <MX_GPIO_Init+0x2ec>)
 8002c98:	f000 fe96 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002c9c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cae:	e00b      	b.n	8002cc8 <MX_GPIO_Init+0x2f8>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	48001400 	.word	0x48001400
 8002cb8:	48001000 	.word	0x48001000
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	48000400 	.word	0x48000400
 8002cc4:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002cc8:	230c      	movs	r3, #12
 8002cca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4840      	ldr	r0, [pc, #256]	@ (8002dd4 <MX_GPIO_Init+0x404>)
 8002cd4:	f000 fe78 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002cd8:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002cea:	230a      	movs	r3, #10
 8002cec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cf8:	f000 fe66 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d14:	f000 fe58 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d28:	2309      	movs	r3, #9
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	4829      	ldr	r0, [pc, #164]	@ (8002dd8 <MX_GPIO_Init+0x408>)
 8002d34:	f000 fe48 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d48:	230c      	movs	r3, #12
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d50:	4619      	mov	r1, r3
 8002d52:	4821      	ldr	r0, [pc, #132]	@ (8002dd8 <MX_GPIO_Init+0x408>)
 8002d54:	f000 fe38 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002d58:	2338      	movs	r3, #56	@ 0x38
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d68:	2306      	movs	r3, #6
 8002d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d70:	4619      	mov	r1, r3
 8002d72:	481a      	ldr	r0, [pc, #104]	@ (8002ddc <MX_GPIO_Init+0x40c>)
 8002d74:	f000 fe28 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d7e:	2312      	movs	r3, #18
 8002d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d82:	2301      	movs	r3, #1
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d92:	4619      	mov	r1, r3
 8002d94:	4811      	ldr	r0, [pc, #68]	@ (8002ddc <MX_GPIO_Init+0x40c>)
 8002d96:	f000 fe17 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002daa:	2302      	movs	r3, #2
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db2:	4619      	mov	r1, r3
 8002db4:	480a      	ldr	r0, [pc, #40]	@ (8002de0 <MX_GPIO_Init+0x410>)
 8002db6:	f000 fe07 	bl	80039c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2028      	movs	r0, #40	@ 0x28
 8002dc0:	f000 fd11 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dc4:	2028      	movs	r0, #40	@ 0x28
 8002dc6:	f000 fd2a 	bl	800381e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dca:	bf00      	nop
 8002dcc:	3738      	adds	r7, #56	@ 0x38
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	48000800 	.word	0x48000800
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	48000400 	.word	0x48000400
 8002de0:	48001000 	.word	0x48001000

08002de4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002dec:	1d39      	adds	r1, r7, #4
 8002dee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002df2:	2201      	movs	r2, #1
 8002df4:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <__io_putchar+0x20>)
 8002df6:	f004 faa3 	bl	8007340 <HAL_UART_Transmit>
  return ch;
 8002dfa:	687b      	ldr	r3, [r7, #4]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	200002d0 	.word	0x200002d0

08002e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0c:	b672      	cpsid	i
}
 8002e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <Error_Handler+0x8>

08002e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <HAL_MspInit+0x44>)
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e58 <HAL_MspInit+0x44>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e26:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <HAL_MspInit+0x44>)
 8002e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_MspInit+0x44>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	4a08      	ldr	r2, [pc, #32]	@ (8002e58 <HAL_MspInit+0x44>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_MspInit+0x44>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b0ae      	sub	sp, #184	@ 0xb8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	2294      	movs	r2, #148	@ 0x94
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f007 fb11 	bl	800a4a4 <memset>
  if(hi2c->Instance==I2C2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2b      	ldr	r2, [pc, #172]	@ (8002f34 <HAL_I2C_MspInit+0xd8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d14f      	bne.n	8002f2c <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002e90:	2300      	movs	r3, #0
 8002e92:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f002 fcd7 	bl	800584c <HAL_RCCEx_PeriphCLKConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ea4:	f7ff ffb0 	bl	8002e08 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ea8:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <HAL_I2C_MspInit+0xdc>)
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eac:	4a22      	ldr	r2, [pc, #136]	@ (8002f38 <HAL_I2C_MspInit+0xdc>)
 8002eae:	f043 0320 	orr.w	r3, r3, #32
 8002eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eb4:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <HAL_I2C_MspInit+0xdc>)
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec6:	2312      	movs	r3, #18
 8002ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ede:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4815      	ldr	r0, [pc, #84]	@ (8002f3c <HAL_I2C_MspInit+0xe0>)
 8002ee6:	f000 fd6f 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eea:	2304      	movs	r3, #4
 8002eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef0:	2312      	movs	r3, #18
 8002ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f02:	2304      	movs	r3, #4
 8002f04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480b      	ldr	r0, [pc, #44]	@ (8002f3c <HAL_I2C_MspInit+0xe0>)
 8002f10:	f000 fd5a 	bl	80039c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_I2C_MspInit+0xdc>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <HAL_I2C_MspInit+0xdc>)
 8002f1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_I2C_MspInit+0xdc>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f2c:	bf00      	nop
 8002f2e:	37b8      	adds	r7, #184	@ 0xb8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40005800 	.word	0x40005800
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	48001400 	.word	0x48001400

08002f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0b2      	sub	sp, #200	@ 0xc8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f58:	f107 0320 	add.w	r3, r7, #32
 8002f5c:	2294      	movs	r2, #148	@ 0x94
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f007 fa9f 	bl	800a4a4 <memset>
  if(huart->Instance==LPUART1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a67      	ldr	r2, [pc, #412]	@ (8003108 <HAL_UART_MspInit+0x1c8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d13e      	bne.n	8002fee <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002f70:	2320      	movs	r3, #32
 8002f72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002f74:	2300      	movs	r3, #0
 8002f76:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f78:	f107 0320 	add.w	r3, r7, #32
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f002 fc65 	bl	800584c <HAL_RCCEx_PeriphCLKConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f88:	f7ff ff3e 	bl	8002e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f8c:	4b5f      	ldr	r3, [pc, #380]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f90:	4a5e      	ldr	r2, [pc, #376]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002f98:	4b5c      	ldr	r3, [pc, #368]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fa4:	4b59      	ldr	r3, [pc, #356]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	4a58      	ldr	r2, [pc, #352]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8002faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fb0:	4b56      	ldr	r3, [pc, #344]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002fbc:	f001 fd5e 	bl	8004a7c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002fc0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002fda:	2308      	movs	r3, #8
 8002fdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fe0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	484a      	ldr	r0, [pc, #296]	@ (8003110 <HAL_UART_MspInit+0x1d0>)
 8002fe8:	f000 fcee 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002fec:	e088      	b.n	8003100 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a48      	ldr	r2, [pc, #288]	@ (8003114 <HAL_UART_MspInit+0x1d4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d13b      	bne.n	8003070 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003000:	f107 0320 	add.w	r3, r7, #32
 8003004:	4618      	mov	r0, r3
 8003006:	f002 fc21 	bl	800584c <HAL_RCCEx_PeriphCLKConfig>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003010:	f7ff fefa 	bl	8002e08 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003014:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003018:	4a3c      	ldr	r2, [pc, #240]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 800301a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003020:	4b3a      	ldr	r3, [pc, #232]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800302c:	4b37      	ldr	r3, [pc, #220]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 800302e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003030:	4a36      	ldr	r2, [pc, #216]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8003032:	f043 0308 	orr.w	r3, r3, #8
 8003036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003038:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 800303a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003044:	2378      	movs	r3, #120	@ 0x78
 8003046:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003056:	2303      	movs	r3, #3
 8003058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800305c:	2307      	movs	r3, #7
 800305e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003062:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003066:	4619      	mov	r1, r3
 8003068:	482b      	ldr	r0, [pc, #172]	@ (8003118 <HAL_UART_MspInit+0x1d8>)
 800306a:	f000 fcad 	bl	80039c8 <HAL_GPIO_Init>
}
 800306e:	e047      	b.n	8003100 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a29      	ldr	r2, [pc, #164]	@ (800311c <HAL_UART_MspInit+0x1dc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d142      	bne.n	8003100 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800307a:	2304      	movs	r3, #4
 800307c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800307e:	2300      	movs	r3, #0
 8003080:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003082:	f107 0320 	add.w	r3, r7, #32
 8003086:	4618      	mov	r0, r3
 8003088:	f002 fbe0 	bl	800584c <HAL_RCCEx_PeriphCLKConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8003092:	f7ff feb9 	bl	8002e08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003096:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	4a1c      	ldr	r2, [pc, #112]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030a2:	4b1a      	ldr	r3, [pc, #104]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	4b17      	ldr	r3, [pc, #92]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 80030b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b2:	4a16      	ldr	r2, [pc, #88]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ba:	4b14      	ldr	r3, [pc, #80]	@ (800310c <HAL_UART_MspInit+0x1cc>)
 80030bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030c6:	2330      	movs	r3, #48	@ 0x30
 80030c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d8:	2303      	movs	r3, #3
 80030da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030de:	2307      	movs	r3, #7
 80030e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80030e8:	4619      	mov	r1, r3
 80030ea:	480d      	ldr	r0, [pc, #52]	@ (8003120 <HAL_UART_MspInit+0x1e0>)
 80030ec:	f000 fc6c 	bl	80039c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	2100      	movs	r1, #0
 80030f4:	2027      	movs	r0, #39	@ 0x27
 80030f6:	f000 fb76 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030fa:	2027      	movs	r0, #39	@ 0x27
 80030fc:	f000 fb8f 	bl	800381e <HAL_NVIC_EnableIRQ>
}
 8003100:	bf00      	nop
 8003102:	37c8      	adds	r7, #200	@ 0xc8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40008000 	.word	0x40008000
 800310c:	40021000 	.word	0x40021000
 8003110:	48001800 	.word	0x48001800
 8003114:	40004400 	.word	0x40004400
 8003118:	48000c00 	.word	0x48000c00
 800311c:	40004800 	.word	0x40004800
 8003120:	48000800 	.word	0x48000800

08003124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	@ 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a17      	ldr	r2, [pc, #92]	@ (80031a0 <HAL_SPI_MspInit+0x7c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d128      	bne.n	8003198 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003146:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <HAL_SPI_MspInit+0x80>)
 8003148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314a:	4a16      	ldr	r2, [pc, #88]	@ (80031a4 <HAL_SPI_MspInit+0x80>)
 800314c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003150:	6613      	str	r3, [r2, #96]	@ 0x60
 8003152:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <HAL_SPI_MspInit+0x80>)
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_SPI_MspInit+0x80>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003162:	4a10      	ldr	r2, [pc, #64]	@ (80031a4 <HAL_SPI_MspInit+0x80>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <HAL_SPI_MspInit+0x80>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003176:	23f0      	movs	r3, #240	@ 0xf0
 8003178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003186:	2305      	movs	r3, #5
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003194:	f000 fc18 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003198:	bf00      	nop
 800319a:	3728      	adds	r7, #40	@ 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40013000 	.word	0x40013000
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	@ 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <HAL_TIM_Base_MspInit+0xb0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d141      	bne.n	800324e <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_TIM_Base_MspInit+0xb4>)
 80031cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ce:	4a23      	ldr	r2, [pc, #140]	@ (800325c <HAL_TIM_Base_MspInit+0xb4>)
 80031d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80031d6:	4b21      	ldr	r3, [pc, #132]	@ (800325c <HAL_TIM_Base_MspInit+0xb4>)
 80031d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031e2:	4b1e      	ldr	r3, [pc, #120]	@ (800325c <HAL_TIM_Base_MspInit+0xb4>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <HAL_TIM_Base_MspInit+0xb4>)
 80031e8:	f043 0310 	orr.w	r3, r3, #16
 80031ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ee:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <HAL_TIM_Base_MspInit+0xb4>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80031fa:	f44f 532a 	mov.w	r3, #10880	@ 0x2a80
 80031fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800320c:	2301      	movs	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4619      	mov	r1, r3
 8003216:	4812      	ldr	r0, [pc, #72]	@ (8003260 <HAL_TIM_Base_MspInit+0xb8>)
 8003218:	f000 fbd6 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800321c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800322e:	2303      	movs	r3, #3
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003232:	f107 0314 	add.w	r3, r7, #20
 8003236:	4619      	mov	r1, r3
 8003238:	4809      	ldr	r0, [pc, #36]	@ (8003260 <HAL_TIM_Base_MspInit+0xb8>)
 800323a:	f000 fbc5 	bl	80039c8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	2019      	movs	r0, #25
 8003244:	f000 facf 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003248:	2019      	movs	r0, #25
 800324a:	f000 fae8 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800324e:	bf00      	nop
 8003250:	3728      	adds	r7, #40	@ 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40021000 	.word	0x40021000
 8003260:	48001000 	.word	0x48001000

08003264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003268:	bf00      	nop
 800326a:	e7fd      	b.n	8003268 <NMI_Handler+0x4>

0800326c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <HardFault_Handler+0x4>

08003274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <MemManage_Handler+0x4>

0800327c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <BusFault_Handler+0x4>

08003284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <UsageFault_Handler+0x4>

0800328c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ba:	f000 f975 	bl	80035a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032c8:	4802      	ldr	r0, [pc, #8]	@ (80032d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80032ca:	f003 fc1b 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200004f0 	.word	0x200004f0

080032d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80032dc:	4802      	ldr	r0, [pc, #8]	@ (80032e8 <USART3_IRQHandler+0x10>)
 80032de:	f004 f9d3 	bl	8007688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200003f8 	.word	0x200003f8

080032ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80032f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80032f4:	f000 fd12 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return 1;
 8003300:	2301      	movs	r3, #1
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_kill>:

int _kill(int pid, int sig)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003316:	f007 f917 	bl	800a548 <__errno>
 800331a:	4603      	mov	r3, r0
 800331c:	2216      	movs	r2, #22
 800331e:	601a      	str	r2, [r3, #0]
  return -1;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <_exit>:

void _exit (int status)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003334:	f04f 31ff 	mov.w	r1, #4294967295
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffe7 	bl	800330c <_kill>
  while (1) {}    /* Make sure we hang here */
 800333e:	bf00      	nop
 8003340:	e7fd      	b.n	800333e <_exit+0x12>

08003342 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e00a      	b.n	800336a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003354:	f3af 8000 	nop.w
 8003358:	4601      	mov	r1, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	60ba      	str	r2, [r7, #8]
 8003360:	b2ca      	uxtb	r2, r1
 8003362:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	dbf0      	blt.n	8003354 <_read+0x12>
  }

  return len;
 8003372:	687b      	ldr	r3, [r7, #4]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e009      	b.n	80033a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	60ba      	str	r2, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fd24 	bl	8002de4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	3301      	adds	r3, #1
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	dbf1      	blt.n	800338e <_write+0x12>
  }
  return len;
 80033aa:	687b      	ldr	r3, [r7, #4]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <_close>:

int _close(int file)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033dc:	605a      	str	r2, [r3, #4]
  return 0;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <_isatty>:

int _isatty(int file)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033f4:	2301      	movs	r3, #1
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003424:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <_sbrk+0x5c>)
 8003426:	4b15      	ldr	r3, [pc, #84]	@ (800347c <_sbrk+0x60>)
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003430:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <_sbrk+0x64>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003438:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <_sbrk+0x64>)
 800343a:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <_sbrk+0x68>)
 800343c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800343e:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <_sbrk+0x64>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	429a      	cmp	r2, r3
 800344a:	d207      	bcs.n	800345c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800344c:	f007 f87c 	bl	800a548 <__errno>
 8003450:	4603      	mov	r3, r0
 8003452:	220c      	movs	r2, #12
 8003454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e009      	b.n	8003470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800345c:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <_sbrk+0x64>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003462:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <_sbrk+0x64>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	4a05      	ldr	r2, [pc, #20]	@ (8003480 <_sbrk+0x64>)
 800346c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200a0000 	.word	0x200a0000
 800347c:	00000400 	.word	0x00000400
 8003480:	2000076c 	.word	0x2000076c
 8003484:	200008c0 	.word	0x200008c0

08003488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800348c:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <SystemInit+0x20>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	4a05      	ldr	r2, [pc, #20]	@ (80034a8 <SystemInit+0x20>)
 8003494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034b0:	f7ff ffea 	bl	8003488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034b4:	480c      	ldr	r0, [pc, #48]	@ (80034e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80034b6:	490d      	ldr	r1, [pc, #52]	@ (80034ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80034b8:	4a0d      	ldr	r2, [pc, #52]	@ (80034f0 <LoopForever+0xe>)
  movs r3, #0
 80034ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034bc:	e002      	b.n	80034c4 <LoopCopyDataInit>

080034be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034c2:	3304      	adds	r3, #4

080034c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034c8:	d3f9      	bcc.n	80034be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ca:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034cc:	4c0a      	ldr	r4, [pc, #40]	@ (80034f8 <LoopForever+0x16>)
  movs r3, #0
 80034ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034d0:	e001      	b.n	80034d6 <LoopFillZerobss>

080034d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034d4:	3204      	adds	r2, #4

080034d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034d8:	d3fb      	bcc.n	80034d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034da:	f007 f83b 	bl	800a554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034de:	f7fe ff19 	bl	8002314 <main>

080034e2 <LoopForever>:

LoopForever:
    b LoopForever
 80034e2:	e7fe      	b.n	80034e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80034e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034ec:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80034f0:	0800d168 	.word	0x0800d168
  ldr r2, =_sbss
 80034f4:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80034f8:	200008c0 	.word	0x200008c0

080034fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034fc:	e7fe      	b.n	80034fc <ADC1_IRQHandler>

080034fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003508:	2003      	movs	r0, #3
 800350a:	f000 f961 	bl	80037d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800350e:	2000      	movs	r0, #0
 8003510:	f000 f80e 	bl	8003530 <HAL_InitTick>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	71fb      	strb	r3, [r7, #7]
 800351e:	e001      	b.n	8003524 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003520:	f7ff fc78 	bl	8002e14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003524:	79fb      	ldrb	r3, [r7, #7]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800353c:	4b17      	ldr	r3, [pc, #92]	@ (800359c <HAL_InitTick+0x6c>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d023      	beq.n	800358c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003544:	4b16      	ldr	r3, [pc, #88]	@ (80035a0 <HAL_InitTick+0x70>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_InitTick+0x6c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003552:	fbb3 f3f1 	udiv	r3, r3, r1
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f96d 	bl	800383a <HAL_SYSTICK_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b0f      	cmp	r3, #15
 800356a:	d809      	bhi.n	8003580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800356c:	2200      	movs	r2, #0
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f000 f937 	bl	80037e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003578:	4a0a      	ldr	r2, [pc, #40]	@ (80035a4 <HAL_InitTick+0x74>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e007      	b.n	8003590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	e004      	b.n	8003590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e001      	b.n	8003590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000088 	.word	0x20000088
 80035a0:	20000080 	.word	0x20000080
 80035a4:	20000084 	.word	0x20000084

080035a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_IncTick+0x20>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_IncTick+0x24>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	@ (80035cc <HAL_IncTick+0x24>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000088 	.word	0x20000088
 80035cc:	20000770 	.word	0x20000770

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000770 	.word	0x20000770

080035e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff ffee 	bl	80035d0 <HAL_GetTick>
 80035f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d005      	beq.n	800360e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003602:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <HAL_Delay+0x44>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800360e:	bf00      	nop
 8003610:	f7ff ffde 	bl	80035d0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	429a      	cmp	r2, r3
 800361e:	d8f7      	bhi.n	8003610 <HAL_Delay+0x28>
  {
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000088 	.word	0x20000088

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	@ (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0a      	blt.n	80036fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	@ (800371c <__NVIC_SetPriority+0x4c>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	440b      	add	r3, r1
 80036f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f8:	e00a      	b.n	8003710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4908      	ldr	r1, [pc, #32]	@ (8003720 <__NVIC_SetPriority+0x50>)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3b04      	subs	r3, #4
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	440b      	add	r3, r1
 800370e:	761a      	strb	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000e100 	.word	0xe000e100
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	@ 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
         );
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	@ 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800379c:	d301      	bcc.n	80037a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379e:	2301      	movs	r3, #1
 80037a0:	e00f      	b.n	80037c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a2:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <SysTick_Config+0x40>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037aa:	210f      	movs	r1, #15
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	f7ff ff8e 	bl	80036d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <SysTick_Config+0x40>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ba:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <SysTick_Config+0x40>)
 80037bc:	2207      	movs	r2, #7
 80037be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	e000e010 	.word	0xe000e010

080037d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff29 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037f8:	f7ff ff3e 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80037fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff8e 	bl	8003724 <NVIC_EncodePriority>
 8003808:	4602      	mov	r2, r0
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff5d 	bl	80036d0 <__NVIC_SetPriority>
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff31 	bl	8003694 <__NVIC_EnableIRQ>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ffa2 	bl	800378c <SysTick_Config>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d008      	beq.n	800387c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2204      	movs	r2, #4
 800386e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e040      	b.n	80038fe <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020e 	bic.w	r2, r2, #14
 800388a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003896:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800389a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	f003 021c 	and.w	r2, r3, #28
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038ea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d005      	beq.n	800392e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e047      	b.n	80039be <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 020e 	bic.w	r2, r2, #14
 800393c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800395c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f003 021c 	and.w	r2, r3, #28
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f202 	lsl.w	r2, r1, r2
 8003970:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800397a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00c      	beq.n	800399e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003992:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800399c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
    }
  }
  return status;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039d6:	e166      	b.n	8003ca6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	4013      	ands	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8158 	beq.w	8003ca0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d005      	beq.n	8003a08 <HAL_GPIO_Init+0x40>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d130      	bne.n	8003a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	2203      	movs	r2, #3
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a3e:	2201      	movs	r2, #1
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f003 0201 	and.w	r2, r3, #1
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d017      	beq.n	8003aa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	2203      	movs	r2, #3
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d123      	bne.n	8003afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	08da      	lsrs	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3208      	adds	r2, #8
 8003aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	220f      	movs	r2, #15
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	08da      	lsrs	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3208      	adds	r2, #8
 8003af4:	6939      	ldr	r1, [r7, #16]
 8003af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	2203      	movs	r2, #3
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0203 	and.w	r2, r3, #3
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80b2 	beq.w	8003ca0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3c:	4b61      	ldr	r3, [pc, #388]	@ (8003cc4 <HAL_GPIO_Init+0x2fc>)
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b40:	4a60      	ldr	r2, [pc, #384]	@ (8003cc4 <HAL_GPIO_Init+0x2fc>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b48:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc4 <HAL_GPIO_Init+0x2fc>)
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b54:	4a5c      	ldr	r2, [pc, #368]	@ (8003cc8 <HAL_GPIO_Init+0x300>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b7e:	d02b      	beq.n	8003bd8 <HAL_GPIO_Init+0x210>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a52      	ldr	r2, [pc, #328]	@ (8003ccc <HAL_GPIO_Init+0x304>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d025      	beq.n	8003bd4 <HAL_GPIO_Init+0x20c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a51      	ldr	r2, [pc, #324]	@ (8003cd0 <HAL_GPIO_Init+0x308>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01f      	beq.n	8003bd0 <HAL_GPIO_Init+0x208>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a50      	ldr	r2, [pc, #320]	@ (8003cd4 <HAL_GPIO_Init+0x30c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d019      	beq.n	8003bcc <HAL_GPIO_Init+0x204>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a4f      	ldr	r2, [pc, #316]	@ (8003cd8 <HAL_GPIO_Init+0x310>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_GPIO_Init+0x200>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8003cdc <HAL_GPIO_Init+0x314>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_GPIO_Init+0x1fc>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a4d      	ldr	r2, [pc, #308]	@ (8003ce0 <HAL_GPIO_Init+0x318>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <HAL_GPIO_Init+0x1f8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ce4 <HAL_GPIO_Init+0x31c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_GPIO_Init+0x1f4>
 8003bb8:	2307      	movs	r3, #7
 8003bba:	e00e      	b.n	8003bda <HAL_GPIO_Init+0x212>
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	e00c      	b.n	8003bda <HAL_GPIO_Init+0x212>
 8003bc0:	2306      	movs	r3, #6
 8003bc2:	e00a      	b.n	8003bda <HAL_GPIO_Init+0x212>
 8003bc4:	2305      	movs	r3, #5
 8003bc6:	e008      	b.n	8003bda <HAL_GPIO_Init+0x212>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e006      	b.n	8003bda <HAL_GPIO_Init+0x212>
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e004      	b.n	8003bda <HAL_GPIO_Init+0x212>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e002      	b.n	8003bda <HAL_GPIO_Init+0x212>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_GPIO_Init+0x212>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	f002 0203 	and.w	r2, r2, #3
 8003be0:	0092      	lsls	r2, r2, #2
 8003be2:	4093      	lsls	r3, r2
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bea:	4937      	ldr	r1, [pc, #220]	@ (8003cc8 <HAL_GPIO_Init+0x300>)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce8 <HAL_GPIO_Init+0x320>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c1c:	4a32      	ldr	r2, [pc, #200]	@ (8003ce8 <HAL_GPIO_Init+0x320>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c22:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <HAL_GPIO_Init+0x320>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c46:	4a28      	ldr	r2, [pc, #160]	@ (8003ce8 <HAL_GPIO_Init+0x320>)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ce8 <HAL_GPIO_Init+0x320>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce8 <HAL_GPIO_Init+0x320>)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce8 <HAL_GPIO_Init+0x320>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c9a:	4a13      	ldr	r2, [pc, #76]	@ (8003ce8 <HAL_GPIO_Init+0x320>)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f47f ae91 	bne.w	80039d8 <HAL_GPIO_Init+0x10>
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	48000400 	.word	0x48000400
 8003cd0:	48000800 	.word	0x48000800
 8003cd4:	48000c00 	.word	0x48000c00
 8003cd8:	48001000 	.word	0x48001000
 8003cdc:	48001400 	.word	0x48001400
 8003ce0:	48001800 	.word	0x48001800
 8003ce4:	48001c00 	.word	0x48001c00
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cfc:	787b      	ldrb	r3, [r7, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d08:	e002      	b.n	8003d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d26:	4b08      	ldr	r3, [pc, #32]	@ (8003d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d32:	4a05      	ldr	r2, [pc, #20]	@ (8003d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fada 	bl	80022f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40010400 	.word	0x40010400

08003d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e08d      	b.n	8003e7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff f872 	bl	8002e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	@ 0x24
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	e006      	b.n	8003dd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003dd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d108      	bne.n	8003dee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	e007      	b.n	8003dfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	460b      	mov	r3, r1
 8003e92:	817b      	strh	r3, [r7, #10]
 8003e94:	4613      	mov	r3, r2
 8003e96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	f040 80fd 	bne.w	80040a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2C_Master_Transmit+0x30>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0f6      	b.n	80040a2 <HAL_I2C_Master_Transmit+0x21e>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ebc:	f7ff fb88 	bl	80035d0 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	2319      	movs	r3, #25
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fa0a 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0e1      	b.n	80040a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2221      	movs	r2, #33	@ 0x21
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2210      	movs	r2, #16
 8003eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	893a      	ldrh	r2, [r7, #8]
 8003efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2bff      	cmp	r3, #255	@ 0xff
 8003f0e:	d906      	bls.n	8003f1e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	22ff      	movs	r2, #255	@ 0xff
 8003f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003f16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e007      	b.n	8003f2e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003f28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f2c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d024      	beq.n	8003f80 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	8979      	ldrh	r1, [r7, #10]
 8003f72:	4b4e      	ldr	r3, [pc, #312]	@ (80040ac <HAL_I2C_Master_Transmit+0x228>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fbf1 	bl	8004760 <I2C_TransferConfig>
 8003f7e:	e066      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	8979      	ldrh	r1, [r7, #10]
 8003f88:	4b48      	ldr	r3, [pc, #288]	@ (80040ac <HAL_I2C_Master_Transmit+0x228>)
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fbe6 	bl	8004760 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f94:	e05b      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	6a39      	ldr	r1, [r7, #32]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f9f3 	bl	8004386 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e07b      	b.n	80040a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d034      	beq.n	800404e <HAL_I2C_Master_Transmit+0x1ca>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d130      	bne.n	800404e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2180      	movs	r1, #128	@ 0x80
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f976 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e04d      	b.n	80040a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	2bff      	cmp	r3, #255	@ 0xff
 800400e:	d90e      	bls.n	800402e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	22ff      	movs	r2, #255	@ 0xff
 8004014:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	b2da      	uxtb	r2, r3
 800401c:	8979      	ldrh	r1, [r7, #10]
 800401e:	2300      	movs	r3, #0
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fb9a 	bl	8004760 <I2C_TransferConfig>
 800402c:	e00f      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403c:	b2da      	uxtb	r2, r3
 800403e:	8979      	ldrh	r1, [r7, #10]
 8004040:	2300      	movs	r3, #0
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fb89 	bl	8004760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d19e      	bne.n	8003f96 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	6a39      	ldr	r1, [r7, #32]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f9d9 	bl	8004414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e01a      	b.n	80040a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2220      	movs	r2, #32
 8004072:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <HAL_I2C_Master_Transmit+0x22c>)
 8004080:	400b      	ands	r3, r1
 8004082:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	80002000 	.word	0x80002000
 80040b0:	fe00e800 	.word	0xfe00e800

080040b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	461a      	mov	r2, r3
 80040c0:	460b      	mov	r3, r1
 80040c2:	817b      	strh	r3, [r7, #10]
 80040c4:	4613      	mov	r3, r2
 80040c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	f040 80db 	bne.w	800428c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_I2C_Master_Receive+0x30>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e0d4      	b.n	800428e <HAL_I2C_Master_Receive+0x1da>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ec:	f7ff fa70 	bl	80035d0 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2319      	movs	r3, #25
 80040f8:	2201      	movs	r2, #1
 80040fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f8f2 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0bf      	b.n	800428e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2222      	movs	r2, #34	@ 0x22
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2210      	movs	r2, #16
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	893a      	ldrh	r2, [r7, #8]
 800412e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2bff      	cmp	r3, #255	@ 0xff
 800413e:	d90e      	bls.n	800415e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	22ff      	movs	r2, #255	@ 0xff
 8004144:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	b2da      	uxtb	r2, r3
 800414c:	8979      	ldrh	r1, [r7, #10]
 800414e:	4b52      	ldr	r3, [pc, #328]	@ (8004298 <HAL_I2C_Master_Receive+0x1e4>)
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fb02 	bl	8004760 <I2C_TransferConfig>
 800415c:	e06d      	b.n	800423a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416c:	b2da      	uxtb	r2, r3
 800416e:	8979      	ldrh	r1, [r7, #10]
 8004170:	4b49      	ldr	r3, [pc, #292]	@ (8004298 <HAL_I2C_Master_Receive+0x1e4>)
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 faf1 	bl	8004760 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800417e:	e05c      	b.n	800423a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	6a39      	ldr	r1, [r7, #32]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f989 	bl	800449c <I2C_WaitOnRXNEFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e07c      	b.n	800428e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d034      	beq.n	800423a <HAL_I2C_Master_Receive+0x186>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d130      	bne.n	800423a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	@ 0x80
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f880 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e04d      	b.n	800428e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2bff      	cmp	r3, #255	@ 0xff
 80041fa:	d90e      	bls.n	800421a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	22ff      	movs	r2, #255	@ 0xff
 8004200:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004206:	b2da      	uxtb	r2, r3
 8004208:	8979      	ldrh	r1, [r7, #10]
 800420a:	2300      	movs	r3, #0
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 faa4 	bl	8004760 <I2C_TransferConfig>
 8004218:	e00f      	b.n	800423a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	b2da      	uxtb	r2, r3
 800422a:	8979      	ldrh	r1, [r7, #10]
 800422c:	2300      	movs	r3, #0
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fa93 	bl	8004760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d19d      	bne.n	8004180 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	6a39      	ldr	r1, [r7, #32]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f8e3 	bl	8004414 <I2C_WaitOnSTOPFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e01a      	b.n	800428e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2220      	movs	r2, #32
 800425e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <HAL_I2C_Master_Receive+0x1e8>)
 800426c:	400b      	ands	r3, r1
 800426e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	80002400 	.word	0x80002400
 800429c:	fe00e800 	.word	0xfe00e800

080042a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d103      	bne.n	80042be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d007      	beq.n	80042dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	619a      	str	r2, [r3, #24]
  }
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f8:	e031      	b.n	800435e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d02d      	beq.n	800435e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7ff f965 	bl	80035d0 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d122      	bne.n	800435e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	429a      	cmp	r2, r3
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	429a      	cmp	r2, r3
 8004334:	d113      	bne.n	800435e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e00f      	b.n	800437e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	bf0c      	ite	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	2300      	movne	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	429a      	cmp	r2, r3
 800437a:	d0be      	beq.n	80042fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004392:	e033      	b.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f901 	bl	80045a0 <I2C_IsErrorOccurred>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e031      	b.n	800440c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d025      	beq.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7ff f90e 	bl	80035d0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11a      	bne.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d013      	beq.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e007      	b.n	800440c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d1c4      	bne.n	8004394 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004420:	e02f      	b.n	8004482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f8ba 	bl	80045a0 <I2C_IsErrorOccurred>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e02d      	b.n	8004492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7ff f8cb 	bl	80035d0 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d11a      	bne.n	8004482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d013      	beq.n	8004482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e007      	b.n	8004492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b20      	cmp	r3, #32
 800448e:	d1c8      	bne.n	8004422 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a8:	e06b      	b.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f876 	bl	80045a0 <I2C_IsErrorOccurred>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e069      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d138      	bne.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d105      	bne.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e055      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d107      	bne.n	8004504 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2210      	movs	r2, #16
 80044fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2204      	movs	r2, #4
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44
 8004502:	e002      	b.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2220      	movs	r2, #32
 8004510:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b1f      	ldr	r3, [pc, #124]	@ (800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800451e:	400b      	ands	r3, r1
 8004520:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e029      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453e:	f7ff f847 	bl	80035d0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d302      	bcc.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d116      	bne.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d00f      	beq.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e007      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b04      	cmp	r3, #4
 800458e:	d18c      	bne.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	fe00e800 	.word	0xfe00e800

080045a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d068      	beq.n	800469e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2210      	movs	r2, #16
 80045d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045d4:	e049      	b.n	800466a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d045      	beq.n	800466a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fe fff7 	bl	80035d0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <I2C_IsErrorOccurred+0x54>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d13a      	bne.n	800466a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004606:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004616:	d121      	bne.n	800465c <I2C_IsErrorOccurred+0xbc>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800461e:	d01d      	beq.n	800465c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	2b20      	cmp	r3, #32
 8004624:	d01a      	beq.n	800465c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004634:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004636:	f7fe ffcb 	bl	80035d0 <HAL_GetTick>
 800463a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800463c:	e00e      	b.n	800465c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800463e:	f7fe ffc7 	bl	80035d0 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b19      	cmp	r3, #25
 800464a:	d907      	bls.n	800465c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f043 0320 	orr.w	r3, r3, #32
 8004652:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800465a:	e006      	b.n	800466a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d1e9      	bne.n	800463e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b20      	cmp	r3, #32
 8004676:	d003      	beq.n	8004680 <I2C_IsErrorOccurred+0xe0>
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0aa      	beq.n	80045d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2220      	movs	r2, #32
 800468e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800470c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01c      	beq.n	800474e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff fdc3 	bl	80042a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <I2C_IsErrorOccurred+0x1bc>)
 8004726:	400b      	ands	r3, r1
 8004728:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800474e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004752:	4618      	mov	r0, r3
 8004754:	3728      	adds	r7, #40	@ 0x28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	fe00e800 	.word	0xfe00e800

08004760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	817b      	strh	r3, [r7, #10]
 800476e:	4613      	mov	r3, r2
 8004770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004778:	7a7b      	ldrb	r3, [r7, #9]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004780:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	4313      	orrs	r3, r2
 800478a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800478e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	0d5b      	lsrs	r3, r3, #21
 800479a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800479e:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <I2C_TransferConfig+0x60>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	43db      	mvns	r3, r3
 80047a4:	ea02 0103 	and.w	r1, r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	03ff63ff 	.word	0x03ff63ff

080047c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d138      	bne.n	800484c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e032      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	@ 0x24
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b20      	cmp	r3, #32
 800486e:	d139      	bne.n	80048e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800487a:	2302      	movs	r3, #2
 800487c:	e033      	b.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2224      	movs	r2, #36	@ 0x24
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004930 <HAL_PWREx_GetVoltageRange+0x3c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004904:	d102      	bne.n	800490c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800490a:	e00b      	b.n	8004924 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800490c:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <HAL_PWREx_GetVoltageRange+0x3c>)
 800490e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491a:	d102      	bne.n	8004922 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800491c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004920:	e000      	b.n	8004924 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004922:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40007000 	.word	0x40007000

08004934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d141      	bne.n	80049c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004942:	4b4b      	ldr	r3, [pc, #300]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494e:	d131      	bne.n	80049b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004950:	4b47      	ldr	r3, [pc, #284]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004956:	4a46      	ldr	r2, [pc, #280]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800495c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004960:	4b43      	ldr	r3, [pc, #268]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004968:	4a41      	ldr	r2, [pc, #260]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800496e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004970:	4b40      	ldr	r3, [pc, #256]	@ (8004a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2232      	movs	r2, #50	@ 0x32
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	0c9b      	lsrs	r3, r3, #18
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004986:	e002      	b.n	800498e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b01      	subs	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800498e:	4b38      	ldr	r3, [pc, #224]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499a:	d102      	bne.n	80049a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f2      	bne.n	8004988 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049a2:	4b33      	ldr	r3, [pc, #204]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ae:	d158      	bne.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e057      	b.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049c4:	e04d      	b.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049cc:	d141      	bne.n	8004a52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ce:	4b28      	ldr	r3, [pc, #160]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049da:	d131      	bne.n	8004a40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049dc:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e2:	4a23      	ldr	r2, [pc, #140]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ec:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80049fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2232      	movs	r2, #50	@ 0x32
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	4a1c      	ldr	r2, [pc, #112]	@ (8004a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	0c9b      	lsrs	r3, r3, #18
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a12:	e002      	b.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1a:	4b15      	ldr	r3, [pc, #84]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d102      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f2      	bne.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a2e:	4b10      	ldr	r3, [pc, #64]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d112      	bne.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e011      	b.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a46:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a50:	e007      	b.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a52:	4b07      	ldr	r3, [pc, #28]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a5a:	4a05      	ldr	r2, [pc, #20]	@ (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a60:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40007000 	.word	0x40007000
 8004a74:	20000080 	.word	0x20000080
 8004a78:	431bde83 	.word	0x431bde83

08004a7c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a8a:	6053      	str	r3, [r2, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40007000 	.word	0x40007000

08004a9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f000 bc08 	b.w	80052c0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab0:	4b96      	ldr	r3, [pc, #600]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aba:	4b94      	ldr	r3, [pc, #592]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80e4 	beq.w	8004c9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x4c>
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	f040 808b 	bne.w	8004bf6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	f040 8087 	bne.w	8004bf6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ae8:	4b88      	ldr	r3, [pc, #544]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_OscConfig+0x64>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e3df      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	4b81      	ldr	r3, [pc, #516]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d004      	beq.n	8004b1a <HAL_RCC_OscConfig+0x7e>
 8004b10:	4b7e      	ldr	r3, [pc, #504]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b18:	e005      	b.n	8004b26 <HAL_RCC_OscConfig+0x8a>
 8004b1a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d223      	bcs.n	8004b72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fdcc 	bl	80056cc <RCC_SetFlashLatencyFromMSIRange>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e3c0      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b3e:	4b73      	ldr	r3, [pc, #460]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a72      	ldr	r2, [pc, #456]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b44:	f043 0308 	orr.w	r3, r3, #8
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b70      	ldr	r3, [pc, #448]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	496d      	ldr	r1, [pc, #436]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	4968      	ldr	r1, [pc, #416]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
 8004b70:	e025      	b.n	8004bbe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b72:	4b66      	ldr	r3, [pc, #408]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a65      	ldr	r2, [pc, #404]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b78:	f043 0308 	orr.w	r3, r3, #8
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b63      	ldr	r3, [pc, #396]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	4960      	ldr	r1, [pc, #384]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b90:	4b5e      	ldr	r3, [pc, #376]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	495b      	ldr	r1, [pc, #364]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fd8c 	bl	80056cc <RCC_SetFlashLatencyFromMSIRange>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e380      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bbe:	f000 fcc1 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	4b51      	ldr	r3, [pc, #324]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	4950      	ldr	r1, [pc, #320]	@ (8004d10 <HAL_RCC_OscConfig+0x274>)
 8004bd0:	5ccb      	ldrb	r3, [r1, r3]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bda:	4a4e      	ldr	r2, [pc, #312]	@ (8004d14 <HAL_RCC_OscConfig+0x278>)
 8004bdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bde:	4b4e      	ldr	r3, [pc, #312]	@ (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe fca4 	bl	8003530 <HAL_InitTick>
 8004be8:	4603      	mov	r3, r0
 8004bea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d052      	beq.n	8004c98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	e364      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d032      	beq.n	8004c64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bfe:	4b43      	ldr	r3, [pc, #268]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a42      	ldr	r2, [pc, #264]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c0a:	f7fe fce1 	bl	80035d0 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c12:	f7fe fcdd 	bl	80035d0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e34d      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c24:	4b39      	ldr	r3, [pc, #228]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c30:	4b36      	ldr	r3, [pc, #216]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a35      	ldr	r2, [pc, #212]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c36:	f043 0308 	orr.w	r3, r3, #8
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	4b33      	ldr	r3, [pc, #204]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	4930      	ldr	r1, [pc, #192]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	492b      	ldr	r1, [pc, #172]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
 8004c62:	e01a      	b.n	8004c9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c64:	4b29      	ldr	r3, [pc, #164]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a28      	ldr	r2, [pc, #160]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c70:	f7fe fcae 	bl	80035d0 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c78:	f7fe fcaa 	bl	80035d0 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e31a      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c8a:	4b20      	ldr	r3, [pc, #128]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0x1dc>
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d073      	beq.n	8004d8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x21c>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d063      	beq.n	8004d8c <HAL_RCC_OscConfig+0x2f0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d15f      	bne.n	8004d8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e2f7      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd8:	d106      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
 8004cda:	4b0c      	ldr	r3, [pc, #48]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a0b      	ldr	r2, [pc, #44]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e025      	b.n	8004d34 <HAL_RCC_OscConfig+0x298>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf0:	d114      	bne.n	8004d1c <HAL_RCC_OscConfig+0x280>
 8004cf2:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a05      	ldr	r2, [pc, #20]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b03      	ldr	r3, [pc, #12]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a02      	ldr	r2, [pc, #8]	@ (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e013      	b.n	8004d34 <HAL_RCC_OscConfig+0x298>
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	0800cd74 	.word	0x0800cd74
 8004d14:	20000080 	.word	0x20000080
 8004d18:	20000084 	.word	0x20000084
 8004d1c:	4ba0      	ldr	r3, [pc, #640]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a9f      	ldr	r2, [pc, #636]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b9d      	ldr	r3, [pc, #628]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a9c      	ldr	r2, [pc, #624]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fe fc48 	bl	80035d0 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fe fc44 	bl	80035d0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	@ 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e2b4      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d56:	4b92      	ldr	r3, [pc, #584]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x2a8>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe fc34 	bl	80035d0 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fe fc30 	bl	80035d0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	@ 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e2a0      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d7e:	4b88      	ldr	r3, [pc, #544]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x2d0>
 8004d8a:	e000      	b.n	8004d8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d060      	beq.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_OscConfig+0x310>
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d119      	bne.n	8004dda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d116      	bne.n	8004dda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dac:	4b7c      	ldr	r3, [pc, #496]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x328>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e27d      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc4:	4b76      	ldr	r3, [pc, #472]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	4973      	ldr	r1, [pc, #460]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd8:	e040      	b.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d023      	beq.n	8004e2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de2:	4b6f      	ldr	r3, [pc, #444]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fe fbef 	bl	80035d0 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df6:	f7fe fbeb 	bl	80035d0 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e25b      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e08:	4b65      	ldr	r3, [pc, #404]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b62      	ldr	r3, [pc, #392]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	495f      	ldr	r1, [pc, #380]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
 8004e28:	e018      	b.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fe fbcb 	bl	80035d0 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7fe fbc7 	bl	80035d0 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e237      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e50:	4b53      	ldr	r3, [pc, #332]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f0      	bne.n	8004e3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d03c      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01c      	beq.n	8004eaa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e70:	4b4b      	ldr	r3, [pc, #300]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e76:	4a4a      	ldr	r2, [pc, #296]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e80:	f7fe fba6 	bl	80035d0 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fe fba2 	bl	80035d0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e212      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e9a:	4b41      	ldr	r3, [pc, #260]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ef      	beq.n	8004e88 <HAL_RCC_OscConfig+0x3ec>
 8004ea8:	e01b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eba:	f7fe fb89 	bl	80035d0 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec2:	f7fe fb85 	bl	80035d0 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e1f5      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ed4:	4b32      	ldr	r3, [pc, #200]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ef      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80a6 	beq.w	800503c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10d      	bne.n	8004f1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f00:	4b27      	ldr	r3, [pc, #156]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f04:	4a26      	ldr	r2, [pc, #152]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f0c:	4b24      	ldr	r3, [pc, #144]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1c:	4b21      	ldr	r3, [pc, #132]	@ (8004fa4 <HAL_RCC_OscConfig+0x508>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d118      	bne.n	8004f5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f28:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa4 <HAL_RCC_OscConfig+0x508>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <HAL_RCC_OscConfig+0x508>)
 8004f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f34:	f7fe fb4c 	bl	80035d0 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3c:	f7fe fb48 	bl	80035d0 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1b8      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4e:	4b15      	ldr	r3, [pc, #84]	@ (8004fa4 <HAL_RCC_OscConfig+0x508>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d108      	bne.n	8004f74 <HAL_RCC_OscConfig+0x4d8>
 8004f62:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f68:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f72:	e029      	b.n	8004fc8 <HAL_RCC_OscConfig+0x52c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	d115      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x50c>
 8004f7c:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f82:	4a07      	ldr	r2, [pc, #28]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f8c:	4b04      	ldr	r3, [pc, #16]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f92:	4a03      	ldr	r2, [pc, #12]	@ (8004fa0 <HAL_RCC_OscConfig+0x504>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f9c:	e014      	b.n	8004fc8 <HAL_RCC_OscConfig+0x52c>
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	4b9d      	ldr	r3, [pc, #628]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fae:	4a9c      	ldr	r2, [pc, #624]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fb8:	4b99      	ldr	r3, [pc, #612]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbe:	4a98      	ldr	r2, [pc, #608]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d016      	beq.n	8004ffe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fe fafe 	bl	80035d0 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fe fafa 	bl	80035d0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e168      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fee:	4b8c      	ldr	r3, [pc, #560]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ed      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x53c>
 8004ffc:	e015      	b.n	800502a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffe:	f7fe fae7 	bl	80035d0 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005004:	e00a      	b.n	800501c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fe fae3 	bl	80035d0 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e151      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800501c:	4b80      	ldr	r3, [pc, #512]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1ed      	bne.n	8005006 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800502a:	7ffb      	ldrb	r3, [r7, #31]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d105      	bne.n	800503c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005030:	4b7b      	ldr	r3, [pc, #492]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8005032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005034:	4a7a      	ldr	r2, [pc, #488]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8005036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d03c      	beq.n	80050c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01c      	beq.n	800508a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005050:	4b73      	ldr	r3, [pc, #460]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8005052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005056:	4a72      	ldr	r2, [pc, #456]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fe fab6 	bl	80035d0 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005068:	f7fe fab2 	bl	80035d0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e122      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800507a:	4b69      	ldr	r3, [pc, #420]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 800507c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ef      	beq.n	8005068 <HAL_RCC_OscConfig+0x5cc>
 8005088:	e01b      	b.n	80050c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800508a:	4b65      	ldr	r3, [pc, #404]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 800508c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005090:	4a63      	ldr	r2, [pc, #396]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509a:	f7fe fa99 	bl	80035d0 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a2:	f7fe fa95 	bl	80035d0 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e105      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 80050b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1ef      	bne.n	80050a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80f9 	beq.w	80052be <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	f040 80cf 	bne.w	8005274 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050d6:	4b52      	ldr	r3, [pc, #328]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f003 0203 	and.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d12c      	bne.n	8005144 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f4:	3b01      	subs	r3, #1
 80050f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d123      	bne.n	8005144 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005106:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d11b      	bne.n	8005144 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005116:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d113      	bne.n	8005144 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	3b01      	subs	r3, #1
 800512a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d109      	bne.n	8005144 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	3b01      	subs	r3, #1
 800513e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d071      	beq.n	8005228 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b0c      	cmp	r3, #12
 8005148:	d068      	beq.n	800521c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800514a:	4b35      	ldr	r3, [pc, #212]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005156:	4b32      	ldr	r3, [pc, #200]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e0ac      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005166:	4b2e      	ldr	r3, [pc, #184]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2d      	ldr	r2, [pc, #180]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 800516c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005170:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005172:	f7fe fa2d 	bl	80035d0 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517a:	f7fe fa29 	bl	80035d0 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e099      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518c:	4b24      	ldr	r3, [pc, #144]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005198:	4b21      	ldr	r3, [pc, #132]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	4b21      	ldr	r3, [pc, #132]	@ (8005224 <HAL_RCC_OscConfig+0x788>)
 800519e:	4013      	ands	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051a8:	3a01      	subs	r2, #1
 80051aa:	0112      	lsls	r2, r2, #4
 80051ac:	4311      	orrs	r1, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051b2:	0212      	lsls	r2, r2, #8
 80051b4:	4311      	orrs	r1, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051ba:	0852      	lsrs	r2, r2, #1
 80051bc:	3a01      	subs	r2, #1
 80051be:	0552      	lsls	r2, r2, #21
 80051c0:	4311      	orrs	r1, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80051c6:	0852      	lsrs	r2, r2, #1
 80051c8:	3a01      	subs	r2, #1
 80051ca:	0652      	lsls	r2, r2, #25
 80051cc:	4311      	orrs	r1, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051d2:	06d2      	lsls	r2, r2, #27
 80051d4:	430a      	orrs	r2, r1
 80051d6:	4912      	ldr	r1, [pc, #72]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051dc:	4b10      	ldr	r3, [pc, #64]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 80051e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 80051ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051f4:	f7fe f9ec 	bl	80035d0 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fe f9e8 	bl	80035d0 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e058      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520e:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <HAL_RCC_OscConfig+0x784>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800521a:	e050      	b.n	80052be <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e04f      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
 8005220:	40021000 	.word	0x40021000
 8005224:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005228:	4b27      	ldr	r3, [pc, #156]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d144      	bne.n	80052be <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005234:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a23      	ldr	r2, [pc, #140]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 800523a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800523e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005240:	4b21      	ldr	r3, [pc, #132]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a20      	ldr	r2, [pc, #128]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 8005246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800524a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800524c:	f7fe f9c0 	bl	80035d0 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005254:	f7fe f9bc 	bl	80035d0 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e02c      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005266:	4b18      	ldr	r3, [pc, #96]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x7b8>
 8005272:	e024      	b.n	80052be <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d01f      	beq.n	80052ba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527a:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a12      	ldr	r2, [pc, #72]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 8005280:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fe f9a3 	bl	80035d0 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528e:	f7fe f99f 	bl	80035d0 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e00f      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a0:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f0      	bne.n	800528e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052ac:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	4905      	ldr	r1, [pc, #20]	@ (80052c8 <HAL_RCC_OscConfig+0x82c>)
 80052b2:	4b06      	ldr	r3, [pc, #24]	@ (80052cc <HAL_RCC_OscConfig+0x830>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	60cb      	str	r3, [r1, #12]
 80052b8:	e001      	b.n	80052be <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40021000 	.word	0x40021000
 80052cc:	feeefffc 	.word	0xfeeefffc

080052d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e11d      	b.n	8005524 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052e8:	4b90      	ldr	r3, [pc, #576]	@ (800552c <HAL_RCC_ClockConfig+0x25c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d910      	bls.n	8005318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f6:	4b8d      	ldr	r3, [pc, #564]	@ (800552c <HAL_RCC_ClockConfig+0x25c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 020f 	bic.w	r2, r3, #15
 80052fe:	498b      	ldr	r1, [pc, #556]	@ (800552c <HAL_RCC_ClockConfig+0x25c>)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	4313      	orrs	r3, r2
 8005304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b89      	ldr	r3, [pc, #548]	@ (800552c <HAL_RCC_ClockConfig+0x25c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e105      	b.n	8005524 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d010      	beq.n	8005346 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	4b81      	ldr	r3, [pc, #516]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005330:	429a      	cmp	r2, r3
 8005332:	d908      	bls.n	8005346 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005334:	4b7e      	ldr	r3, [pc, #504]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	497b      	ldr	r1, [pc, #492]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d079      	beq.n	8005446 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d11e      	bne.n	8005398 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535a:	4b75      	ldr	r3, [pc, #468]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e0dc      	b.n	8005524 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800536a:	f000 fa09 	bl	8005780 <RCC_GetSysClockFreqFromPLLSource>
 800536e:	4603      	mov	r3, r0
 8005370:	4a70      	ldr	r2, [pc, #448]	@ (8005534 <HAL_RCC_ClockConfig+0x264>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d946      	bls.n	8005404 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005376:	4b6e      	ldr	r3, [pc, #440]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d140      	bne.n	8005404 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005382:	4b6b      	ldr	r3, [pc, #428]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800538a:	4a69      	ldr	r2, [pc, #420]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 800538c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005392:	2380      	movs	r3, #128	@ 0x80
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e035      	b.n	8005404 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d107      	bne.n	80053b0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053a0:	4b63      	ldr	r3, [pc, #396]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d115      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0b9      	b.n	8005524 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d107      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053b8:	4b5d      	ldr	r3, [pc, #372]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0ad      	b.n	8005524 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053c8:	4b59      	ldr	r3, [pc, #356]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e0a5      	b.n	8005524 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80053d8:	f000 f8b4 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80053dc:	4603      	mov	r3, r0
 80053de:	4a55      	ldr	r2, [pc, #340]	@ (8005534 <HAL_RCC_ClockConfig+0x264>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d90f      	bls.n	8005404 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80053e4:	4b52      	ldr	r3, [pc, #328]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053f0:	4b4f      	ldr	r3, [pc, #316]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053f8:	4a4d      	ldr	r2, [pc, #308]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80053fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005400:	2380      	movs	r3, #128	@ 0x80
 8005402:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005404:	4b4a      	ldr	r3, [pc, #296]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f023 0203 	bic.w	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	4947      	ldr	r1, [pc, #284]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005416:	f7fe f8db 	bl	80035d0 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541c:	e00a      	b.n	8005434 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800541e:	f7fe f8d7 	bl	80035d0 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e077      	b.n	8005524 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005434:	4b3e      	ldr	r3, [pc, #248]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 020c 	and.w	r2, r3, #12
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	429a      	cmp	r2, r3
 8005444:	d1eb      	bne.n	800541e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b80      	cmp	r3, #128	@ 0x80
 800544a:	d105      	bne.n	8005458 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800544c:	4b38      	ldr	r3, [pc, #224]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4a37      	ldr	r2, [pc, #220]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005456:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	4b31      	ldr	r3, [pc, #196]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005470:	429a      	cmp	r2, r3
 8005472:	d208      	bcs.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005474:	4b2e      	ldr	r3, [pc, #184]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	492b      	ldr	r1, [pc, #172]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005486:	4b29      	ldr	r3, [pc, #164]	@ (800552c <HAL_RCC_ClockConfig+0x25c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d210      	bcs.n	80054b6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005494:	4b25      	ldr	r3, [pc, #148]	@ (800552c <HAL_RCC_ClockConfig+0x25c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f023 020f 	bic.w	r2, r3, #15
 800549c:	4923      	ldr	r1, [pc, #140]	@ (800552c <HAL_RCC_ClockConfig+0x25c>)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a4:	4b21      	ldr	r3, [pc, #132]	@ (800552c <HAL_RCC_ClockConfig+0x25c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d001      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e036      	b.n	8005524 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	4918      	ldr	r1, [pc, #96]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e0:	4b13      	ldr	r3, [pc, #76]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4910      	ldr	r1, [pc, #64]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054f4:	f000 f826 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80054f8:	4602      	mov	r2, r0
 80054fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <HAL_RCC_ClockConfig+0x260>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	091b      	lsrs	r3, r3, #4
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	490c      	ldr	r1, [pc, #48]	@ (8005538 <HAL_RCC_ClockConfig+0x268>)
 8005506:	5ccb      	ldrb	r3, [r1, r3]
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
 8005510:	4a0a      	ldr	r2, [pc, #40]	@ (800553c <HAL_RCC_ClockConfig+0x26c>)
 8005512:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <HAL_RCC_ClockConfig+0x270>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe f809 	bl	8003530 <HAL_InitTick>
 800551e:	4603      	mov	r3, r0
 8005520:	73fb      	strb	r3, [r7, #15]

  return status;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40022000 	.word	0x40022000
 8005530:	40021000 	.word	0x40021000
 8005534:	04c4b400 	.word	0x04c4b400
 8005538:	0800cd74 	.word	0x0800cd74
 800553c:	20000080 	.word	0x20000080
 8005540:	20000084 	.word	0x20000084

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	@ 0x24
 8005548:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005552:	4b3e      	ldr	r3, [pc, #248]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800555c:	4b3b      	ldr	r3, [pc, #236]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x34>
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d121      	bne.n	80055b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d11e      	bne.n	80055b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005578:	4b34      	ldr	r3, [pc, #208]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d107      	bne.n	8005594 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005584:	4b31      	ldr	r3, [pc, #196]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e005      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005594:	4b2d      	ldr	r3, [pc, #180]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10d      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055b4:	e00a      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d102      	bne.n	80055c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055bc:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x110>)
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e004      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055c8:	4b23      	ldr	r3, [pc, #140]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x114>)
 80055ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	d134      	bne.n	800563c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055d2:	4b1e      	ldr	r3, [pc, #120]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d003      	beq.n	80055ea <HAL_RCC_GetSysClockFreq+0xa6>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d003      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0xac>
 80055e8:	e005      	b.n	80055f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ec:	617b      	str	r3, [r7, #20]
      break;
 80055ee:	e005      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x114>)
 80055f2:	617b      	str	r3, [r7, #20]
      break;
 80055f4:	e002      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	617b      	str	r3, [r7, #20]
      break;
 80055fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055fc:	4b13      	ldr	r3, [pc, #76]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	3301      	adds	r3, #1
 8005608:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800560a:	4b10      	ldr	r3, [pc, #64]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	fb03 f202 	mul.w	r2, r3, r2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005622:	4b0a      	ldr	r3, [pc, #40]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	0e5b      	lsrs	r3, r3, #25
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	3301      	adds	r3, #1
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800563c:	69bb      	ldr	r3, [r7, #24]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3724      	adds	r7, #36	@ 0x24
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	0800cd8c 	.word	0x0800cd8c
 8005654:	00f42400 	.word	0x00f42400
 8005658:	007a1200 	.word	0x007a1200

0800565c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005660:	4b03      	ldr	r3, [pc, #12]	@ (8005670 <HAL_RCC_GetHCLKFreq+0x14>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000080 	.word	0x20000080

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005678:	f7ff fff0 	bl	800565c <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4904      	ldr	r1, [pc, #16]	@ (800569c <HAL_RCC_GetPCLK1Freq+0x28>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40021000 	.word	0x40021000
 800569c:	0800cd84 	.word	0x0800cd84

080056a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056a4:	f7ff ffda 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	0adb      	lsrs	r3, r3, #11
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4904      	ldr	r1, [pc, #16]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000
 80056c8:	0800cd84 	.word	0x0800cd84

080056cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056d8:	4b27      	ldr	r3, [pc, #156]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056e4:	f7ff f906 	bl	80048f4 <HAL_PWREx_GetVoltageRange>
 80056e8:	6178      	str	r0, [r7, #20]
 80056ea:	e014      	b.n	8005716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ec:	4b22      	ldr	r3, [pc, #136]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f0:	4a21      	ldr	r2, [pc, #132]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80056f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005704:	f7ff f8f6 	bl	80048f4 <HAL_PWREx_GetVoltageRange>
 8005708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800570a:	4b1b      	ldr	r3, [pc, #108]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	4a1a      	ldr	r2, [pc, #104]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005714:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571c:	d10b      	bne.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b80      	cmp	r3, #128	@ 0x80
 8005722:	d913      	bls.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2ba0      	cmp	r3, #160	@ 0xa0
 8005728:	d902      	bls.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800572a:	2302      	movs	r3, #2
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	e00d      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005730:	2301      	movs	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e00a      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b7f      	cmp	r3, #127	@ 0x7f
 800573a:	d902      	bls.n	8005742 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800573c:	2302      	movs	r3, #2
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e004      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b70      	cmp	r3, #112	@ 0x70
 8005746:	d101      	bne.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005748:	2301      	movs	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800574c:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f023 020f 	bic.w	r2, r3, #15
 8005754:	4909      	ldr	r1, [pc, #36]	@ (800577c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800575c:	4b07      	ldr	r3, [pc, #28]	@ (800577c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d001      	beq.n	800576e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000
 800577c:	40022000 	.word	0x40022000

08005780 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005786:	4b2d      	ldr	r3, [pc, #180]	@ (800583c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b03      	cmp	r3, #3
 8005794:	d00b      	beq.n	80057ae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d825      	bhi.n	80057e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d008      	beq.n	80057b4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d11f      	bne.n	80057e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80057a8:	4b25      	ldr	r3, [pc, #148]	@ (8005840 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80057aa:	613b      	str	r3, [r7, #16]
    break;
 80057ac:	e01f      	b.n	80057ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80057ae:	4b25      	ldr	r3, [pc, #148]	@ (8005844 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80057b0:	613b      	str	r3, [r7, #16]
    break;
 80057b2:	e01c      	b.n	80057ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057b4:	4b21      	ldr	r3, [pc, #132]	@ (800583c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d107      	bne.n	80057d0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057c0:	4b1e      	ldr	r3, [pc, #120]	@ (800583c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80057c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e005      	b.n	80057dc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057d0:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80057dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005848 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e4:	613b      	str	r3, [r7, #16]
    break;
 80057e6:	e002      	b.n	80057ee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]
    break;
 80057ec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057ee:	4b13      	ldr	r3, [pc, #76]	@ (800583c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	3301      	adds	r3, #1
 80057fa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057fc:	4b0f      	ldr	r3, [pc, #60]	@ (800583c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	0a1b      	lsrs	r3, r3, #8
 8005802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	fb03 f202 	mul.w	r2, r3, r2
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005814:	4b09      	ldr	r3, [pc, #36]	@ (800583c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	0e5b      	lsrs	r3, r3, #25
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	3301      	adds	r3, #1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800582e:	683b      	ldr	r3, [r7, #0]
}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	40021000 	.word	0x40021000
 8005840:	00f42400 	.word	0x00f42400
 8005844:	007a1200 	.word	0x007a1200
 8005848:	0800cd8c 	.word	0x0800cd8c

0800584c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005854:	2300      	movs	r3, #0
 8005856:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005858:	2300      	movs	r3, #0
 800585a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005864:	2b00      	cmp	r3, #0
 8005866:	d040      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800586c:	2b80      	cmp	r3, #128	@ 0x80
 800586e:	d02a      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005870:	2b80      	cmp	r3, #128	@ 0x80
 8005872:	d825      	bhi.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005874:	2b60      	cmp	r3, #96	@ 0x60
 8005876:	d026      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005878:	2b60      	cmp	r3, #96	@ 0x60
 800587a:	d821      	bhi.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800587c:	2b40      	cmp	r3, #64	@ 0x40
 800587e:	d006      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005880:	2b40      	cmp	r3, #64	@ 0x40
 8005882:	d81d      	bhi.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d010      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800588c:	e018      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800588e:	4b89      	ldr	r3, [pc, #548]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4a88      	ldr	r2, [pc, #544]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005898:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800589a:	e015      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fb02 	bl	8005eac <RCCEx_PLLSAI1_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058ac:	e00c      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3320      	adds	r3, #32
 80058b2:	2100      	movs	r1, #0
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fbed 	bl	8006094 <RCCEx_PLLSAI2_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058be:	e003      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	74fb      	strb	r3, [r7, #19]
      break;
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80058c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058ce:	4b79      	ldr	r3, [pc, #484]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058dc:	4975      	ldr	r1, [pc, #468]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80058e4:	e001      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	7cfb      	ldrb	r3, [r7, #19]
 80058e8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d047      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fe:	d030      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005904:	d82a      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800590a:	d02a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800590c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005910:	d824      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005916:	d008      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800591c:	d81e      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005926:	d010      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005928:	e018      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800592a:	4b62      	ldr	r3, [pc, #392]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	4a61      	ldr	r2, [pc, #388]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005934:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005936:	e015      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fab4 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005948:	e00c      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3320      	adds	r3, #32
 800594e:	2100      	movs	r1, #0
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fb9f 	bl	8006094 <RCCEx_PLLSAI2_Config>
 8005956:	4603      	mov	r3, r0
 8005958:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800595a:	e003      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	74fb      	strb	r3, [r7, #19]
      break;
 8005960:	e000      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005964:	7cfb      	ldrb	r3, [r7, #19]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10b      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800596a:	4b52      	ldr	r3, [pc, #328]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800596c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005970:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005978:	494e      	ldr	r1, [pc, #312]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005980:	e001      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 809f 	beq.w	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005994:	2300      	movs	r3, #0
 8005996:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005998:	4b46      	ldr	r3, [pc, #280]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800599a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80059a8:	2300      	movs	r3, #0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ae:	4b41      	ldr	r3, [pc, #260]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b2:	4a40      	ldr	r2, [pc, #256]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ba:	4b3e      	ldr	r3, [pc, #248]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	60bb      	str	r3, [r7, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059c6:	2301      	movs	r3, #1
 80059c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059ca:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a3a      	ldr	r2, [pc, #232]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059d6:	f7fd fdfb 	bl	80035d0 <HAL_GetTick>
 80059da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059dc:	e009      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059de:	f7fd fdf7 	bl	80035d0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d902      	bls.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	74fb      	strb	r3, [r7, #19]
        break;
 80059f0:	e005      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059f2:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0ef      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80059fe:	7cfb      	ldrb	r3, [r7, #19]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d15b      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a04:	4b2b      	ldr	r3, [pc, #172]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a0e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01f      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d019      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a22:	4b24      	ldr	r3, [pc, #144]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a2e:	4b21      	ldr	r3, [pc, #132]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a34:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a44:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a4e:	4a19      	ldr	r2, [pc, #100]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d016      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fd fdb6 	bl	80035d0 <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a66:	e00b      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a68:	f7fd fdb2 	bl	80035d0 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d902      	bls.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	74fb      	strb	r3, [r7, #19]
            break;
 8005a7e:	e006      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a80:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0ec      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005a8e:	7cfb      	ldrb	r3, [r7, #19]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10c      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a94:	4b07      	ldr	r3, [pc, #28]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa4:	4903      	ldr	r1, [pc, #12]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005aac:	e008      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005aae:	7cfb      	ldrb	r3, [r7, #19]
 8005ab0:	74bb      	strb	r3, [r7, #18]
 8005ab2:	e005      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	7cfb      	ldrb	r3, [r7, #19]
 8005abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ac0:	7c7b      	ldrb	r3, [r7, #17]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d105      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac6:	4ba0      	ldr	r3, [pc, #640]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	4a9f      	ldr	r2, [pc, #636]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ade:	4b9a      	ldr	r3, [pc, #616]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae4:	f023 0203 	bic.w	r2, r3, #3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aec:	4996      	ldr	r1, [pc, #600]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b00:	4b91      	ldr	r3, [pc, #580]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b06:	f023 020c 	bic.w	r2, r3, #12
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	498e      	ldr	r1, [pc, #568]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b22:	4b89      	ldr	r3, [pc, #548]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b30:	4985      	ldr	r1, [pc, #532]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b44:	4b80      	ldr	r3, [pc, #512]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b52:	497d      	ldr	r1, [pc, #500]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b66:	4b78      	ldr	r3, [pc, #480]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b74:	4974      	ldr	r1, [pc, #464]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b88:	4b6f      	ldr	r3, [pc, #444]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b96:	496c      	ldr	r1, [pc, #432]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005baa:	4b67      	ldr	r3, [pc, #412]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bb8:	4963      	ldr	r1, [pc, #396]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bda:	495b      	ldr	r1, [pc, #364]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bee:	4b56      	ldr	r3, [pc, #344]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfc:	4952      	ldr	r1, [pc, #328]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c10:	4b4d      	ldr	r3, [pc, #308]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1e:	494a      	ldr	r1, [pc, #296]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c32:	4b45      	ldr	r3, [pc, #276]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c40:	4941      	ldr	r1, [pc, #260]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c54:	4b3c      	ldr	r3, [pc, #240]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c5a:	f023 0203 	bic.w	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c62:	4939      	ldr	r1, [pc, #228]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d028      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c76:	4b34      	ldr	r3, [pc, #208]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c84:	4930      	ldr	r1, [pc, #192]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c96:	4b2c      	ldr	r3, [pc, #176]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ca0:	60d3      	str	r3, [r2, #12]
 8005ca2:	e011      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ca8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 f8f9 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d04d      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cdc:	d108      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005cde:	4b1a      	ldr	r3, [pc, #104]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ce4:	4a18      	ldr	r2, [pc, #96]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005cee:	e012      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005cf0:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cf6:	4a14      	ldr	r2, [pc, #80]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cfc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005d00:	4b11      	ldr	r3, [pc, #68]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d0e:	490e      	ldr	r1, [pc, #56]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d1e:	d106      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d20:	4b09      	ldr	r3, [pc, #36]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a08      	ldr	r2, [pc, #32]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d2a:	60d3      	str	r3, [r2, #12]
 8005d2c:	e020      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d36:	d109      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d38:	4b03      	ldr	r3, [pc, #12]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4a02      	ldr	r2, [pc, #8]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d42:	60d3      	str	r3, [r2, #12]
 8005d44:	e014      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005d46:	bf00      	nop
 8005d48:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d54:	d10c      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f8a5 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d66:	7cfb      	ldrb	r3, [r7, #19]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d028      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d8a:	4947      	ldr	r1, [pc, #284]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d9a:	d106      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d9c:	4b42      	ldr	r3, [pc, #264]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a41      	ldr	r2, [pc, #260]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005da6:	60d3      	str	r3, [r2, #12]
 8005da8:	e011      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005db2:	d10c      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	2101      	movs	r1, #1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f876 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dc4:	7cfb      	ldrb	r3, [r7, #19]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005dca:	7cfb      	ldrb	r3, [r7, #19]
 8005dcc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01e      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dda:	4b33      	ldr	r3, [pc, #204]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dea:	492f      	ldr	r1, [pc, #188]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3304      	adds	r3, #4
 8005e02:	2102      	movs	r1, #2
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 f851 	bl	8005eac <RCCEx_PLLSAI1_Config>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e0e:	7cfb      	ldrb	r3, [r7, #19]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005e14:	7cfb      	ldrb	r3, [r7, #19]
 8005e16:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e24:	4b20      	ldr	r3, [pc, #128]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e2a:	f023 0204 	bic.w	r2, r3, #4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e34:	491c      	ldr	r1, [pc, #112]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e48:	4b17      	ldr	r3, [pc, #92]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e4e:	f023 0218 	bic.w	r2, r3, #24
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e58:	4913      	ldr	r1, [pc, #76]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d017      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e7c:	490a      	ldr	r1, [pc, #40]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e90:	4b05      	ldr	r3, [pc, #20]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	4a04      	ldr	r2, [pc, #16]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40021000 	.word	0x40021000

08005eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005eba:	4b72      	ldr	r3, [pc, #456]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00e      	beq.n	8005ee4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f003 0203 	and.w	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d103      	bne.n	8005ede <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d142      	bne.n	8005f64 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	73fb      	strb	r3, [r7, #15]
 8005ee2:	e03f      	b.n	8005f64 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d018      	beq.n	8005f1e <RCCEx_PLLSAI1_Config+0x72>
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d825      	bhi.n	8005f3c <RCCEx_PLLSAI1_Config+0x90>
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d002      	beq.n	8005efa <RCCEx_PLLSAI1_Config+0x4e>
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d009      	beq.n	8005f0c <RCCEx_PLLSAI1_Config+0x60>
 8005ef8:	e020      	b.n	8005f3c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005efa:	4b62      	ldr	r3, [pc, #392]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d11d      	bne.n	8005f42 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f0a:	e01a      	b.n	8005f42 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f0c:	4b5d      	ldr	r3, [pc, #372]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d116      	bne.n	8005f46 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f1c:	e013      	b.n	8005f46 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f1e:	4b59      	ldr	r3, [pc, #356]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f2a:	4b56      	ldr	r3, [pc, #344]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f3a:	e006      	b.n	8005f4a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f40:	e004      	b.n	8005f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d108      	bne.n	8005f64 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005f52:	4b4c      	ldr	r3, [pc, #304]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f023 0203 	bic.w	r2, r3, #3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4949      	ldr	r1, [pc, #292]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 8086 	bne.w	8006078 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f6c:	4b45      	ldr	r3, [pc, #276]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a44      	ldr	r2, [pc, #272]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f78:	f7fd fb2a 	bl	80035d0 <HAL_GetTick>
 8005f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f7e:	e009      	b.n	8005f94 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f80:	f7fd fb26 	bl	80035d0 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d902      	bls.n	8005f94 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	73fb      	strb	r3, [r7, #15]
        break;
 8005f92:	e005      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f94:	4b3b      	ldr	r3, [pc, #236]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1ef      	bne.n	8005f80 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d168      	bne.n	8006078 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d113      	bne.n	8005fd4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fac:	4b35      	ldr	r3, [pc, #212]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	4b35      	ldr	r3, [pc, #212]	@ (8006088 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6892      	ldr	r2, [r2, #8]
 8005fb8:	0211      	lsls	r1, r2, #8
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68d2      	ldr	r2, [r2, #12]
 8005fbe:	06d2      	lsls	r2, r2, #27
 8005fc0:	4311      	orrs	r1, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6852      	ldr	r2, [r2, #4]
 8005fc6:	3a01      	subs	r2, #1
 8005fc8:	0112      	lsls	r2, r2, #4
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	492d      	ldr	r1, [pc, #180]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	610b      	str	r3, [r1, #16]
 8005fd2:	e02d      	b.n	8006030 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d115      	bne.n	8006006 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fda:	4b2a      	ldr	r3, [pc, #168]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	4b2b      	ldr	r3, [pc, #172]	@ (800608c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6892      	ldr	r2, [r2, #8]
 8005fe6:	0211      	lsls	r1, r2, #8
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6912      	ldr	r2, [r2, #16]
 8005fec:	0852      	lsrs	r2, r2, #1
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	0552      	lsls	r2, r2, #21
 8005ff2:	4311      	orrs	r1, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6852      	ldr	r2, [r2, #4]
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	0112      	lsls	r2, r2, #4
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	4921      	ldr	r1, [pc, #132]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006000:	4313      	orrs	r3, r2
 8006002:	610b      	str	r3, [r1, #16]
 8006004:	e014      	b.n	8006030 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006006:	4b1f      	ldr	r3, [pc, #124]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	4b21      	ldr	r3, [pc, #132]	@ (8006090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800600c:	4013      	ands	r3, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6892      	ldr	r2, [r2, #8]
 8006012:	0211      	lsls	r1, r2, #8
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6952      	ldr	r2, [r2, #20]
 8006018:	0852      	lsrs	r2, r2, #1
 800601a:	3a01      	subs	r2, #1
 800601c:	0652      	lsls	r2, r2, #25
 800601e:	4311      	orrs	r1, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6852      	ldr	r2, [r2, #4]
 8006024:	3a01      	subs	r2, #1
 8006026:	0112      	lsls	r2, r2, #4
 8006028:	430a      	orrs	r2, r1
 800602a:	4916      	ldr	r1, [pc, #88]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800602c:	4313      	orrs	r3, r2
 800602e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006030:	4b14      	ldr	r3, [pc, #80]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a13      	ldr	r2, [pc, #76]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006036:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800603a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603c:	f7fd fac8 	bl	80035d0 <HAL_GetTick>
 8006040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006042:	e009      	b.n	8006058 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006044:	f7fd fac4 	bl	80035d0 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d902      	bls.n	8006058 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	73fb      	strb	r3, [r7, #15]
          break;
 8006056:	e005      	b.n	8006064 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006058:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0ef      	beq.n	8006044 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800606a:	4b06      	ldr	r3, [pc, #24]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	4904      	ldr	r1, [pc, #16]	@ (8006084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006074:	4313      	orrs	r3, r2
 8006076:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000
 8006088:	07ff800f 	.word	0x07ff800f
 800608c:	ff9f800f 	.word	0xff9f800f
 8006090:	f9ff800f 	.word	0xf9ff800f

08006094 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060a2:	4b72      	ldr	r3, [pc, #456]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80060ae:	4b6f      	ldr	r3, [pc, #444]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0203 	and.w	r2, r3, #3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d103      	bne.n	80060c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
       ||
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d142      	bne.n	800614c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	73fb      	strb	r3, [r7, #15]
 80060ca:	e03f      	b.n	800614c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d018      	beq.n	8006106 <RCCEx_PLLSAI2_Config+0x72>
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d825      	bhi.n	8006124 <RCCEx_PLLSAI2_Config+0x90>
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d002      	beq.n	80060e2 <RCCEx_PLLSAI2_Config+0x4e>
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d009      	beq.n	80060f4 <RCCEx_PLLSAI2_Config+0x60>
 80060e0:	e020      	b.n	8006124 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060e2:	4b62      	ldr	r3, [pc, #392]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11d      	bne.n	800612a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060f2:	e01a      	b.n	800612a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060f4:	4b5d      	ldr	r3, [pc, #372]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d116      	bne.n	800612e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006104:	e013      	b.n	800612e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006106:	4b59      	ldr	r3, [pc, #356]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10f      	bne.n	8006132 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006112:	4b56      	ldr	r3, [pc, #344]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d109      	bne.n	8006132 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006122:	e006      	b.n	8006132 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
      break;
 8006128:	e004      	b.n	8006134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800612a:	bf00      	nop
 800612c:	e002      	b.n	8006134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006132:	bf00      	nop
    }

    if(status == HAL_OK)
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d108      	bne.n	800614c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800613a:	4b4c      	ldr	r3, [pc, #304]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f023 0203 	bic.w	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4949      	ldr	r1, [pc, #292]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006148:	4313      	orrs	r3, r2
 800614a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 8086 	bne.w	8006260 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006154:	4b45      	ldr	r3, [pc, #276]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a44      	ldr	r2, [pc, #272]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 800615a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800615e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006160:	f7fd fa36 	bl	80035d0 <HAL_GetTick>
 8006164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006166:	e009      	b.n	800617c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006168:	f7fd fa32 	bl	80035d0 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d902      	bls.n	800617c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	73fb      	strb	r3, [r7, #15]
        break;
 800617a:	e005      	b.n	8006188 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800617c:	4b3b      	ldr	r3, [pc, #236]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1ef      	bne.n	8006168 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d168      	bne.n	8006260 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d113      	bne.n	80061bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006194:	4b35      	ldr	r3, [pc, #212]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	4b35      	ldr	r3, [pc, #212]	@ (8006270 <RCCEx_PLLSAI2_Config+0x1dc>)
 800619a:	4013      	ands	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6892      	ldr	r2, [r2, #8]
 80061a0:	0211      	lsls	r1, r2, #8
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68d2      	ldr	r2, [r2, #12]
 80061a6:	06d2      	lsls	r2, r2, #27
 80061a8:	4311      	orrs	r1, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6852      	ldr	r2, [r2, #4]
 80061ae:	3a01      	subs	r2, #1
 80061b0:	0112      	lsls	r2, r2, #4
 80061b2:	430a      	orrs	r2, r1
 80061b4:	492d      	ldr	r1, [pc, #180]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	614b      	str	r3, [r1, #20]
 80061ba:	e02d      	b.n	8006218 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d115      	bne.n	80061ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061c2:	4b2a      	ldr	r3, [pc, #168]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006274 <RCCEx_PLLSAI2_Config+0x1e0>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6892      	ldr	r2, [r2, #8]
 80061ce:	0211      	lsls	r1, r2, #8
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6912      	ldr	r2, [r2, #16]
 80061d4:	0852      	lsrs	r2, r2, #1
 80061d6:	3a01      	subs	r2, #1
 80061d8:	0552      	lsls	r2, r2, #21
 80061da:	4311      	orrs	r1, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6852      	ldr	r2, [r2, #4]
 80061e0:	3a01      	subs	r2, #1
 80061e2:	0112      	lsls	r2, r2, #4
 80061e4:	430a      	orrs	r2, r1
 80061e6:	4921      	ldr	r1, [pc, #132]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	614b      	str	r3, [r1, #20]
 80061ec:	e014      	b.n	8006218 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061ee:	4b1f      	ldr	r3, [pc, #124]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061f0:	695a      	ldr	r2, [r3, #20]
 80061f2:	4b21      	ldr	r3, [pc, #132]	@ (8006278 <RCCEx_PLLSAI2_Config+0x1e4>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6892      	ldr	r2, [r2, #8]
 80061fa:	0211      	lsls	r1, r2, #8
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6952      	ldr	r2, [r2, #20]
 8006200:	0852      	lsrs	r2, r2, #1
 8006202:	3a01      	subs	r2, #1
 8006204:	0652      	lsls	r2, r2, #25
 8006206:	4311      	orrs	r1, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6852      	ldr	r2, [r2, #4]
 800620c:	3a01      	subs	r2, #1
 800620e:	0112      	lsls	r2, r2, #4
 8006210:	430a      	orrs	r2, r1
 8006212:	4916      	ldr	r1, [pc, #88]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006214:	4313      	orrs	r3, r2
 8006216:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006218:	4b14      	ldr	r3, [pc, #80]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a13      	ldr	r2, [pc, #76]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 800621e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006222:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006224:	f7fd f9d4 	bl	80035d0 <HAL_GetTick>
 8006228:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800622a:	e009      	b.n	8006240 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800622c:	f7fd f9d0 	bl	80035d0 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d902      	bls.n	8006240 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	73fb      	strb	r3, [r7, #15]
          break;
 800623e:	e005      	b.n	800624c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006240:	4b0a      	ldr	r3, [pc, #40]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ef      	beq.n	800622c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006252:	4b06      	ldr	r3, [pc, #24]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006254:	695a      	ldr	r2, [r3, #20]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	4904      	ldr	r1, [pc, #16]	@ (800626c <RCCEx_PLLSAI2_Config+0x1d8>)
 800625c:	4313      	orrs	r3, r2
 800625e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000
 8006270:	07ff800f 	.word	0x07ff800f
 8006274:	ff9f800f 	.word	0xff9f800f
 8006278:	f9ff800f 	.word	0xf9ff800f

0800627c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e095      	b.n	80063ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	2b00      	cmp	r3, #0
 8006294:	d108      	bne.n	80062a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800629e:	d009      	beq.n	80062b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	61da      	str	r2, [r3, #28]
 80062a6:	e005      	b.n	80062b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fc ff28 	bl	8003124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062f4:	d902      	bls.n	80062fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e002      	b.n	8006302 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006300:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800630a:	d007      	beq.n	800631c <HAL_SPI_Init+0xa0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006314:	d002      	beq.n	800631c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635e:	ea42 0103 	orr.w	r1, r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	0c1b      	lsrs	r3, r3, #16
 8006378:	f003 0204 	and.w	r2, r3, #4
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006398:	ea42 0103 	orr.w	r1, r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b088      	sub	sp, #32
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	603b      	str	r3, [r7, #0]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_SPI_Transmit+0x22>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e15f      	b.n	80066a4 <HAL_SPI_Transmit+0x2e2>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ec:	f7fd f8f0 	bl	80035d0 <HAL_GetTick>
 80063f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d002      	beq.n	8006408 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006402:	2302      	movs	r3, #2
 8006404:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006406:	e148      	b.n	800669a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_SPI_Transmit+0x52>
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006418:	e13f      	b.n	800669a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2203      	movs	r2, #3
 800641e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006464:	d10f      	bne.n	8006486 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006490:	2b40      	cmp	r3, #64	@ 0x40
 8006492:	d007      	beq.n	80064a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064ac:	d94f      	bls.n	800654e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_SPI_Transmit+0xfa>
 80064b6:	8afb      	ldrh	r3, [r7, #22]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d142      	bne.n	8006542 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c0:	881a      	ldrh	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	1c9a      	adds	r2, r3, #2
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064e0:	e02f      	b.n	8006542 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d112      	bne.n	8006516 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	881a      	ldrh	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006514:	e015      	b.n	8006542 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006516:	f7fd f85b 	bl	80035d0 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d803      	bhi.n	800652e <HAL_SPI_Transmit+0x16c>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d102      	bne.n	8006534 <HAL_SPI_Transmit+0x172>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006540:	e0ab      	b.n	800669a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ca      	bne.n	80064e2 <HAL_SPI_Transmit+0x120>
 800654c:	e080      	b.n	8006650 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_SPI_Transmit+0x19a>
 8006556:	8afb      	ldrh	r3, [r7, #22]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d174      	bne.n	8006646 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b01      	cmp	r3, #1
 8006564:	d912      	bls.n	800658c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656a:	881a      	ldrh	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	1c9a      	adds	r2, r3, #2
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b02      	subs	r3, #2
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800658a:	e05c      	b.n	8006646 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	7812      	ldrb	r2, [r2, #0]
 8006598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80065b2:	e048      	b.n	8006646 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d12b      	bne.n	800661a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d912      	bls.n	80065f2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d0:	881a      	ldrh	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065dc:	1c9a      	adds	r2, r3, #2
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b02      	subs	r3, #2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065f0:	e029      	b.n	8006646 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006618:	e015      	b.n	8006646 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800661a:	f7fc ffd9 	bl	80035d0 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d803      	bhi.n	8006632 <HAL_SPI_Transmit+0x270>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d102      	bne.n	8006638 <HAL_SPI_Transmit+0x276>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006644:	e029      	b.n	800669a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1b1      	bne.n	80065b4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f947 	bl	80068e8 <SPI_EndRxTxTransaction>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800666e:	2300      	movs	r3, #0
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e003      	b.n	800669a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80066a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3720      	adds	r7, #32
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066bc:	f7fc ff88 	bl	80035d0 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4413      	add	r3, r2
 80066ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066cc:	f7fc ff80 	bl	80035d0 <HAL_GetTick>
 80066d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066d2:	4b39      	ldr	r3, [pc, #228]	@ (80067b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	015b      	lsls	r3, r3, #5
 80066d8:	0d1b      	lsrs	r3, r3, #20
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	fb02 f303 	mul.w	r3, r2, r3
 80066e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066e2:	e054      	b.n	800678e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d050      	beq.n	800678e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066ec:	f7fc ff70 	bl	80035d0 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d902      	bls.n	8006702 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d13d      	bne.n	800677e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006710:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800671a:	d111      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout+0x94>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006724:	d004      	beq.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800672e:	d107      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800673e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006748:	d10f      	bne.n	800676a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e017      	b.n	80067ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	3b01      	subs	r3, #1
 800678c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4013      	ands	r3, r2
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	429a      	cmp	r2, r3
 800679c:	bf0c      	ite	eq
 800679e:	2301      	moveq	r3, #1
 80067a0:	2300      	movne	r3, #0
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	79fb      	ldrb	r3, [r7, #7]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d19b      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000080 	.word	0x20000080

080067bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	@ 0x28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067ce:	f7fc feff 	bl	80035d0 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	4413      	add	r3, r2
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80067de:	f7fc fef7 	bl	80035d0 <HAL_GetTick>
 80067e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80067ec:	4b3d      	ldr	r3, [pc, #244]	@ (80068e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	00da      	lsls	r2, r3, #3
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	0d1b      	lsrs	r3, r3, #20
 80067fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006804:	e060      	b.n	80068c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800680c:	d107      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0x62>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800681c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d050      	beq.n	80068c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006826:	f7fc fed3 	bl	80035d0 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006832:	429a      	cmp	r2, r3
 8006834:	d902      	bls.n	800683c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	d13d      	bne.n	80068b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800684a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006854:	d111      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800685e:	d004      	beq.n	800686a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006868:	d107      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006878:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006882:	d10f      	bne.n	80068a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e010      	b.n	80068da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4013      	ands	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d196      	bne.n	8006806 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3728      	adds	r7, #40	@ 0x28
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000080 	.word	0x20000080

080068e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f7ff ff5b 	bl	80067bc <SPI_WaitFifoStateUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006910:	f043 0220 	orr.w	r2, r3, #32
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e027      	b.n	800696c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	2180      	movs	r1, #128	@ 0x80
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff fec0 	bl	80066ac <SPI_WaitFlagStateUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006936:	f043 0220 	orr.w	r2, r3, #32
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e014      	b.n	800696c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff ff34 	bl	80067bc <SPI_WaitFifoStateUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800695e:	f043 0220 	orr.w	r2, r3, #32
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e000      	b.n	800696c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e049      	b.n	8006a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fc fc04 	bl	80031a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f000 fa9a 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d001      	beq.n	8006a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e04f      	b.n	8006adc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a23      	ldr	r2, [pc, #140]	@ (8006ae8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01d      	beq.n	8006a9a <HAL_TIM_Base_Start_IT+0x76>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a66:	d018      	beq.n	8006a9a <HAL_TIM_Base_Start_IT+0x76>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006aec <HAL_TIM_Base_Start_IT+0xc8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <HAL_TIM_Base_Start_IT+0x76>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	@ (8006af0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00e      	beq.n	8006a9a <HAL_TIM_Base_Start_IT+0x76>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	@ (8006af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d009      	beq.n	8006a9a <HAL_TIM_Base_Start_IT+0x76>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d004      	beq.n	8006a9a <HAL_TIM_Base_Start_IT+0x76>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a19      	ldr	r2, [pc, #100]	@ (8006afc <HAL_TIM_Base_Start_IT+0xd8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d115      	bne.n	8006ac6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	4b17      	ldr	r3, [pc, #92]	@ (8006b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b06      	cmp	r3, #6
 8006aaa:	d015      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0xb4>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ab2:	d011      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac4:	e008      	b.n	8006ad8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0201 	orr.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	e000      	b.n	8006ada <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	00010007 	.word	0x00010007

08006b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d020      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0202 	mvn.w	r2, #2
 8006b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f9ad 	bl	8006eae <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f99f 	bl	8006e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f9b0 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d020      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0204 	mvn.w	r2, #4
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f987 	bl	8006eae <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f979 	bl	8006e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f98a 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d020      	beq.n	8006c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01b      	beq.n	8006c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0208 	mvn.w	r2, #8
 8006bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f961 	bl	8006eae <HAL_TIM_IC_CaptureCallback>
 8006bec:	e005      	b.n	8006bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f953 	bl	8006e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f964 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d020      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01b      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0210 	mvn.w	r2, #16
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2208      	movs	r2, #8
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f93b 	bl	8006eae <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f92d 	bl	8006e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f93e 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00c      	beq.n	8006c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0201 	mvn.w	r2, #1
 8006c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fb f954 	bl	8001f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00c      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 faf2 	bl	8007278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 faea 	bl	800728c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00c      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f8fd 	bl	8006ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00c      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d007      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0220 	mvn.w	r2, #32
 8006cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fab2 	bl	8007264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_TIM_ConfigClockSource+0x1c>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e0b6      	b.n	8006e92 <HAL_TIM_ConfigClockSource+0x18a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d60:	d03e      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0xd8>
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d66:	f200 8087 	bhi.w	8006e78 <HAL_TIM_ConfigClockSource+0x170>
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6e:	f000 8086 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x176>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d76:	d87f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x170>
 8006d78:	2b70      	cmp	r3, #112	@ 0x70
 8006d7a:	d01a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0xaa>
 8006d7c:	2b70      	cmp	r3, #112	@ 0x70
 8006d7e:	d87b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x170>
 8006d80:	2b60      	cmp	r3, #96	@ 0x60
 8006d82:	d050      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x11e>
 8006d84:	2b60      	cmp	r3, #96	@ 0x60
 8006d86:	d877      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x170>
 8006d88:	2b50      	cmp	r3, #80	@ 0x50
 8006d8a:	d03c      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xfe>
 8006d8c:	2b50      	cmp	r3, #80	@ 0x50
 8006d8e:	d873      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x170>
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d058      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0x13e>
 8006d94:	2b40      	cmp	r3, #64	@ 0x40
 8006d96:	d86f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x170>
 8006d98:	2b30      	cmp	r3, #48	@ 0x30
 8006d9a:	d064      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15e>
 8006d9c:	2b30      	cmp	r3, #48	@ 0x30
 8006d9e:	d86b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x170>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d060      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15e>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d867      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x170>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d05c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15e>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d05a      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15e>
 8006db0:	e062      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dc2:	f000 f9a7 	bl	8007114 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	609a      	str	r2, [r3, #8]
      break;
 8006dde:	e04f      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006df0:	f000 f990 	bl	8007114 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e02:	609a      	str	r2, [r3, #8]
      break;
 8006e04:	e03c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e12:	461a      	mov	r2, r3
 8006e14:	f000 f904 	bl	8007020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2150      	movs	r1, #80	@ 0x50
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f95d 	bl	80070de <TIM_ITRx_SetConfig>
      break;
 8006e24:	e02c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e32:	461a      	mov	r2, r3
 8006e34:	f000 f923 	bl	800707e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2160      	movs	r1, #96	@ 0x60
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f94d 	bl	80070de <TIM_ITRx_SetConfig>
      break;
 8006e44:	e01c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	461a      	mov	r2, r3
 8006e54:	f000 f8e4 	bl	8007020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2140      	movs	r1, #64	@ 0x40
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f93d 	bl	80070de <TIM_ITRx_SetConfig>
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f000 f934 	bl	80070de <TIM_ITRx_SetConfig>
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a40      	ldr	r2, [pc, #256]	@ (8007000 <TIM_Base_SetConfig+0x114>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d013      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0a:	d00f      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8007004 <TIM_Base_SetConfig+0x118>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00b      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3c      	ldr	r2, [pc, #240]	@ (8007008 <TIM_Base_SetConfig+0x11c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800700c <TIM_Base_SetConfig+0x120>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a3a      	ldr	r2, [pc, #232]	@ (8007010 <TIM_Base_SetConfig+0x124>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d108      	bne.n	8006f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2f      	ldr	r2, [pc, #188]	@ (8007000 <TIM_Base_SetConfig+0x114>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d01f      	beq.n	8006f86 <TIM_Base_SetConfig+0x9a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4c:	d01b      	beq.n	8006f86 <TIM_Base_SetConfig+0x9a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2c      	ldr	r2, [pc, #176]	@ (8007004 <TIM_Base_SetConfig+0x118>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d017      	beq.n	8006f86 <TIM_Base_SetConfig+0x9a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2b      	ldr	r2, [pc, #172]	@ (8007008 <TIM_Base_SetConfig+0x11c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <TIM_Base_SetConfig+0x9a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2a      	ldr	r2, [pc, #168]	@ (800700c <TIM_Base_SetConfig+0x120>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00f      	beq.n	8006f86 <TIM_Base_SetConfig+0x9a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a29      	ldr	r2, [pc, #164]	@ (8007010 <TIM_Base_SetConfig+0x124>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00b      	beq.n	8006f86 <TIM_Base_SetConfig+0x9a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a28      	ldr	r2, [pc, #160]	@ (8007014 <TIM_Base_SetConfig+0x128>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d007      	beq.n	8006f86 <TIM_Base_SetConfig+0x9a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a27      	ldr	r2, [pc, #156]	@ (8007018 <TIM_Base_SetConfig+0x12c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_Base_SetConfig+0x9a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a26      	ldr	r2, [pc, #152]	@ (800701c <TIM_Base_SetConfig+0x130>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d108      	bne.n	8006f98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a10      	ldr	r2, [pc, #64]	@ (8007000 <TIM_Base_SetConfig+0x114>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00f      	beq.n	8006fe4 <TIM_Base_SetConfig+0xf8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a12      	ldr	r2, [pc, #72]	@ (8007010 <TIM_Base_SetConfig+0x124>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00b      	beq.n	8006fe4 <TIM_Base_SetConfig+0xf8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a11      	ldr	r2, [pc, #68]	@ (8007014 <TIM_Base_SetConfig+0x128>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d007      	beq.n	8006fe4 <TIM_Base_SetConfig+0xf8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a10      	ldr	r2, [pc, #64]	@ (8007018 <TIM_Base_SetConfig+0x12c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_Base_SetConfig+0xf8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a0f      	ldr	r2, [pc, #60]	@ (800701c <TIM_Base_SetConfig+0x130>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d103      	bne.n	8006fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	615a      	str	r2, [r3, #20]
}
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40013400 	.word	0x40013400
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800

08007020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f023 0201 	bic.w	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800704a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f023 030a 	bic.w	r3, r3, #10
 800705c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707e:	b480      	push	{r7}
 8007080:	b087      	sub	sp, #28
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	f023 0210 	bic.w	r2, r3, #16
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	031b      	lsls	r3, r3, #12
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070de:	b480      	push	{r7}
 80070e0:	b085      	sub	sp, #20
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f043 0307 	orr.w	r3, r3, #7
 8007100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	609a      	str	r2, [r3, #8]
}
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800712e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	021a      	lsls	r2, r3, #8
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	431a      	orrs	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4313      	orrs	r3, r2
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	609a      	str	r2, [r3, #8]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007168:	2302      	movs	r3, #2
 800716a:	e068      	b.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2e      	ldr	r2, [pc, #184]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d004      	beq.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2d      	ldr	r2, [pc, #180]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d108      	bne.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1e      	ldr	r2, [pc, #120]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01d      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071de:	d018      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a18      	ldr	r2, [pc, #96]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a13      	ldr	r2, [pc, #76]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a14      	ldr	r2, [pc, #80]	@ (8007260 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d10c      	bne.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4313      	orrs	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40012c00 	.word	0x40012c00
 8007250:	40013400 	.word	0x40013400
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800
 800725c:	40000c00 	.word	0x40000c00
 8007260:	40014000 	.word	0x40014000

08007264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e042      	b.n	8007338 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7fb fe3b 	bl	8002f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2224      	movs	r2, #36	@ 0x24
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f80c 	bl	8008308 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fd0d 	bl	8007d10 <UART_SetConfig>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e01b      	b.n	8007338 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800730e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800731e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f88b 	bl	800844c <UART_CheckIdleState>
 8007336:	4603      	mov	r3, r0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	@ 0x28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007356:	2b20      	cmp	r3, #32
 8007358:	d17b      	bne.n	8007452 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_UART_Transmit+0x26>
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e074      	b.n	8007454 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2221      	movs	r2, #33	@ 0x21
 8007376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800737a:	f7fc f929 	bl	80035d0 <HAL_GetTick>
 800737e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007398:	d108      	bne.n	80073ac <HAL_UART_Transmit+0x6c>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	e003      	b.n	80073b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073b4:	e030      	b.n	8007418 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2200      	movs	r2, #0
 80073be:	2180      	movs	r1, #128	@ 0x80
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f001 f8ed 	bl	80085a0 <UART_WaitOnFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e03d      	b.n	8007454 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10b      	bne.n	80073f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ea:	b292      	uxth	r2, r2
 80073ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	3302      	adds	r3, #2
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	e007      	b.n	8007406 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	3301      	adds	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1c8      	bne.n	80073b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2200      	movs	r2, #0
 800742c:	2140      	movs	r1, #64	@ 0x40
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f001 f8b6 	bl	80085a0 <UART_WaitOnFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e006      	b.n	8007454 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	e000      	b.n	8007454 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007452:	2302      	movs	r3, #2
  }
}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	@ 0x28
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007472:	2b20      	cmp	r3, #32
 8007474:	f040 80b6 	bne.w	80075e4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_UART_Receive+0x28>
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e0ae      	b.n	80075e6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2222      	movs	r2, #34	@ 0x22
 8007494:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800749e:	f7fc f897 	bl	80035d0 <HAL_GetTick>
 80074a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074bc:	d10e      	bne.n	80074dc <HAL_UART_Receive+0x80>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <HAL_UART_Receive+0x76>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074d0:	e02d      	b.n	800752e <HAL_UART_Receive+0xd2>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	22ff      	movs	r2, #255	@ 0xff
 80074d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074da:	e028      	b.n	800752e <HAL_UART_Receive+0xd2>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10d      	bne.n	8007500 <HAL_UART_Receive+0xa4>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <HAL_UART_Receive+0x9a>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	22ff      	movs	r2, #255	@ 0xff
 80074f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074f4:	e01b      	b.n	800752e <HAL_UART_Receive+0xd2>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	227f      	movs	r2, #127	@ 0x7f
 80074fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074fe:	e016      	b.n	800752e <HAL_UART_Receive+0xd2>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007508:	d10d      	bne.n	8007526 <HAL_UART_Receive+0xca>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <HAL_UART_Receive+0xc0>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	227f      	movs	r2, #127	@ 0x7f
 8007516:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800751a:	e008      	b.n	800752e <HAL_UART_Receive+0xd2>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	223f      	movs	r2, #63	@ 0x3f
 8007520:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007524:	e003      	b.n	800752e <HAL_UART_Receive+0xd2>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007534:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800753e:	d108      	bne.n	8007552 <HAL_UART_Receive+0xf6>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007548:	2300      	movs	r3, #0
 800754a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	e003      	b.n	800755a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800755a:	e037      	b.n	80075cc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2200      	movs	r2, #0
 8007564:	2120      	movs	r1, #32
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f001 f81a 	bl	80085a0 <UART_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e033      	b.n	80075e6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10c      	bne.n	800759e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800758a:	b29a      	uxth	r2, r3
 800758c:	8a7b      	ldrh	r3, [r7, #18]
 800758e:	4013      	ands	r3, r2
 8007590:	b29a      	uxth	r2, r3
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	3302      	adds	r3, #2
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	e00d      	b.n	80075ba <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	8a7b      	ldrh	r3, [r7, #18]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	4013      	ands	r3, r2
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3301      	adds	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1c1      	bne.n	800755c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e000      	b.n	80075e6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80075e4:	2302      	movs	r3, #2
  }
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	@ 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007604:	2b20      	cmp	r3, #32
 8007606:	d137      	bne.n	8007678 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <HAL_UART_Receive_IT+0x24>
 800760e:	88fb      	ldrh	r3, [r7, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e030      	b.n	800767a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a18      	ldr	r2, [pc, #96]	@ (8007684 <HAL_UART_Receive_IT+0x94>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d01f      	beq.n	8007668 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d018      	beq.n	8007668 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	613b      	str	r3, [r7, #16]
   return(result);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	623b      	str	r3, [r7, #32]
 8007656:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	69f9      	ldr	r1, [r7, #28]
 800765a:	6a3a      	ldr	r2, [r7, #32]
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	61bb      	str	r3, [r7, #24]
   return(result);
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e6      	bne.n	8007636 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	461a      	mov	r2, r3
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fffe 	bl	8008670 <UART_Start_Receive_IT>
 8007674:	4603      	mov	r3, r0
 8007676:	e000      	b.n	800767a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
  }
}
 800767a:	4618      	mov	r0, r3
 800767c:	3728      	adds	r7, #40	@ 0x28
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	40008000 	.word	0x40008000

08007688 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b0ba      	sub	sp, #232	@ 0xe8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80076b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80076b6:	4013      	ands	r3, r2
 80076b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80076bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11b      	bne.n	80076fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d015      	beq.n	80076fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d009      	beq.n	80076fc <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 82e3 	beq.w	8007cb8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
      }
      return;
 80076fa:	e2dd      	b.n	8007cb8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80076fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8123 	beq.w	800794c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007706:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800770a:	4b8d      	ldr	r3, [pc, #564]	@ (8007940 <HAL_UART_IRQHandler+0x2b8>)
 800770c:	4013      	ands	r3, r2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007712:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007716:	4b8b      	ldr	r3, [pc, #556]	@ (8007944 <HAL_UART_IRQHandler+0x2bc>)
 8007718:	4013      	ands	r3, r2
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 8116 	beq.w	800794c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d011      	beq.n	8007750 <HAL_UART_IRQHandler+0xc8>
 800772c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2201      	movs	r2, #1
 800773e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007746:	f043 0201 	orr.w	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007754:	f003 0302 	and.w	r3, r3, #2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d011      	beq.n	8007780 <HAL_UART_IRQHandler+0xf8>
 800775c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2202      	movs	r2, #2
 800776e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007776:	f043 0204 	orr.w	r2, r3, #4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d011      	beq.n	80077b0 <HAL_UART_IRQHandler+0x128>
 800778c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2204      	movs	r2, #4
 800779e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a6:	f043 0202 	orr.w	r2, r3, #2
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d017      	beq.n	80077ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d105      	bne.n	80077d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077cc:	4b5c      	ldr	r3, [pc, #368]	@ (8007940 <HAL_UART_IRQHandler+0x2b8>)
 80077ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2208      	movs	r2, #8
 80077da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e2:	f043 0208 	orr.w	r2, r3, #8
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d012      	beq.n	800781e <HAL_UART_IRQHandler+0x196>
 80077f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00c      	beq.n	800781e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800780c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8249 	beq.w	8007cbc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d013      	beq.n	800785e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800783a:	f003 0320 	and.w	r3, r3, #32
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d007      	beq.n	800785e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007864:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007872:	2b40      	cmp	r3, #64	@ 0x40
 8007874:	d005      	beq.n	8007882 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800787a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800787e:	2b00      	cmp	r3, #0
 8007880:	d054      	beq.n	800792c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f816 	bl	80088b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007892:	2b40      	cmp	r3, #64	@ 0x40
 8007894:	d146      	bne.n	8007924 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3308      	adds	r3, #8
 80078be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1d9      	bne.n	8007896 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d017      	beq.n	800791c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f2:	4a15      	ldr	r2, [pc, #84]	@ (8007948 <HAL_UART_IRQHandler+0x2c0>)
 80078f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fc f804 	bl	800390a <HAL_DMA_Abort_IT>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d019      	beq.n	800793c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007916:	4610      	mov	r0, r2
 8007918:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791a:	e00f      	b.n	800793c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f9e1 	bl	8007ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007922:	e00b      	b.n	800793c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f9dd 	bl	8007ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792a:	e007      	b.n	800793c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f9d9 	bl	8007ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800793a:	e1bf      	b.n	8007cbc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	bf00      	nop
    return;
 800793e:	e1bd      	b.n	8007cbc <HAL_UART_IRQHandler+0x634>
 8007940:	10000001 	.word	0x10000001
 8007944:	04000120 	.word	0x04000120
 8007948:	08008981 	.word	0x08008981

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007950:	2b01      	cmp	r3, #1
 8007952:	f040 8153 	bne.w	8007bfc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800795a:	f003 0310 	and.w	r3, r3, #16
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 814c 	beq.w	8007bfc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 8145 	beq.w	8007bfc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2210      	movs	r2, #16
 8007978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007984:	2b40      	cmp	r3, #64	@ 0x40
 8007986:	f040 80bb 	bne.w	8007b00 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 818f 	beq.w	8007cc0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079ac:	429a      	cmp	r2, r3
 80079ae:	f080 8187 	bcs.w	8007cc0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 8087 	bne.w	8007ade <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1da      	bne.n	80079d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a2c:	f023 0301 	bic.w	r3, r3, #1
 8007a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e1      	bne.n	8007a1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e3      	bne.n	8007a56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aac:	f023 0310 	bic.w	r3, r3, #16
 8007ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007abe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ac0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ac4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e4      	bne.n	8007a9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fb feba 	bl	8003852 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f8fd 	bl	8007cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007afe:	e0df      	b.n	8007cc0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80d1 	beq.w	8007cc4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80cc 	beq.w	8007cc4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e4      	bne.n	8007b2c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	623b      	str	r3, [r7, #32]
   return(result);
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e1      	bne.n	8007b62 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0310 	bic.w	r3, r3, #16
 8007bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	69b9      	ldr	r1, [r7, #24]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	617b      	str	r3, [r7, #20]
   return(result);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e4      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f87f 	bl	8007cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bfa:	e063      	b.n	8007cc4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00e      	beq.n	8007c26 <HAL_UART_IRQHandler+0x59e>
 8007c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d008      	beq.n	8007c26 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 fc14 	bl	800944c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c24:	e051      	b.n	8007cca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d014      	beq.n	8007c5c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d008      	beq.n	8007c5c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d03a      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
    }
    return;
 8007c5a:	e035      	b.n	8007cc8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <HAL_UART_IRQHandler+0x5f4>
 8007c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fe99 	bl	80089ac <UART_EndTransmit_IT>
    return;
 8007c7a:	e026      	b.n	8007cca <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <HAL_UART_IRQHandler+0x614>
 8007c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 fbed 	bl	8009474 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c9a:	e016      	b.n	8007cca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d010      	beq.n	8007cca <HAL_UART_IRQHandler+0x642>
 8007ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da0c      	bge.n	8007cca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 fbd5 	bl	8009460 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cb6:	e008      	b.n	8007cca <HAL_UART_IRQHandler+0x642>
      return;
 8007cb8:	bf00      	nop
 8007cba:	e006      	b.n	8007cca <HAL_UART_IRQHandler+0x642>
    return;
 8007cbc:	bf00      	nop
 8007cbe:	e004      	b.n	8007cca <HAL_UART_IRQHandler+0x642>
      return;
 8007cc0:	bf00      	nop
 8007cc2:	e002      	b.n	8007cca <HAL_UART_IRQHandler+0x642>
      return;
 8007cc4:	bf00      	nop
 8007cc6:	e000      	b.n	8007cca <HAL_UART_IRQHandler+0x642>
    return;
 8007cc8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007cca:	37e8      	adds	r7, #232	@ 0xe8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d14:	b08c      	sub	sp, #48	@ 0x30
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4baa      	ldr	r3, [pc, #680]	@ (8007fe8 <UART_SetConfig+0x2d8>)
 8007d40:	4013      	ands	r3, r2
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	6812      	ldr	r2, [r2, #0]
 8007d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a9f      	ldr	r2, [pc, #636]	@ (8007fec <UART_SetConfig+0x2dc>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007d86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	6812      	ldr	r2, [r2, #0]
 8007d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d90:	430b      	orrs	r3, r1
 8007d92:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9a:	f023 010f 	bic.w	r1, r3, #15
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a90      	ldr	r2, [pc, #576]	@ (8007ff0 <UART_SetConfig+0x2e0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d125      	bne.n	8007e00 <UART_SetConfig+0xf0>
 8007db4:	4b8f      	ldr	r3, [pc, #572]	@ (8007ff4 <UART_SetConfig+0x2e4>)
 8007db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d81a      	bhi.n	8007df8 <UART_SetConfig+0xe8>
 8007dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <UART_SetConfig+0xb8>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007de9 	.word	0x08007de9
 8007dd0:	08007de1 	.word	0x08007de1
 8007dd4:	08007df1 	.word	0x08007df1
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dde:	e116      	b.n	800800e <UART_SetConfig+0x2fe>
 8007de0:	2302      	movs	r3, #2
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007de6:	e112      	b.n	800800e <UART_SetConfig+0x2fe>
 8007de8:	2304      	movs	r3, #4
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dee:	e10e      	b.n	800800e <UART_SetConfig+0x2fe>
 8007df0:	2308      	movs	r3, #8
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df6:	e10a      	b.n	800800e <UART_SetConfig+0x2fe>
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfe:	e106      	b.n	800800e <UART_SetConfig+0x2fe>
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a7c      	ldr	r2, [pc, #496]	@ (8007ff8 <UART_SetConfig+0x2e8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d138      	bne.n	8007e7c <UART_SetConfig+0x16c>
 8007e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8007ff4 <UART_SetConfig+0x2e4>)
 8007e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e10:	f003 030c 	and.w	r3, r3, #12
 8007e14:	2b0c      	cmp	r3, #12
 8007e16:	d82d      	bhi.n	8007e74 <UART_SetConfig+0x164>
 8007e18:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <UART_SetConfig+0x110>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e55 	.word	0x08007e55
 8007e24:	08007e75 	.word	0x08007e75
 8007e28:	08007e75 	.word	0x08007e75
 8007e2c:	08007e75 	.word	0x08007e75
 8007e30:	08007e65 	.word	0x08007e65
 8007e34:	08007e75 	.word	0x08007e75
 8007e38:	08007e75 	.word	0x08007e75
 8007e3c:	08007e75 	.word	0x08007e75
 8007e40:	08007e5d 	.word	0x08007e5d
 8007e44:	08007e75 	.word	0x08007e75
 8007e48:	08007e75 	.word	0x08007e75
 8007e4c:	08007e75 	.word	0x08007e75
 8007e50:	08007e6d 	.word	0x08007e6d
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5a:	e0d8      	b.n	800800e <UART_SetConfig+0x2fe>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e62:	e0d4      	b.n	800800e <UART_SetConfig+0x2fe>
 8007e64:	2304      	movs	r3, #4
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6a:	e0d0      	b.n	800800e <UART_SetConfig+0x2fe>
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	e0cc      	b.n	800800e <UART_SetConfig+0x2fe>
 8007e74:	2310      	movs	r3, #16
 8007e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7a:	e0c8      	b.n	800800e <UART_SetConfig+0x2fe>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a5e      	ldr	r2, [pc, #376]	@ (8007ffc <UART_SetConfig+0x2ec>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d125      	bne.n	8007ed2 <UART_SetConfig+0x1c2>
 8007e86:	4b5b      	ldr	r3, [pc, #364]	@ (8007ff4 <UART_SetConfig+0x2e4>)
 8007e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e90:	2b30      	cmp	r3, #48	@ 0x30
 8007e92:	d016      	beq.n	8007ec2 <UART_SetConfig+0x1b2>
 8007e94:	2b30      	cmp	r3, #48	@ 0x30
 8007e96:	d818      	bhi.n	8007eca <UART_SetConfig+0x1ba>
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d00a      	beq.n	8007eb2 <UART_SetConfig+0x1a2>
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	d814      	bhi.n	8007eca <UART_SetConfig+0x1ba>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <UART_SetConfig+0x19a>
 8007ea4:	2b10      	cmp	r3, #16
 8007ea6:	d008      	beq.n	8007eba <UART_SetConfig+0x1aa>
 8007ea8:	e00f      	b.n	8007eca <UART_SetConfig+0x1ba>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb0:	e0ad      	b.n	800800e <UART_SetConfig+0x2fe>
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb8:	e0a9      	b.n	800800e <UART_SetConfig+0x2fe>
 8007eba:	2304      	movs	r3, #4
 8007ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec0:	e0a5      	b.n	800800e <UART_SetConfig+0x2fe>
 8007ec2:	2308      	movs	r3, #8
 8007ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec8:	e0a1      	b.n	800800e <UART_SetConfig+0x2fe>
 8007eca:	2310      	movs	r3, #16
 8007ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed0:	e09d      	b.n	800800e <UART_SetConfig+0x2fe>
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8008000 <UART_SetConfig+0x2f0>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d125      	bne.n	8007f28 <UART_SetConfig+0x218>
 8007edc:	4b45      	ldr	r3, [pc, #276]	@ (8007ff4 <UART_SetConfig+0x2e4>)
 8007ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ee8:	d016      	beq.n	8007f18 <UART_SetConfig+0x208>
 8007eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eec:	d818      	bhi.n	8007f20 <UART_SetConfig+0x210>
 8007eee:	2b80      	cmp	r3, #128	@ 0x80
 8007ef0:	d00a      	beq.n	8007f08 <UART_SetConfig+0x1f8>
 8007ef2:	2b80      	cmp	r3, #128	@ 0x80
 8007ef4:	d814      	bhi.n	8007f20 <UART_SetConfig+0x210>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <UART_SetConfig+0x1f0>
 8007efa:	2b40      	cmp	r3, #64	@ 0x40
 8007efc:	d008      	beq.n	8007f10 <UART_SetConfig+0x200>
 8007efe:	e00f      	b.n	8007f20 <UART_SetConfig+0x210>
 8007f00:	2300      	movs	r3, #0
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f06:	e082      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0e:	e07e      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f10:	2304      	movs	r3, #4
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f16:	e07a      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f18:	2308      	movs	r3, #8
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1e:	e076      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f20:	2310      	movs	r3, #16
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f26:	e072      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a35      	ldr	r2, [pc, #212]	@ (8008004 <UART_SetConfig+0x2f4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d12a      	bne.n	8007f88 <UART_SetConfig+0x278>
 8007f32:	4b30      	ldr	r3, [pc, #192]	@ (8007ff4 <UART_SetConfig+0x2e4>)
 8007f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f40:	d01a      	beq.n	8007f78 <UART_SetConfig+0x268>
 8007f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f46:	d81b      	bhi.n	8007f80 <UART_SetConfig+0x270>
 8007f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f4c:	d00c      	beq.n	8007f68 <UART_SetConfig+0x258>
 8007f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f52:	d815      	bhi.n	8007f80 <UART_SetConfig+0x270>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <UART_SetConfig+0x250>
 8007f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f5c:	d008      	beq.n	8007f70 <UART_SetConfig+0x260>
 8007f5e:	e00f      	b.n	8007f80 <UART_SetConfig+0x270>
 8007f60:	2300      	movs	r3, #0
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f66:	e052      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6e:	e04e      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e04a      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e046      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f80:	2310      	movs	r3, #16
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e042      	b.n	800800e <UART_SetConfig+0x2fe>
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a17      	ldr	r2, [pc, #92]	@ (8007fec <UART_SetConfig+0x2dc>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d13a      	bne.n	8008008 <UART_SetConfig+0x2f8>
 8007f92:	4b18      	ldr	r3, [pc, #96]	@ (8007ff4 <UART_SetConfig+0x2e4>)
 8007f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fa0:	d01a      	beq.n	8007fd8 <UART_SetConfig+0x2c8>
 8007fa2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fa6:	d81b      	bhi.n	8007fe0 <UART_SetConfig+0x2d0>
 8007fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fac:	d00c      	beq.n	8007fc8 <UART_SetConfig+0x2b8>
 8007fae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fb2:	d815      	bhi.n	8007fe0 <UART_SetConfig+0x2d0>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <UART_SetConfig+0x2b0>
 8007fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fbc:	d008      	beq.n	8007fd0 <UART_SetConfig+0x2c0>
 8007fbe:	e00f      	b.n	8007fe0 <UART_SetConfig+0x2d0>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc6:	e022      	b.n	800800e <UART_SetConfig+0x2fe>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fce:	e01e      	b.n	800800e <UART_SetConfig+0x2fe>
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd6:	e01a      	b.n	800800e <UART_SetConfig+0x2fe>
 8007fd8:	2308      	movs	r3, #8
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fde:	e016      	b.n	800800e <UART_SetConfig+0x2fe>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe6:	e012      	b.n	800800e <UART_SetConfig+0x2fe>
 8007fe8:	cfff69f3 	.word	0xcfff69f3
 8007fec:	40008000 	.word	0x40008000
 8007ff0:	40013800 	.word	0x40013800
 8007ff4:	40021000 	.word	0x40021000
 8007ff8:	40004400 	.word	0x40004400
 8007ffc:	40004800 	.word	0x40004800
 8008000:	40004c00 	.word	0x40004c00
 8008004:	40005000 	.word	0x40005000
 8008008:	2310      	movs	r3, #16
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4aae      	ldr	r2, [pc, #696]	@ (80082cc <UART_SetConfig+0x5bc>)
 8008014:	4293      	cmp	r3, r2
 8008016:	f040 8097 	bne.w	8008148 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800801a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800801e:	2b08      	cmp	r3, #8
 8008020:	d823      	bhi.n	800806a <UART_SetConfig+0x35a>
 8008022:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0x318>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	0800804d 	.word	0x0800804d
 800802c:	0800806b 	.word	0x0800806b
 8008030:	08008055 	.word	0x08008055
 8008034:	0800806b 	.word	0x0800806b
 8008038:	0800805b 	.word	0x0800805b
 800803c:	0800806b 	.word	0x0800806b
 8008040:	0800806b 	.word	0x0800806b
 8008044:	0800806b 	.word	0x0800806b
 8008048:	08008063 	.word	0x08008063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800804c:	f7fd fb12 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8008050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008052:	e010      	b.n	8008076 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008054:	4b9e      	ldr	r3, [pc, #632]	@ (80082d0 <UART_SetConfig+0x5c0>)
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008058:	e00d      	b.n	8008076 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805a:	f7fd fa73 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 800805e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008060:	e009      	b.n	8008076 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008068:	e005      	b.n	8008076 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008074:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8130 	beq.w	80082de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008082:	4a94      	ldr	r2, [pc, #592]	@ (80082d4 <UART_SetConfig+0x5c4>)
 8008084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008088:	461a      	mov	r2, r3
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008090:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	4413      	add	r3, r2
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d305      	bcc.n	80080ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d903      	bls.n	80080b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080b4:	e113      	b.n	80082de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	2200      	movs	r2, #0
 80080ba:	60bb      	str	r3, [r7, #8]
 80080bc:	60fa      	str	r2, [r7, #12]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	4a84      	ldr	r2, [pc, #528]	@ (80082d4 <UART_SetConfig+0x5c4>)
 80080c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2200      	movs	r2, #0
 80080cc:	603b      	str	r3, [r7, #0]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080d8:	f7f8 fd8e 	bl	8000bf8 <__aeabi_uldivmod>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4610      	mov	r0, r2
 80080e2:	4619      	mov	r1, r3
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	020b      	lsls	r3, r1, #8
 80080ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080f2:	0202      	lsls	r2, r0, #8
 80080f4:	6979      	ldr	r1, [r7, #20]
 80080f6:	6849      	ldr	r1, [r1, #4]
 80080f8:	0849      	lsrs	r1, r1, #1
 80080fa:	2000      	movs	r0, #0
 80080fc:	460c      	mov	r4, r1
 80080fe:	4605      	mov	r5, r0
 8008100:	eb12 0804 	adds.w	r8, r2, r4
 8008104:	eb43 0905 	adc.w	r9, r3, r5
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	469a      	mov	sl, r3
 8008110:	4693      	mov	fp, r2
 8008112:	4652      	mov	r2, sl
 8008114:	465b      	mov	r3, fp
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 fd6d 	bl	8000bf8 <__aeabi_uldivmod>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4613      	mov	r3, r2
 8008124:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800812c:	d308      	bcc.n	8008140 <UART_SetConfig+0x430>
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008134:	d204      	bcs.n	8008140 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6a3a      	ldr	r2, [r7, #32]
 800813c:	60da      	str	r2, [r3, #12]
 800813e:	e0ce      	b.n	80082de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008146:	e0ca      	b.n	80082de <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008150:	d166      	bne.n	8008220 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008152:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008156:	2b08      	cmp	r3, #8
 8008158:	d827      	bhi.n	80081aa <UART_SetConfig+0x49a>
 800815a:	a201      	add	r2, pc, #4	@ (adr r2, 8008160 <UART_SetConfig+0x450>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	08008185 	.word	0x08008185
 8008164:	0800818d 	.word	0x0800818d
 8008168:	08008195 	.word	0x08008195
 800816c:	080081ab 	.word	0x080081ab
 8008170:	0800819b 	.word	0x0800819b
 8008174:	080081ab 	.word	0x080081ab
 8008178:	080081ab 	.word	0x080081ab
 800817c:	080081ab 	.word	0x080081ab
 8008180:	080081a3 	.word	0x080081a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008184:	f7fd fa76 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8008188:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800818a:	e014      	b.n	80081b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800818c:	f7fd fa88 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8008190:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008192:	e010      	b.n	80081b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008194:	4b4e      	ldr	r3, [pc, #312]	@ (80082d0 <UART_SetConfig+0x5c0>)
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008198:	e00d      	b.n	80081b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800819a:	f7fd f9d3 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 800819e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081a0:	e009      	b.n	80081b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081a8:	e005      	b.n	80081b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 8090 	beq.w	80082de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c2:	4a44      	ldr	r2, [pc, #272]	@ (80082d4 <UART_SetConfig+0x5c4>)
 80081c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c8:	461a      	mov	r2, r3
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80081d0:	005a      	lsls	r2, r3, #1
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	085b      	lsrs	r3, r3, #1
 80081d8:	441a      	add	r2, r3
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d916      	bls.n	8008218 <UART_SetConfig+0x508>
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081f0:	d212      	bcs.n	8008218 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	f023 030f 	bic.w	r3, r3, #15
 80081fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	085b      	lsrs	r3, r3, #1
 8008200:	b29b      	uxth	r3, r3
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	b29a      	uxth	r2, r3
 8008208:	8bfb      	ldrh	r3, [r7, #30]
 800820a:	4313      	orrs	r3, r2
 800820c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	8bfa      	ldrh	r2, [r7, #30]
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	e062      	b.n	80082de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800821e:	e05e      	b.n	80082de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008220:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008224:	2b08      	cmp	r3, #8
 8008226:	d828      	bhi.n	800827a <UART_SetConfig+0x56a>
 8008228:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <UART_SetConfig+0x520>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008255 	.word	0x08008255
 8008234:	0800825d 	.word	0x0800825d
 8008238:	08008265 	.word	0x08008265
 800823c:	0800827b 	.word	0x0800827b
 8008240:	0800826b 	.word	0x0800826b
 8008244:	0800827b 	.word	0x0800827b
 8008248:	0800827b 	.word	0x0800827b
 800824c:	0800827b 	.word	0x0800827b
 8008250:	08008273 	.word	0x08008273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008254:	f7fd fa0e 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8008258:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800825a:	e014      	b.n	8008286 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800825c:	f7fd fa20 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8008260:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008262:	e010      	b.n	8008286 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008264:	4b1a      	ldr	r3, [pc, #104]	@ (80082d0 <UART_SetConfig+0x5c0>)
 8008266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008268:	e00d      	b.n	8008286 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826a:	f7fd f96b 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 800826e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008270:	e009      	b.n	8008286 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008276:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008278:	e005      	b.n	8008286 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008284:	bf00      	nop
    }

    if (pclk != 0U)
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	2b00      	cmp	r3, #0
 800828a:	d028      	beq.n	80082de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008290:	4a10      	ldr	r2, [pc, #64]	@ (80082d4 <UART_SetConfig+0x5c4>)
 8008292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008296:	461a      	mov	r2, r3
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	fbb3 f2f2 	udiv	r2, r3, r2
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	441a      	add	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	2b0f      	cmp	r3, #15
 80082b4:	d910      	bls.n	80082d8 <UART_SetConfig+0x5c8>
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082bc:	d20c      	bcs.n	80082d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60da      	str	r2, [r3, #12]
 80082c8:	e009      	b.n	80082de <UART_SetConfig+0x5ce>
 80082ca:	bf00      	nop
 80082cc:	40008000 	.word	0x40008000
 80082d0:	00f42400 	.word	0x00f42400
 80082d4:	0800cdbc 	.word	0x0800cdbc
      }
      else
      {
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2200      	movs	r2, #0
 80082f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2200      	movs	r2, #0
 80082f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3730      	adds	r7, #48	@ 0x30
 8008302:	46bd      	mov	sp, r7
 8008304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01a      	beq.n	800841e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008406:	d10a      	bne.n	800841e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
  }
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b098      	sub	sp, #96	@ 0x60
 8008450:	af02      	add	r7, sp, #8
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800845c:	f7fb f8b8 	bl	80035d0 <HAL_GetTick>
 8008460:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b08      	cmp	r3, #8
 800846e:	d12f      	bne.n	80084d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008470:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008478:	2200      	movs	r2, #0
 800847a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f88e 	bl	80085a0 <UART_WaitOnFlagUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d022      	beq.n	80084d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800849e:	653b      	str	r3, [r7, #80]	@ 0x50
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80084aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e6      	bne.n	800848a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e063      	b.n	8008598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d149      	bne.n	8008572 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084e6:	2200      	movs	r2, #0
 80084e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f857 	bl	80085a0 <UART_WaitOnFlagUntilTimeout>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d03c      	beq.n	8008572 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	623b      	str	r3, [r7, #32]
   return(result);
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800850c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008516:	633b      	str	r3, [r7, #48]	@ 0x30
 8008518:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800851c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e6      	bne.n	80084f8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	60fb      	str	r3, [r7, #12]
   return(result);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800854a:	61fa      	str	r2, [r7, #28]
 800854c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	69b9      	ldr	r1, [r7, #24]
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	617b      	str	r3, [r7, #20]
   return(result);
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e5      	bne.n	800852a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e012      	b.n	8008598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3758      	adds	r7, #88	@ 0x58
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	4613      	mov	r3, r2
 80085ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b0:	e049      	b.n	8008646 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b8:	d045      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ba:	f7fb f809 	bl	80035d0 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d302      	bcc.n	80085d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e048      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d031      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d110      	bne.n	8008612 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2208      	movs	r2, #8
 80085f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f95b 	bl	80088b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2208      	movs	r2, #8
 8008602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e029      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800861c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008620:	d111      	bne.n	8008646 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800862a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f941 	bl	80088b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2220      	movs	r2, #32
 8008636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e00f      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4013      	ands	r3, r2
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	bf0c      	ite	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	2300      	movne	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	429a      	cmp	r2, r3
 8008662:	d0a6      	beq.n	80085b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008670:	b480      	push	{r7}
 8008672:	b0a3      	sub	sp, #140	@ 0x8c
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	4613      	mov	r3, r2
 800867c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	88fa      	ldrh	r2, [r7, #6]
 8008690:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086a2:	d10e      	bne.n	80086c2 <UART_Start_Receive_IT+0x52>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <UART_Start_Receive_IT+0x48>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80086b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086b6:	e02d      	b.n	8008714 <UART_Start_Receive_IT+0xa4>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	22ff      	movs	r2, #255	@ 0xff
 80086bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086c0:	e028      	b.n	8008714 <UART_Start_Receive_IT+0xa4>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10d      	bne.n	80086e6 <UART_Start_Receive_IT+0x76>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <UART_Start_Receive_IT+0x6c>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	22ff      	movs	r2, #255	@ 0xff
 80086d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086da:	e01b      	b.n	8008714 <UART_Start_Receive_IT+0xa4>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	227f      	movs	r2, #127	@ 0x7f
 80086e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086e4:	e016      	b.n	8008714 <UART_Start_Receive_IT+0xa4>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086ee:	d10d      	bne.n	800870c <UART_Start_Receive_IT+0x9c>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <UART_Start_Receive_IT+0x92>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	227f      	movs	r2, #127	@ 0x7f
 80086fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008700:	e008      	b.n	8008714 <UART_Start_Receive_IT+0xa4>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	223f      	movs	r2, #63	@ 0x3f
 8008706:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800870a:	e003      	b.n	8008714 <UART_Start_Receive_IT+0xa4>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2222      	movs	r2, #34	@ 0x22
 8008720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008734:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008748:	673a      	str	r2, [r7, #112]	@ 0x70
 800874a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800874e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008756:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e3      	bne.n	8008724 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008764:	d14f      	bne.n	8008806 <UART_Start_Receive_IT+0x196>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800876c:	88fa      	ldrh	r2, [r7, #6]
 800876e:	429a      	cmp	r2, r3
 8008770:	d349      	bcc.n	8008806 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800877a:	d107      	bne.n	800878c <UART_Start_Receive_IT+0x11c>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4a47      	ldr	r2, [pc, #284]	@ (80088a4 <UART_Start_Receive_IT+0x234>)
 8008788:	675a      	str	r2, [r3, #116]	@ 0x74
 800878a:	e002      	b.n	8008792 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4a46      	ldr	r2, [pc, #280]	@ (80088a8 <UART_Start_Receive_IT+0x238>)
 8008790:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01a      	beq.n	80087d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80087bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80087ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e4      	bne.n	800879a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80087f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80087f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80087fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e5      	bne.n	80087d0 <UART_Start_Receive_IT+0x160>
 8008804:	e046      	b.n	8008894 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800880e:	d107      	bne.n	8008820 <UART_Start_Receive_IT+0x1b0>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d103      	bne.n	8008820 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4a24      	ldr	r2, [pc, #144]	@ (80088ac <UART_Start_Receive_IT+0x23c>)
 800881c:	675a      	str	r2, [r3, #116]	@ 0x74
 800881e:	e002      	b.n	8008826 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a23      	ldr	r2, [pc, #140]	@ (80088b0 <UART_Start_Receive_IT+0x240>)
 8008824:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d019      	beq.n	8008862 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800883c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008842:	677b      	str	r3, [r7, #116]	@ 0x74
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800884c:	637b      	str	r3, [r7, #52]	@ 0x34
 800884e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008852:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800885a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e6      	bne.n	800882e <UART_Start_Receive_IT+0x1be>
 8008860:	e018      	b.n	8008894 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	613b      	str	r3, [r7, #16]
   return(result);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f043 0320 	orr.w	r3, r3, #32
 8008876:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008880:	623b      	str	r3, [r7, #32]
 8008882:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	69f9      	ldr	r1, [r7, #28]
 8008886:	6a3a      	ldr	r2, [r7, #32]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	61bb      	str	r3, [r7, #24]
   return(result);
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e6      	bne.n	8008862 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	378c      	adds	r7, #140	@ 0x8c
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	080090e1 	.word	0x080090e1
 80088a8:	08008d7d 	.word	0x08008d7d
 80088ac:	08008bc1 	.word	0x08008bc1
 80088b0:	08008a05 	.word	0x08008a05

080088b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b095      	sub	sp, #84	@ 0x54
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088da:	643b      	str	r3, [r7, #64]	@ 0x40
 80088dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e6      	bne.n	80088bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3308      	adds	r3, #8
 80088f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008904:	f023 0301 	bic.w	r3, r3, #1
 8008908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3308      	adds	r3, #8
 8008910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e3      	bne.n	80088ee <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800892a:	2b01      	cmp	r3, #1
 800892c:	d118      	bne.n	8008960 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	60bb      	str	r3, [r7, #8]
   return(result);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f023 0310 	bic.w	r3, r3, #16
 8008942:	647b      	str	r3, [r7, #68]	@ 0x44
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800894c:	61bb      	str	r3, [r7, #24]
 800894e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	6979      	ldr	r1, [r7, #20]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	613b      	str	r3, [r7, #16]
   return(result);
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e6      	bne.n	800892e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2220      	movs	r2, #32
 8008964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008974:	bf00      	nop
 8008976:	3754      	adds	r7, #84	@ 0x54
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7ff f9a0 	bl	8007ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089c8:	61fb      	str	r3, [r7, #28]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	6979      	ldr	r1, [r7, #20]
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	613b      	str	r3, [r7, #16]
   return(result);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e6      	bne.n	80089b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff f96b 	bl	8007cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089fa:	bf00      	nop
 80089fc:	3720      	adds	r7, #32
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b09c      	sub	sp, #112	@ 0x70
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a1c:	2b22      	cmp	r3, #34	@ 0x22
 8008a1e:	f040 80be 	bne.w	8008b9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008a28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a30:	b2d9      	uxtb	r1, r3
 8008a32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a3c:	400a      	ands	r2, r1
 8008a3e:	b2d2      	uxtb	r2, r2
 8008a40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f040 80a3 	bne.w	8008bb2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab0:	f023 0301 	bic.w	r3, r3, #1
 8008ab4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008abe:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ac0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e5      	bne.n	8008a9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a34      	ldr	r2, [pc, #208]	@ (8008bbc <UART_RxISR_8BIT+0x1b8>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d01f      	beq.n	8008b30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d018      	beq.n	8008b30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	e853 3f00 	ldrex	r3, [r3]
 8008b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b12:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e6      	bne.n	8008afe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d12e      	bne.n	8008b96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0310 	bic.w	r3, r3, #16
 8008b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b5c:	61fb      	str	r3, [r7, #28]
 8008b5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	69b9      	ldr	r1, [r7, #24]
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	617b      	str	r3, [r7, #20]
   return(result);
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e6      	bne.n	8008b3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	f003 0310 	and.w	r3, r3, #16
 8008b7a:	2b10      	cmp	r3, #16
 8008b7c:	d103      	bne.n	8008b86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2210      	movs	r2, #16
 8008b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7ff f8b2 	bl	8007cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b94:	e00d      	b.n	8008bb2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7f9 f9e8 	bl	8001f6c <HAL_UART_RxCpltCallback>
}
 8008b9c:	e009      	b.n	8008bb2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	8b1b      	ldrh	r3, [r3, #24]
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0208 	orr.w	r2, r2, #8
 8008bae:	b292      	uxth	r2, r2
 8008bb0:	831a      	strh	r2, [r3, #24]
}
 8008bb2:	bf00      	nop
 8008bb4:	3770      	adds	r7, #112	@ 0x70
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	40008000 	.word	0x40008000

08008bc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b09c      	sub	sp, #112	@ 0x70
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bd8:	2b22      	cmp	r3, #34	@ 0x22
 8008bda:	f040 80be 	bne.w	8008d5a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008be4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008bee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008bf2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bfc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c02:	1c9a      	adds	r2, r3, #2
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f040 80a3 	bne.w	8008d6e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c48:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e6      	bne.n	8008c28 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	f023 0301 	bic.w	r3, r3, #1
 8008c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3308      	adds	r3, #8
 8008c78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e5      	bne.n	8008c5a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a34      	ldr	r2, [pc, #208]	@ (8008d78 <UART_RxISR_16BIT+0x1b8>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d01f      	beq.n	8008cec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d018      	beq.n	8008cec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cda:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e6      	bne.n	8008cba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d12e      	bne.n	8008d52 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f023 0310 	bic.w	r3, r3, #16
 8008d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6979      	ldr	r1, [r7, #20]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	613b      	str	r3, [r7, #16]
   return(result);
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e6      	bne.n	8008cfa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	f003 0310 	and.w	r3, r3, #16
 8008d36:	2b10      	cmp	r3, #16
 8008d38:	d103      	bne.n	8008d42 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2210      	movs	r2, #16
 8008d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7fe ffd4 	bl	8007cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d50:	e00d      	b.n	8008d6e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7f9 f90a 	bl	8001f6c <HAL_UART_RxCpltCallback>
}
 8008d58:	e009      	b.n	8008d6e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	8b1b      	ldrh	r3, [r3, #24]
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0208 	orr.w	r2, r2, #8
 8008d6a:	b292      	uxth	r2, r2
 8008d6c:	831a      	strh	r2, [r3, #24]
}
 8008d6e:	bf00      	nop
 8008d70:	3770      	adds	r7, #112	@ 0x70
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	40008000 	.word	0x40008000

08008d7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b0ac      	sub	sp, #176	@ 0xb0
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008db2:	2b22      	cmp	r3, #34	@ 0x22
 8008db4:	f040 8182 	bne.w	80090bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008dbe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dc2:	e125      	b.n	8009010 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008dca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008dd2:	b2d9      	uxtb	r1, r3
 8008dd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dde:	400a      	ands	r2, r1
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	3b01      	subs	r3, #1
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d053      	beq.n	8008ebe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d011      	beq.n	8008e46 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2201      	movs	r2, #1
 8008e34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e3c:	f043 0201 	orr.w	r2, r3, #1
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d011      	beq.n	8008e76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2202      	movs	r2, #2
 8008e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e6c:	f043 0204 	orr.w	r2, r3, #4
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e7a:	f003 0304 	and.w	r3, r3, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d011      	beq.n	8008ea6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2204      	movs	r2, #4
 8008e94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e9c:	f043 0202 	orr.w	r2, r3, #2
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d006      	beq.n	8008ebe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7fe ff17 	bl	8007ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f040 80a2 	bne.w	8009010 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ef0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008ef4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e4      	bne.n	8008ecc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3308      	adds	r3, #8
 8008f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f2a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008f2c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e1      	bne.n	8008f02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a60      	ldr	r2, [pc, #384]	@ (80090d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d021      	beq.n	8008fa0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01a      	beq.n	8008fa0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f8e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e4      	bne.n	8008f6a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d130      	bne.n	800900a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	f023 0310 	bic.w	r3, r3, #16
 8008fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e4      	bne.n	8008fae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f003 0310 	and.w	r3, r3, #16
 8008fee:	2b10      	cmp	r3, #16
 8008ff0:	d103      	bne.n	8008ffa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2210      	movs	r2, #16
 8008ff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7fe fe78 	bl	8007cf8 <HAL_UARTEx_RxEventCallback>
 8009008:	e002      	b.n	8009010 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7f8 ffae 	bl	8001f6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009010:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009014:	2b00      	cmp	r3, #0
 8009016:	d006      	beq.n	8009026 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	f47f aecf 	bne.w	8008dc4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800902c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009030:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009034:	2b00      	cmp	r3, #0
 8009036:	d04b      	beq.n	80090d0 <UART_RxISR_8BIT_FIFOEN+0x354>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800903e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009042:	429a      	cmp	r2, r3
 8009044:	d244      	bcs.n	80090d0 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3308      	adds	r3, #8
 800904c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	61fb      	str	r3, [r7, #28]
   return(result);
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800905c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3308      	adds	r3, #8
 8009066:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800906a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800906c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e3      	bne.n	8009046 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a16      	ldr	r2, [pc, #88]	@ (80090dc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009082:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	60bb      	str	r3, [r7, #8]
   return(result);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	f043 0320 	orr.w	r3, r3, #32
 8009098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090a6:	61bb      	str	r3, [r7, #24]
 80090a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6979      	ldr	r1, [r7, #20]
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	613b      	str	r3, [r7, #16]
   return(result);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e4      	bne.n	8009084 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090ba:	e009      	b.n	80090d0 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	8b1b      	ldrh	r3, [r3, #24]
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0208 	orr.w	r2, r2, #8
 80090cc:	b292      	uxth	r2, r2
 80090ce:	831a      	strh	r2, [r3, #24]
}
 80090d0:	bf00      	nop
 80090d2:	37b0      	adds	r7, #176	@ 0xb0
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40008000 	.word	0x40008000
 80090dc:	08008a05 	.word	0x08008a05

080090e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b0ae      	sub	sp, #184	@ 0xb8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009116:	2b22      	cmp	r3, #34	@ 0x22
 8009118:	f040 8186 	bne.w	8009428 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009122:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009126:	e129      	b.n	800937c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800912e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800913a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800913e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009142:	4013      	ands	r3, r2
 8009144:	b29a      	uxth	r2, r3
 8009146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800914a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009150:	1c9a      	adds	r2, r3, #2
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009172:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b00      	cmp	r3, #0
 800917c:	d053      	beq.n	8009226 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800917e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d011      	beq.n	80091ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800918a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800918e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2201      	movs	r2, #1
 800919c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a4:	f043 0201 	orr.w	r2, r3, #1
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d011      	beq.n	80091de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80091ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00b      	beq.n	80091de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2202      	movs	r2, #2
 80091cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d4:	f043 0204 	orr.w	r2, r3, #4
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d011      	beq.n	800920e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80091ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2204      	movs	r2, #4
 80091fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009204:	f043 0202 	orr.w	r2, r3, #2
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009214:	2b00      	cmp	r3, #0
 8009216:	d006      	beq.n	8009226 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7fe fd63 	bl	8007ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	f040 80a4 	bne.w	800937c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009242:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009248:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	461a      	mov	r2, r3
 8009252:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800925a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800925e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e2      	bne.n	8009234 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3308      	adds	r3, #8
 8009274:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800927e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3308      	adds	r3, #8
 8009292:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009296:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009298:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800929c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e1      	bne.n	800926e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a60      	ldr	r2, [pc, #384]	@ (8009444 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d021      	beq.n	800930c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01a      	beq.n	800930c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80092ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80092f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e4      	bne.n	80092d6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d130      	bne.n	8009376 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800932a:	f023 0310 	bic.w	r3, r3, #16
 800932e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800933c:	647b      	str	r3, [r7, #68]	@ 0x44
 800933e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800934a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e4      	bne.n	800931a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f003 0310 	and.w	r3, r3, #16
 800935a:	2b10      	cmp	r3, #16
 800935c:	d103      	bne.n	8009366 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2210      	movs	r2, #16
 8009364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7fe fcc2 	bl	8007cf8 <HAL_UARTEx_RxEventCallback>
 8009374:	e002      	b.n	800937c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7f8 fdf8 	bl	8001f6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800937c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009380:	2b00      	cmp	r3, #0
 8009382:	d006      	beq.n	8009392 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b00      	cmp	r3, #0
 800938e:	f47f aecb 	bne.w	8009128 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009398:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800939c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d04b      	beq.n	800943c <UART_RxISR_16BIT_FIFOEN+0x35c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d244      	bcs.n	800943c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3308      	adds	r3, #8
 80093b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	623b      	str	r3, [r7, #32]
   return(result);
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3308      	adds	r3, #8
 80093d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80093d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80093d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e3      	bne.n	80093b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a16      	ldr	r2, [pc, #88]	@ (8009448 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80093ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	e853 3f00 	ldrex	r3, [r3]
 80093fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f043 0320 	orr.w	r3, r3, #32
 8009404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009412:	61fb      	str	r3, [r7, #28]
 8009414:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	69b9      	ldr	r1, [r7, #24]
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	617b      	str	r3, [r7, #20]
   return(result);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e4      	bne.n	80093f0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009426:	e009      	b.n	800943c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	8b1b      	ldrh	r3, [r3, #24]
 800942e:	b29a      	uxth	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 0208 	orr.w	r2, r2, #8
 8009438:	b292      	uxth	r2, r2
 800943a:	831a      	strh	r2, [r3, #24]
}
 800943c:	bf00      	nop
 800943e:	37b8      	adds	r7, #184	@ 0xb8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	40008000 	.word	0x40008000
 8009448:	08008bc1 	.word	0x08008bc1

0800944c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009496:	2b01      	cmp	r3, #1
 8009498:	d101      	bne.n	800949e <HAL_UARTEx_DisableFifoMode+0x16>
 800949a:	2302      	movs	r3, #2
 800949c:	e027      	b.n	80094ee <HAL_UARTEx_DisableFifoMode+0x66>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2224      	movs	r2, #36	@ 0x24
 80094aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0201 	bic.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2220      	movs	r2, #32
 80094e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800950a:	2b01      	cmp	r3, #1
 800950c:	d101      	bne.n	8009512 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800950e:	2302      	movs	r3, #2
 8009510:	e02d      	b.n	800956e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2224      	movs	r2, #36	@ 0x24
 800951e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0201 	bic.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f850 	bl	80095f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2220      	movs	r2, #32
 8009560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009586:	2b01      	cmp	r3, #1
 8009588:	d101      	bne.n	800958e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800958a:	2302      	movs	r3, #2
 800958c:	e02d      	b.n	80095ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2224      	movs	r2, #36	@ 0x24
 800959a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0201 	bic.w	r2, r2, #1
 80095b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f812 	bl	80095f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2220      	movs	r2, #32
 80095dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009600:	2b00      	cmp	r3, #0
 8009602:	d108      	bne.n	8009616 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009614:	e031      	b.n	800967a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009616:	2308      	movs	r3, #8
 8009618:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800961a:	2308      	movs	r3, #8
 800961c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	0e5b      	lsrs	r3, r3, #25
 8009626:	b2db      	uxtb	r3, r3
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	0f5b      	lsrs	r3, r3, #29
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	7b3a      	ldrb	r2, [r7, #12]
 8009642:	4911      	ldr	r1, [pc, #68]	@ (8009688 <UARTEx_SetNbDataToProcess+0x94>)
 8009644:	5c8a      	ldrb	r2, [r1, r2]
 8009646:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800964a:	7b3a      	ldrb	r2, [r7, #12]
 800964c:	490f      	ldr	r1, [pc, #60]	@ (800968c <UARTEx_SetNbDataToProcess+0x98>)
 800964e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009650:	fb93 f3f2 	sdiv	r3, r3, r2
 8009654:	b29a      	uxth	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	7b7a      	ldrb	r2, [r7, #13]
 8009660:	4909      	ldr	r1, [pc, #36]	@ (8009688 <UARTEx_SetNbDataToProcess+0x94>)
 8009662:	5c8a      	ldrb	r2, [r1, r2]
 8009664:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009668:	7b7a      	ldrb	r2, [r7, #13]
 800966a:	4908      	ldr	r1, [pc, #32]	@ (800968c <UARTEx_SetNbDataToProcess+0x98>)
 800966c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800966e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009672:	b29a      	uxth	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800967a:	bf00      	nop
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	0800cdd4 	.word	0x0800cdd4
 800968c:	0800cddc 	.word	0x0800cddc

08009690 <atoi>:
 8009690:	220a      	movs	r2, #10
 8009692:	2100      	movs	r1, #0
 8009694:	f000 b87a 	b.w	800978c <strtol>

08009698 <_strtol_l.constprop.0>:
 8009698:	2b24      	cmp	r3, #36	@ 0x24
 800969a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800969e:	4686      	mov	lr, r0
 80096a0:	4690      	mov	r8, r2
 80096a2:	d801      	bhi.n	80096a8 <_strtol_l.constprop.0+0x10>
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d106      	bne.n	80096b6 <_strtol_l.constprop.0+0x1e>
 80096a8:	f000 ff4e 	bl	800a548 <__errno>
 80096ac:	2316      	movs	r3, #22
 80096ae:	6003      	str	r3, [r0, #0]
 80096b0:	2000      	movs	r0, #0
 80096b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b6:	4834      	ldr	r0, [pc, #208]	@ (8009788 <_strtol_l.constprop.0+0xf0>)
 80096b8:	460d      	mov	r5, r1
 80096ba:	462a      	mov	r2, r5
 80096bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096c0:	5d06      	ldrb	r6, [r0, r4]
 80096c2:	f016 0608 	ands.w	r6, r6, #8
 80096c6:	d1f8      	bne.n	80096ba <_strtol_l.constprop.0+0x22>
 80096c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80096ca:	d12d      	bne.n	8009728 <_strtol_l.constprop.0+0x90>
 80096cc:	782c      	ldrb	r4, [r5, #0]
 80096ce:	2601      	movs	r6, #1
 80096d0:	1c95      	adds	r5, r2, #2
 80096d2:	f033 0210 	bics.w	r2, r3, #16
 80096d6:	d109      	bne.n	80096ec <_strtol_l.constprop.0+0x54>
 80096d8:	2c30      	cmp	r4, #48	@ 0x30
 80096da:	d12a      	bne.n	8009732 <_strtol_l.constprop.0+0x9a>
 80096dc:	782a      	ldrb	r2, [r5, #0]
 80096de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096e2:	2a58      	cmp	r2, #88	@ 0x58
 80096e4:	d125      	bne.n	8009732 <_strtol_l.constprop.0+0x9a>
 80096e6:	786c      	ldrb	r4, [r5, #1]
 80096e8:	2310      	movs	r3, #16
 80096ea:	3502      	adds	r5, #2
 80096ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80096f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80096f4:	2200      	movs	r2, #0
 80096f6:	fbbc f9f3 	udiv	r9, ip, r3
 80096fa:	4610      	mov	r0, r2
 80096fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8009700:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009704:	2f09      	cmp	r7, #9
 8009706:	d81b      	bhi.n	8009740 <_strtol_l.constprop.0+0xa8>
 8009708:	463c      	mov	r4, r7
 800970a:	42a3      	cmp	r3, r4
 800970c:	dd27      	ble.n	800975e <_strtol_l.constprop.0+0xc6>
 800970e:	1c57      	adds	r7, r2, #1
 8009710:	d007      	beq.n	8009722 <_strtol_l.constprop.0+0x8a>
 8009712:	4581      	cmp	r9, r0
 8009714:	d320      	bcc.n	8009758 <_strtol_l.constprop.0+0xc0>
 8009716:	d101      	bne.n	800971c <_strtol_l.constprop.0+0x84>
 8009718:	45a2      	cmp	sl, r4
 800971a:	db1d      	blt.n	8009758 <_strtol_l.constprop.0+0xc0>
 800971c:	fb00 4003 	mla	r0, r0, r3, r4
 8009720:	2201      	movs	r2, #1
 8009722:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009726:	e7eb      	b.n	8009700 <_strtol_l.constprop.0+0x68>
 8009728:	2c2b      	cmp	r4, #43	@ 0x2b
 800972a:	bf04      	itt	eq
 800972c:	782c      	ldrbeq	r4, [r5, #0]
 800972e:	1c95      	addeq	r5, r2, #2
 8009730:	e7cf      	b.n	80096d2 <_strtol_l.constprop.0+0x3a>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1da      	bne.n	80096ec <_strtol_l.constprop.0+0x54>
 8009736:	2c30      	cmp	r4, #48	@ 0x30
 8009738:	bf0c      	ite	eq
 800973a:	2308      	moveq	r3, #8
 800973c:	230a      	movne	r3, #10
 800973e:	e7d5      	b.n	80096ec <_strtol_l.constprop.0+0x54>
 8009740:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009744:	2f19      	cmp	r7, #25
 8009746:	d801      	bhi.n	800974c <_strtol_l.constprop.0+0xb4>
 8009748:	3c37      	subs	r4, #55	@ 0x37
 800974a:	e7de      	b.n	800970a <_strtol_l.constprop.0+0x72>
 800974c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009750:	2f19      	cmp	r7, #25
 8009752:	d804      	bhi.n	800975e <_strtol_l.constprop.0+0xc6>
 8009754:	3c57      	subs	r4, #87	@ 0x57
 8009756:	e7d8      	b.n	800970a <_strtol_l.constprop.0+0x72>
 8009758:	f04f 32ff 	mov.w	r2, #4294967295
 800975c:	e7e1      	b.n	8009722 <_strtol_l.constprop.0+0x8a>
 800975e:	1c53      	adds	r3, r2, #1
 8009760:	d108      	bne.n	8009774 <_strtol_l.constprop.0+0xdc>
 8009762:	2322      	movs	r3, #34	@ 0x22
 8009764:	f8ce 3000 	str.w	r3, [lr]
 8009768:	4660      	mov	r0, ip
 800976a:	f1b8 0f00 	cmp.w	r8, #0
 800976e:	d0a0      	beq.n	80096b2 <_strtol_l.constprop.0+0x1a>
 8009770:	1e69      	subs	r1, r5, #1
 8009772:	e006      	b.n	8009782 <_strtol_l.constprop.0+0xea>
 8009774:	b106      	cbz	r6, 8009778 <_strtol_l.constprop.0+0xe0>
 8009776:	4240      	negs	r0, r0
 8009778:	f1b8 0f00 	cmp.w	r8, #0
 800977c:	d099      	beq.n	80096b2 <_strtol_l.constprop.0+0x1a>
 800977e:	2a00      	cmp	r2, #0
 8009780:	d1f6      	bne.n	8009770 <_strtol_l.constprop.0+0xd8>
 8009782:	f8c8 1000 	str.w	r1, [r8]
 8009786:	e794      	b.n	80096b2 <_strtol_l.constprop.0+0x1a>
 8009788:	0800cde5 	.word	0x0800cde5

0800978c <strtol>:
 800978c:	4613      	mov	r3, r2
 800978e:	460a      	mov	r2, r1
 8009790:	4601      	mov	r1, r0
 8009792:	4802      	ldr	r0, [pc, #8]	@ (800979c <strtol+0x10>)
 8009794:	6800      	ldr	r0, [r0, #0]
 8009796:	f7ff bf7f 	b.w	8009698 <_strtol_l.constprop.0>
 800979a:	bf00      	nop
 800979c:	20000098 	.word	0x20000098

080097a0 <__cvt>:
 80097a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	ec57 6b10 	vmov	r6, r7, d0
 80097a8:	2f00      	cmp	r7, #0
 80097aa:	460c      	mov	r4, r1
 80097ac:	4619      	mov	r1, r3
 80097ae:	463b      	mov	r3, r7
 80097b0:	bfbb      	ittet	lt
 80097b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80097b6:	461f      	movlt	r7, r3
 80097b8:	2300      	movge	r3, #0
 80097ba:	232d      	movlt	r3, #45	@ 0x2d
 80097bc:	700b      	strb	r3, [r1, #0]
 80097be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80097c4:	4691      	mov	r9, r2
 80097c6:	f023 0820 	bic.w	r8, r3, #32
 80097ca:	bfbc      	itt	lt
 80097cc:	4632      	movlt	r2, r6
 80097ce:	4616      	movlt	r6, r2
 80097d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097d4:	d005      	beq.n	80097e2 <__cvt+0x42>
 80097d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80097da:	d100      	bne.n	80097de <__cvt+0x3e>
 80097dc:	3401      	adds	r4, #1
 80097de:	2102      	movs	r1, #2
 80097e0:	e000      	b.n	80097e4 <__cvt+0x44>
 80097e2:	2103      	movs	r1, #3
 80097e4:	ab03      	add	r3, sp, #12
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	ab02      	add	r3, sp, #8
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	ec47 6b10 	vmov	d0, r6, r7
 80097f0:	4653      	mov	r3, sl
 80097f2:	4622      	mov	r2, r4
 80097f4:	f000 ff68 	bl	800a6c8 <_dtoa_r>
 80097f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80097fc:	4605      	mov	r5, r0
 80097fe:	d119      	bne.n	8009834 <__cvt+0x94>
 8009800:	f019 0f01 	tst.w	r9, #1
 8009804:	d00e      	beq.n	8009824 <__cvt+0x84>
 8009806:	eb00 0904 	add.w	r9, r0, r4
 800980a:	2200      	movs	r2, #0
 800980c:	2300      	movs	r3, #0
 800980e:	4630      	mov	r0, r6
 8009810:	4639      	mov	r1, r7
 8009812:	f7f7 f981 	bl	8000b18 <__aeabi_dcmpeq>
 8009816:	b108      	cbz	r0, 800981c <__cvt+0x7c>
 8009818:	f8cd 900c 	str.w	r9, [sp, #12]
 800981c:	2230      	movs	r2, #48	@ 0x30
 800981e:	9b03      	ldr	r3, [sp, #12]
 8009820:	454b      	cmp	r3, r9
 8009822:	d31e      	bcc.n	8009862 <__cvt+0xc2>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009828:	1b5b      	subs	r3, r3, r5
 800982a:	4628      	mov	r0, r5
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	b004      	add	sp, #16
 8009830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009834:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009838:	eb00 0904 	add.w	r9, r0, r4
 800983c:	d1e5      	bne.n	800980a <__cvt+0x6a>
 800983e:	7803      	ldrb	r3, [r0, #0]
 8009840:	2b30      	cmp	r3, #48	@ 0x30
 8009842:	d10a      	bne.n	800985a <__cvt+0xba>
 8009844:	2200      	movs	r2, #0
 8009846:	2300      	movs	r3, #0
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	f7f7 f964 	bl	8000b18 <__aeabi_dcmpeq>
 8009850:	b918      	cbnz	r0, 800985a <__cvt+0xba>
 8009852:	f1c4 0401 	rsb	r4, r4, #1
 8009856:	f8ca 4000 	str.w	r4, [sl]
 800985a:	f8da 3000 	ldr.w	r3, [sl]
 800985e:	4499      	add	r9, r3
 8009860:	e7d3      	b.n	800980a <__cvt+0x6a>
 8009862:	1c59      	adds	r1, r3, #1
 8009864:	9103      	str	r1, [sp, #12]
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e7d9      	b.n	800981e <__cvt+0x7e>

0800986a <__exponent>:
 800986a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800986c:	2900      	cmp	r1, #0
 800986e:	bfba      	itte	lt
 8009870:	4249      	neglt	r1, r1
 8009872:	232d      	movlt	r3, #45	@ 0x2d
 8009874:	232b      	movge	r3, #43	@ 0x2b
 8009876:	2909      	cmp	r1, #9
 8009878:	7002      	strb	r2, [r0, #0]
 800987a:	7043      	strb	r3, [r0, #1]
 800987c:	dd29      	ble.n	80098d2 <__exponent+0x68>
 800987e:	f10d 0307 	add.w	r3, sp, #7
 8009882:	461d      	mov	r5, r3
 8009884:	270a      	movs	r7, #10
 8009886:	461a      	mov	r2, r3
 8009888:	fbb1 f6f7 	udiv	r6, r1, r7
 800988c:	fb07 1416 	mls	r4, r7, r6, r1
 8009890:	3430      	adds	r4, #48	@ 0x30
 8009892:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009896:	460c      	mov	r4, r1
 8009898:	2c63      	cmp	r4, #99	@ 0x63
 800989a:	f103 33ff 	add.w	r3, r3, #4294967295
 800989e:	4631      	mov	r1, r6
 80098a0:	dcf1      	bgt.n	8009886 <__exponent+0x1c>
 80098a2:	3130      	adds	r1, #48	@ 0x30
 80098a4:	1e94      	subs	r4, r2, #2
 80098a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098aa:	1c41      	adds	r1, r0, #1
 80098ac:	4623      	mov	r3, r4
 80098ae:	42ab      	cmp	r3, r5
 80098b0:	d30a      	bcc.n	80098c8 <__exponent+0x5e>
 80098b2:	f10d 0309 	add.w	r3, sp, #9
 80098b6:	1a9b      	subs	r3, r3, r2
 80098b8:	42ac      	cmp	r4, r5
 80098ba:	bf88      	it	hi
 80098bc:	2300      	movhi	r3, #0
 80098be:	3302      	adds	r3, #2
 80098c0:	4403      	add	r3, r0
 80098c2:	1a18      	subs	r0, r3, r0
 80098c4:	b003      	add	sp, #12
 80098c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80098cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80098d0:	e7ed      	b.n	80098ae <__exponent+0x44>
 80098d2:	2330      	movs	r3, #48	@ 0x30
 80098d4:	3130      	adds	r1, #48	@ 0x30
 80098d6:	7083      	strb	r3, [r0, #2]
 80098d8:	70c1      	strb	r1, [r0, #3]
 80098da:	1d03      	adds	r3, r0, #4
 80098dc:	e7f1      	b.n	80098c2 <__exponent+0x58>
	...

080098e0 <_printf_float>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	b08d      	sub	sp, #52	@ 0x34
 80098e6:	460c      	mov	r4, r1
 80098e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80098ec:	4616      	mov	r6, r2
 80098ee:	461f      	mov	r7, r3
 80098f0:	4605      	mov	r5, r0
 80098f2:	f000 fddf 	bl	800a4b4 <_localeconv_r>
 80098f6:	6803      	ldr	r3, [r0, #0]
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7f6 fce0 	bl	80002c0 <strlen>
 8009900:	2300      	movs	r3, #0
 8009902:	930a      	str	r3, [sp, #40]	@ 0x28
 8009904:	f8d8 3000 	ldr.w	r3, [r8]
 8009908:	9005      	str	r0, [sp, #20]
 800990a:	3307      	adds	r3, #7
 800990c:	f023 0307 	bic.w	r3, r3, #7
 8009910:	f103 0208 	add.w	r2, r3, #8
 8009914:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009918:	f8d4 b000 	ldr.w	fp, [r4]
 800991c:	f8c8 2000 	str.w	r2, [r8]
 8009920:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009924:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009928:	9307      	str	r3, [sp, #28]
 800992a:	f8cd 8018 	str.w	r8, [sp, #24]
 800992e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009936:	4b9c      	ldr	r3, [pc, #624]	@ (8009ba8 <_printf_float+0x2c8>)
 8009938:	f04f 32ff 	mov.w	r2, #4294967295
 800993c:	f7f7 f91e 	bl	8000b7c <__aeabi_dcmpun>
 8009940:	bb70      	cbnz	r0, 80099a0 <_printf_float+0xc0>
 8009942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009946:	4b98      	ldr	r3, [pc, #608]	@ (8009ba8 <_printf_float+0x2c8>)
 8009948:	f04f 32ff 	mov.w	r2, #4294967295
 800994c:	f7f7 f8f8 	bl	8000b40 <__aeabi_dcmple>
 8009950:	bb30      	cbnz	r0, 80099a0 <_printf_float+0xc0>
 8009952:	2200      	movs	r2, #0
 8009954:	2300      	movs	r3, #0
 8009956:	4640      	mov	r0, r8
 8009958:	4649      	mov	r1, r9
 800995a:	f7f7 f8e7 	bl	8000b2c <__aeabi_dcmplt>
 800995e:	b110      	cbz	r0, 8009966 <_printf_float+0x86>
 8009960:	232d      	movs	r3, #45	@ 0x2d
 8009962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009966:	4a91      	ldr	r2, [pc, #580]	@ (8009bac <_printf_float+0x2cc>)
 8009968:	4b91      	ldr	r3, [pc, #580]	@ (8009bb0 <_printf_float+0x2d0>)
 800996a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800996e:	bf94      	ite	ls
 8009970:	4690      	movls	r8, r2
 8009972:	4698      	movhi	r8, r3
 8009974:	2303      	movs	r3, #3
 8009976:	6123      	str	r3, [r4, #16]
 8009978:	f02b 0304 	bic.w	r3, fp, #4
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	f04f 0900 	mov.w	r9, #0
 8009982:	9700      	str	r7, [sp, #0]
 8009984:	4633      	mov	r3, r6
 8009986:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009988:	4621      	mov	r1, r4
 800998a:	4628      	mov	r0, r5
 800998c:	f000 f9d2 	bl	8009d34 <_printf_common>
 8009990:	3001      	adds	r0, #1
 8009992:	f040 808d 	bne.w	8009ab0 <_printf_float+0x1d0>
 8009996:	f04f 30ff 	mov.w	r0, #4294967295
 800999a:	b00d      	add	sp, #52	@ 0x34
 800999c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a0:	4642      	mov	r2, r8
 80099a2:	464b      	mov	r3, r9
 80099a4:	4640      	mov	r0, r8
 80099a6:	4649      	mov	r1, r9
 80099a8:	f7f7 f8e8 	bl	8000b7c <__aeabi_dcmpun>
 80099ac:	b140      	cbz	r0, 80099c0 <_printf_float+0xe0>
 80099ae:	464b      	mov	r3, r9
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfbc      	itt	lt
 80099b4:	232d      	movlt	r3, #45	@ 0x2d
 80099b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80099ba:	4a7e      	ldr	r2, [pc, #504]	@ (8009bb4 <_printf_float+0x2d4>)
 80099bc:	4b7e      	ldr	r3, [pc, #504]	@ (8009bb8 <_printf_float+0x2d8>)
 80099be:	e7d4      	b.n	800996a <_printf_float+0x8a>
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80099c6:	9206      	str	r2, [sp, #24]
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	d13b      	bne.n	8009a44 <_printf_float+0x164>
 80099cc:	2306      	movs	r3, #6
 80099ce:	6063      	str	r3, [r4, #4]
 80099d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80099d4:	2300      	movs	r3, #0
 80099d6:	6022      	str	r2, [r4, #0]
 80099d8:	9303      	str	r3, [sp, #12]
 80099da:	ab0a      	add	r3, sp, #40	@ 0x28
 80099dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80099e0:	ab09      	add	r3, sp, #36	@ 0x24
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	6861      	ldr	r1, [r4, #4]
 80099e6:	ec49 8b10 	vmov	d0, r8, r9
 80099ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7ff fed6 	bl	80097a0 <__cvt>
 80099f4:	9b06      	ldr	r3, [sp, #24]
 80099f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099f8:	2b47      	cmp	r3, #71	@ 0x47
 80099fa:	4680      	mov	r8, r0
 80099fc:	d129      	bne.n	8009a52 <_printf_float+0x172>
 80099fe:	1cc8      	adds	r0, r1, #3
 8009a00:	db02      	blt.n	8009a08 <_printf_float+0x128>
 8009a02:	6863      	ldr	r3, [r4, #4]
 8009a04:	4299      	cmp	r1, r3
 8009a06:	dd41      	ble.n	8009a8c <_printf_float+0x1ac>
 8009a08:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a0c:	fa5f fa8a 	uxtb.w	sl, sl
 8009a10:	3901      	subs	r1, #1
 8009a12:	4652      	mov	r2, sl
 8009a14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a18:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a1a:	f7ff ff26 	bl	800986a <__exponent>
 8009a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a20:	1813      	adds	r3, r2, r0
 8009a22:	2a01      	cmp	r2, #1
 8009a24:	4681      	mov	r9, r0
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	dc02      	bgt.n	8009a30 <_printf_float+0x150>
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	07d2      	lsls	r2, r2, #31
 8009a2e:	d501      	bpl.n	8009a34 <_printf_float+0x154>
 8009a30:	3301      	adds	r3, #1
 8009a32:	6123      	str	r3, [r4, #16]
 8009a34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0a2      	beq.n	8009982 <_printf_float+0xa2>
 8009a3c:	232d      	movs	r3, #45	@ 0x2d
 8009a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a42:	e79e      	b.n	8009982 <_printf_float+0xa2>
 8009a44:	9a06      	ldr	r2, [sp, #24]
 8009a46:	2a47      	cmp	r2, #71	@ 0x47
 8009a48:	d1c2      	bne.n	80099d0 <_printf_float+0xf0>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1c0      	bne.n	80099d0 <_printf_float+0xf0>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e7bd      	b.n	80099ce <_printf_float+0xee>
 8009a52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a56:	d9db      	bls.n	8009a10 <_printf_float+0x130>
 8009a58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a5c:	d118      	bne.n	8009a90 <_printf_float+0x1b0>
 8009a5e:	2900      	cmp	r1, #0
 8009a60:	6863      	ldr	r3, [r4, #4]
 8009a62:	dd0b      	ble.n	8009a7c <_printf_float+0x19c>
 8009a64:	6121      	str	r1, [r4, #16]
 8009a66:	b913      	cbnz	r3, 8009a6e <_printf_float+0x18e>
 8009a68:	6822      	ldr	r2, [r4, #0]
 8009a6a:	07d0      	lsls	r0, r2, #31
 8009a6c:	d502      	bpl.n	8009a74 <_printf_float+0x194>
 8009a6e:	3301      	adds	r3, #1
 8009a70:	440b      	add	r3, r1
 8009a72:	6123      	str	r3, [r4, #16]
 8009a74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a76:	f04f 0900 	mov.w	r9, #0
 8009a7a:	e7db      	b.n	8009a34 <_printf_float+0x154>
 8009a7c:	b913      	cbnz	r3, 8009a84 <_printf_float+0x1a4>
 8009a7e:	6822      	ldr	r2, [r4, #0]
 8009a80:	07d2      	lsls	r2, r2, #31
 8009a82:	d501      	bpl.n	8009a88 <_printf_float+0x1a8>
 8009a84:	3302      	adds	r3, #2
 8009a86:	e7f4      	b.n	8009a72 <_printf_float+0x192>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e7f2      	b.n	8009a72 <_printf_float+0x192>
 8009a8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a92:	4299      	cmp	r1, r3
 8009a94:	db05      	blt.n	8009aa2 <_printf_float+0x1c2>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	6121      	str	r1, [r4, #16]
 8009a9a:	07d8      	lsls	r0, r3, #31
 8009a9c:	d5ea      	bpl.n	8009a74 <_printf_float+0x194>
 8009a9e:	1c4b      	adds	r3, r1, #1
 8009aa0:	e7e7      	b.n	8009a72 <_printf_float+0x192>
 8009aa2:	2900      	cmp	r1, #0
 8009aa4:	bfd4      	ite	le
 8009aa6:	f1c1 0202 	rsble	r2, r1, #2
 8009aaa:	2201      	movgt	r2, #1
 8009aac:	4413      	add	r3, r2
 8009aae:	e7e0      	b.n	8009a72 <_printf_float+0x192>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	055a      	lsls	r2, r3, #21
 8009ab4:	d407      	bmi.n	8009ac6 <_printf_float+0x1e6>
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	4642      	mov	r2, r8
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d12b      	bne.n	8009b1c <_printf_float+0x23c>
 8009ac4:	e767      	b.n	8009996 <_printf_float+0xb6>
 8009ac6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009aca:	f240 80dd 	bls.w	8009c88 <_printf_float+0x3a8>
 8009ace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f7f7 f81f 	bl	8000b18 <__aeabi_dcmpeq>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d033      	beq.n	8009b46 <_printf_float+0x266>
 8009ade:	4a37      	ldr	r2, [pc, #220]	@ (8009bbc <_printf_float+0x2dc>)
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	47b8      	blx	r7
 8009ae8:	3001      	adds	r0, #1
 8009aea:	f43f af54 	beq.w	8009996 <_printf_float+0xb6>
 8009aee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009af2:	4543      	cmp	r3, r8
 8009af4:	db02      	blt.n	8009afc <_printf_float+0x21c>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	07d8      	lsls	r0, r3, #31
 8009afa:	d50f      	bpl.n	8009b1c <_printf_float+0x23c>
 8009afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b00:	4631      	mov	r1, r6
 8009b02:	4628      	mov	r0, r5
 8009b04:	47b8      	blx	r7
 8009b06:	3001      	adds	r0, #1
 8009b08:	f43f af45 	beq.w	8009996 <_printf_float+0xb6>
 8009b0c:	f04f 0900 	mov.w	r9, #0
 8009b10:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b14:	f104 0a1a 	add.w	sl, r4, #26
 8009b18:	45c8      	cmp	r8, r9
 8009b1a:	dc09      	bgt.n	8009b30 <_printf_float+0x250>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	079b      	lsls	r3, r3, #30
 8009b20:	f100 8103 	bmi.w	8009d2a <_printf_float+0x44a>
 8009b24:	68e0      	ldr	r0, [r4, #12]
 8009b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b28:	4298      	cmp	r0, r3
 8009b2a:	bfb8      	it	lt
 8009b2c:	4618      	movlt	r0, r3
 8009b2e:	e734      	b.n	800999a <_printf_float+0xba>
 8009b30:	2301      	movs	r3, #1
 8009b32:	4652      	mov	r2, sl
 8009b34:	4631      	mov	r1, r6
 8009b36:	4628      	mov	r0, r5
 8009b38:	47b8      	blx	r7
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	f43f af2b 	beq.w	8009996 <_printf_float+0xb6>
 8009b40:	f109 0901 	add.w	r9, r9, #1
 8009b44:	e7e8      	b.n	8009b18 <_printf_float+0x238>
 8009b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	dc39      	bgt.n	8009bc0 <_printf_float+0x2e0>
 8009b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8009bbc <_printf_float+0x2dc>)
 8009b4e:	2301      	movs	r3, #1
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f af1d 	beq.w	8009996 <_printf_float+0xb6>
 8009b5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b60:	ea59 0303 	orrs.w	r3, r9, r3
 8009b64:	d102      	bne.n	8009b6c <_printf_float+0x28c>
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	07d9      	lsls	r1, r3, #31
 8009b6a:	d5d7      	bpl.n	8009b1c <_printf_float+0x23c>
 8009b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f af0d 	beq.w	8009996 <_printf_float+0xb6>
 8009b7c:	f04f 0a00 	mov.w	sl, #0
 8009b80:	f104 0b1a 	add.w	fp, r4, #26
 8009b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b86:	425b      	negs	r3, r3
 8009b88:	4553      	cmp	r3, sl
 8009b8a:	dc01      	bgt.n	8009b90 <_printf_float+0x2b0>
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	e793      	b.n	8009ab8 <_printf_float+0x1d8>
 8009b90:	2301      	movs	r3, #1
 8009b92:	465a      	mov	r2, fp
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f aefb 	beq.w	8009996 <_printf_float+0xb6>
 8009ba0:	f10a 0a01 	add.w	sl, sl, #1
 8009ba4:	e7ee      	b.n	8009b84 <_printf_float+0x2a4>
 8009ba6:	bf00      	nop
 8009ba8:	7fefffff 	.word	0x7fefffff
 8009bac:	0800cee5 	.word	0x0800cee5
 8009bb0:	0800cee9 	.word	0x0800cee9
 8009bb4:	0800ceed 	.word	0x0800ceed
 8009bb8:	0800cef1 	.word	0x0800cef1
 8009bbc:	0800cef5 	.word	0x0800cef5
 8009bc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009bc6:	4553      	cmp	r3, sl
 8009bc8:	bfa8      	it	ge
 8009bca:	4653      	movge	r3, sl
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	4699      	mov	r9, r3
 8009bd0:	dc36      	bgt.n	8009c40 <_printf_float+0x360>
 8009bd2:	f04f 0b00 	mov.w	fp, #0
 8009bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bda:	f104 021a 	add.w	r2, r4, #26
 8009bde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009be0:	9306      	str	r3, [sp, #24]
 8009be2:	eba3 0309 	sub.w	r3, r3, r9
 8009be6:	455b      	cmp	r3, fp
 8009be8:	dc31      	bgt.n	8009c4e <_printf_float+0x36e>
 8009bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bec:	459a      	cmp	sl, r3
 8009bee:	dc3a      	bgt.n	8009c66 <_printf_float+0x386>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	07da      	lsls	r2, r3, #31
 8009bf4:	d437      	bmi.n	8009c66 <_printf_float+0x386>
 8009bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf8:	ebaa 0903 	sub.w	r9, sl, r3
 8009bfc:	9b06      	ldr	r3, [sp, #24]
 8009bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8009c02:	4599      	cmp	r9, r3
 8009c04:	bfa8      	it	ge
 8009c06:	4699      	movge	r9, r3
 8009c08:	f1b9 0f00 	cmp.w	r9, #0
 8009c0c:	dc33      	bgt.n	8009c76 <_printf_float+0x396>
 8009c0e:	f04f 0800 	mov.w	r8, #0
 8009c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c16:	f104 0b1a 	add.w	fp, r4, #26
 8009c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c20:	eba3 0309 	sub.w	r3, r3, r9
 8009c24:	4543      	cmp	r3, r8
 8009c26:	f77f af79 	ble.w	8009b1c <_printf_float+0x23c>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	465a      	mov	r2, fp
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4628      	mov	r0, r5
 8009c32:	47b8      	blx	r7
 8009c34:	3001      	adds	r0, #1
 8009c36:	f43f aeae 	beq.w	8009996 <_printf_float+0xb6>
 8009c3a:	f108 0801 	add.w	r8, r8, #1
 8009c3e:	e7ec      	b.n	8009c1a <_printf_float+0x33a>
 8009c40:	4642      	mov	r2, r8
 8009c42:	4631      	mov	r1, r6
 8009c44:	4628      	mov	r0, r5
 8009c46:	47b8      	blx	r7
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d1c2      	bne.n	8009bd2 <_printf_float+0x2f2>
 8009c4c:	e6a3      	b.n	8009996 <_printf_float+0xb6>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4631      	mov	r1, r6
 8009c52:	4628      	mov	r0, r5
 8009c54:	9206      	str	r2, [sp, #24]
 8009c56:	47b8      	blx	r7
 8009c58:	3001      	adds	r0, #1
 8009c5a:	f43f ae9c 	beq.w	8009996 <_printf_float+0xb6>
 8009c5e:	9a06      	ldr	r2, [sp, #24]
 8009c60:	f10b 0b01 	add.w	fp, fp, #1
 8009c64:	e7bb      	b.n	8009bde <_printf_float+0x2fe>
 8009c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	d1c0      	bne.n	8009bf6 <_printf_float+0x316>
 8009c74:	e68f      	b.n	8009996 <_printf_float+0xb6>
 8009c76:	9a06      	ldr	r2, [sp, #24]
 8009c78:	464b      	mov	r3, r9
 8009c7a:	4442      	add	r2, r8
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b8      	blx	r7
 8009c82:	3001      	adds	r0, #1
 8009c84:	d1c3      	bne.n	8009c0e <_printf_float+0x32e>
 8009c86:	e686      	b.n	8009996 <_printf_float+0xb6>
 8009c88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c8c:	f1ba 0f01 	cmp.w	sl, #1
 8009c90:	dc01      	bgt.n	8009c96 <_printf_float+0x3b6>
 8009c92:	07db      	lsls	r3, r3, #31
 8009c94:	d536      	bpl.n	8009d04 <_printf_float+0x424>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4642      	mov	r2, r8
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f ae78 	beq.w	8009996 <_printf_float+0xb6>
 8009ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009caa:	4631      	mov	r1, r6
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	f43f ae70 	beq.w	8009996 <_printf_float+0xb6>
 8009cb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cc2:	f7f6 ff29 	bl	8000b18 <__aeabi_dcmpeq>
 8009cc6:	b9c0      	cbnz	r0, 8009cfa <_printf_float+0x41a>
 8009cc8:	4653      	mov	r3, sl
 8009cca:	f108 0201 	add.w	r2, r8, #1
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d10c      	bne.n	8009cf2 <_printf_float+0x412>
 8009cd8:	e65d      	b.n	8009996 <_printf_float+0xb6>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	465a      	mov	r2, fp
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f43f ae56 	beq.w	8009996 <_printf_float+0xb6>
 8009cea:	f108 0801 	add.w	r8, r8, #1
 8009cee:	45d0      	cmp	r8, sl
 8009cf0:	dbf3      	blt.n	8009cda <_printf_float+0x3fa>
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009cf8:	e6df      	b.n	8009aba <_printf_float+0x1da>
 8009cfa:	f04f 0800 	mov.w	r8, #0
 8009cfe:	f104 0b1a 	add.w	fp, r4, #26
 8009d02:	e7f4      	b.n	8009cee <_printf_float+0x40e>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4642      	mov	r2, r8
 8009d08:	e7e1      	b.n	8009cce <_printf_float+0x3ee>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	464a      	mov	r2, r9
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	f43f ae3e 	beq.w	8009996 <_printf_float+0xb6>
 8009d1a:	f108 0801 	add.w	r8, r8, #1
 8009d1e:	68e3      	ldr	r3, [r4, #12]
 8009d20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d22:	1a5b      	subs	r3, r3, r1
 8009d24:	4543      	cmp	r3, r8
 8009d26:	dcf0      	bgt.n	8009d0a <_printf_float+0x42a>
 8009d28:	e6fc      	b.n	8009b24 <_printf_float+0x244>
 8009d2a:	f04f 0800 	mov.w	r8, #0
 8009d2e:	f104 0919 	add.w	r9, r4, #25
 8009d32:	e7f4      	b.n	8009d1e <_printf_float+0x43e>

08009d34 <_printf_common>:
 8009d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d38:	4616      	mov	r6, r2
 8009d3a:	4698      	mov	r8, r3
 8009d3c:	688a      	ldr	r2, [r1, #8]
 8009d3e:	690b      	ldr	r3, [r1, #16]
 8009d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d44:	4293      	cmp	r3, r2
 8009d46:	bfb8      	it	lt
 8009d48:	4613      	movlt	r3, r2
 8009d4a:	6033      	str	r3, [r6, #0]
 8009d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d50:	4607      	mov	r7, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	b10a      	cbz	r2, 8009d5a <_printf_common+0x26>
 8009d56:	3301      	adds	r3, #1
 8009d58:	6033      	str	r3, [r6, #0]
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	0699      	lsls	r1, r3, #26
 8009d5e:	bf42      	ittt	mi
 8009d60:	6833      	ldrmi	r3, [r6, #0]
 8009d62:	3302      	addmi	r3, #2
 8009d64:	6033      	strmi	r3, [r6, #0]
 8009d66:	6825      	ldr	r5, [r4, #0]
 8009d68:	f015 0506 	ands.w	r5, r5, #6
 8009d6c:	d106      	bne.n	8009d7c <_printf_common+0x48>
 8009d6e:	f104 0a19 	add.w	sl, r4, #25
 8009d72:	68e3      	ldr	r3, [r4, #12]
 8009d74:	6832      	ldr	r2, [r6, #0]
 8009d76:	1a9b      	subs	r3, r3, r2
 8009d78:	42ab      	cmp	r3, r5
 8009d7a:	dc26      	bgt.n	8009dca <_printf_common+0x96>
 8009d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	3b00      	subs	r3, #0
 8009d84:	bf18      	it	ne
 8009d86:	2301      	movne	r3, #1
 8009d88:	0692      	lsls	r2, r2, #26
 8009d8a:	d42b      	bmi.n	8009de4 <_printf_common+0xb0>
 8009d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d90:	4641      	mov	r1, r8
 8009d92:	4638      	mov	r0, r7
 8009d94:	47c8      	blx	r9
 8009d96:	3001      	adds	r0, #1
 8009d98:	d01e      	beq.n	8009dd8 <_printf_common+0xa4>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	6922      	ldr	r2, [r4, #16]
 8009d9e:	f003 0306 	and.w	r3, r3, #6
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	bf02      	ittt	eq
 8009da6:	68e5      	ldreq	r5, [r4, #12]
 8009da8:	6833      	ldreq	r3, [r6, #0]
 8009daa:	1aed      	subeq	r5, r5, r3
 8009dac:	68a3      	ldr	r3, [r4, #8]
 8009dae:	bf0c      	ite	eq
 8009db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009db4:	2500      	movne	r5, #0
 8009db6:	4293      	cmp	r3, r2
 8009db8:	bfc4      	itt	gt
 8009dba:	1a9b      	subgt	r3, r3, r2
 8009dbc:	18ed      	addgt	r5, r5, r3
 8009dbe:	2600      	movs	r6, #0
 8009dc0:	341a      	adds	r4, #26
 8009dc2:	42b5      	cmp	r5, r6
 8009dc4:	d11a      	bne.n	8009dfc <_printf_common+0xc8>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e008      	b.n	8009ddc <_printf_common+0xa8>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4652      	mov	r2, sl
 8009dce:	4641      	mov	r1, r8
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	47c8      	blx	r9
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d103      	bne.n	8009de0 <_printf_common+0xac>
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de0:	3501      	adds	r5, #1
 8009de2:	e7c6      	b.n	8009d72 <_printf_common+0x3e>
 8009de4:	18e1      	adds	r1, r4, r3
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	2030      	movs	r0, #48	@ 0x30
 8009dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009dee:	4422      	add	r2, r4
 8009df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009df8:	3302      	adds	r3, #2
 8009dfa:	e7c7      	b.n	8009d8c <_printf_common+0x58>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	4622      	mov	r2, r4
 8009e00:	4641      	mov	r1, r8
 8009e02:	4638      	mov	r0, r7
 8009e04:	47c8      	blx	r9
 8009e06:	3001      	adds	r0, #1
 8009e08:	d0e6      	beq.n	8009dd8 <_printf_common+0xa4>
 8009e0a:	3601      	adds	r6, #1
 8009e0c:	e7d9      	b.n	8009dc2 <_printf_common+0x8e>
	...

08009e10 <_printf_i>:
 8009e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	7e0f      	ldrb	r7, [r1, #24]
 8009e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e18:	2f78      	cmp	r7, #120	@ 0x78
 8009e1a:	4691      	mov	r9, r2
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	469a      	mov	sl, r3
 8009e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e26:	d807      	bhi.n	8009e38 <_printf_i+0x28>
 8009e28:	2f62      	cmp	r7, #98	@ 0x62
 8009e2a:	d80a      	bhi.n	8009e42 <_printf_i+0x32>
 8009e2c:	2f00      	cmp	r7, #0
 8009e2e:	f000 80d2 	beq.w	8009fd6 <_printf_i+0x1c6>
 8009e32:	2f58      	cmp	r7, #88	@ 0x58
 8009e34:	f000 80b9 	beq.w	8009faa <_printf_i+0x19a>
 8009e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e40:	e03a      	b.n	8009eb8 <_printf_i+0xa8>
 8009e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e46:	2b15      	cmp	r3, #21
 8009e48:	d8f6      	bhi.n	8009e38 <_printf_i+0x28>
 8009e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8009e50 <_printf_i+0x40>)
 8009e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e50:	08009ea9 	.word	0x08009ea9
 8009e54:	08009ebd 	.word	0x08009ebd
 8009e58:	08009e39 	.word	0x08009e39
 8009e5c:	08009e39 	.word	0x08009e39
 8009e60:	08009e39 	.word	0x08009e39
 8009e64:	08009e39 	.word	0x08009e39
 8009e68:	08009ebd 	.word	0x08009ebd
 8009e6c:	08009e39 	.word	0x08009e39
 8009e70:	08009e39 	.word	0x08009e39
 8009e74:	08009e39 	.word	0x08009e39
 8009e78:	08009e39 	.word	0x08009e39
 8009e7c:	08009fbd 	.word	0x08009fbd
 8009e80:	08009ee7 	.word	0x08009ee7
 8009e84:	08009f77 	.word	0x08009f77
 8009e88:	08009e39 	.word	0x08009e39
 8009e8c:	08009e39 	.word	0x08009e39
 8009e90:	08009fdf 	.word	0x08009fdf
 8009e94:	08009e39 	.word	0x08009e39
 8009e98:	08009ee7 	.word	0x08009ee7
 8009e9c:	08009e39 	.word	0x08009e39
 8009ea0:	08009e39 	.word	0x08009e39
 8009ea4:	08009f7f 	.word	0x08009f7f
 8009ea8:	6833      	ldr	r3, [r6, #0]
 8009eaa:	1d1a      	adds	r2, r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6032      	str	r2, [r6, #0]
 8009eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e09d      	b.n	8009ff8 <_printf_i+0x1e8>
 8009ebc:	6833      	ldr	r3, [r6, #0]
 8009ebe:	6820      	ldr	r0, [r4, #0]
 8009ec0:	1d19      	adds	r1, r3, #4
 8009ec2:	6031      	str	r1, [r6, #0]
 8009ec4:	0606      	lsls	r6, r0, #24
 8009ec6:	d501      	bpl.n	8009ecc <_printf_i+0xbc>
 8009ec8:	681d      	ldr	r5, [r3, #0]
 8009eca:	e003      	b.n	8009ed4 <_printf_i+0xc4>
 8009ecc:	0645      	lsls	r5, r0, #25
 8009ece:	d5fb      	bpl.n	8009ec8 <_printf_i+0xb8>
 8009ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	da03      	bge.n	8009ee0 <_printf_i+0xd0>
 8009ed8:	232d      	movs	r3, #45	@ 0x2d
 8009eda:	426d      	negs	r5, r5
 8009edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ee0:	4859      	ldr	r0, [pc, #356]	@ (800a048 <_printf_i+0x238>)
 8009ee2:	230a      	movs	r3, #10
 8009ee4:	e011      	b.n	8009f0a <_printf_i+0xfa>
 8009ee6:	6821      	ldr	r1, [r4, #0]
 8009ee8:	6833      	ldr	r3, [r6, #0]
 8009eea:	0608      	lsls	r0, r1, #24
 8009eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ef0:	d402      	bmi.n	8009ef8 <_printf_i+0xe8>
 8009ef2:	0649      	lsls	r1, r1, #25
 8009ef4:	bf48      	it	mi
 8009ef6:	b2ad      	uxthmi	r5, r5
 8009ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009efa:	4853      	ldr	r0, [pc, #332]	@ (800a048 <_printf_i+0x238>)
 8009efc:	6033      	str	r3, [r6, #0]
 8009efe:	bf14      	ite	ne
 8009f00:	230a      	movne	r3, #10
 8009f02:	2308      	moveq	r3, #8
 8009f04:	2100      	movs	r1, #0
 8009f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f0a:	6866      	ldr	r6, [r4, #4]
 8009f0c:	60a6      	str	r6, [r4, #8]
 8009f0e:	2e00      	cmp	r6, #0
 8009f10:	bfa2      	ittt	ge
 8009f12:	6821      	ldrge	r1, [r4, #0]
 8009f14:	f021 0104 	bicge.w	r1, r1, #4
 8009f18:	6021      	strge	r1, [r4, #0]
 8009f1a:	b90d      	cbnz	r5, 8009f20 <_printf_i+0x110>
 8009f1c:	2e00      	cmp	r6, #0
 8009f1e:	d04b      	beq.n	8009fb8 <_printf_i+0x1a8>
 8009f20:	4616      	mov	r6, r2
 8009f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f26:	fb03 5711 	mls	r7, r3, r1, r5
 8009f2a:	5dc7      	ldrb	r7, [r0, r7]
 8009f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f30:	462f      	mov	r7, r5
 8009f32:	42bb      	cmp	r3, r7
 8009f34:	460d      	mov	r5, r1
 8009f36:	d9f4      	bls.n	8009f22 <_printf_i+0x112>
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d10b      	bne.n	8009f54 <_printf_i+0x144>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	07df      	lsls	r7, r3, #31
 8009f40:	d508      	bpl.n	8009f54 <_printf_i+0x144>
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	6861      	ldr	r1, [r4, #4]
 8009f46:	4299      	cmp	r1, r3
 8009f48:	bfde      	ittt	le
 8009f4a:	2330      	movle	r3, #48	@ 0x30
 8009f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f54:	1b92      	subs	r2, r2, r6
 8009f56:	6122      	str	r2, [r4, #16]
 8009f58:	f8cd a000 	str.w	sl, [sp]
 8009f5c:	464b      	mov	r3, r9
 8009f5e:	aa03      	add	r2, sp, #12
 8009f60:	4621      	mov	r1, r4
 8009f62:	4640      	mov	r0, r8
 8009f64:	f7ff fee6 	bl	8009d34 <_printf_common>
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d14a      	bne.n	800a002 <_printf_i+0x1f2>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b004      	add	sp, #16
 8009f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	f043 0320 	orr.w	r3, r3, #32
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	4833      	ldr	r0, [pc, #204]	@ (800a04c <_printf_i+0x23c>)
 8009f80:	2778      	movs	r7, #120	@ 0x78
 8009f82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	6831      	ldr	r1, [r6, #0]
 8009f8a:	061f      	lsls	r7, r3, #24
 8009f8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f90:	d402      	bmi.n	8009f98 <_printf_i+0x188>
 8009f92:	065f      	lsls	r7, r3, #25
 8009f94:	bf48      	it	mi
 8009f96:	b2ad      	uxthmi	r5, r5
 8009f98:	6031      	str	r1, [r6, #0]
 8009f9a:	07d9      	lsls	r1, r3, #31
 8009f9c:	bf44      	itt	mi
 8009f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8009fa2:	6023      	strmi	r3, [r4, #0]
 8009fa4:	b11d      	cbz	r5, 8009fae <_printf_i+0x19e>
 8009fa6:	2310      	movs	r3, #16
 8009fa8:	e7ac      	b.n	8009f04 <_printf_i+0xf4>
 8009faa:	4827      	ldr	r0, [pc, #156]	@ (800a048 <_printf_i+0x238>)
 8009fac:	e7e9      	b.n	8009f82 <_printf_i+0x172>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f023 0320 	bic.w	r3, r3, #32
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	e7f6      	b.n	8009fa6 <_printf_i+0x196>
 8009fb8:	4616      	mov	r6, r2
 8009fba:	e7bd      	b.n	8009f38 <_printf_i+0x128>
 8009fbc:	6833      	ldr	r3, [r6, #0]
 8009fbe:	6825      	ldr	r5, [r4, #0]
 8009fc0:	6961      	ldr	r1, [r4, #20]
 8009fc2:	1d18      	adds	r0, r3, #4
 8009fc4:	6030      	str	r0, [r6, #0]
 8009fc6:	062e      	lsls	r6, r5, #24
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	d501      	bpl.n	8009fd0 <_printf_i+0x1c0>
 8009fcc:	6019      	str	r1, [r3, #0]
 8009fce:	e002      	b.n	8009fd6 <_printf_i+0x1c6>
 8009fd0:	0668      	lsls	r0, r5, #25
 8009fd2:	d5fb      	bpl.n	8009fcc <_printf_i+0x1bc>
 8009fd4:	8019      	strh	r1, [r3, #0]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	4616      	mov	r6, r2
 8009fdc:	e7bc      	b.n	8009f58 <_printf_i+0x148>
 8009fde:	6833      	ldr	r3, [r6, #0]
 8009fe0:	1d1a      	adds	r2, r3, #4
 8009fe2:	6032      	str	r2, [r6, #0]
 8009fe4:	681e      	ldr	r6, [r3, #0]
 8009fe6:	6862      	ldr	r2, [r4, #4]
 8009fe8:	2100      	movs	r1, #0
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7f6 f918 	bl	8000220 <memchr>
 8009ff0:	b108      	cbz	r0, 8009ff6 <_printf_i+0x1e6>
 8009ff2:	1b80      	subs	r0, r0, r6
 8009ff4:	6060      	str	r0, [r4, #4]
 8009ff6:	6863      	ldr	r3, [r4, #4]
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a000:	e7aa      	b.n	8009f58 <_printf_i+0x148>
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	4632      	mov	r2, r6
 800a006:	4649      	mov	r1, r9
 800a008:	4640      	mov	r0, r8
 800a00a:	47d0      	blx	sl
 800a00c:	3001      	adds	r0, #1
 800a00e:	d0ad      	beq.n	8009f6c <_printf_i+0x15c>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	079b      	lsls	r3, r3, #30
 800a014:	d413      	bmi.n	800a03e <_printf_i+0x22e>
 800a016:	68e0      	ldr	r0, [r4, #12]
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	4298      	cmp	r0, r3
 800a01c:	bfb8      	it	lt
 800a01e:	4618      	movlt	r0, r3
 800a020:	e7a6      	b.n	8009f70 <_printf_i+0x160>
 800a022:	2301      	movs	r3, #1
 800a024:	4632      	mov	r2, r6
 800a026:	4649      	mov	r1, r9
 800a028:	4640      	mov	r0, r8
 800a02a:	47d0      	blx	sl
 800a02c:	3001      	adds	r0, #1
 800a02e:	d09d      	beq.n	8009f6c <_printf_i+0x15c>
 800a030:	3501      	adds	r5, #1
 800a032:	68e3      	ldr	r3, [r4, #12]
 800a034:	9903      	ldr	r1, [sp, #12]
 800a036:	1a5b      	subs	r3, r3, r1
 800a038:	42ab      	cmp	r3, r5
 800a03a:	dcf2      	bgt.n	800a022 <_printf_i+0x212>
 800a03c:	e7eb      	b.n	800a016 <_printf_i+0x206>
 800a03e:	2500      	movs	r5, #0
 800a040:	f104 0619 	add.w	r6, r4, #25
 800a044:	e7f5      	b.n	800a032 <_printf_i+0x222>
 800a046:	bf00      	nop
 800a048:	0800cef7 	.word	0x0800cef7
 800a04c:	0800cf08 	.word	0x0800cf08

0800a050 <std>:
 800a050:	2300      	movs	r3, #0
 800a052:	b510      	push	{r4, lr}
 800a054:	4604      	mov	r4, r0
 800a056:	e9c0 3300 	strd	r3, r3, [r0]
 800a05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a05e:	6083      	str	r3, [r0, #8]
 800a060:	8181      	strh	r1, [r0, #12]
 800a062:	6643      	str	r3, [r0, #100]	@ 0x64
 800a064:	81c2      	strh	r2, [r0, #14]
 800a066:	6183      	str	r3, [r0, #24]
 800a068:	4619      	mov	r1, r3
 800a06a:	2208      	movs	r2, #8
 800a06c:	305c      	adds	r0, #92	@ 0x5c
 800a06e:	f000 fa19 	bl	800a4a4 <memset>
 800a072:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a8 <std+0x58>)
 800a074:	6263      	str	r3, [r4, #36]	@ 0x24
 800a076:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ac <std+0x5c>)
 800a078:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a07a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b0 <std+0x60>)
 800a07c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a07e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b4 <std+0x64>)
 800a080:	6323      	str	r3, [r4, #48]	@ 0x30
 800a082:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <std+0x68>)
 800a084:	6224      	str	r4, [r4, #32]
 800a086:	429c      	cmp	r4, r3
 800a088:	d006      	beq.n	800a098 <std+0x48>
 800a08a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a08e:	4294      	cmp	r4, r2
 800a090:	d002      	beq.n	800a098 <std+0x48>
 800a092:	33d0      	adds	r3, #208	@ 0xd0
 800a094:	429c      	cmp	r4, r3
 800a096:	d105      	bne.n	800a0a4 <std+0x54>
 800a098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a0:	f000 ba7c 	b.w	800a59c <__retarget_lock_init_recursive>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	bf00      	nop
 800a0a8:	0800a2f5 	.word	0x0800a2f5
 800a0ac:	0800a317 	.word	0x0800a317
 800a0b0:	0800a34f 	.word	0x0800a34f
 800a0b4:	0800a373 	.word	0x0800a373
 800a0b8:	20000774 	.word	0x20000774

0800a0bc <stdio_exit_handler>:
 800a0bc:	4a02      	ldr	r2, [pc, #8]	@ (800a0c8 <stdio_exit_handler+0xc>)
 800a0be:	4903      	ldr	r1, [pc, #12]	@ (800a0cc <stdio_exit_handler+0x10>)
 800a0c0:	4803      	ldr	r0, [pc, #12]	@ (800a0d0 <stdio_exit_handler+0x14>)
 800a0c2:	f000 b869 	b.w	800a198 <_fwalk_sglue>
 800a0c6:	bf00      	nop
 800a0c8:	2000008c 	.word	0x2000008c
 800a0cc:	0800c191 	.word	0x0800c191
 800a0d0:	2000009c 	.word	0x2000009c

0800a0d4 <cleanup_stdio>:
 800a0d4:	6841      	ldr	r1, [r0, #4]
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a108 <cleanup_stdio+0x34>)
 800a0d8:	4299      	cmp	r1, r3
 800a0da:	b510      	push	{r4, lr}
 800a0dc:	4604      	mov	r4, r0
 800a0de:	d001      	beq.n	800a0e4 <cleanup_stdio+0x10>
 800a0e0:	f002 f856 	bl	800c190 <_fflush_r>
 800a0e4:	68a1      	ldr	r1, [r4, #8]
 800a0e6:	4b09      	ldr	r3, [pc, #36]	@ (800a10c <cleanup_stdio+0x38>)
 800a0e8:	4299      	cmp	r1, r3
 800a0ea:	d002      	beq.n	800a0f2 <cleanup_stdio+0x1e>
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f002 f84f 	bl	800c190 <_fflush_r>
 800a0f2:	68e1      	ldr	r1, [r4, #12]
 800a0f4:	4b06      	ldr	r3, [pc, #24]	@ (800a110 <cleanup_stdio+0x3c>)
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	d004      	beq.n	800a104 <cleanup_stdio+0x30>
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a100:	f002 b846 	b.w	800c190 <_fflush_r>
 800a104:	bd10      	pop	{r4, pc}
 800a106:	bf00      	nop
 800a108:	20000774 	.word	0x20000774
 800a10c:	200007dc 	.word	0x200007dc
 800a110:	20000844 	.word	0x20000844

0800a114 <global_stdio_init.part.0>:
 800a114:	b510      	push	{r4, lr}
 800a116:	4b0b      	ldr	r3, [pc, #44]	@ (800a144 <global_stdio_init.part.0+0x30>)
 800a118:	4c0b      	ldr	r4, [pc, #44]	@ (800a148 <global_stdio_init.part.0+0x34>)
 800a11a:	4a0c      	ldr	r2, [pc, #48]	@ (800a14c <global_stdio_init.part.0+0x38>)
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	4620      	mov	r0, r4
 800a120:	2200      	movs	r2, #0
 800a122:	2104      	movs	r1, #4
 800a124:	f7ff ff94 	bl	800a050 <std>
 800a128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a12c:	2201      	movs	r2, #1
 800a12e:	2109      	movs	r1, #9
 800a130:	f7ff ff8e 	bl	800a050 <std>
 800a134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a138:	2202      	movs	r2, #2
 800a13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a13e:	2112      	movs	r1, #18
 800a140:	f7ff bf86 	b.w	800a050 <std>
 800a144:	200008ac 	.word	0x200008ac
 800a148:	20000774 	.word	0x20000774
 800a14c:	0800a0bd 	.word	0x0800a0bd

0800a150 <__sfp_lock_acquire>:
 800a150:	4801      	ldr	r0, [pc, #4]	@ (800a158 <__sfp_lock_acquire+0x8>)
 800a152:	f000 ba24 	b.w	800a59e <__retarget_lock_acquire_recursive>
 800a156:	bf00      	nop
 800a158:	200008b5 	.word	0x200008b5

0800a15c <__sfp_lock_release>:
 800a15c:	4801      	ldr	r0, [pc, #4]	@ (800a164 <__sfp_lock_release+0x8>)
 800a15e:	f000 ba1f 	b.w	800a5a0 <__retarget_lock_release_recursive>
 800a162:	bf00      	nop
 800a164:	200008b5 	.word	0x200008b5

0800a168 <__sinit>:
 800a168:	b510      	push	{r4, lr}
 800a16a:	4604      	mov	r4, r0
 800a16c:	f7ff fff0 	bl	800a150 <__sfp_lock_acquire>
 800a170:	6a23      	ldr	r3, [r4, #32]
 800a172:	b11b      	cbz	r3, 800a17c <__sinit+0x14>
 800a174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a178:	f7ff bff0 	b.w	800a15c <__sfp_lock_release>
 800a17c:	4b04      	ldr	r3, [pc, #16]	@ (800a190 <__sinit+0x28>)
 800a17e:	6223      	str	r3, [r4, #32]
 800a180:	4b04      	ldr	r3, [pc, #16]	@ (800a194 <__sinit+0x2c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1f5      	bne.n	800a174 <__sinit+0xc>
 800a188:	f7ff ffc4 	bl	800a114 <global_stdio_init.part.0>
 800a18c:	e7f2      	b.n	800a174 <__sinit+0xc>
 800a18e:	bf00      	nop
 800a190:	0800a0d5 	.word	0x0800a0d5
 800a194:	200008ac 	.word	0x200008ac

0800a198 <_fwalk_sglue>:
 800a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a19c:	4607      	mov	r7, r0
 800a19e:	4688      	mov	r8, r1
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	2600      	movs	r6, #0
 800a1a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1a8:	f1b9 0901 	subs.w	r9, r9, #1
 800a1ac:	d505      	bpl.n	800a1ba <_fwalk_sglue+0x22>
 800a1ae:	6824      	ldr	r4, [r4, #0]
 800a1b0:	2c00      	cmp	r4, #0
 800a1b2:	d1f7      	bne.n	800a1a4 <_fwalk_sglue+0xc>
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ba:	89ab      	ldrh	r3, [r5, #12]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d907      	bls.n	800a1d0 <_fwalk_sglue+0x38>
 800a1c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	d003      	beq.n	800a1d0 <_fwalk_sglue+0x38>
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	47c0      	blx	r8
 800a1ce:	4306      	orrs	r6, r0
 800a1d0:	3568      	adds	r5, #104	@ 0x68
 800a1d2:	e7e9      	b.n	800a1a8 <_fwalk_sglue+0x10>

0800a1d4 <iprintf>:
 800a1d4:	b40f      	push	{r0, r1, r2, r3}
 800a1d6:	b507      	push	{r0, r1, r2, lr}
 800a1d8:	4906      	ldr	r1, [pc, #24]	@ (800a1f4 <iprintf+0x20>)
 800a1da:	ab04      	add	r3, sp, #16
 800a1dc:	6808      	ldr	r0, [r1, #0]
 800a1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e2:	6881      	ldr	r1, [r0, #8]
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	f001 fe37 	bl	800be58 <_vfiprintf_r>
 800a1ea:	b003      	add	sp, #12
 800a1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1f0:	b004      	add	sp, #16
 800a1f2:	4770      	bx	lr
 800a1f4:	20000098 	.word	0x20000098

0800a1f8 <_puts_r>:
 800a1f8:	6a03      	ldr	r3, [r0, #32]
 800a1fa:	b570      	push	{r4, r5, r6, lr}
 800a1fc:	6884      	ldr	r4, [r0, #8]
 800a1fe:	4605      	mov	r5, r0
 800a200:	460e      	mov	r6, r1
 800a202:	b90b      	cbnz	r3, 800a208 <_puts_r+0x10>
 800a204:	f7ff ffb0 	bl	800a168 <__sinit>
 800a208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a20a:	07db      	lsls	r3, r3, #31
 800a20c:	d405      	bmi.n	800a21a <_puts_r+0x22>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	0598      	lsls	r0, r3, #22
 800a212:	d402      	bmi.n	800a21a <_puts_r+0x22>
 800a214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a216:	f000 f9c2 	bl	800a59e <__retarget_lock_acquire_recursive>
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	0719      	lsls	r1, r3, #28
 800a21e:	d502      	bpl.n	800a226 <_puts_r+0x2e>
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d135      	bne.n	800a292 <_puts_r+0x9a>
 800a226:	4621      	mov	r1, r4
 800a228:	4628      	mov	r0, r5
 800a22a:	f000 f8e5 	bl	800a3f8 <__swsetup_r>
 800a22e:	b380      	cbz	r0, 800a292 <_puts_r+0x9a>
 800a230:	f04f 35ff 	mov.w	r5, #4294967295
 800a234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a236:	07da      	lsls	r2, r3, #31
 800a238:	d405      	bmi.n	800a246 <_puts_r+0x4e>
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	059b      	lsls	r3, r3, #22
 800a23e:	d402      	bmi.n	800a246 <_puts_r+0x4e>
 800a240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a242:	f000 f9ad 	bl	800a5a0 <__retarget_lock_release_recursive>
 800a246:	4628      	mov	r0, r5
 800a248:	bd70      	pop	{r4, r5, r6, pc}
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	da04      	bge.n	800a258 <_puts_r+0x60>
 800a24e:	69a2      	ldr	r2, [r4, #24]
 800a250:	429a      	cmp	r2, r3
 800a252:	dc17      	bgt.n	800a284 <_puts_r+0x8c>
 800a254:	290a      	cmp	r1, #10
 800a256:	d015      	beq.n	800a284 <_puts_r+0x8c>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	7019      	strb	r1, [r3, #0]
 800a260:	68a3      	ldr	r3, [r4, #8]
 800a262:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a266:	3b01      	subs	r3, #1
 800a268:	60a3      	str	r3, [r4, #8]
 800a26a:	2900      	cmp	r1, #0
 800a26c:	d1ed      	bne.n	800a24a <_puts_r+0x52>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	da11      	bge.n	800a296 <_puts_r+0x9e>
 800a272:	4622      	mov	r2, r4
 800a274:	210a      	movs	r1, #10
 800a276:	4628      	mov	r0, r5
 800a278:	f000 f87f 	bl	800a37a <__swbuf_r>
 800a27c:	3001      	adds	r0, #1
 800a27e:	d0d7      	beq.n	800a230 <_puts_r+0x38>
 800a280:	250a      	movs	r5, #10
 800a282:	e7d7      	b.n	800a234 <_puts_r+0x3c>
 800a284:	4622      	mov	r2, r4
 800a286:	4628      	mov	r0, r5
 800a288:	f000 f877 	bl	800a37a <__swbuf_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	d1e7      	bne.n	800a260 <_puts_r+0x68>
 800a290:	e7ce      	b.n	800a230 <_puts_r+0x38>
 800a292:	3e01      	subs	r6, #1
 800a294:	e7e4      	b.n	800a260 <_puts_r+0x68>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	6022      	str	r2, [r4, #0]
 800a29c:	220a      	movs	r2, #10
 800a29e:	701a      	strb	r2, [r3, #0]
 800a2a0:	e7ee      	b.n	800a280 <_puts_r+0x88>
	...

0800a2a4 <puts>:
 800a2a4:	4b02      	ldr	r3, [pc, #8]	@ (800a2b0 <puts+0xc>)
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f7ff bfa5 	b.w	800a1f8 <_puts_r>
 800a2ae:	bf00      	nop
 800a2b0:	20000098 	.word	0x20000098

0800a2b4 <siprintf>:
 800a2b4:	b40e      	push	{r1, r2, r3}
 800a2b6:	b500      	push	{lr}
 800a2b8:	b09c      	sub	sp, #112	@ 0x70
 800a2ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800a2bc:	9002      	str	r0, [sp, #8]
 800a2be:	9006      	str	r0, [sp, #24]
 800a2c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a2c4:	4809      	ldr	r0, [pc, #36]	@ (800a2ec <siprintf+0x38>)
 800a2c6:	9107      	str	r1, [sp, #28]
 800a2c8:	9104      	str	r1, [sp, #16]
 800a2ca:	4909      	ldr	r1, [pc, #36]	@ (800a2f0 <siprintf+0x3c>)
 800a2cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d0:	9105      	str	r1, [sp, #20]
 800a2d2:	6800      	ldr	r0, [r0, #0]
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	a902      	add	r1, sp, #8
 800a2d8:	f001 fc98 	bl	800bc0c <_svfiprintf_r>
 800a2dc:	9b02      	ldr	r3, [sp, #8]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	b01c      	add	sp, #112	@ 0x70
 800a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	20000098 	.word	0x20000098
 800a2f0:	ffff0208 	.word	0xffff0208

0800a2f4 <__sread>:
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fc:	f000 f900 	bl	800a500 <_read_r>
 800a300:	2800      	cmp	r0, #0
 800a302:	bfab      	itete	ge
 800a304:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a306:	89a3      	ldrhlt	r3, [r4, #12]
 800a308:	181b      	addge	r3, r3, r0
 800a30a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a30e:	bfac      	ite	ge
 800a310:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a312:	81a3      	strhlt	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__swrite>:
 800a316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	461f      	mov	r7, r3
 800a31c:	898b      	ldrh	r3, [r1, #12]
 800a31e:	05db      	lsls	r3, r3, #23
 800a320:	4605      	mov	r5, r0
 800a322:	460c      	mov	r4, r1
 800a324:	4616      	mov	r6, r2
 800a326:	d505      	bpl.n	800a334 <__swrite+0x1e>
 800a328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32c:	2302      	movs	r3, #2
 800a32e:	2200      	movs	r2, #0
 800a330:	f000 f8d4 	bl	800a4dc <_lseek_r>
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a33a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a33e:	81a3      	strh	r3, [r4, #12]
 800a340:	4632      	mov	r2, r6
 800a342:	463b      	mov	r3, r7
 800a344:	4628      	mov	r0, r5
 800a346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a34a:	f000 b8eb 	b.w	800a524 <_write_r>

0800a34e <__sseek>:
 800a34e:	b510      	push	{r4, lr}
 800a350:	460c      	mov	r4, r1
 800a352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a356:	f000 f8c1 	bl	800a4dc <_lseek_r>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	bf15      	itete	ne
 800a360:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a362:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a366:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a36a:	81a3      	strheq	r3, [r4, #12]
 800a36c:	bf18      	it	ne
 800a36e:	81a3      	strhne	r3, [r4, #12]
 800a370:	bd10      	pop	{r4, pc}

0800a372 <__sclose>:
 800a372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a376:	f000 b8a1 	b.w	800a4bc <_close_r>

0800a37a <__swbuf_r>:
 800a37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37c:	460e      	mov	r6, r1
 800a37e:	4614      	mov	r4, r2
 800a380:	4605      	mov	r5, r0
 800a382:	b118      	cbz	r0, 800a38c <__swbuf_r+0x12>
 800a384:	6a03      	ldr	r3, [r0, #32]
 800a386:	b90b      	cbnz	r3, 800a38c <__swbuf_r+0x12>
 800a388:	f7ff feee 	bl	800a168 <__sinit>
 800a38c:	69a3      	ldr	r3, [r4, #24]
 800a38e:	60a3      	str	r3, [r4, #8]
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	071a      	lsls	r2, r3, #28
 800a394:	d501      	bpl.n	800a39a <__swbuf_r+0x20>
 800a396:	6923      	ldr	r3, [r4, #16]
 800a398:	b943      	cbnz	r3, 800a3ac <__swbuf_r+0x32>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4628      	mov	r0, r5
 800a39e:	f000 f82b 	bl	800a3f8 <__swsetup_r>
 800a3a2:	b118      	cbz	r0, 800a3ac <__swbuf_r+0x32>
 800a3a4:	f04f 37ff 	mov.w	r7, #4294967295
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	6922      	ldr	r2, [r4, #16]
 800a3b0:	1a98      	subs	r0, r3, r2
 800a3b2:	6963      	ldr	r3, [r4, #20]
 800a3b4:	b2f6      	uxtb	r6, r6
 800a3b6:	4283      	cmp	r3, r0
 800a3b8:	4637      	mov	r7, r6
 800a3ba:	dc05      	bgt.n	800a3c8 <__swbuf_r+0x4e>
 800a3bc:	4621      	mov	r1, r4
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f001 fee6 	bl	800c190 <_fflush_r>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d1ed      	bne.n	800a3a4 <__swbuf_r+0x2a>
 800a3c8:	68a3      	ldr	r3, [r4, #8]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	60a3      	str	r3, [r4, #8]
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	6022      	str	r2, [r4, #0]
 800a3d4:	701e      	strb	r6, [r3, #0]
 800a3d6:	6962      	ldr	r2, [r4, #20]
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d004      	beq.n	800a3e8 <__swbuf_r+0x6e>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	07db      	lsls	r3, r3, #31
 800a3e2:	d5e1      	bpl.n	800a3a8 <__swbuf_r+0x2e>
 800a3e4:	2e0a      	cmp	r6, #10
 800a3e6:	d1df      	bne.n	800a3a8 <__swbuf_r+0x2e>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f001 fed0 	bl	800c190 <_fflush_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d0d9      	beq.n	800a3a8 <__swbuf_r+0x2e>
 800a3f4:	e7d6      	b.n	800a3a4 <__swbuf_r+0x2a>
	...

0800a3f8 <__swsetup_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4b29      	ldr	r3, [pc, #164]	@ (800a4a0 <__swsetup_r+0xa8>)
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	6818      	ldr	r0, [r3, #0]
 800a400:	460c      	mov	r4, r1
 800a402:	b118      	cbz	r0, 800a40c <__swsetup_r+0x14>
 800a404:	6a03      	ldr	r3, [r0, #32]
 800a406:	b90b      	cbnz	r3, 800a40c <__swsetup_r+0x14>
 800a408:	f7ff feae 	bl	800a168 <__sinit>
 800a40c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a410:	0719      	lsls	r1, r3, #28
 800a412:	d422      	bmi.n	800a45a <__swsetup_r+0x62>
 800a414:	06da      	lsls	r2, r3, #27
 800a416:	d407      	bmi.n	800a428 <__swsetup_r+0x30>
 800a418:	2209      	movs	r2, #9
 800a41a:	602a      	str	r2, [r5, #0]
 800a41c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	f04f 30ff 	mov.w	r0, #4294967295
 800a426:	e033      	b.n	800a490 <__swsetup_r+0x98>
 800a428:	0758      	lsls	r0, r3, #29
 800a42a:	d512      	bpl.n	800a452 <__swsetup_r+0x5a>
 800a42c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a42e:	b141      	cbz	r1, 800a442 <__swsetup_r+0x4a>
 800a430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a434:	4299      	cmp	r1, r3
 800a436:	d002      	beq.n	800a43e <__swsetup_r+0x46>
 800a438:	4628      	mov	r0, r5
 800a43a:	f000 ff09 	bl	800b250 <_free_r>
 800a43e:	2300      	movs	r3, #0
 800a440:	6363      	str	r3, [r4, #52]	@ 0x34
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a448:	81a3      	strh	r3, [r4, #12]
 800a44a:	2300      	movs	r3, #0
 800a44c:	6063      	str	r3, [r4, #4]
 800a44e:	6923      	ldr	r3, [r4, #16]
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	f043 0308 	orr.w	r3, r3, #8
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	b94b      	cbnz	r3, 800a472 <__swsetup_r+0x7a>
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a468:	d003      	beq.n	800a472 <__swsetup_r+0x7a>
 800a46a:	4621      	mov	r1, r4
 800a46c:	4628      	mov	r0, r5
 800a46e:	f001 fedd 	bl	800c22c <__smakebuf_r>
 800a472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a476:	f013 0201 	ands.w	r2, r3, #1
 800a47a:	d00a      	beq.n	800a492 <__swsetup_r+0x9a>
 800a47c:	2200      	movs	r2, #0
 800a47e:	60a2      	str	r2, [r4, #8]
 800a480:	6962      	ldr	r2, [r4, #20]
 800a482:	4252      	negs	r2, r2
 800a484:	61a2      	str	r2, [r4, #24]
 800a486:	6922      	ldr	r2, [r4, #16]
 800a488:	b942      	cbnz	r2, 800a49c <__swsetup_r+0xa4>
 800a48a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a48e:	d1c5      	bne.n	800a41c <__swsetup_r+0x24>
 800a490:	bd38      	pop	{r3, r4, r5, pc}
 800a492:	0799      	lsls	r1, r3, #30
 800a494:	bf58      	it	pl
 800a496:	6962      	ldrpl	r2, [r4, #20]
 800a498:	60a2      	str	r2, [r4, #8]
 800a49a:	e7f4      	b.n	800a486 <__swsetup_r+0x8e>
 800a49c:	2000      	movs	r0, #0
 800a49e:	e7f7      	b.n	800a490 <__swsetup_r+0x98>
 800a4a0:	20000098 	.word	0x20000098

0800a4a4 <memset>:
 800a4a4:	4402      	add	r2, r0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d100      	bne.n	800a4ae <memset+0xa>
 800a4ac:	4770      	bx	lr
 800a4ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b2:	e7f9      	b.n	800a4a8 <memset+0x4>

0800a4b4 <_localeconv_r>:
 800a4b4:	4800      	ldr	r0, [pc, #0]	@ (800a4b8 <_localeconv_r+0x4>)
 800a4b6:	4770      	bx	lr
 800a4b8:	200001d8 	.word	0x200001d8

0800a4bc <_close_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4d06      	ldr	r5, [pc, #24]	@ (800a4d8 <_close_r+0x1c>)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	602b      	str	r3, [r5, #0]
 800a4c8:	f7f8 ff74 	bl	80033b4 <_close>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_close_r+0x1a>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_close_r+0x1a>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	200008b0 	.word	0x200008b0

0800a4dc <_lseek_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4d07      	ldr	r5, [pc, #28]	@ (800a4fc <_lseek_r+0x20>)
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	602a      	str	r2, [r5, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f7f8 ff89 	bl	8003402 <_lseek>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d102      	bne.n	800a4fa <_lseek_r+0x1e>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	b103      	cbz	r3, 800a4fa <_lseek_r+0x1e>
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	200008b0 	.word	0x200008b0

0800a500 <_read_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4d07      	ldr	r5, [pc, #28]	@ (800a520 <_read_r+0x20>)
 800a504:	4604      	mov	r4, r0
 800a506:	4608      	mov	r0, r1
 800a508:	4611      	mov	r1, r2
 800a50a:	2200      	movs	r2, #0
 800a50c:	602a      	str	r2, [r5, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	f7f8 ff17 	bl	8003342 <_read>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_read_r+0x1e>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_read_r+0x1e>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	200008b0 	.word	0x200008b0

0800a524 <_write_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d07      	ldr	r5, [pc, #28]	@ (800a544 <_write_r+0x20>)
 800a528:	4604      	mov	r4, r0
 800a52a:	4608      	mov	r0, r1
 800a52c:	4611      	mov	r1, r2
 800a52e:	2200      	movs	r2, #0
 800a530:	602a      	str	r2, [r5, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	f7f8 ff22 	bl	800337c <_write>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d102      	bne.n	800a542 <_write_r+0x1e>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	b103      	cbz	r3, 800a542 <_write_r+0x1e>
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	200008b0 	.word	0x200008b0

0800a548 <__errno>:
 800a548:	4b01      	ldr	r3, [pc, #4]	@ (800a550 <__errno+0x8>)
 800a54a:	6818      	ldr	r0, [r3, #0]
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000098 	.word	0x20000098

0800a554 <__libc_init_array>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	4d0d      	ldr	r5, [pc, #52]	@ (800a58c <__libc_init_array+0x38>)
 800a558:	4c0d      	ldr	r4, [pc, #52]	@ (800a590 <__libc_init_array+0x3c>)
 800a55a:	1b64      	subs	r4, r4, r5
 800a55c:	10a4      	asrs	r4, r4, #2
 800a55e:	2600      	movs	r6, #0
 800a560:	42a6      	cmp	r6, r4
 800a562:	d109      	bne.n	800a578 <__libc_init_array+0x24>
 800a564:	4d0b      	ldr	r5, [pc, #44]	@ (800a594 <__libc_init_array+0x40>)
 800a566:	4c0c      	ldr	r4, [pc, #48]	@ (800a598 <__libc_init_array+0x44>)
 800a568:	f001 ffdc 	bl	800c524 <_init>
 800a56c:	1b64      	subs	r4, r4, r5
 800a56e:	10a4      	asrs	r4, r4, #2
 800a570:	2600      	movs	r6, #0
 800a572:	42a6      	cmp	r6, r4
 800a574:	d105      	bne.n	800a582 <__libc_init_array+0x2e>
 800a576:	bd70      	pop	{r4, r5, r6, pc}
 800a578:	f855 3b04 	ldr.w	r3, [r5], #4
 800a57c:	4798      	blx	r3
 800a57e:	3601      	adds	r6, #1
 800a580:	e7ee      	b.n	800a560 <__libc_init_array+0xc>
 800a582:	f855 3b04 	ldr.w	r3, [r5], #4
 800a586:	4798      	blx	r3
 800a588:	3601      	adds	r6, #1
 800a58a:	e7f2      	b.n	800a572 <__libc_init_array+0x1e>
 800a58c:	0800d160 	.word	0x0800d160
 800a590:	0800d160 	.word	0x0800d160
 800a594:	0800d160 	.word	0x0800d160
 800a598:	0800d164 	.word	0x0800d164

0800a59c <__retarget_lock_init_recursive>:
 800a59c:	4770      	bx	lr

0800a59e <__retarget_lock_acquire_recursive>:
 800a59e:	4770      	bx	lr

0800a5a0 <__retarget_lock_release_recursive>:
 800a5a0:	4770      	bx	lr

0800a5a2 <strcpy>:
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a8:	f803 2b01 	strb.w	r2, [r3], #1
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	d1f9      	bne.n	800a5a4 <strcpy+0x2>
 800a5b0:	4770      	bx	lr

0800a5b2 <quorem>:
 800a5b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b6:	6903      	ldr	r3, [r0, #16]
 800a5b8:	690c      	ldr	r4, [r1, #16]
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	4607      	mov	r7, r0
 800a5be:	db7e      	blt.n	800a6be <quorem+0x10c>
 800a5c0:	3c01      	subs	r4, #1
 800a5c2:	f101 0814 	add.w	r8, r1, #20
 800a5c6:	00a3      	lsls	r3, r4, #2
 800a5c8:	f100 0514 	add.w	r5, r0, #20
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5e8:	d32e      	bcc.n	800a648 <quorem+0x96>
 800a5ea:	f04f 0a00 	mov.w	sl, #0
 800a5ee:	46c4      	mov	ip, r8
 800a5f0:	46ae      	mov	lr, r5
 800a5f2:	46d3      	mov	fp, sl
 800a5f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5f8:	b298      	uxth	r0, r3
 800a5fa:	fb06 a000 	mla	r0, r6, r0, sl
 800a5fe:	0c02      	lsrs	r2, r0, #16
 800a600:	0c1b      	lsrs	r3, r3, #16
 800a602:	fb06 2303 	mla	r3, r6, r3, r2
 800a606:	f8de 2000 	ldr.w	r2, [lr]
 800a60a:	b280      	uxth	r0, r0
 800a60c:	b292      	uxth	r2, r2
 800a60e:	1a12      	subs	r2, r2, r0
 800a610:	445a      	add	r2, fp
 800a612:	f8de 0000 	ldr.w	r0, [lr]
 800a616:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a620:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a624:	b292      	uxth	r2, r2
 800a626:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a62a:	45e1      	cmp	r9, ip
 800a62c:	f84e 2b04 	str.w	r2, [lr], #4
 800a630:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a634:	d2de      	bcs.n	800a5f4 <quorem+0x42>
 800a636:	9b00      	ldr	r3, [sp, #0]
 800a638:	58eb      	ldr	r3, [r5, r3]
 800a63a:	b92b      	cbnz	r3, 800a648 <quorem+0x96>
 800a63c:	9b01      	ldr	r3, [sp, #4]
 800a63e:	3b04      	subs	r3, #4
 800a640:	429d      	cmp	r5, r3
 800a642:	461a      	mov	r2, r3
 800a644:	d32f      	bcc.n	800a6a6 <quorem+0xf4>
 800a646:	613c      	str	r4, [r7, #16]
 800a648:	4638      	mov	r0, r7
 800a64a:	f001 f97b 	bl	800b944 <__mcmp>
 800a64e:	2800      	cmp	r0, #0
 800a650:	db25      	blt.n	800a69e <quorem+0xec>
 800a652:	4629      	mov	r1, r5
 800a654:	2000      	movs	r0, #0
 800a656:	f858 2b04 	ldr.w	r2, [r8], #4
 800a65a:	f8d1 c000 	ldr.w	ip, [r1]
 800a65e:	fa1f fe82 	uxth.w	lr, r2
 800a662:	fa1f f38c 	uxth.w	r3, ip
 800a666:	eba3 030e 	sub.w	r3, r3, lr
 800a66a:	4403      	add	r3, r0
 800a66c:	0c12      	lsrs	r2, r2, #16
 800a66e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a672:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a676:	b29b      	uxth	r3, r3
 800a678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a67c:	45c1      	cmp	r9, r8
 800a67e:	f841 3b04 	str.w	r3, [r1], #4
 800a682:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a686:	d2e6      	bcs.n	800a656 <quorem+0xa4>
 800a688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a68c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a690:	b922      	cbnz	r2, 800a69c <quorem+0xea>
 800a692:	3b04      	subs	r3, #4
 800a694:	429d      	cmp	r5, r3
 800a696:	461a      	mov	r2, r3
 800a698:	d30b      	bcc.n	800a6b2 <quorem+0x100>
 800a69a:	613c      	str	r4, [r7, #16]
 800a69c:	3601      	adds	r6, #1
 800a69e:	4630      	mov	r0, r6
 800a6a0:	b003      	add	sp, #12
 800a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a6:	6812      	ldr	r2, [r2, #0]
 800a6a8:	3b04      	subs	r3, #4
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d1cb      	bne.n	800a646 <quorem+0x94>
 800a6ae:	3c01      	subs	r4, #1
 800a6b0:	e7c6      	b.n	800a640 <quorem+0x8e>
 800a6b2:	6812      	ldr	r2, [r2, #0]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d1ef      	bne.n	800a69a <quorem+0xe8>
 800a6ba:	3c01      	subs	r4, #1
 800a6bc:	e7ea      	b.n	800a694 <quorem+0xe2>
 800a6be:	2000      	movs	r0, #0
 800a6c0:	e7ee      	b.n	800a6a0 <quorem+0xee>
 800a6c2:	0000      	movs	r0, r0
 800a6c4:	0000      	movs	r0, r0
	...

0800a6c8 <_dtoa_r>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	69c7      	ldr	r7, [r0, #28]
 800a6ce:	b099      	sub	sp, #100	@ 0x64
 800a6d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6d4:	ec55 4b10 	vmov	r4, r5, d0
 800a6d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a6da:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6dc:	4683      	mov	fp, r0
 800a6de:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6e2:	b97f      	cbnz	r7, 800a704 <_dtoa_r+0x3c>
 800a6e4:	2010      	movs	r0, #16
 800a6e6:	f000 fdfd 	bl	800b2e4 <malloc>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800a6f0:	b920      	cbnz	r0, 800a6fc <_dtoa_r+0x34>
 800a6f2:	4ba7      	ldr	r3, [pc, #668]	@ (800a990 <_dtoa_r+0x2c8>)
 800a6f4:	21ef      	movs	r1, #239	@ 0xef
 800a6f6:	48a7      	ldr	r0, [pc, #668]	@ (800a994 <_dtoa_r+0x2cc>)
 800a6f8:	f001 fe2e 	bl	800c358 <__assert_func>
 800a6fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a700:	6007      	str	r7, [r0, #0]
 800a702:	60c7      	str	r7, [r0, #12]
 800a704:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a708:	6819      	ldr	r1, [r3, #0]
 800a70a:	b159      	cbz	r1, 800a724 <_dtoa_r+0x5c>
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	604a      	str	r2, [r1, #4]
 800a710:	2301      	movs	r3, #1
 800a712:	4093      	lsls	r3, r2
 800a714:	608b      	str	r3, [r1, #8]
 800a716:	4658      	mov	r0, fp
 800a718:	f000 feda 	bl	800b4d0 <_Bfree>
 800a71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a720:	2200      	movs	r2, #0
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	1e2b      	subs	r3, r5, #0
 800a726:	bfb9      	ittee	lt
 800a728:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a72c:	9303      	strlt	r3, [sp, #12]
 800a72e:	2300      	movge	r3, #0
 800a730:	6033      	strge	r3, [r6, #0]
 800a732:	9f03      	ldr	r7, [sp, #12]
 800a734:	4b98      	ldr	r3, [pc, #608]	@ (800a998 <_dtoa_r+0x2d0>)
 800a736:	bfbc      	itt	lt
 800a738:	2201      	movlt	r2, #1
 800a73a:	6032      	strlt	r2, [r6, #0]
 800a73c:	43bb      	bics	r3, r7
 800a73e:	d112      	bne.n	800a766 <_dtoa_r+0x9e>
 800a740:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a742:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a74c:	4323      	orrs	r3, r4
 800a74e:	f000 854d 	beq.w	800b1ec <_dtoa_r+0xb24>
 800a752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a754:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a9ac <_dtoa_r+0x2e4>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 854f 	beq.w	800b1fc <_dtoa_r+0xb34>
 800a75e:	f10a 0303 	add.w	r3, sl, #3
 800a762:	f000 bd49 	b.w	800b1f8 <_dtoa_r+0xb30>
 800a766:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a76a:	2200      	movs	r2, #0
 800a76c:	ec51 0b17 	vmov	r0, r1, d7
 800a770:	2300      	movs	r3, #0
 800a772:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a776:	f7f6 f9cf 	bl	8000b18 <__aeabi_dcmpeq>
 800a77a:	4680      	mov	r8, r0
 800a77c:	b158      	cbz	r0, 800a796 <_dtoa_r+0xce>
 800a77e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a780:	2301      	movs	r3, #1
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a786:	b113      	cbz	r3, 800a78e <_dtoa_r+0xc6>
 800a788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a78a:	4b84      	ldr	r3, [pc, #528]	@ (800a99c <_dtoa_r+0x2d4>)
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a9b0 <_dtoa_r+0x2e8>
 800a792:	f000 bd33 	b.w	800b1fc <_dtoa_r+0xb34>
 800a796:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a79a:	aa16      	add	r2, sp, #88	@ 0x58
 800a79c:	a917      	add	r1, sp, #92	@ 0x5c
 800a79e:	4658      	mov	r0, fp
 800a7a0:	f001 f980 	bl	800baa4 <__d2b>
 800a7a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a7a8:	4681      	mov	r9, r0
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	d077      	beq.n	800a89e <_dtoa_r+0x1d6>
 800a7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a7b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a7c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a7c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4b74      	ldr	r3, [pc, #464]	@ (800a9a0 <_dtoa_r+0x2d8>)
 800a7ce:	f7f5 fd83 	bl	80002d8 <__aeabi_dsub>
 800a7d2:	a369      	add	r3, pc, #420	@ (adr r3, 800a978 <_dtoa_r+0x2b0>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	f7f5 ff36 	bl	8000648 <__aeabi_dmul>
 800a7dc:	a368      	add	r3, pc, #416	@ (adr r3, 800a980 <_dtoa_r+0x2b8>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	f7f5 fd7b 	bl	80002dc <__adddf3>
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	460d      	mov	r5, r1
 800a7ec:	f7f5 fec2 	bl	8000574 <__aeabi_i2d>
 800a7f0:	a365      	add	r3, pc, #404	@ (adr r3, 800a988 <_dtoa_r+0x2c0>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 ff27 	bl	8000648 <__aeabi_dmul>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4620      	mov	r0, r4
 800a800:	4629      	mov	r1, r5
 800a802:	f7f5 fd6b 	bl	80002dc <__adddf3>
 800a806:	4604      	mov	r4, r0
 800a808:	460d      	mov	r5, r1
 800a80a:	f7f6 f9cd 	bl	8000ba8 <__aeabi_d2iz>
 800a80e:	2200      	movs	r2, #0
 800a810:	4607      	mov	r7, r0
 800a812:	2300      	movs	r3, #0
 800a814:	4620      	mov	r0, r4
 800a816:	4629      	mov	r1, r5
 800a818:	f7f6 f988 	bl	8000b2c <__aeabi_dcmplt>
 800a81c:	b140      	cbz	r0, 800a830 <_dtoa_r+0x168>
 800a81e:	4638      	mov	r0, r7
 800a820:	f7f5 fea8 	bl	8000574 <__aeabi_i2d>
 800a824:	4622      	mov	r2, r4
 800a826:	462b      	mov	r3, r5
 800a828:	f7f6 f976 	bl	8000b18 <__aeabi_dcmpeq>
 800a82c:	b900      	cbnz	r0, 800a830 <_dtoa_r+0x168>
 800a82e:	3f01      	subs	r7, #1
 800a830:	2f16      	cmp	r7, #22
 800a832:	d851      	bhi.n	800a8d8 <_dtoa_r+0x210>
 800a834:	4b5b      	ldr	r3, [pc, #364]	@ (800a9a4 <_dtoa_r+0x2dc>)
 800a836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a842:	f7f6 f973 	bl	8000b2c <__aeabi_dcmplt>
 800a846:	2800      	cmp	r0, #0
 800a848:	d048      	beq.n	800a8dc <_dtoa_r+0x214>
 800a84a:	3f01      	subs	r7, #1
 800a84c:	2300      	movs	r3, #0
 800a84e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a850:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a852:	1b9b      	subs	r3, r3, r6
 800a854:	1e5a      	subs	r2, r3, #1
 800a856:	bf44      	itt	mi
 800a858:	f1c3 0801 	rsbmi	r8, r3, #1
 800a85c:	2300      	movmi	r3, #0
 800a85e:	9208      	str	r2, [sp, #32]
 800a860:	bf54      	ite	pl
 800a862:	f04f 0800 	movpl.w	r8, #0
 800a866:	9308      	strmi	r3, [sp, #32]
 800a868:	2f00      	cmp	r7, #0
 800a86a:	db39      	blt.n	800a8e0 <_dtoa_r+0x218>
 800a86c:	9b08      	ldr	r3, [sp, #32]
 800a86e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a870:	443b      	add	r3, r7
 800a872:	9308      	str	r3, [sp, #32]
 800a874:	2300      	movs	r3, #0
 800a876:	930a      	str	r3, [sp, #40]	@ 0x28
 800a878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a87a:	2b09      	cmp	r3, #9
 800a87c:	d864      	bhi.n	800a948 <_dtoa_r+0x280>
 800a87e:	2b05      	cmp	r3, #5
 800a880:	bfc4      	itt	gt
 800a882:	3b04      	subgt	r3, #4
 800a884:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a888:	f1a3 0302 	sub.w	r3, r3, #2
 800a88c:	bfcc      	ite	gt
 800a88e:	2400      	movgt	r4, #0
 800a890:	2401      	movle	r4, #1
 800a892:	2b03      	cmp	r3, #3
 800a894:	d863      	bhi.n	800a95e <_dtoa_r+0x296>
 800a896:	e8df f003 	tbb	[pc, r3]
 800a89a:	372a      	.short	0x372a
 800a89c:	5535      	.short	0x5535
 800a89e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a8a2:	441e      	add	r6, r3
 800a8a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a8a8:	2b20      	cmp	r3, #32
 800a8aa:	bfc1      	itttt	gt
 800a8ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a8b0:	409f      	lslgt	r7, r3
 800a8b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a8b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a8ba:	bfd6      	itet	le
 800a8bc:	f1c3 0320 	rsble	r3, r3, #32
 800a8c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a8c4:	fa04 f003 	lslle.w	r0, r4, r3
 800a8c8:	f7f5 fe44 	bl	8000554 <__aeabi_ui2d>
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a8d2:	3e01      	subs	r6, #1
 800a8d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a8d6:	e777      	b.n	800a7c8 <_dtoa_r+0x100>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e7b8      	b.n	800a84e <_dtoa_r+0x186>
 800a8dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a8de:	e7b7      	b.n	800a850 <_dtoa_r+0x188>
 800a8e0:	427b      	negs	r3, r7
 800a8e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	eba8 0807 	sub.w	r8, r8, r7
 800a8ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8ec:	e7c4      	b.n	800a878 <_dtoa_r+0x1b0>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	dc35      	bgt.n	800a964 <_dtoa_r+0x29c>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	9307      	str	r3, [sp, #28]
 800a8fe:	461a      	mov	r2, r3
 800a900:	920e      	str	r2, [sp, #56]	@ 0x38
 800a902:	e00b      	b.n	800a91c <_dtoa_r+0x254>
 800a904:	2301      	movs	r3, #1
 800a906:	e7f3      	b.n	800a8f0 <_dtoa_r+0x228>
 800a908:	2300      	movs	r3, #0
 800a90a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a90e:	18fb      	adds	r3, r7, r3
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	3301      	adds	r3, #1
 800a914:	2b01      	cmp	r3, #1
 800a916:	9307      	str	r3, [sp, #28]
 800a918:	bfb8      	it	lt
 800a91a:	2301      	movlt	r3, #1
 800a91c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a920:	2100      	movs	r1, #0
 800a922:	2204      	movs	r2, #4
 800a924:	f102 0514 	add.w	r5, r2, #20
 800a928:	429d      	cmp	r5, r3
 800a92a:	d91f      	bls.n	800a96c <_dtoa_r+0x2a4>
 800a92c:	6041      	str	r1, [r0, #4]
 800a92e:	4658      	mov	r0, fp
 800a930:	f000 fd8e 	bl	800b450 <_Balloc>
 800a934:	4682      	mov	sl, r0
 800a936:	2800      	cmp	r0, #0
 800a938:	d13c      	bne.n	800a9b4 <_dtoa_r+0x2ec>
 800a93a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a8 <_dtoa_r+0x2e0>)
 800a93c:	4602      	mov	r2, r0
 800a93e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a942:	e6d8      	b.n	800a6f6 <_dtoa_r+0x2e>
 800a944:	2301      	movs	r3, #1
 800a946:	e7e0      	b.n	800a90a <_dtoa_r+0x242>
 800a948:	2401      	movs	r4, #1
 800a94a:	2300      	movs	r3, #0
 800a94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a94e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a950:	f04f 33ff 	mov.w	r3, #4294967295
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	9307      	str	r3, [sp, #28]
 800a958:	2200      	movs	r2, #0
 800a95a:	2312      	movs	r3, #18
 800a95c:	e7d0      	b.n	800a900 <_dtoa_r+0x238>
 800a95e:	2301      	movs	r3, #1
 800a960:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a962:	e7f5      	b.n	800a950 <_dtoa_r+0x288>
 800a964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	9307      	str	r3, [sp, #28]
 800a96a:	e7d7      	b.n	800a91c <_dtoa_r+0x254>
 800a96c:	3101      	adds	r1, #1
 800a96e:	0052      	lsls	r2, r2, #1
 800a970:	e7d8      	b.n	800a924 <_dtoa_r+0x25c>
 800a972:	bf00      	nop
 800a974:	f3af 8000 	nop.w
 800a978:	636f4361 	.word	0x636f4361
 800a97c:	3fd287a7 	.word	0x3fd287a7
 800a980:	8b60c8b3 	.word	0x8b60c8b3
 800a984:	3fc68a28 	.word	0x3fc68a28
 800a988:	509f79fb 	.word	0x509f79fb
 800a98c:	3fd34413 	.word	0x3fd34413
 800a990:	0800cf26 	.word	0x0800cf26
 800a994:	0800cf3d 	.word	0x0800cf3d
 800a998:	7ff00000 	.word	0x7ff00000
 800a99c:	0800cef6 	.word	0x0800cef6
 800a9a0:	3ff80000 	.word	0x3ff80000
 800a9a4:	0800d038 	.word	0x0800d038
 800a9a8:	0800cf95 	.word	0x0800cf95
 800a9ac:	0800cf22 	.word	0x0800cf22
 800a9b0:	0800cef5 	.word	0x0800cef5
 800a9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9b8:	6018      	str	r0, [r3, #0]
 800a9ba:	9b07      	ldr	r3, [sp, #28]
 800a9bc:	2b0e      	cmp	r3, #14
 800a9be:	f200 80a4 	bhi.w	800ab0a <_dtoa_r+0x442>
 800a9c2:	2c00      	cmp	r4, #0
 800a9c4:	f000 80a1 	beq.w	800ab0a <_dtoa_r+0x442>
 800a9c8:	2f00      	cmp	r7, #0
 800a9ca:	dd33      	ble.n	800aa34 <_dtoa_r+0x36c>
 800a9cc:	4bad      	ldr	r3, [pc, #692]	@ (800ac84 <_dtoa_r+0x5bc>)
 800a9ce:	f007 020f 	and.w	r2, r7, #15
 800a9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9d6:	ed93 7b00 	vldr	d7, [r3]
 800a9da:	05f8      	lsls	r0, r7, #23
 800a9dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9e4:	d516      	bpl.n	800aa14 <_dtoa_r+0x34c>
 800a9e6:	4ba8      	ldr	r3, [pc, #672]	@ (800ac88 <_dtoa_r+0x5c0>)
 800a9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9f0:	f7f5 ff54 	bl	800089c <__aeabi_ddiv>
 800a9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9f8:	f004 040f 	and.w	r4, r4, #15
 800a9fc:	2603      	movs	r6, #3
 800a9fe:	4da2      	ldr	r5, [pc, #648]	@ (800ac88 <_dtoa_r+0x5c0>)
 800aa00:	b954      	cbnz	r4, 800aa18 <_dtoa_r+0x350>
 800aa02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa0a:	f7f5 ff47 	bl	800089c <__aeabi_ddiv>
 800aa0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa12:	e028      	b.n	800aa66 <_dtoa_r+0x39e>
 800aa14:	2602      	movs	r6, #2
 800aa16:	e7f2      	b.n	800a9fe <_dtoa_r+0x336>
 800aa18:	07e1      	lsls	r1, r4, #31
 800aa1a:	d508      	bpl.n	800aa2e <_dtoa_r+0x366>
 800aa1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa24:	f7f5 fe10 	bl	8000648 <__aeabi_dmul>
 800aa28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa2c:	3601      	adds	r6, #1
 800aa2e:	1064      	asrs	r4, r4, #1
 800aa30:	3508      	adds	r5, #8
 800aa32:	e7e5      	b.n	800aa00 <_dtoa_r+0x338>
 800aa34:	f000 80d2 	beq.w	800abdc <_dtoa_r+0x514>
 800aa38:	427c      	negs	r4, r7
 800aa3a:	4b92      	ldr	r3, [pc, #584]	@ (800ac84 <_dtoa_r+0x5bc>)
 800aa3c:	4d92      	ldr	r5, [pc, #584]	@ (800ac88 <_dtoa_r+0x5c0>)
 800aa3e:	f004 020f 	and.w	r2, r4, #15
 800aa42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa4e:	f7f5 fdfb 	bl	8000648 <__aeabi_dmul>
 800aa52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa56:	1124      	asrs	r4, r4, #4
 800aa58:	2300      	movs	r3, #0
 800aa5a:	2602      	movs	r6, #2
 800aa5c:	2c00      	cmp	r4, #0
 800aa5e:	f040 80b2 	bne.w	800abc6 <_dtoa_r+0x4fe>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1d3      	bne.n	800aa0e <_dtoa_r+0x346>
 800aa66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 80b7 	beq.w	800abe0 <_dtoa_r+0x518>
 800aa72:	4b86      	ldr	r3, [pc, #536]	@ (800ac8c <_dtoa_r+0x5c4>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	4620      	mov	r0, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7f6 f857 	bl	8000b2c <__aeabi_dcmplt>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f000 80ae 	beq.w	800abe0 <_dtoa_r+0x518>
 800aa84:	9b07      	ldr	r3, [sp, #28]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 80aa 	beq.w	800abe0 <_dtoa_r+0x518>
 800aa8c:	9b00      	ldr	r3, [sp, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	dd37      	ble.n	800ab02 <_dtoa_r+0x43a>
 800aa92:	1e7b      	subs	r3, r7, #1
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	4620      	mov	r0, r4
 800aa98:	4b7d      	ldr	r3, [pc, #500]	@ (800ac90 <_dtoa_r+0x5c8>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	f7f5 fdd3 	bl	8000648 <__aeabi_dmul>
 800aaa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa6:	9c00      	ldr	r4, [sp, #0]
 800aaa8:	3601      	adds	r6, #1
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f7f5 fd62 	bl	8000574 <__aeabi_i2d>
 800aab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aab4:	f7f5 fdc8 	bl	8000648 <__aeabi_dmul>
 800aab8:	4b76      	ldr	r3, [pc, #472]	@ (800ac94 <_dtoa_r+0x5cc>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	f7f5 fc0e 	bl	80002dc <__adddf3>
 800aac0:	4605      	mov	r5, r0
 800aac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	f040 808d 	bne.w	800abe6 <_dtoa_r+0x51e>
 800aacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aad0:	4b71      	ldr	r3, [pc, #452]	@ (800ac98 <_dtoa_r+0x5d0>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	f7f5 fc00 	bl	80002d8 <__aeabi_dsub>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aae0:	462a      	mov	r2, r5
 800aae2:	4633      	mov	r3, r6
 800aae4:	f7f6 f840 	bl	8000b68 <__aeabi_dcmpgt>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f040 828b 	bne.w	800b004 <_dtoa_r+0x93c>
 800aaee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf2:	462a      	mov	r2, r5
 800aaf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aaf8:	f7f6 f818 	bl	8000b2c <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f040 8128 	bne.w	800ad52 <_dtoa_r+0x68a>
 800ab02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ab06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ab0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f2c0 815a 	blt.w	800adc6 <_dtoa_r+0x6fe>
 800ab12:	2f0e      	cmp	r7, #14
 800ab14:	f300 8157 	bgt.w	800adc6 <_dtoa_r+0x6fe>
 800ab18:	4b5a      	ldr	r3, [pc, #360]	@ (800ac84 <_dtoa_r+0x5bc>)
 800ab1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab1e:	ed93 7b00 	vldr	d7, [r3]
 800ab22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	ed8d 7b00 	vstr	d7, [sp]
 800ab2a:	da03      	bge.n	800ab34 <_dtoa_r+0x46c>
 800ab2c:	9b07      	ldr	r3, [sp, #28]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f340 8101 	ble.w	800ad36 <_dtoa_r+0x66e>
 800ab34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab38:	4656      	mov	r6, sl
 800ab3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab3e:	4620      	mov	r0, r4
 800ab40:	4629      	mov	r1, r5
 800ab42:	f7f5 feab 	bl	800089c <__aeabi_ddiv>
 800ab46:	f7f6 f82f 	bl	8000ba8 <__aeabi_d2iz>
 800ab4a:	4680      	mov	r8, r0
 800ab4c:	f7f5 fd12 	bl	8000574 <__aeabi_i2d>
 800ab50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab54:	f7f5 fd78 	bl	8000648 <__aeabi_dmul>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab64:	f7f5 fbb8 	bl	80002d8 <__aeabi_dsub>
 800ab68:	f806 4b01 	strb.w	r4, [r6], #1
 800ab6c:	9d07      	ldr	r5, [sp, #28]
 800ab6e:	eba6 040a 	sub.w	r4, r6, sl
 800ab72:	42a5      	cmp	r5, r4
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	f040 8117 	bne.w	800adaa <_dtoa_r+0x6e2>
 800ab7c:	f7f5 fbae 	bl	80002dc <__adddf3>
 800ab80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab84:	4604      	mov	r4, r0
 800ab86:	460d      	mov	r5, r1
 800ab88:	f7f5 ffee 	bl	8000b68 <__aeabi_dcmpgt>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	f040 80f9 	bne.w	800ad84 <_dtoa_r+0x6bc>
 800ab92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab96:	4620      	mov	r0, r4
 800ab98:	4629      	mov	r1, r5
 800ab9a:	f7f5 ffbd 	bl	8000b18 <__aeabi_dcmpeq>
 800ab9e:	b118      	cbz	r0, 800aba8 <_dtoa_r+0x4e0>
 800aba0:	f018 0f01 	tst.w	r8, #1
 800aba4:	f040 80ee 	bne.w	800ad84 <_dtoa_r+0x6bc>
 800aba8:	4649      	mov	r1, r9
 800abaa:	4658      	mov	r0, fp
 800abac:	f000 fc90 	bl	800b4d0 <_Bfree>
 800abb0:	2300      	movs	r3, #0
 800abb2:	7033      	strb	r3, [r6, #0]
 800abb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abb6:	3701      	adds	r7, #1
 800abb8:	601f      	str	r7, [r3, #0]
 800abba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 831d 	beq.w	800b1fc <_dtoa_r+0xb34>
 800abc2:	601e      	str	r6, [r3, #0]
 800abc4:	e31a      	b.n	800b1fc <_dtoa_r+0xb34>
 800abc6:	07e2      	lsls	r2, r4, #31
 800abc8:	d505      	bpl.n	800abd6 <_dtoa_r+0x50e>
 800abca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abce:	f7f5 fd3b 	bl	8000648 <__aeabi_dmul>
 800abd2:	3601      	adds	r6, #1
 800abd4:	2301      	movs	r3, #1
 800abd6:	1064      	asrs	r4, r4, #1
 800abd8:	3508      	adds	r5, #8
 800abda:	e73f      	b.n	800aa5c <_dtoa_r+0x394>
 800abdc:	2602      	movs	r6, #2
 800abde:	e742      	b.n	800aa66 <_dtoa_r+0x39e>
 800abe0:	9c07      	ldr	r4, [sp, #28]
 800abe2:	9704      	str	r7, [sp, #16]
 800abe4:	e761      	b.n	800aaaa <_dtoa_r+0x3e2>
 800abe6:	4b27      	ldr	r3, [pc, #156]	@ (800ac84 <_dtoa_r+0x5bc>)
 800abe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abf2:	4454      	add	r4, sl
 800abf4:	2900      	cmp	r1, #0
 800abf6:	d053      	beq.n	800aca0 <_dtoa_r+0x5d8>
 800abf8:	4928      	ldr	r1, [pc, #160]	@ (800ac9c <_dtoa_r+0x5d4>)
 800abfa:	2000      	movs	r0, #0
 800abfc:	f7f5 fe4e 	bl	800089c <__aeabi_ddiv>
 800ac00:	4633      	mov	r3, r6
 800ac02:	462a      	mov	r2, r5
 800ac04:	f7f5 fb68 	bl	80002d8 <__aeabi_dsub>
 800ac08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac0c:	4656      	mov	r6, sl
 800ac0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac12:	f7f5 ffc9 	bl	8000ba8 <__aeabi_d2iz>
 800ac16:	4605      	mov	r5, r0
 800ac18:	f7f5 fcac 	bl	8000574 <__aeabi_i2d>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac24:	f7f5 fb58 	bl	80002d8 <__aeabi_dsub>
 800ac28:	3530      	adds	r5, #48	@ 0x30
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac32:	f806 5b01 	strb.w	r5, [r6], #1
 800ac36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac3a:	f7f5 ff77 	bl	8000b2c <__aeabi_dcmplt>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d171      	bne.n	800ad26 <_dtoa_r+0x65e>
 800ac42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac46:	4911      	ldr	r1, [pc, #68]	@ (800ac8c <_dtoa_r+0x5c4>)
 800ac48:	2000      	movs	r0, #0
 800ac4a:	f7f5 fb45 	bl	80002d8 <__aeabi_dsub>
 800ac4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac52:	f7f5 ff6b 	bl	8000b2c <__aeabi_dcmplt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f040 8095 	bne.w	800ad86 <_dtoa_r+0x6be>
 800ac5c:	42a6      	cmp	r6, r4
 800ac5e:	f43f af50 	beq.w	800ab02 <_dtoa_r+0x43a>
 800ac62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac66:	4b0a      	ldr	r3, [pc, #40]	@ (800ac90 <_dtoa_r+0x5c8>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f7f5 fced 	bl	8000648 <__aeabi_dmul>
 800ac6e:	4b08      	ldr	r3, [pc, #32]	@ (800ac90 <_dtoa_r+0x5c8>)
 800ac70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac74:	2200      	movs	r2, #0
 800ac76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac7a:	f7f5 fce5 	bl	8000648 <__aeabi_dmul>
 800ac7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac82:	e7c4      	b.n	800ac0e <_dtoa_r+0x546>
 800ac84:	0800d038 	.word	0x0800d038
 800ac88:	0800d010 	.word	0x0800d010
 800ac8c:	3ff00000 	.word	0x3ff00000
 800ac90:	40240000 	.word	0x40240000
 800ac94:	401c0000 	.word	0x401c0000
 800ac98:	40140000 	.word	0x40140000
 800ac9c:	3fe00000 	.word	0x3fe00000
 800aca0:	4631      	mov	r1, r6
 800aca2:	4628      	mov	r0, r5
 800aca4:	f7f5 fcd0 	bl	8000648 <__aeabi_dmul>
 800aca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acac:	9415      	str	r4, [sp, #84]	@ 0x54
 800acae:	4656      	mov	r6, sl
 800acb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acb4:	f7f5 ff78 	bl	8000ba8 <__aeabi_d2iz>
 800acb8:	4605      	mov	r5, r0
 800acba:	f7f5 fc5b 	bl	8000574 <__aeabi_i2d>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc6:	f7f5 fb07 	bl	80002d8 <__aeabi_dsub>
 800acca:	3530      	adds	r5, #48	@ 0x30
 800accc:	f806 5b01 	strb.w	r5, [r6], #1
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	42a6      	cmp	r6, r4
 800acd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acda:	f04f 0200 	mov.w	r2, #0
 800acde:	d124      	bne.n	800ad2a <_dtoa_r+0x662>
 800ace0:	4bac      	ldr	r3, [pc, #688]	@ (800af94 <_dtoa_r+0x8cc>)
 800ace2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ace6:	f7f5 faf9 	bl	80002dc <__adddf3>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf2:	f7f5 ff39 	bl	8000b68 <__aeabi_dcmpgt>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d145      	bne.n	800ad86 <_dtoa_r+0x6be>
 800acfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acfe:	49a5      	ldr	r1, [pc, #660]	@ (800af94 <_dtoa_r+0x8cc>)
 800ad00:	2000      	movs	r0, #0
 800ad02:	f7f5 fae9 	bl	80002d8 <__aeabi_dsub>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad0e:	f7f5 ff0d 	bl	8000b2c <__aeabi_dcmplt>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	f43f aef5 	beq.w	800ab02 <_dtoa_r+0x43a>
 800ad18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ad1a:	1e73      	subs	r3, r6, #1
 800ad1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad22:	2b30      	cmp	r3, #48	@ 0x30
 800ad24:	d0f8      	beq.n	800ad18 <_dtoa_r+0x650>
 800ad26:	9f04      	ldr	r7, [sp, #16]
 800ad28:	e73e      	b.n	800aba8 <_dtoa_r+0x4e0>
 800ad2a:	4b9b      	ldr	r3, [pc, #620]	@ (800af98 <_dtoa_r+0x8d0>)
 800ad2c:	f7f5 fc8c 	bl	8000648 <__aeabi_dmul>
 800ad30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad34:	e7bc      	b.n	800acb0 <_dtoa_r+0x5e8>
 800ad36:	d10c      	bne.n	800ad52 <_dtoa_r+0x68a>
 800ad38:	4b98      	ldr	r3, [pc, #608]	@ (800af9c <_dtoa_r+0x8d4>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad40:	f7f5 fc82 	bl	8000648 <__aeabi_dmul>
 800ad44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad48:	f7f5 ff04 	bl	8000b54 <__aeabi_dcmpge>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f000 8157 	beq.w	800b000 <_dtoa_r+0x938>
 800ad52:	2400      	movs	r4, #0
 800ad54:	4625      	mov	r5, r4
 800ad56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad58:	43db      	mvns	r3, r3
 800ad5a:	9304      	str	r3, [sp, #16]
 800ad5c:	4656      	mov	r6, sl
 800ad5e:	2700      	movs	r7, #0
 800ad60:	4621      	mov	r1, r4
 800ad62:	4658      	mov	r0, fp
 800ad64:	f000 fbb4 	bl	800b4d0 <_Bfree>
 800ad68:	2d00      	cmp	r5, #0
 800ad6a:	d0dc      	beq.n	800ad26 <_dtoa_r+0x65e>
 800ad6c:	b12f      	cbz	r7, 800ad7a <_dtoa_r+0x6b2>
 800ad6e:	42af      	cmp	r7, r5
 800ad70:	d003      	beq.n	800ad7a <_dtoa_r+0x6b2>
 800ad72:	4639      	mov	r1, r7
 800ad74:	4658      	mov	r0, fp
 800ad76:	f000 fbab 	bl	800b4d0 <_Bfree>
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	4658      	mov	r0, fp
 800ad7e:	f000 fba7 	bl	800b4d0 <_Bfree>
 800ad82:	e7d0      	b.n	800ad26 <_dtoa_r+0x65e>
 800ad84:	9704      	str	r7, [sp, #16]
 800ad86:	4633      	mov	r3, r6
 800ad88:	461e      	mov	r6, r3
 800ad8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad8e:	2a39      	cmp	r2, #57	@ 0x39
 800ad90:	d107      	bne.n	800ada2 <_dtoa_r+0x6da>
 800ad92:	459a      	cmp	sl, r3
 800ad94:	d1f8      	bne.n	800ad88 <_dtoa_r+0x6c0>
 800ad96:	9a04      	ldr	r2, [sp, #16]
 800ad98:	3201      	adds	r2, #1
 800ad9a:	9204      	str	r2, [sp, #16]
 800ad9c:	2230      	movs	r2, #48	@ 0x30
 800ad9e:	f88a 2000 	strb.w	r2, [sl]
 800ada2:	781a      	ldrb	r2, [r3, #0]
 800ada4:	3201      	adds	r2, #1
 800ada6:	701a      	strb	r2, [r3, #0]
 800ada8:	e7bd      	b.n	800ad26 <_dtoa_r+0x65e>
 800adaa:	4b7b      	ldr	r3, [pc, #492]	@ (800af98 <_dtoa_r+0x8d0>)
 800adac:	2200      	movs	r2, #0
 800adae:	f7f5 fc4b 	bl	8000648 <__aeabi_dmul>
 800adb2:	2200      	movs	r2, #0
 800adb4:	2300      	movs	r3, #0
 800adb6:	4604      	mov	r4, r0
 800adb8:	460d      	mov	r5, r1
 800adba:	f7f5 fead 	bl	8000b18 <__aeabi_dcmpeq>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f43f aebb 	beq.w	800ab3a <_dtoa_r+0x472>
 800adc4:	e6f0      	b.n	800aba8 <_dtoa_r+0x4e0>
 800adc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800adc8:	2a00      	cmp	r2, #0
 800adca:	f000 80db 	beq.w	800af84 <_dtoa_r+0x8bc>
 800adce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800add0:	2a01      	cmp	r2, #1
 800add2:	f300 80bf 	bgt.w	800af54 <_dtoa_r+0x88c>
 800add6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800add8:	2a00      	cmp	r2, #0
 800adda:	f000 80b7 	beq.w	800af4c <_dtoa_r+0x884>
 800adde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ade2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ade4:	4646      	mov	r6, r8
 800ade6:	9a08      	ldr	r2, [sp, #32]
 800ade8:	2101      	movs	r1, #1
 800adea:	441a      	add	r2, r3
 800adec:	4658      	mov	r0, fp
 800adee:	4498      	add	r8, r3
 800adf0:	9208      	str	r2, [sp, #32]
 800adf2:	f000 fc21 	bl	800b638 <__i2b>
 800adf6:	4605      	mov	r5, r0
 800adf8:	b15e      	cbz	r6, 800ae12 <_dtoa_r+0x74a>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	dd08      	ble.n	800ae12 <_dtoa_r+0x74a>
 800ae00:	42b3      	cmp	r3, r6
 800ae02:	9a08      	ldr	r2, [sp, #32]
 800ae04:	bfa8      	it	ge
 800ae06:	4633      	movge	r3, r6
 800ae08:	eba8 0803 	sub.w	r8, r8, r3
 800ae0c:	1af6      	subs	r6, r6, r3
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	9308      	str	r3, [sp, #32]
 800ae12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae14:	b1f3      	cbz	r3, 800ae54 <_dtoa_r+0x78c>
 800ae16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80b7 	beq.w	800af8c <_dtoa_r+0x8c4>
 800ae1e:	b18c      	cbz	r4, 800ae44 <_dtoa_r+0x77c>
 800ae20:	4629      	mov	r1, r5
 800ae22:	4622      	mov	r2, r4
 800ae24:	4658      	mov	r0, fp
 800ae26:	f000 fcc7 	bl	800b7b8 <__pow5mult>
 800ae2a:	464a      	mov	r2, r9
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	4605      	mov	r5, r0
 800ae30:	4658      	mov	r0, fp
 800ae32:	f000 fc17 	bl	800b664 <__multiply>
 800ae36:	4649      	mov	r1, r9
 800ae38:	9004      	str	r0, [sp, #16]
 800ae3a:	4658      	mov	r0, fp
 800ae3c:	f000 fb48 	bl	800b4d0 <_Bfree>
 800ae40:	9b04      	ldr	r3, [sp, #16]
 800ae42:	4699      	mov	r9, r3
 800ae44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae46:	1b1a      	subs	r2, r3, r4
 800ae48:	d004      	beq.n	800ae54 <_dtoa_r+0x78c>
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	4658      	mov	r0, fp
 800ae4e:	f000 fcb3 	bl	800b7b8 <__pow5mult>
 800ae52:	4681      	mov	r9, r0
 800ae54:	2101      	movs	r1, #1
 800ae56:	4658      	mov	r0, fp
 800ae58:	f000 fbee 	bl	800b638 <__i2b>
 800ae5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae5e:	4604      	mov	r4, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 81cf 	beq.w	800b204 <_dtoa_r+0xb3c>
 800ae66:	461a      	mov	r2, r3
 800ae68:	4601      	mov	r1, r0
 800ae6a:	4658      	mov	r0, fp
 800ae6c:	f000 fca4 	bl	800b7b8 <__pow5mult>
 800ae70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	4604      	mov	r4, r0
 800ae76:	f300 8095 	bgt.w	800afa4 <_dtoa_r+0x8dc>
 800ae7a:	9b02      	ldr	r3, [sp, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f040 8087 	bne.w	800af90 <_dtoa_r+0x8c8>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f040 8089 	bne.w	800afa0 <_dtoa_r+0x8d8>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae94:	0d1b      	lsrs	r3, r3, #20
 800ae96:	051b      	lsls	r3, r3, #20
 800ae98:	b12b      	cbz	r3, 800aea6 <_dtoa_r+0x7de>
 800ae9a:	9b08      	ldr	r3, [sp, #32]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	9308      	str	r3, [sp, #32]
 800aea0:	f108 0801 	add.w	r8, r8, #1
 800aea4:	2301      	movs	r3, #1
 800aea6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f000 81b0 	beq.w	800b210 <_dtoa_r+0xb48>
 800aeb0:	6923      	ldr	r3, [r4, #16]
 800aeb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aeb6:	6918      	ldr	r0, [r3, #16]
 800aeb8:	f000 fb72 	bl	800b5a0 <__hi0bits>
 800aebc:	f1c0 0020 	rsb	r0, r0, #32
 800aec0:	9b08      	ldr	r3, [sp, #32]
 800aec2:	4418      	add	r0, r3
 800aec4:	f010 001f 	ands.w	r0, r0, #31
 800aec8:	d077      	beq.n	800afba <_dtoa_r+0x8f2>
 800aeca:	f1c0 0320 	rsb	r3, r0, #32
 800aece:	2b04      	cmp	r3, #4
 800aed0:	dd6b      	ble.n	800afaa <_dtoa_r+0x8e2>
 800aed2:	9b08      	ldr	r3, [sp, #32]
 800aed4:	f1c0 001c 	rsb	r0, r0, #28
 800aed8:	4403      	add	r3, r0
 800aeda:	4480      	add	r8, r0
 800aedc:	4406      	add	r6, r0
 800aede:	9308      	str	r3, [sp, #32]
 800aee0:	f1b8 0f00 	cmp.w	r8, #0
 800aee4:	dd05      	ble.n	800aef2 <_dtoa_r+0x82a>
 800aee6:	4649      	mov	r1, r9
 800aee8:	4642      	mov	r2, r8
 800aeea:	4658      	mov	r0, fp
 800aeec:	f000 fcbe 	bl	800b86c <__lshift>
 800aef0:	4681      	mov	r9, r0
 800aef2:	9b08      	ldr	r3, [sp, #32]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dd05      	ble.n	800af04 <_dtoa_r+0x83c>
 800aef8:	4621      	mov	r1, r4
 800aefa:	461a      	mov	r2, r3
 800aefc:	4658      	mov	r0, fp
 800aefe:	f000 fcb5 	bl	800b86c <__lshift>
 800af02:	4604      	mov	r4, r0
 800af04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af06:	2b00      	cmp	r3, #0
 800af08:	d059      	beq.n	800afbe <_dtoa_r+0x8f6>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4648      	mov	r0, r9
 800af0e:	f000 fd19 	bl	800b944 <__mcmp>
 800af12:	2800      	cmp	r0, #0
 800af14:	da53      	bge.n	800afbe <_dtoa_r+0x8f6>
 800af16:	1e7b      	subs	r3, r7, #1
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	4649      	mov	r1, r9
 800af1c:	2300      	movs	r3, #0
 800af1e:	220a      	movs	r2, #10
 800af20:	4658      	mov	r0, fp
 800af22:	f000 faf7 	bl	800b514 <__multadd>
 800af26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af28:	4681      	mov	r9, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 8172 	beq.w	800b214 <_dtoa_r+0xb4c>
 800af30:	2300      	movs	r3, #0
 800af32:	4629      	mov	r1, r5
 800af34:	220a      	movs	r2, #10
 800af36:	4658      	mov	r0, fp
 800af38:	f000 faec 	bl	800b514 <__multadd>
 800af3c:	9b00      	ldr	r3, [sp, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	4605      	mov	r5, r0
 800af42:	dc67      	bgt.n	800b014 <_dtoa_r+0x94c>
 800af44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af46:	2b02      	cmp	r3, #2
 800af48:	dc41      	bgt.n	800afce <_dtoa_r+0x906>
 800af4a:	e063      	b.n	800b014 <_dtoa_r+0x94c>
 800af4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af52:	e746      	b.n	800ade2 <_dtoa_r+0x71a>
 800af54:	9b07      	ldr	r3, [sp, #28]
 800af56:	1e5c      	subs	r4, r3, #1
 800af58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af5a:	42a3      	cmp	r3, r4
 800af5c:	bfbf      	itttt	lt
 800af5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800af60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800af62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800af64:	1ae3      	sublt	r3, r4, r3
 800af66:	bfb4      	ite	lt
 800af68:	18d2      	addlt	r2, r2, r3
 800af6a:	1b1c      	subge	r4, r3, r4
 800af6c:	9b07      	ldr	r3, [sp, #28]
 800af6e:	bfbc      	itt	lt
 800af70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af72:	2400      	movlt	r4, #0
 800af74:	2b00      	cmp	r3, #0
 800af76:	bfb5      	itete	lt
 800af78:	eba8 0603 	sublt.w	r6, r8, r3
 800af7c:	9b07      	ldrge	r3, [sp, #28]
 800af7e:	2300      	movlt	r3, #0
 800af80:	4646      	movge	r6, r8
 800af82:	e730      	b.n	800ade6 <_dtoa_r+0x71e>
 800af84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af88:	4646      	mov	r6, r8
 800af8a:	e735      	b.n	800adf8 <_dtoa_r+0x730>
 800af8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af8e:	e75c      	b.n	800ae4a <_dtoa_r+0x782>
 800af90:	2300      	movs	r3, #0
 800af92:	e788      	b.n	800aea6 <_dtoa_r+0x7de>
 800af94:	3fe00000 	.word	0x3fe00000
 800af98:	40240000 	.word	0x40240000
 800af9c:	40140000 	.word	0x40140000
 800afa0:	9b02      	ldr	r3, [sp, #8]
 800afa2:	e780      	b.n	800aea6 <_dtoa_r+0x7de>
 800afa4:	2300      	movs	r3, #0
 800afa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa8:	e782      	b.n	800aeb0 <_dtoa_r+0x7e8>
 800afaa:	d099      	beq.n	800aee0 <_dtoa_r+0x818>
 800afac:	9a08      	ldr	r2, [sp, #32]
 800afae:	331c      	adds	r3, #28
 800afb0:	441a      	add	r2, r3
 800afb2:	4498      	add	r8, r3
 800afb4:	441e      	add	r6, r3
 800afb6:	9208      	str	r2, [sp, #32]
 800afb8:	e792      	b.n	800aee0 <_dtoa_r+0x818>
 800afba:	4603      	mov	r3, r0
 800afbc:	e7f6      	b.n	800afac <_dtoa_r+0x8e4>
 800afbe:	9b07      	ldr	r3, [sp, #28]
 800afc0:	9704      	str	r7, [sp, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dc20      	bgt.n	800b008 <_dtoa_r+0x940>
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afca:	2b02      	cmp	r3, #2
 800afcc:	dd1e      	ble.n	800b00c <_dtoa_r+0x944>
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f47f aec0 	bne.w	800ad56 <_dtoa_r+0x68e>
 800afd6:	4621      	mov	r1, r4
 800afd8:	2205      	movs	r2, #5
 800afda:	4658      	mov	r0, fp
 800afdc:	f000 fa9a 	bl	800b514 <__multadd>
 800afe0:	4601      	mov	r1, r0
 800afe2:	4604      	mov	r4, r0
 800afe4:	4648      	mov	r0, r9
 800afe6:	f000 fcad 	bl	800b944 <__mcmp>
 800afea:	2800      	cmp	r0, #0
 800afec:	f77f aeb3 	ble.w	800ad56 <_dtoa_r+0x68e>
 800aff0:	4656      	mov	r6, sl
 800aff2:	2331      	movs	r3, #49	@ 0x31
 800aff4:	f806 3b01 	strb.w	r3, [r6], #1
 800aff8:	9b04      	ldr	r3, [sp, #16]
 800affa:	3301      	adds	r3, #1
 800affc:	9304      	str	r3, [sp, #16]
 800affe:	e6ae      	b.n	800ad5e <_dtoa_r+0x696>
 800b000:	9c07      	ldr	r4, [sp, #28]
 800b002:	9704      	str	r7, [sp, #16]
 800b004:	4625      	mov	r5, r4
 800b006:	e7f3      	b.n	800aff0 <_dtoa_r+0x928>
 800b008:	9b07      	ldr	r3, [sp, #28]
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 8104 	beq.w	800b21c <_dtoa_r+0xb54>
 800b014:	2e00      	cmp	r6, #0
 800b016:	dd05      	ble.n	800b024 <_dtoa_r+0x95c>
 800b018:	4629      	mov	r1, r5
 800b01a:	4632      	mov	r2, r6
 800b01c:	4658      	mov	r0, fp
 800b01e:	f000 fc25 	bl	800b86c <__lshift>
 800b022:	4605      	mov	r5, r0
 800b024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	d05a      	beq.n	800b0e0 <_dtoa_r+0xa18>
 800b02a:	6869      	ldr	r1, [r5, #4]
 800b02c:	4658      	mov	r0, fp
 800b02e:	f000 fa0f 	bl	800b450 <_Balloc>
 800b032:	4606      	mov	r6, r0
 800b034:	b928      	cbnz	r0, 800b042 <_dtoa_r+0x97a>
 800b036:	4b84      	ldr	r3, [pc, #528]	@ (800b248 <_dtoa_r+0xb80>)
 800b038:	4602      	mov	r2, r0
 800b03a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b03e:	f7ff bb5a 	b.w	800a6f6 <_dtoa_r+0x2e>
 800b042:	692a      	ldr	r2, [r5, #16]
 800b044:	3202      	adds	r2, #2
 800b046:	0092      	lsls	r2, r2, #2
 800b048:	f105 010c 	add.w	r1, r5, #12
 800b04c:	300c      	adds	r0, #12
 800b04e:	f001 f975 	bl	800c33c <memcpy>
 800b052:	2201      	movs	r2, #1
 800b054:	4631      	mov	r1, r6
 800b056:	4658      	mov	r0, fp
 800b058:	f000 fc08 	bl	800b86c <__lshift>
 800b05c:	f10a 0301 	add.w	r3, sl, #1
 800b060:	9307      	str	r3, [sp, #28]
 800b062:	9b00      	ldr	r3, [sp, #0]
 800b064:	4453      	add	r3, sl
 800b066:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b068:	9b02      	ldr	r3, [sp, #8]
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	462f      	mov	r7, r5
 800b070:	930a      	str	r3, [sp, #40]	@ 0x28
 800b072:	4605      	mov	r5, r0
 800b074:	9b07      	ldr	r3, [sp, #28]
 800b076:	4621      	mov	r1, r4
 800b078:	3b01      	subs	r3, #1
 800b07a:	4648      	mov	r0, r9
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	f7ff fa98 	bl	800a5b2 <quorem>
 800b082:	4639      	mov	r1, r7
 800b084:	9002      	str	r0, [sp, #8]
 800b086:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b08a:	4648      	mov	r0, r9
 800b08c:	f000 fc5a 	bl	800b944 <__mcmp>
 800b090:	462a      	mov	r2, r5
 800b092:	9008      	str	r0, [sp, #32]
 800b094:	4621      	mov	r1, r4
 800b096:	4658      	mov	r0, fp
 800b098:	f000 fc70 	bl	800b97c <__mdiff>
 800b09c:	68c2      	ldr	r2, [r0, #12]
 800b09e:	4606      	mov	r6, r0
 800b0a0:	bb02      	cbnz	r2, 800b0e4 <_dtoa_r+0xa1c>
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4648      	mov	r0, r9
 800b0a6:	f000 fc4d 	bl	800b944 <__mcmp>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4658      	mov	r0, fp
 800b0b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0b2:	f000 fa0d 	bl	800b4d0 <_Bfree>
 800b0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ba:	9e07      	ldr	r6, [sp, #28]
 800b0bc:	ea43 0102 	orr.w	r1, r3, r2
 800b0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0c2:	4319      	orrs	r1, r3
 800b0c4:	d110      	bne.n	800b0e8 <_dtoa_r+0xa20>
 800b0c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0ca:	d029      	beq.n	800b120 <_dtoa_r+0xa58>
 800b0cc:	9b08      	ldr	r3, [sp, #32]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	dd02      	ble.n	800b0d8 <_dtoa_r+0xa10>
 800b0d2:	9b02      	ldr	r3, [sp, #8]
 800b0d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b0d8:	9b00      	ldr	r3, [sp, #0]
 800b0da:	f883 8000 	strb.w	r8, [r3]
 800b0de:	e63f      	b.n	800ad60 <_dtoa_r+0x698>
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	e7bb      	b.n	800b05c <_dtoa_r+0x994>
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	e7e1      	b.n	800b0ac <_dtoa_r+0x9e4>
 800b0e8:	9b08      	ldr	r3, [sp, #32]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	db04      	blt.n	800b0f8 <_dtoa_r+0xa30>
 800b0ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	d120      	bne.n	800b13a <_dtoa_r+0xa72>
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	dded      	ble.n	800b0d8 <_dtoa_r+0xa10>
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	2201      	movs	r2, #1
 800b100:	4658      	mov	r0, fp
 800b102:	f000 fbb3 	bl	800b86c <__lshift>
 800b106:	4621      	mov	r1, r4
 800b108:	4681      	mov	r9, r0
 800b10a:	f000 fc1b 	bl	800b944 <__mcmp>
 800b10e:	2800      	cmp	r0, #0
 800b110:	dc03      	bgt.n	800b11a <_dtoa_r+0xa52>
 800b112:	d1e1      	bne.n	800b0d8 <_dtoa_r+0xa10>
 800b114:	f018 0f01 	tst.w	r8, #1
 800b118:	d0de      	beq.n	800b0d8 <_dtoa_r+0xa10>
 800b11a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b11e:	d1d8      	bne.n	800b0d2 <_dtoa_r+0xa0a>
 800b120:	9a00      	ldr	r2, [sp, #0]
 800b122:	2339      	movs	r3, #57	@ 0x39
 800b124:	7013      	strb	r3, [r2, #0]
 800b126:	4633      	mov	r3, r6
 800b128:	461e      	mov	r6, r3
 800b12a:	3b01      	subs	r3, #1
 800b12c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b130:	2a39      	cmp	r2, #57	@ 0x39
 800b132:	d052      	beq.n	800b1da <_dtoa_r+0xb12>
 800b134:	3201      	adds	r2, #1
 800b136:	701a      	strb	r2, [r3, #0]
 800b138:	e612      	b.n	800ad60 <_dtoa_r+0x698>
 800b13a:	2a00      	cmp	r2, #0
 800b13c:	dd07      	ble.n	800b14e <_dtoa_r+0xa86>
 800b13e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b142:	d0ed      	beq.n	800b120 <_dtoa_r+0xa58>
 800b144:	9a00      	ldr	r2, [sp, #0]
 800b146:	f108 0301 	add.w	r3, r8, #1
 800b14a:	7013      	strb	r3, [r2, #0]
 800b14c:	e608      	b.n	800ad60 <_dtoa_r+0x698>
 800b14e:	9b07      	ldr	r3, [sp, #28]
 800b150:	9a07      	ldr	r2, [sp, #28]
 800b152:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b158:	4293      	cmp	r3, r2
 800b15a:	d028      	beq.n	800b1ae <_dtoa_r+0xae6>
 800b15c:	4649      	mov	r1, r9
 800b15e:	2300      	movs	r3, #0
 800b160:	220a      	movs	r2, #10
 800b162:	4658      	mov	r0, fp
 800b164:	f000 f9d6 	bl	800b514 <__multadd>
 800b168:	42af      	cmp	r7, r5
 800b16a:	4681      	mov	r9, r0
 800b16c:	f04f 0300 	mov.w	r3, #0
 800b170:	f04f 020a 	mov.w	r2, #10
 800b174:	4639      	mov	r1, r7
 800b176:	4658      	mov	r0, fp
 800b178:	d107      	bne.n	800b18a <_dtoa_r+0xac2>
 800b17a:	f000 f9cb 	bl	800b514 <__multadd>
 800b17e:	4607      	mov	r7, r0
 800b180:	4605      	mov	r5, r0
 800b182:	9b07      	ldr	r3, [sp, #28]
 800b184:	3301      	adds	r3, #1
 800b186:	9307      	str	r3, [sp, #28]
 800b188:	e774      	b.n	800b074 <_dtoa_r+0x9ac>
 800b18a:	f000 f9c3 	bl	800b514 <__multadd>
 800b18e:	4629      	mov	r1, r5
 800b190:	4607      	mov	r7, r0
 800b192:	2300      	movs	r3, #0
 800b194:	220a      	movs	r2, #10
 800b196:	4658      	mov	r0, fp
 800b198:	f000 f9bc 	bl	800b514 <__multadd>
 800b19c:	4605      	mov	r5, r0
 800b19e:	e7f0      	b.n	800b182 <_dtoa_r+0xaba>
 800b1a0:	9b00      	ldr	r3, [sp, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bfcc      	ite	gt
 800b1a6:	461e      	movgt	r6, r3
 800b1a8:	2601      	movle	r6, #1
 800b1aa:	4456      	add	r6, sl
 800b1ac:	2700      	movs	r7, #0
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	4658      	mov	r0, fp
 800b1b4:	f000 fb5a 	bl	800b86c <__lshift>
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4681      	mov	r9, r0
 800b1bc:	f000 fbc2 	bl	800b944 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	dcb0      	bgt.n	800b126 <_dtoa_r+0xa5e>
 800b1c4:	d102      	bne.n	800b1cc <_dtoa_r+0xb04>
 800b1c6:	f018 0f01 	tst.w	r8, #1
 800b1ca:	d1ac      	bne.n	800b126 <_dtoa_r+0xa5e>
 800b1cc:	4633      	mov	r3, r6
 800b1ce:	461e      	mov	r6, r3
 800b1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1d4:	2a30      	cmp	r2, #48	@ 0x30
 800b1d6:	d0fa      	beq.n	800b1ce <_dtoa_r+0xb06>
 800b1d8:	e5c2      	b.n	800ad60 <_dtoa_r+0x698>
 800b1da:	459a      	cmp	sl, r3
 800b1dc:	d1a4      	bne.n	800b128 <_dtoa_r+0xa60>
 800b1de:	9b04      	ldr	r3, [sp, #16]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	2331      	movs	r3, #49	@ 0x31
 800b1e6:	f88a 3000 	strb.w	r3, [sl]
 800b1ea:	e5b9      	b.n	800ad60 <_dtoa_r+0x698>
 800b1ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b24c <_dtoa_r+0xb84>
 800b1f2:	b11b      	cbz	r3, 800b1fc <_dtoa_r+0xb34>
 800b1f4:	f10a 0308 	add.w	r3, sl, #8
 800b1f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	4650      	mov	r0, sl
 800b1fe:	b019      	add	sp, #100	@ 0x64
 800b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b206:	2b01      	cmp	r3, #1
 800b208:	f77f ae37 	ble.w	800ae7a <_dtoa_r+0x7b2>
 800b20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b210:	2001      	movs	r0, #1
 800b212:	e655      	b.n	800aec0 <_dtoa_r+0x7f8>
 800b214:	9b00      	ldr	r3, [sp, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f77f aed6 	ble.w	800afc8 <_dtoa_r+0x900>
 800b21c:	4656      	mov	r6, sl
 800b21e:	4621      	mov	r1, r4
 800b220:	4648      	mov	r0, r9
 800b222:	f7ff f9c6 	bl	800a5b2 <quorem>
 800b226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b22a:	f806 8b01 	strb.w	r8, [r6], #1
 800b22e:	9b00      	ldr	r3, [sp, #0]
 800b230:	eba6 020a 	sub.w	r2, r6, sl
 800b234:	4293      	cmp	r3, r2
 800b236:	ddb3      	ble.n	800b1a0 <_dtoa_r+0xad8>
 800b238:	4649      	mov	r1, r9
 800b23a:	2300      	movs	r3, #0
 800b23c:	220a      	movs	r2, #10
 800b23e:	4658      	mov	r0, fp
 800b240:	f000 f968 	bl	800b514 <__multadd>
 800b244:	4681      	mov	r9, r0
 800b246:	e7ea      	b.n	800b21e <_dtoa_r+0xb56>
 800b248:	0800cf95 	.word	0x0800cf95
 800b24c:	0800cf19 	.word	0x0800cf19

0800b250 <_free_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4605      	mov	r5, r0
 800b254:	2900      	cmp	r1, #0
 800b256:	d041      	beq.n	800b2dc <_free_r+0x8c>
 800b258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25c:	1f0c      	subs	r4, r1, #4
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bfb8      	it	lt
 800b262:	18e4      	addlt	r4, r4, r3
 800b264:	f000 f8e8 	bl	800b438 <__malloc_lock>
 800b268:	4a1d      	ldr	r2, [pc, #116]	@ (800b2e0 <_free_r+0x90>)
 800b26a:	6813      	ldr	r3, [r2, #0]
 800b26c:	b933      	cbnz	r3, 800b27c <_free_r+0x2c>
 800b26e:	6063      	str	r3, [r4, #4]
 800b270:	6014      	str	r4, [r2, #0]
 800b272:	4628      	mov	r0, r5
 800b274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b278:	f000 b8e4 	b.w	800b444 <__malloc_unlock>
 800b27c:	42a3      	cmp	r3, r4
 800b27e:	d908      	bls.n	800b292 <_free_r+0x42>
 800b280:	6820      	ldr	r0, [r4, #0]
 800b282:	1821      	adds	r1, r4, r0
 800b284:	428b      	cmp	r3, r1
 800b286:	bf01      	itttt	eq
 800b288:	6819      	ldreq	r1, [r3, #0]
 800b28a:	685b      	ldreq	r3, [r3, #4]
 800b28c:	1809      	addeq	r1, r1, r0
 800b28e:	6021      	streq	r1, [r4, #0]
 800b290:	e7ed      	b.n	800b26e <_free_r+0x1e>
 800b292:	461a      	mov	r2, r3
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	b10b      	cbz	r3, 800b29c <_free_r+0x4c>
 800b298:	42a3      	cmp	r3, r4
 800b29a:	d9fa      	bls.n	800b292 <_free_r+0x42>
 800b29c:	6811      	ldr	r1, [r2, #0]
 800b29e:	1850      	adds	r0, r2, r1
 800b2a0:	42a0      	cmp	r0, r4
 800b2a2:	d10b      	bne.n	800b2bc <_free_r+0x6c>
 800b2a4:	6820      	ldr	r0, [r4, #0]
 800b2a6:	4401      	add	r1, r0
 800b2a8:	1850      	adds	r0, r2, r1
 800b2aa:	4283      	cmp	r3, r0
 800b2ac:	6011      	str	r1, [r2, #0]
 800b2ae:	d1e0      	bne.n	800b272 <_free_r+0x22>
 800b2b0:	6818      	ldr	r0, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	6053      	str	r3, [r2, #4]
 800b2b6:	4408      	add	r0, r1
 800b2b8:	6010      	str	r0, [r2, #0]
 800b2ba:	e7da      	b.n	800b272 <_free_r+0x22>
 800b2bc:	d902      	bls.n	800b2c4 <_free_r+0x74>
 800b2be:	230c      	movs	r3, #12
 800b2c0:	602b      	str	r3, [r5, #0]
 800b2c2:	e7d6      	b.n	800b272 <_free_r+0x22>
 800b2c4:	6820      	ldr	r0, [r4, #0]
 800b2c6:	1821      	adds	r1, r4, r0
 800b2c8:	428b      	cmp	r3, r1
 800b2ca:	bf04      	itt	eq
 800b2cc:	6819      	ldreq	r1, [r3, #0]
 800b2ce:	685b      	ldreq	r3, [r3, #4]
 800b2d0:	6063      	str	r3, [r4, #4]
 800b2d2:	bf04      	itt	eq
 800b2d4:	1809      	addeq	r1, r1, r0
 800b2d6:	6021      	streq	r1, [r4, #0]
 800b2d8:	6054      	str	r4, [r2, #4]
 800b2da:	e7ca      	b.n	800b272 <_free_r+0x22>
 800b2dc:	bd38      	pop	{r3, r4, r5, pc}
 800b2de:	bf00      	nop
 800b2e0:	200008bc 	.word	0x200008bc

0800b2e4 <malloc>:
 800b2e4:	4b02      	ldr	r3, [pc, #8]	@ (800b2f0 <malloc+0xc>)
 800b2e6:	4601      	mov	r1, r0
 800b2e8:	6818      	ldr	r0, [r3, #0]
 800b2ea:	f000 b825 	b.w	800b338 <_malloc_r>
 800b2ee:	bf00      	nop
 800b2f0:	20000098 	.word	0x20000098

0800b2f4 <sbrk_aligned>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	4e0f      	ldr	r6, [pc, #60]	@ (800b334 <sbrk_aligned+0x40>)
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	6831      	ldr	r1, [r6, #0]
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	b911      	cbnz	r1, 800b306 <sbrk_aligned+0x12>
 800b300:	f001 f80c 	bl	800c31c <_sbrk_r>
 800b304:	6030      	str	r0, [r6, #0]
 800b306:	4621      	mov	r1, r4
 800b308:	4628      	mov	r0, r5
 800b30a:	f001 f807 	bl	800c31c <_sbrk_r>
 800b30e:	1c43      	adds	r3, r0, #1
 800b310:	d103      	bne.n	800b31a <sbrk_aligned+0x26>
 800b312:	f04f 34ff 	mov.w	r4, #4294967295
 800b316:	4620      	mov	r0, r4
 800b318:	bd70      	pop	{r4, r5, r6, pc}
 800b31a:	1cc4      	adds	r4, r0, #3
 800b31c:	f024 0403 	bic.w	r4, r4, #3
 800b320:	42a0      	cmp	r0, r4
 800b322:	d0f8      	beq.n	800b316 <sbrk_aligned+0x22>
 800b324:	1a21      	subs	r1, r4, r0
 800b326:	4628      	mov	r0, r5
 800b328:	f000 fff8 	bl	800c31c <_sbrk_r>
 800b32c:	3001      	adds	r0, #1
 800b32e:	d1f2      	bne.n	800b316 <sbrk_aligned+0x22>
 800b330:	e7ef      	b.n	800b312 <sbrk_aligned+0x1e>
 800b332:	bf00      	nop
 800b334:	200008b8 	.word	0x200008b8

0800b338 <_malloc_r>:
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	1ccd      	adds	r5, r1, #3
 800b33e:	f025 0503 	bic.w	r5, r5, #3
 800b342:	3508      	adds	r5, #8
 800b344:	2d0c      	cmp	r5, #12
 800b346:	bf38      	it	cc
 800b348:	250c      	movcc	r5, #12
 800b34a:	2d00      	cmp	r5, #0
 800b34c:	4606      	mov	r6, r0
 800b34e:	db01      	blt.n	800b354 <_malloc_r+0x1c>
 800b350:	42a9      	cmp	r1, r5
 800b352:	d904      	bls.n	800b35e <_malloc_r+0x26>
 800b354:	230c      	movs	r3, #12
 800b356:	6033      	str	r3, [r6, #0]
 800b358:	2000      	movs	r0, #0
 800b35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b35e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b434 <_malloc_r+0xfc>
 800b362:	f000 f869 	bl	800b438 <__malloc_lock>
 800b366:	f8d8 3000 	ldr.w	r3, [r8]
 800b36a:	461c      	mov	r4, r3
 800b36c:	bb44      	cbnz	r4, 800b3c0 <_malloc_r+0x88>
 800b36e:	4629      	mov	r1, r5
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff ffbf 	bl	800b2f4 <sbrk_aligned>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	4604      	mov	r4, r0
 800b37a:	d158      	bne.n	800b42e <_malloc_r+0xf6>
 800b37c:	f8d8 4000 	ldr.w	r4, [r8]
 800b380:	4627      	mov	r7, r4
 800b382:	2f00      	cmp	r7, #0
 800b384:	d143      	bne.n	800b40e <_malloc_r+0xd6>
 800b386:	2c00      	cmp	r4, #0
 800b388:	d04b      	beq.n	800b422 <_malloc_r+0xea>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	4639      	mov	r1, r7
 800b38e:	4630      	mov	r0, r6
 800b390:	eb04 0903 	add.w	r9, r4, r3
 800b394:	f000 ffc2 	bl	800c31c <_sbrk_r>
 800b398:	4581      	cmp	r9, r0
 800b39a:	d142      	bne.n	800b422 <_malloc_r+0xea>
 800b39c:	6821      	ldr	r1, [r4, #0]
 800b39e:	1a6d      	subs	r5, r5, r1
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f7ff ffa6 	bl	800b2f4 <sbrk_aligned>
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	d03a      	beq.n	800b422 <_malloc_r+0xea>
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	442b      	add	r3, r5
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	bb62      	cbnz	r2, 800b414 <_malloc_r+0xdc>
 800b3ba:	f8c8 7000 	str.w	r7, [r8]
 800b3be:	e00f      	b.n	800b3e0 <_malloc_r+0xa8>
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	1b52      	subs	r2, r2, r5
 800b3c4:	d420      	bmi.n	800b408 <_malloc_r+0xd0>
 800b3c6:	2a0b      	cmp	r2, #11
 800b3c8:	d917      	bls.n	800b3fa <_malloc_r+0xc2>
 800b3ca:	1961      	adds	r1, r4, r5
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	6025      	str	r5, [r4, #0]
 800b3d0:	bf18      	it	ne
 800b3d2:	6059      	strne	r1, [r3, #4]
 800b3d4:	6863      	ldr	r3, [r4, #4]
 800b3d6:	bf08      	it	eq
 800b3d8:	f8c8 1000 	streq.w	r1, [r8]
 800b3dc:	5162      	str	r2, [r4, r5]
 800b3de:	604b      	str	r3, [r1, #4]
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f000 f82f 	bl	800b444 <__malloc_unlock>
 800b3e6:	f104 000b 	add.w	r0, r4, #11
 800b3ea:	1d23      	adds	r3, r4, #4
 800b3ec:	f020 0007 	bic.w	r0, r0, #7
 800b3f0:	1ac2      	subs	r2, r0, r3
 800b3f2:	bf1c      	itt	ne
 800b3f4:	1a1b      	subne	r3, r3, r0
 800b3f6:	50a3      	strne	r3, [r4, r2]
 800b3f8:	e7af      	b.n	800b35a <_malloc_r+0x22>
 800b3fa:	6862      	ldr	r2, [r4, #4]
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	bf0c      	ite	eq
 800b400:	f8c8 2000 	streq.w	r2, [r8]
 800b404:	605a      	strne	r2, [r3, #4]
 800b406:	e7eb      	b.n	800b3e0 <_malloc_r+0xa8>
 800b408:	4623      	mov	r3, r4
 800b40a:	6864      	ldr	r4, [r4, #4]
 800b40c:	e7ae      	b.n	800b36c <_malloc_r+0x34>
 800b40e:	463c      	mov	r4, r7
 800b410:	687f      	ldr	r7, [r7, #4]
 800b412:	e7b6      	b.n	800b382 <_malloc_r+0x4a>
 800b414:	461a      	mov	r2, r3
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	42a3      	cmp	r3, r4
 800b41a:	d1fb      	bne.n	800b414 <_malloc_r+0xdc>
 800b41c:	2300      	movs	r3, #0
 800b41e:	6053      	str	r3, [r2, #4]
 800b420:	e7de      	b.n	800b3e0 <_malloc_r+0xa8>
 800b422:	230c      	movs	r3, #12
 800b424:	6033      	str	r3, [r6, #0]
 800b426:	4630      	mov	r0, r6
 800b428:	f000 f80c 	bl	800b444 <__malloc_unlock>
 800b42c:	e794      	b.n	800b358 <_malloc_r+0x20>
 800b42e:	6005      	str	r5, [r0, #0]
 800b430:	e7d6      	b.n	800b3e0 <_malloc_r+0xa8>
 800b432:	bf00      	nop
 800b434:	200008bc 	.word	0x200008bc

0800b438 <__malloc_lock>:
 800b438:	4801      	ldr	r0, [pc, #4]	@ (800b440 <__malloc_lock+0x8>)
 800b43a:	f7ff b8b0 	b.w	800a59e <__retarget_lock_acquire_recursive>
 800b43e:	bf00      	nop
 800b440:	200008b4 	.word	0x200008b4

0800b444 <__malloc_unlock>:
 800b444:	4801      	ldr	r0, [pc, #4]	@ (800b44c <__malloc_unlock+0x8>)
 800b446:	f7ff b8ab 	b.w	800a5a0 <__retarget_lock_release_recursive>
 800b44a:	bf00      	nop
 800b44c:	200008b4 	.word	0x200008b4

0800b450 <_Balloc>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	69c6      	ldr	r6, [r0, #28]
 800b454:	4604      	mov	r4, r0
 800b456:	460d      	mov	r5, r1
 800b458:	b976      	cbnz	r6, 800b478 <_Balloc+0x28>
 800b45a:	2010      	movs	r0, #16
 800b45c:	f7ff ff42 	bl	800b2e4 <malloc>
 800b460:	4602      	mov	r2, r0
 800b462:	61e0      	str	r0, [r4, #28]
 800b464:	b920      	cbnz	r0, 800b470 <_Balloc+0x20>
 800b466:	4b18      	ldr	r3, [pc, #96]	@ (800b4c8 <_Balloc+0x78>)
 800b468:	4818      	ldr	r0, [pc, #96]	@ (800b4cc <_Balloc+0x7c>)
 800b46a:	216b      	movs	r1, #107	@ 0x6b
 800b46c:	f000 ff74 	bl	800c358 <__assert_func>
 800b470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b474:	6006      	str	r6, [r0, #0]
 800b476:	60c6      	str	r6, [r0, #12]
 800b478:	69e6      	ldr	r6, [r4, #28]
 800b47a:	68f3      	ldr	r3, [r6, #12]
 800b47c:	b183      	cbz	r3, 800b4a0 <_Balloc+0x50>
 800b47e:	69e3      	ldr	r3, [r4, #28]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b486:	b9b8      	cbnz	r0, 800b4b8 <_Balloc+0x68>
 800b488:	2101      	movs	r1, #1
 800b48a:	fa01 f605 	lsl.w	r6, r1, r5
 800b48e:	1d72      	adds	r2, r6, #5
 800b490:	0092      	lsls	r2, r2, #2
 800b492:	4620      	mov	r0, r4
 800b494:	f000 ff7e 	bl	800c394 <_calloc_r>
 800b498:	b160      	cbz	r0, 800b4b4 <_Balloc+0x64>
 800b49a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b49e:	e00e      	b.n	800b4be <_Balloc+0x6e>
 800b4a0:	2221      	movs	r2, #33	@ 0x21
 800b4a2:	2104      	movs	r1, #4
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f000 ff75 	bl	800c394 <_calloc_r>
 800b4aa:	69e3      	ldr	r3, [r4, #28]
 800b4ac:	60f0      	str	r0, [r6, #12]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e4      	bne.n	800b47e <_Balloc+0x2e>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	6802      	ldr	r2, [r0, #0]
 800b4ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4c4:	e7f7      	b.n	800b4b6 <_Balloc+0x66>
 800b4c6:	bf00      	nop
 800b4c8:	0800cf26 	.word	0x0800cf26
 800b4cc:	0800cfa6 	.word	0x0800cfa6

0800b4d0 <_Bfree>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	69c6      	ldr	r6, [r0, #28]
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	b976      	cbnz	r6, 800b4f8 <_Bfree+0x28>
 800b4da:	2010      	movs	r0, #16
 800b4dc:	f7ff ff02 	bl	800b2e4 <malloc>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	61e8      	str	r0, [r5, #28]
 800b4e4:	b920      	cbnz	r0, 800b4f0 <_Bfree+0x20>
 800b4e6:	4b09      	ldr	r3, [pc, #36]	@ (800b50c <_Bfree+0x3c>)
 800b4e8:	4809      	ldr	r0, [pc, #36]	@ (800b510 <_Bfree+0x40>)
 800b4ea:	218f      	movs	r1, #143	@ 0x8f
 800b4ec:	f000 ff34 	bl	800c358 <__assert_func>
 800b4f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4f4:	6006      	str	r6, [r0, #0]
 800b4f6:	60c6      	str	r6, [r0, #12]
 800b4f8:	b13c      	cbz	r4, 800b50a <_Bfree+0x3a>
 800b4fa:	69eb      	ldr	r3, [r5, #28]
 800b4fc:	6862      	ldr	r2, [r4, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b504:	6021      	str	r1, [r4, #0]
 800b506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
 800b50c:	0800cf26 	.word	0x0800cf26
 800b510:	0800cfa6 	.word	0x0800cfa6

0800b514 <__multadd>:
 800b514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b518:	690d      	ldr	r5, [r1, #16]
 800b51a:	4607      	mov	r7, r0
 800b51c:	460c      	mov	r4, r1
 800b51e:	461e      	mov	r6, r3
 800b520:	f101 0c14 	add.w	ip, r1, #20
 800b524:	2000      	movs	r0, #0
 800b526:	f8dc 3000 	ldr.w	r3, [ip]
 800b52a:	b299      	uxth	r1, r3
 800b52c:	fb02 6101 	mla	r1, r2, r1, r6
 800b530:	0c1e      	lsrs	r6, r3, #16
 800b532:	0c0b      	lsrs	r3, r1, #16
 800b534:	fb02 3306 	mla	r3, r2, r6, r3
 800b538:	b289      	uxth	r1, r1
 800b53a:	3001      	adds	r0, #1
 800b53c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b540:	4285      	cmp	r5, r0
 800b542:	f84c 1b04 	str.w	r1, [ip], #4
 800b546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b54a:	dcec      	bgt.n	800b526 <__multadd+0x12>
 800b54c:	b30e      	cbz	r6, 800b592 <__multadd+0x7e>
 800b54e:	68a3      	ldr	r3, [r4, #8]
 800b550:	42ab      	cmp	r3, r5
 800b552:	dc19      	bgt.n	800b588 <__multadd+0x74>
 800b554:	6861      	ldr	r1, [r4, #4]
 800b556:	4638      	mov	r0, r7
 800b558:	3101      	adds	r1, #1
 800b55a:	f7ff ff79 	bl	800b450 <_Balloc>
 800b55e:	4680      	mov	r8, r0
 800b560:	b928      	cbnz	r0, 800b56e <__multadd+0x5a>
 800b562:	4602      	mov	r2, r0
 800b564:	4b0c      	ldr	r3, [pc, #48]	@ (800b598 <__multadd+0x84>)
 800b566:	480d      	ldr	r0, [pc, #52]	@ (800b59c <__multadd+0x88>)
 800b568:	21ba      	movs	r1, #186	@ 0xba
 800b56a:	f000 fef5 	bl	800c358 <__assert_func>
 800b56e:	6922      	ldr	r2, [r4, #16]
 800b570:	3202      	adds	r2, #2
 800b572:	f104 010c 	add.w	r1, r4, #12
 800b576:	0092      	lsls	r2, r2, #2
 800b578:	300c      	adds	r0, #12
 800b57a:	f000 fedf 	bl	800c33c <memcpy>
 800b57e:	4621      	mov	r1, r4
 800b580:	4638      	mov	r0, r7
 800b582:	f7ff ffa5 	bl	800b4d0 <_Bfree>
 800b586:	4644      	mov	r4, r8
 800b588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b58c:	3501      	adds	r5, #1
 800b58e:	615e      	str	r6, [r3, #20]
 800b590:	6125      	str	r5, [r4, #16]
 800b592:	4620      	mov	r0, r4
 800b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b598:	0800cf95 	.word	0x0800cf95
 800b59c:	0800cfa6 	.word	0x0800cfa6

0800b5a0 <__hi0bits>:
 800b5a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	bf36      	itet	cc
 800b5a8:	0403      	lslcc	r3, r0, #16
 800b5aa:	2000      	movcs	r0, #0
 800b5ac:	2010      	movcc	r0, #16
 800b5ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5b2:	bf3c      	itt	cc
 800b5b4:	021b      	lslcc	r3, r3, #8
 800b5b6:	3008      	addcc	r0, #8
 800b5b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5bc:	bf3c      	itt	cc
 800b5be:	011b      	lslcc	r3, r3, #4
 800b5c0:	3004      	addcc	r0, #4
 800b5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5c6:	bf3c      	itt	cc
 800b5c8:	009b      	lslcc	r3, r3, #2
 800b5ca:	3002      	addcc	r0, #2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	db05      	blt.n	800b5dc <__hi0bits+0x3c>
 800b5d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5d4:	f100 0001 	add.w	r0, r0, #1
 800b5d8:	bf08      	it	eq
 800b5da:	2020      	moveq	r0, #32
 800b5dc:	4770      	bx	lr

0800b5de <__lo0bits>:
 800b5de:	6803      	ldr	r3, [r0, #0]
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	f013 0007 	ands.w	r0, r3, #7
 800b5e6:	d00b      	beq.n	800b600 <__lo0bits+0x22>
 800b5e8:	07d9      	lsls	r1, r3, #31
 800b5ea:	d421      	bmi.n	800b630 <__lo0bits+0x52>
 800b5ec:	0798      	lsls	r0, r3, #30
 800b5ee:	bf49      	itett	mi
 800b5f0:	085b      	lsrmi	r3, r3, #1
 800b5f2:	089b      	lsrpl	r3, r3, #2
 800b5f4:	2001      	movmi	r0, #1
 800b5f6:	6013      	strmi	r3, [r2, #0]
 800b5f8:	bf5c      	itt	pl
 800b5fa:	6013      	strpl	r3, [r2, #0]
 800b5fc:	2002      	movpl	r0, #2
 800b5fe:	4770      	bx	lr
 800b600:	b299      	uxth	r1, r3
 800b602:	b909      	cbnz	r1, 800b608 <__lo0bits+0x2a>
 800b604:	0c1b      	lsrs	r3, r3, #16
 800b606:	2010      	movs	r0, #16
 800b608:	b2d9      	uxtb	r1, r3
 800b60a:	b909      	cbnz	r1, 800b610 <__lo0bits+0x32>
 800b60c:	3008      	adds	r0, #8
 800b60e:	0a1b      	lsrs	r3, r3, #8
 800b610:	0719      	lsls	r1, r3, #28
 800b612:	bf04      	itt	eq
 800b614:	091b      	lsreq	r3, r3, #4
 800b616:	3004      	addeq	r0, #4
 800b618:	0799      	lsls	r1, r3, #30
 800b61a:	bf04      	itt	eq
 800b61c:	089b      	lsreq	r3, r3, #2
 800b61e:	3002      	addeq	r0, #2
 800b620:	07d9      	lsls	r1, r3, #31
 800b622:	d403      	bmi.n	800b62c <__lo0bits+0x4e>
 800b624:	085b      	lsrs	r3, r3, #1
 800b626:	f100 0001 	add.w	r0, r0, #1
 800b62a:	d003      	beq.n	800b634 <__lo0bits+0x56>
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	4770      	bx	lr
 800b630:	2000      	movs	r0, #0
 800b632:	4770      	bx	lr
 800b634:	2020      	movs	r0, #32
 800b636:	4770      	bx	lr

0800b638 <__i2b>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	460c      	mov	r4, r1
 800b63c:	2101      	movs	r1, #1
 800b63e:	f7ff ff07 	bl	800b450 <_Balloc>
 800b642:	4602      	mov	r2, r0
 800b644:	b928      	cbnz	r0, 800b652 <__i2b+0x1a>
 800b646:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <__i2b+0x24>)
 800b648:	4805      	ldr	r0, [pc, #20]	@ (800b660 <__i2b+0x28>)
 800b64a:	f240 1145 	movw	r1, #325	@ 0x145
 800b64e:	f000 fe83 	bl	800c358 <__assert_func>
 800b652:	2301      	movs	r3, #1
 800b654:	6144      	str	r4, [r0, #20]
 800b656:	6103      	str	r3, [r0, #16]
 800b658:	bd10      	pop	{r4, pc}
 800b65a:	bf00      	nop
 800b65c:	0800cf95 	.word	0x0800cf95
 800b660:	0800cfa6 	.word	0x0800cfa6

0800b664 <__multiply>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	4614      	mov	r4, r2
 800b66a:	690a      	ldr	r2, [r1, #16]
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	429a      	cmp	r2, r3
 800b670:	bfa8      	it	ge
 800b672:	4623      	movge	r3, r4
 800b674:	460f      	mov	r7, r1
 800b676:	bfa4      	itt	ge
 800b678:	460c      	movge	r4, r1
 800b67a:	461f      	movge	r7, r3
 800b67c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b680:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b684:	68a3      	ldr	r3, [r4, #8]
 800b686:	6861      	ldr	r1, [r4, #4]
 800b688:	eb0a 0609 	add.w	r6, sl, r9
 800b68c:	42b3      	cmp	r3, r6
 800b68e:	b085      	sub	sp, #20
 800b690:	bfb8      	it	lt
 800b692:	3101      	addlt	r1, #1
 800b694:	f7ff fedc 	bl	800b450 <_Balloc>
 800b698:	b930      	cbnz	r0, 800b6a8 <__multiply+0x44>
 800b69a:	4602      	mov	r2, r0
 800b69c:	4b44      	ldr	r3, [pc, #272]	@ (800b7b0 <__multiply+0x14c>)
 800b69e:	4845      	ldr	r0, [pc, #276]	@ (800b7b4 <__multiply+0x150>)
 800b6a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6a4:	f000 fe58 	bl	800c358 <__assert_func>
 800b6a8:	f100 0514 	add.w	r5, r0, #20
 800b6ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	4543      	cmp	r3, r8
 800b6b6:	d321      	bcc.n	800b6fc <__multiply+0x98>
 800b6b8:	f107 0114 	add.w	r1, r7, #20
 800b6bc:	f104 0214 	add.w	r2, r4, #20
 800b6c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b6c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b6c8:	9302      	str	r3, [sp, #8]
 800b6ca:	1b13      	subs	r3, r2, r4
 800b6cc:	3b15      	subs	r3, #21
 800b6ce:	f023 0303 	bic.w	r3, r3, #3
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	f104 0715 	add.w	r7, r4, #21
 800b6d8:	42ba      	cmp	r2, r7
 800b6da:	bf38      	it	cc
 800b6dc:	2304      	movcc	r3, #4
 800b6de:	9301      	str	r3, [sp, #4]
 800b6e0:	9b02      	ldr	r3, [sp, #8]
 800b6e2:	9103      	str	r1, [sp, #12]
 800b6e4:	428b      	cmp	r3, r1
 800b6e6:	d80c      	bhi.n	800b702 <__multiply+0x9e>
 800b6e8:	2e00      	cmp	r6, #0
 800b6ea:	dd03      	ble.n	800b6f4 <__multiply+0x90>
 800b6ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d05b      	beq.n	800b7ac <__multiply+0x148>
 800b6f4:	6106      	str	r6, [r0, #16]
 800b6f6:	b005      	add	sp, #20
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	f843 2b04 	str.w	r2, [r3], #4
 800b700:	e7d8      	b.n	800b6b4 <__multiply+0x50>
 800b702:	f8b1 a000 	ldrh.w	sl, [r1]
 800b706:	f1ba 0f00 	cmp.w	sl, #0
 800b70a:	d024      	beq.n	800b756 <__multiply+0xf2>
 800b70c:	f104 0e14 	add.w	lr, r4, #20
 800b710:	46a9      	mov	r9, r5
 800b712:	f04f 0c00 	mov.w	ip, #0
 800b716:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b71a:	f8d9 3000 	ldr.w	r3, [r9]
 800b71e:	fa1f fb87 	uxth.w	fp, r7
 800b722:	b29b      	uxth	r3, r3
 800b724:	fb0a 330b 	mla	r3, sl, fp, r3
 800b728:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b72c:	f8d9 7000 	ldr.w	r7, [r9]
 800b730:	4463      	add	r3, ip
 800b732:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b736:	fb0a c70b 	mla	r7, sl, fp, ip
 800b73a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b73e:	b29b      	uxth	r3, r3
 800b740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b744:	4572      	cmp	r2, lr
 800b746:	f849 3b04 	str.w	r3, [r9], #4
 800b74a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b74e:	d8e2      	bhi.n	800b716 <__multiply+0xb2>
 800b750:	9b01      	ldr	r3, [sp, #4]
 800b752:	f845 c003 	str.w	ip, [r5, r3]
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b75c:	3104      	adds	r1, #4
 800b75e:	f1b9 0f00 	cmp.w	r9, #0
 800b762:	d021      	beq.n	800b7a8 <__multiply+0x144>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	f104 0c14 	add.w	ip, r4, #20
 800b76a:	46ae      	mov	lr, r5
 800b76c:	f04f 0a00 	mov.w	sl, #0
 800b770:	f8bc b000 	ldrh.w	fp, [ip]
 800b774:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b778:	fb09 770b 	mla	r7, r9, fp, r7
 800b77c:	4457      	add	r7, sl
 800b77e:	b29b      	uxth	r3, r3
 800b780:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b784:	f84e 3b04 	str.w	r3, [lr], #4
 800b788:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b78c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b790:	f8be 3000 	ldrh.w	r3, [lr]
 800b794:	fb09 330a 	mla	r3, r9, sl, r3
 800b798:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b79c:	4562      	cmp	r2, ip
 800b79e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7a2:	d8e5      	bhi.n	800b770 <__multiply+0x10c>
 800b7a4:	9f01      	ldr	r7, [sp, #4]
 800b7a6:	51eb      	str	r3, [r5, r7]
 800b7a8:	3504      	adds	r5, #4
 800b7aa:	e799      	b.n	800b6e0 <__multiply+0x7c>
 800b7ac:	3e01      	subs	r6, #1
 800b7ae:	e79b      	b.n	800b6e8 <__multiply+0x84>
 800b7b0:	0800cf95 	.word	0x0800cf95
 800b7b4:	0800cfa6 	.word	0x0800cfa6

0800b7b8 <__pow5mult>:
 800b7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7bc:	4615      	mov	r5, r2
 800b7be:	f012 0203 	ands.w	r2, r2, #3
 800b7c2:	4607      	mov	r7, r0
 800b7c4:	460e      	mov	r6, r1
 800b7c6:	d007      	beq.n	800b7d8 <__pow5mult+0x20>
 800b7c8:	4c25      	ldr	r4, [pc, #148]	@ (800b860 <__pow5mult+0xa8>)
 800b7ca:	3a01      	subs	r2, #1
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7d2:	f7ff fe9f 	bl	800b514 <__multadd>
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	10ad      	asrs	r5, r5, #2
 800b7da:	d03d      	beq.n	800b858 <__pow5mult+0xa0>
 800b7dc:	69fc      	ldr	r4, [r7, #28]
 800b7de:	b97c      	cbnz	r4, 800b800 <__pow5mult+0x48>
 800b7e0:	2010      	movs	r0, #16
 800b7e2:	f7ff fd7f 	bl	800b2e4 <malloc>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	61f8      	str	r0, [r7, #28]
 800b7ea:	b928      	cbnz	r0, 800b7f8 <__pow5mult+0x40>
 800b7ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b864 <__pow5mult+0xac>)
 800b7ee:	481e      	ldr	r0, [pc, #120]	@ (800b868 <__pow5mult+0xb0>)
 800b7f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7f4:	f000 fdb0 	bl	800c358 <__assert_func>
 800b7f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7fc:	6004      	str	r4, [r0, #0]
 800b7fe:	60c4      	str	r4, [r0, #12]
 800b800:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b808:	b94c      	cbnz	r4, 800b81e <__pow5mult+0x66>
 800b80a:	f240 2171 	movw	r1, #625	@ 0x271
 800b80e:	4638      	mov	r0, r7
 800b810:	f7ff ff12 	bl	800b638 <__i2b>
 800b814:	2300      	movs	r3, #0
 800b816:	f8c8 0008 	str.w	r0, [r8, #8]
 800b81a:	4604      	mov	r4, r0
 800b81c:	6003      	str	r3, [r0, #0]
 800b81e:	f04f 0900 	mov.w	r9, #0
 800b822:	07eb      	lsls	r3, r5, #31
 800b824:	d50a      	bpl.n	800b83c <__pow5mult+0x84>
 800b826:	4631      	mov	r1, r6
 800b828:	4622      	mov	r2, r4
 800b82a:	4638      	mov	r0, r7
 800b82c:	f7ff ff1a 	bl	800b664 <__multiply>
 800b830:	4631      	mov	r1, r6
 800b832:	4680      	mov	r8, r0
 800b834:	4638      	mov	r0, r7
 800b836:	f7ff fe4b 	bl	800b4d0 <_Bfree>
 800b83a:	4646      	mov	r6, r8
 800b83c:	106d      	asrs	r5, r5, #1
 800b83e:	d00b      	beq.n	800b858 <__pow5mult+0xa0>
 800b840:	6820      	ldr	r0, [r4, #0]
 800b842:	b938      	cbnz	r0, 800b854 <__pow5mult+0x9c>
 800b844:	4622      	mov	r2, r4
 800b846:	4621      	mov	r1, r4
 800b848:	4638      	mov	r0, r7
 800b84a:	f7ff ff0b 	bl	800b664 <__multiply>
 800b84e:	6020      	str	r0, [r4, #0]
 800b850:	f8c0 9000 	str.w	r9, [r0]
 800b854:	4604      	mov	r4, r0
 800b856:	e7e4      	b.n	800b822 <__pow5mult+0x6a>
 800b858:	4630      	mov	r0, r6
 800b85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b85e:	bf00      	nop
 800b860:	0800d000 	.word	0x0800d000
 800b864:	0800cf26 	.word	0x0800cf26
 800b868:	0800cfa6 	.word	0x0800cfa6

0800b86c <__lshift>:
 800b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	460c      	mov	r4, r1
 800b872:	6849      	ldr	r1, [r1, #4]
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b87a:	68a3      	ldr	r3, [r4, #8]
 800b87c:	4607      	mov	r7, r0
 800b87e:	4691      	mov	r9, r2
 800b880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b884:	f108 0601 	add.w	r6, r8, #1
 800b888:	42b3      	cmp	r3, r6
 800b88a:	db0b      	blt.n	800b8a4 <__lshift+0x38>
 800b88c:	4638      	mov	r0, r7
 800b88e:	f7ff fddf 	bl	800b450 <_Balloc>
 800b892:	4605      	mov	r5, r0
 800b894:	b948      	cbnz	r0, 800b8aa <__lshift+0x3e>
 800b896:	4602      	mov	r2, r0
 800b898:	4b28      	ldr	r3, [pc, #160]	@ (800b93c <__lshift+0xd0>)
 800b89a:	4829      	ldr	r0, [pc, #164]	@ (800b940 <__lshift+0xd4>)
 800b89c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8a0:	f000 fd5a 	bl	800c358 <__assert_func>
 800b8a4:	3101      	adds	r1, #1
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	e7ee      	b.n	800b888 <__lshift+0x1c>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f100 0114 	add.w	r1, r0, #20
 800b8b0:	f100 0210 	add.w	r2, r0, #16
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	4553      	cmp	r3, sl
 800b8b8:	db33      	blt.n	800b922 <__lshift+0xb6>
 800b8ba:	6920      	ldr	r0, [r4, #16]
 800b8bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8c0:	f104 0314 	add.w	r3, r4, #20
 800b8c4:	f019 091f 	ands.w	r9, r9, #31
 800b8c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8d0:	d02b      	beq.n	800b92a <__lshift+0xbe>
 800b8d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b8d6:	468a      	mov	sl, r1
 800b8d8:	2200      	movs	r2, #0
 800b8da:	6818      	ldr	r0, [r3, #0]
 800b8dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b8e0:	4310      	orrs	r0, r2
 800b8e2:	f84a 0b04 	str.w	r0, [sl], #4
 800b8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ea:	459c      	cmp	ip, r3
 800b8ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8f0:	d8f3      	bhi.n	800b8da <__lshift+0x6e>
 800b8f2:	ebac 0304 	sub.w	r3, ip, r4
 800b8f6:	3b15      	subs	r3, #21
 800b8f8:	f023 0303 	bic.w	r3, r3, #3
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	f104 0015 	add.w	r0, r4, #21
 800b902:	4584      	cmp	ip, r0
 800b904:	bf38      	it	cc
 800b906:	2304      	movcc	r3, #4
 800b908:	50ca      	str	r2, [r1, r3]
 800b90a:	b10a      	cbz	r2, 800b910 <__lshift+0xa4>
 800b90c:	f108 0602 	add.w	r6, r8, #2
 800b910:	3e01      	subs	r6, #1
 800b912:	4638      	mov	r0, r7
 800b914:	612e      	str	r6, [r5, #16]
 800b916:	4621      	mov	r1, r4
 800b918:	f7ff fdda 	bl	800b4d0 <_Bfree>
 800b91c:	4628      	mov	r0, r5
 800b91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b922:	f842 0f04 	str.w	r0, [r2, #4]!
 800b926:	3301      	adds	r3, #1
 800b928:	e7c5      	b.n	800b8b6 <__lshift+0x4a>
 800b92a:	3904      	subs	r1, #4
 800b92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b930:	f841 2f04 	str.w	r2, [r1, #4]!
 800b934:	459c      	cmp	ip, r3
 800b936:	d8f9      	bhi.n	800b92c <__lshift+0xc0>
 800b938:	e7ea      	b.n	800b910 <__lshift+0xa4>
 800b93a:	bf00      	nop
 800b93c:	0800cf95 	.word	0x0800cf95
 800b940:	0800cfa6 	.word	0x0800cfa6

0800b944 <__mcmp>:
 800b944:	690a      	ldr	r2, [r1, #16]
 800b946:	4603      	mov	r3, r0
 800b948:	6900      	ldr	r0, [r0, #16]
 800b94a:	1a80      	subs	r0, r0, r2
 800b94c:	b530      	push	{r4, r5, lr}
 800b94e:	d10e      	bne.n	800b96e <__mcmp+0x2a>
 800b950:	3314      	adds	r3, #20
 800b952:	3114      	adds	r1, #20
 800b954:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b958:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b95c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b960:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b964:	4295      	cmp	r5, r2
 800b966:	d003      	beq.n	800b970 <__mcmp+0x2c>
 800b968:	d205      	bcs.n	800b976 <__mcmp+0x32>
 800b96a:	f04f 30ff 	mov.w	r0, #4294967295
 800b96e:	bd30      	pop	{r4, r5, pc}
 800b970:	42a3      	cmp	r3, r4
 800b972:	d3f3      	bcc.n	800b95c <__mcmp+0x18>
 800b974:	e7fb      	b.n	800b96e <__mcmp+0x2a>
 800b976:	2001      	movs	r0, #1
 800b978:	e7f9      	b.n	800b96e <__mcmp+0x2a>
	...

0800b97c <__mdiff>:
 800b97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b980:	4689      	mov	r9, r1
 800b982:	4606      	mov	r6, r0
 800b984:	4611      	mov	r1, r2
 800b986:	4648      	mov	r0, r9
 800b988:	4614      	mov	r4, r2
 800b98a:	f7ff ffdb 	bl	800b944 <__mcmp>
 800b98e:	1e05      	subs	r5, r0, #0
 800b990:	d112      	bne.n	800b9b8 <__mdiff+0x3c>
 800b992:	4629      	mov	r1, r5
 800b994:	4630      	mov	r0, r6
 800b996:	f7ff fd5b 	bl	800b450 <_Balloc>
 800b99a:	4602      	mov	r2, r0
 800b99c:	b928      	cbnz	r0, 800b9aa <__mdiff+0x2e>
 800b99e:	4b3f      	ldr	r3, [pc, #252]	@ (800ba9c <__mdiff+0x120>)
 800b9a0:	f240 2137 	movw	r1, #567	@ 0x237
 800b9a4:	483e      	ldr	r0, [pc, #248]	@ (800baa0 <__mdiff+0x124>)
 800b9a6:	f000 fcd7 	bl	800c358 <__assert_func>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	b003      	add	sp, #12
 800b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b8:	bfbc      	itt	lt
 800b9ba:	464b      	movlt	r3, r9
 800b9bc:	46a1      	movlt	r9, r4
 800b9be:	4630      	mov	r0, r6
 800b9c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9c4:	bfba      	itte	lt
 800b9c6:	461c      	movlt	r4, r3
 800b9c8:	2501      	movlt	r5, #1
 800b9ca:	2500      	movge	r5, #0
 800b9cc:	f7ff fd40 	bl	800b450 <_Balloc>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	b918      	cbnz	r0, 800b9dc <__mdiff+0x60>
 800b9d4:	4b31      	ldr	r3, [pc, #196]	@ (800ba9c <__mdiff+0x120>)
 800b9d6:	f240 2145 	movw	r1, #581	@ 0x245
 800b9da:	e7e3      	b.n	800b9a4 <__mdiff+0x28>
 800b9dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9e0:	6926      	ldr	r6, [r4, #16]
 800b9e2:	60c5      	str	r5, [r0, #12]
 800b9e4:	f109 0310 	add.w	r3, r9, #16
 800b9e8:	f109 0514 	add.w	r5, r9, #20
 800b9ec:	f104 0e14 	add.w	lr, r4, #20
 800b9f0:	f100 0b14 	add.w	fp, r0, #20
 800b9f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	46d9      	mov	r9, fp
 800ba00:	f04f 0c00 	mov.w	ip, #0
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba0e:	9301      	str	r3, [sp, #4]
 800ba10:	fa1f f38a 	uxth.w	r3, sl
 800ba14:	4619      	mov	r1, r3
 800ba16:	b283      	uxth	r3, r0
 800ba18:	1acb      	subs	r3, r1, r3
 800ba1a:	0c00      	lsrs	r0, r0, #16
 800ba1c:	4463      	add	r3, ip
 800ba1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba2c:	4576      	cmp	r6, lr
 800ba2e:	f849 3b04 	str.w	r3, [r9], #4
 800ba32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba36:	d8e5      	bhi.n	800ba04 <__mdiff+0x88>
 800ba38:	1b33      	subs	r3, r6, r4
 800ba3a:	3b15      	subs	r3, #21
 800ba3c:	f023 0303 	bic.w	r3, r3, #3
 800ba40:	3415      	adds	r4, #21
 800ba42:	3304      	adds	r3, #4
 800ba44:	42a6      	cmp	r6, r4
 800ba46:	bf38      	it	cc
 800ba48:	2304      	movcc	r3, #4
 800ba4a:	441d      	add	r5, r3
 800ba4c:	445b      	add	r3, fp
 800ba4e:	461e      	mov	r6, r3
 800ba50:	462c      	mov	r4, r5
 800ba52:	4544      	cmp	r4, r8
 800ba54:	d30e      	bcc.n	800ba74 <__mdiff+0xf8>
 800ba56:	f108 0103 	add.w	r1, r8, #3
 800ba5a:	1b49      	subs	r1, r1, r5
 800ba5c:	f021 0103 	bic.w	r1, r1, #3
 800ba60:	3d03      	subs	r5, #3
 800ba62:	45a8      	cmp	r8, r5
 800ba64:	bf38      	it	cc
 800ba66:	2100      	movcc	r1, #0
 800ba68:	440b      	add	r3, r1
 800ba6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba6e:	b191      	cbz	r1, 800ba96 <__mdiff+0x11a>
 800ba70:	6117      	str	r7, [r2, #16]
 800ba72:	e79d      	b.n	800b9b0 <__mdiff+0x34>
 800ba74:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba78:	46e6      	mov	lr, ip
 800ba7a:	0c08      	lsrs	r0, r1, #16
 800ba7c:	fa1c fc81 	uxtah	ip, ip, r1
 800ba80:	4471      	add	r1, lr
 800ba82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba86:	b289      	uxth	r1, r1
 800ba88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba8c:	f846 1b04 	str.w	r1, [r6], #4
 800ba90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba94:	e7dd      	b.n	800ba52 <__mdiff+0xd6>
 800ba96:	3f01      	subs	r7, #1
 800ba98:	e7e7      	b.n	800ba6a <__mdiff+0xee>
 800ba9a:	bf00      	nop
 800ba9c:	0800cf95 	.word	0x0800cf95
 800baa0:	0800cfa6 	.word	0x0800cfa6

0800baa4 <__d2b>:
 800baa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	460f      	mov	r7, r1
 800baaa:	2101      	movs	r1, #1
 800baac:	ec59 8b10 	vmov	r8, r9, d0
 800bab0:	4616      	mov	r6, r2
 800bab2:	f7ff fccd 	bl	800b450 <_Balloc>
 800bab6:	4604      	mov	r4, r0
 800bab8:	b930      	cbnz	r0, 800bac8 <__d2b+0x24>
 800baba:	4602      	mov	r2, r0
 800babc:	4b23      	ldr	r3, [pc, #140]	@ (800bb4c <__d2b+0xa8>)
 800babe:	4824      	ldr	r0, [pc, #144]	@ (800bb50 <__d2b+0xac>)
 800bac0:	f240 310f 	movw	r1, #783	@ 0x30f
 800bac4:	f000 fc48 	bl	800c358 <__assert_func>
 800bac8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bacc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bad0:	b10d      	cbz	r5, 800bad6 <__d2b+0x32>
 800bad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bad6:	9301      	str	r3, [sp, #4]
 800bad8:	f1b8 0300 	subs.w	r3, r8, #0
 800badc:	d023      	beq.n	800bb26 <__d2b+0x82>
 800bade:	4668      	mov	r0, sp
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	f7ff fd7c 	bl	800b5de <__lo0bits>
 800bae6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800baea:	b1d0      	cbz	r0, 800bb22 <__d2b+0x7e>
 800baec:	f1c0 0320 	rsb	r3, r0, #32
 800baf0:	fa02 f303 	lsl.w	r3, r2, r3
 800baf4:	430b      	orrs	r3, r1
 800baf6:	40c2      	lsrs	r2, r0
 800baf8:	6163      	str	r3, [r4, #20]
 800bafa:	9201      	str	r2, [sp, #4]
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	61a3      	str	r3, [r4, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bf0c      	ite	eq
 800bb04:	2201      	moveq	r2, #1
 800bb06:	2202      	movne	r2, #2
 800bb08:	6122      	str	r2, [r4, #16]
 800bb0a:	b1a5      	cbz	r5, 800bb36 <__d2b+0x92>
 800bb0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb10:	4405      	add	r5, r0
 800bb12:	603d      	str	r5, [r7, #0]
 800bb14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb18:	6030      	str	r0, [r6, #0]
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	b003      	add	sp, #12
 800bb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb22:	6161      	str	r1, [r4, #20]
 800bb24:	e7ea      	b.n	800bafc <__d2b+0x58>
 800bb26:	a801      	add	r0, sp, #4
 800bb28:	f7ff fd59 	bl	800b5de <__lo0bits>
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	6163      	str	r3, [r4, #20]
 800bb30:	3020      	adds	r0, #32
 800bb32:	2201      	movs	r2, #1
 800bb34:	e7e8      	b.n	800bb08 <__d2b+0x64>
 800bb36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb3e:	6038      	str	r0, [r7, #0]
 800bb40:	6918      	ldr	r0, [r3, #16]
 800bb42:	f7ff fd2d 	bl	800b5a0 <__hi0bits>
 800bb46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb4a:	e7e5      	b.n	800bb18 <__d2b+0x74>
 800bb4c:	0800cf95 	.word	0x0800cf95
 800bb50:	0800cfa6 	.word	0x0800cfa6

0800bb54 <__ssputs_r>:
 800bb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb58:	688e      	ldr	r6, [r1, #8]
 800bb5a:	461f      	mov	r7, r3
 800bb5c:	42be      	cmp	r6, r7
 800bb5e:	680b      	ldr	r3, [r1, #0]
 800bb60:	4682      	mov	sl, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	4690      	mov	r8, r2
 800bb66:	d82d      	bhi.n	800bbc4 <__ssputs_r+0x70>
 800bb68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb70:	d026      	beq.n	800bbc0 <__ssputs_r+0x6c>
 800bb72:	6965      	ldr	r5, [r4, #20]
 800bb74:	6909      	ldr	r1, [r1, #16]
 800bb76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb7a:	eba3 0901 	sub.w	r9, r3, r1
 800bb7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb82:	1c7b      	adds	r3, r7, #1
 800bb84:	444b      	add	r3, r9
 800bb86:	106d      	asrs	r5, r5, #1
 800bb88:	429d      	cmp	r5, r3
 800bb8a:	bf38      	it	cc
 800bb8c:	461d      	movcc	r5, r3
 800bb8e:	0553      	lsls	r3, r2, #21
 800bb90:	d527      	bpl.n	800bbe2 <__ssputs_r+0x8e>
 800bb92:	4629      	mov	r1, r5
 800bb94:	f7ff fbd0 	bl	800b338 <_malloc_r>
 800bb98:	4606      	mov	r6, r0
 800bb9a:	b360      	cbz	r0, 800bbf6 <__ssputs_r+0xa2>
 800bb9c:	6921      	ldr	r1, [r4, #16]
 800bb9e:	464a      	mov	r2, r9
 800bba0:	f000 fbcc 	bl	800c33c <memcpy>
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	6126      	str	r6, [r4, #16]
 800bbb2:	6165      	str	r5, [r4, #20]
 800bbb4:	444e      	add	r6, r9
 800bbb6:	eba5 0509 	sub.w	r5, r5, r9
 800bbba:	6026      	str	r6, [r4, #0]
 800bbbc:	60a5      	str	r5, [r4, #8]
 800bbbe:	463e      	mov	r6, r7
 800bbc0:	42be      	cmp	r6, r7
 800bbc2:	d900      	bls.n	800bbc6 <__ssputs_r+0x72>
 800bbc4:	463e      	mov	r6, r7
 800bbc6:	6820      	ldr	r0, [r4, #0]
 800bbc8:	4632      	mov	r2, r6
 800bbca:	4641      	mov	r1, r8
 800bbcc:	f000 fb6a 	bl	800c2a4 <memmove>
 800bbd0:	68a3      	ldr	r3, [r4, #8]
 800bbd2:	1b9b      	subs	r3, r3, r6
 800bbd4:	60a3      	str	r3, [r4, #8]
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	4433      	add	r3, r6
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	2000      	movs	r0, #0
 800bbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	f000 fbfc 	bl	800c3e0 <_realloc_r>
 800bbe8:	4606      	mov	r6, r0
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d1e0      	bne.n	800bbb0 <__ssputs_r+0x5c>
 800bbee:	6921      	ldr	r1, [r4, #16]
 800bbf0:	4650      	mov	r0, sl
 800bbf2:	f7ff fb2d 	bl	800b250 <_free_r>
 800bbf6:	230c      	movs	r3, #12
 800bbf8:	f8ca 3000 	str.w	r3, [sl]
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	e7e9      	b.n	800bbde <__ssputs_r+0x8a>
	...

0800bc0c <_svfiprintf_r>:
 800bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc10:	4698      	mov	r8, r3
 800bc12:	898b      	ldrh	r3, [r1, #12]
 800bc14:	061b      	lsls	r3, r3, #24
 800bc16:	b09d      	sub	sp, #116	@ 0x74
 800bc18:	4607      	mov	r7, r0
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	d510      	bpl.n	800bc42 <_svfiprintf_r+0x36>
 800bc20:	690b      	ldr	r3, [r1, #16]
 800bc22:	b973      	cbnz	r3, 800bc42 <_svfiprintf_r+0x36>
 800bc24:	2140      	movs	r1, #64	@ 0x40
 800bc26:	f7ff fb87 	bl	800b338 <_malloc_r>
 800bc2a:	6028      	str	r0, [r5, #0]
 800bc2c:	6128      	str	r0, [r5, #16]
 800bc2e:	b930      	cbnz	r0, 800bc3e <_svfiprintf_r+0x32>
 800bc30:	230c      	movs	r3, #12
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295
 800bc38:	b01d      	add	sp, #116	@ 0x74
 800bc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3e:	2340      	movs	r3, #64	@ 0x40
 800bc40:	616b      	str	r3, [r5, #20]
 800bc42:	2300      	movs	r3, #0
 800bc44:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc46:	2320      	movs	r3, #32
 800bc48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc50:	2330      	movs	r3, #48	@ 0x30
 800bc52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bdf0 <_svfiprintf_r+0x1e4>
 800bc56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc5a:	f04f 0901 	mov.w	r9, #1
 800bc5e:	4623      	mov	r3, r4
 800bc60:	469a      	mov	sl, r3
 800bc62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc66:	b10a      	cbz	r2, 800bc6c <_svfiprintf_r+0x60>
 800bc68:	2a25      	cmp	r2, #37	@ 0x25
 800bc6a:	d1f9      	bne.n	800bc60 <_svfiprintf_r+0x54>
 800bc6c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc70:	d00b      	beq.n	800bc8a <_svfiprintf_r+0x7e>
 800bc72:	465b      	mov	r3, fp
 800bc74:	4622      	mov	r2, r4
 800bc76:	4629      	mov	r1, r5
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f7ff ff6b 	bl	800bb54 <__ssputs_r>
 800bc7e:	3001      	adds	r0, #1
 800bc80:	f000 80a7 	beq.w	800bdd2 <_svfiprintf_r+0x1c6>
 800bc84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc86:	445a      	add	r2, fp
 800bc88:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f000 809f 	beq.w	800bdd2 <_svfiprintf_r+0x1c6>
 800bc94:	2300      	movs	r3, #0
 800bc96:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc9e:	f10a 0a01 	add.w	sl, sl, #1
 800bca2:	9304      	str	r3, [sp, #16]
 800bca4:	9307      	str	r3, [sp, #28]
 800bca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcac:	4654      	mov	r4, sl
 800bcae:	2205      	movs	r2, #5
 800bcb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcb4:	484e      	ldr	r0, [pc, #312]	@ (800bdf0 <_svfiprintf_r+0x1e4>)
 800bcb6:	f7f4 fab3 	bl	8000220 <memchr>
 800bcba:	9a04      	ldr	r2, [sp, #16]
 800bcbc:	b9d8      	cbnz	r0, 800bcf6 <_svfiprintf_r+0xea>
 800bcbe:	06d0      	lsls	r0, r2, #27
 800bcc0:	bf44      	itt	mi
 800bcc2:	2320      	movmi	r3, #32
 800bcc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcc8:	0711      	lsls	r1, r2, #28
 800bcca:	bf44      	itt	mi
 800bccc:	232b      	movmi	r3, #43	@ 0x2b
 800bcce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcd8:	d015      	beq.n	800bd06 <_svfiprintf_r+0xfa>
 800bcda:	9a07      	ldr	r2, [sp, #28]
 800bcdc:	4654      	mov	r4, sl
 800bcde:	2000      	movs	r0, #0
 800bce0:	f04f 0c0a 	mov.w	ip, #10
 800bce4:	4621      	mov	r1, r4
 800bce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcea:	3b30      	subs	r3, #48	@ 0x30
 800bcec:	2b09      	cmp	r3, #9
 800bcee:	d94b      	bls.n	800bd88 <_svfiprintf_r+0x17c>
 800bcf0:	b1b0      	cbz	r0, 800bd20 <_svfiprintf_r+0x114>
 800bcf2:	9207      	str	r2, [sp, #28]
 800bcf4:	e014      	b.n	800bd20 <_svfiprintf_r+0x114>
 800bcf6:	eba0 0308 	sub.w	r3, r0, r8
 800bcfa:	fa09 f303 	lsl.w	r3, r9, r3
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	46a2      	mov	sl, r4
 800bd04:	e7d2      	b.n	800bcac <_svfiprintf_r+0xa0>
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	1d19      	adds	r1, r3, #4
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	9103      	str	r1, [sp, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	bfbb      	ittet	lt
 800bd12:	425b      	neglt	r3, r3
 800bd14:	f042 0202 	orrlt.w	r2, r2, #2
 800bd18:	9307      	strge	r3, [sp, #28]
 800bd1a:	9307      	strlt	r3, [sp, #28]
 800bd1c:	bfb8      	it	lt
 800bd1e:	9204      	strlt	r2, [sp, #16]
 800bd20:	7823      	ldrb	r3, [r4, #0]
 800bd22:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd24:	d10a      	bne.n	800bd3c <_svfiprintf_r+0x130>
 800bd26:	7863      	ldrb	r3, [r4, #1]
 800bd28:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd2a:	d132      	bne.n	800bd92 <_svfiprintf_r+0x186>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	1d1a      	adds	r2, r3, #4
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	9203      	str	r2, [sp, #12]
 800bd34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd38:	3402      	adds	r4, #2
 800bd3a:	9305      	str	r3, [sp, #20]
 800bd3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be00 <_svfiprintf_r+0x1f4>
 800bd40:	7821      	ldrb	r1, [r4, #0]
 800bd42:	2203      	movs	r2, #3
 800bd44:	4650      	mov	r0, sl
 800bd46:	f7f4 fa6b 	bl	8000220 <memchr>
 800bd4a:	b138      	cbz	r0, 800bd5c <_svfiprintf_r+0x150>
 800bd4c:	9b04      	ldr	r3, [sp, #16]
 800bd4e:	eba0 000a 	sub.w	r0, r0, sl
 800bd52:	2240      	movs	r2, #64	@ 0x40
 800bd54:	4082      	lsls	r2, r0
 800bd56:	4313      	orrs	r3, r2
 800bd58:	3401      	adds	r4, #1
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd60:	4824      	ldr	r0, [pc, #144]	@ (800bdf4 <_svfiprintf_r+0x1e8>)
 800bd62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd66:	2206      	movs	r2, #6
 800bd68:	f7f4 fa5a 	bl	8000220 <memchr>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d036      	beq.n	800bdde <_svfiprintf_r+0x1d2>
 800bd70:	4b21      	ldr	r3, [pc, #132]	@ (800bdf8 <_svfiprintf_r+0x1ec>)
 800bd72:	bb1b      	cbnz	r3, 800bdbc <_svfiprintf_r+0x1b0>
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	3307      	adds	r3, #7
 800bd78:	f023 0307 	bic.w	r3, r3, #7
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	9303      	str	r3, [sp, #12]
 800bd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd82:	4433      	add	r3, r6
 800bd84:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd86:	e76a      	b.n	800bc5e <_svfiprintf_r+0x52>
 800bd88:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	2001      	movs	r0, #1
 800bd90:	e7a8      	b.n	800bce4 <_svfiprintf_r+0xd8>
 800bd92:	2300      	movs	r3, #0
 800bd94:	3401      	adds	r4, #1
 800bd96:	9305      	str	r3, [sp, #20]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	f04f 0c0a 	mov.w	ip, #10
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bda4:	3a30      	subs	r2, #48	@ 0x30
 800bda6:	2a09      	cmp	r2, #9
 800bda8:	d903      	bls.n	800bdb2 <_svfiprintf_r+0x1a6>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0c6      	beq.n	800bd3c <_svfiprintf_r+0x130>
 800bdae:	9105      	str	r1, [sp, #20]
 800bdb0:	e7c4      	b.n	800bd3c <_svfiprintf_r+0x130>
 800bdb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e7f0      	b.n	800bd9e <_svfiprintf_r+0x192>
 800bdbc:	ab03      	add	r3, sp, #12
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	462a      	mov	r2, r5
 800bdc2:	4b0e      	ldr	r3, [pc, #56]	@ (800bdfc <_svfiprintf_r+0x1f0>)
 800bdc4:	a904      	add	r1, sp, #16
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	f7fd fd8a 	bl	80098e0 <_printf_float>
 800bdcc:	1c42      	adds	r2, r0, #1
 800bdce:	4606      	mov	r6, r0
 800bdd0:	d1d6      	bne.n	800bd80 <_svfiprintf_r+0x174>
 800bdd2:	89ab      	ldrh	r3, [r5, #12]
 800bdd4:	065b      	lsls	r3, r3, #25
 800bdd6:	f53f af2d 	bmi.w	800bc34 <_svfiprintf_r+0x28>
 800bdda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bddc:	e72c      	b.n	800bc38 <_svfiprintf_r+0x2c>
 800bdde:	ab03      	add	r3, sp, #12
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	462a      	mov	r2, r5
 800bde4:	4b05      	ldr	r3, [pc, #20]	@ (800bdfc <_svfiprintf_r+0x1f0>)
 800bde6:	a904      	add	r1, sp, #16
 800bde8:	4638      	mov	r0, r7
 800bdea:	f7fe f811 	bl	8009e10 <_printf_i>
 800bdee:	e7ed      	b.n	800bdcc <_svfiprintf_r+0x1c0>
 800bdf0:	0800d100 	.word	0x0800d100
 800bdf4:	0800d10a 	.word	0x0800d10a
 800bdf8:	080098e1 	.word	0x080098e1
 800bdfc:	0800bb55 	.word	0x0800bb55
 800be00:	0800d106 	.word	0x0800d106

0800be04 <__sfputc_r>:
 800be04:	6893      	ldr	r3, [r2, #8]
 800be06:	3b01      	subs	r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	b410      	push	{r4}
 800be0c:	6093      	str	r3, [r2, #8]
 800be0e:	da08      	bge.n	800be22 <__sfputc_r+0x1e>
 800be10:	6994      	ldr	r4, [r2, #24]
 800be12:	42a3      	cmp	r3, r4
 800be14:	db01      	blt.n	800be1a <__sfputc_r+0x16>
 800be16:	290a      	cmp	r1, #10
 800be18:	d103      	bne.n	800be22 <__sfputc_r+0x1e>
 800be1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be1e:	f7fe baac 	b.w	800a37a <__swbuf_r>
 800be22:	6813      	ldr	r3, [r2, #0]
 800be24:	1c58      	adds	r0, r3, #1
 800be26:	6010      	str	r0, [r2, #0]
 800be28:	7019      	strb	r1, [r3, #0]
 800be2a:	4608      	mov	r0, r1
 800be2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <__sfputs_r>:
 800be32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be34:	4606      	mov	r6, r0
 800be36:	460f      	mov	r7, r1
 800be38:	4614      	mov	r4, r2
 800be3a:	18d5      	adds	r5, r2, r3
 800be3c:	42ac      	cmp	r4, r5
 800be3e:	d101      	bne.n	800be44 <__sfputs_r+0x12>
 800be40:	2000      	movs	r0, #0
 800be42:	e007      	b.n	800be54 <__sfputs_r+0x22>
 800be44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be48:	463a      	mov	r2, r7
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7ff ffda 	bl	800be04 <__sfputc_r>
 800be50:	1c43      	adds	r3, r0, #1
 800be52:	d1f3      	bne.n	800be3c <__sfputs_r+0xa>
 800be54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be58 <_vfiprintf_r>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	460d      	mov	r5, r1
 800be5e:	b09d      	sub	sp, #116	@ 0x74
 800be60:	4614      	mov	r4, r2
 800be62:	4698      	mov	r8, r3
 800be64:	4606      	mov	r6, r0
 800be66:	b118      	cbz	r0, 800be70 <_vfiprintf_r+0x18>
 800be68:	6a03      	ldr	r3, [r0, #32]
 800be6a:	b90b      	cbnz	r3, 800be70 <_vfiprintf_r+0x18>
 800be6c:	f7fe f97c 	bl	800a168 <__sinit>
 800be70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be72:	07d9      	lsls	r1, r3, #31
 800be74:	d405      	bmi.n	800be82 <_vfiprintf_r+0x2a>
 800be76:	89ab      	ldrh	r3, [r5, #12]
 800be78:	059a      	lsls	r2, r3, #22
 800be7a:	d402      	bmi.n	800be82 <_vfiprintf_r+0x2a>
 800be7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be7e:	f7fe fb8e 	bl	800a59e <__retarget_lock_acquire_recursive>
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	071b      	lsls	r3, r3, #28
 800be86:	d501      	bpl.n	800be8c <_vfiprintf_r+0x34>
 800be88:	692b      	ldr	r3, [r5, #16]
 800be8a:	b99b      	cbnz	r3, 800beb4 <_vfiprintf_r+0x5c>
 800be8c:	4629      	mov	r1, r5
 800be8e:	4630      	mov	r0, r6
 800be90:	f7fe fab2 	bl	800a3f8 <__swsetup_r>
 800be94:	b170      	cbz	r0, 800beb4 <_vfiprintf_r+0x5c>
 800be96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be98:	07dc      	lsls	r4, r3, #31
 800be9a:	d504      	bpl.n	800bea6 <_vfiprintf_r+0x4e>
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	b01d      	add	sp, #116	@ 0x74
 800bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea6:	89ab      	ldrh	r3, [r5, #12]
 800bea8:	0598      	lsls	r0, r3, #22
 800beaa:	d4f7      	bmi.n	800be9c <_vfiprintf_r+0x44>
 800beac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beae:	f7fe fb77 	bl	800a5a0 <__retarget_lock_release_recursive>
 800beb2:	e7f3      	b.n	800be9c <_vfiprintf_r+0x44>
 800beb4:	2300      	movs	r3, #0
 800beb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800beb8:	2320      	movs	r3, #32
 800beba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bebe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bec2:	2330      	movs	r3, #48	@ 0x30
 800bec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c074 <_vfiprintf_r+0x21c>
 800bec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800becc:	f04f 0901 	mov.w	r9, #1
 800bed0:	4623      	mov	r3, r4
 800bed2:	469a      	mov	sl, r3
 800bed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bed8:	b10a      	cbz	r2, 800bede <_vfiprintf_r+0x86>
 800beda:	2a25      	cmp	r2, #37	@ 0x25
 800bedc:	d1f9      	bne.n	800bed2 <_vfiprintf_r+0x7a>
 800bede:	ebba 0b04 	subs.w	fp, sl, r4
 800bee2:	d00b      	beq.n	800befc <_vfiprintf_r+0xa4>
 800bee4:	465b      	mov	r3, fp
 800bee6:	4622      	mov	r2, r4
 800bee8:	4629      	mov	r1, r5
 800beea:	4630      	mov	r0, r6
 800beec:	f7ff ffa1 	bl	800be32 <__sfputs_r>
 800bef0:	3001      	adds	r0, #1
 800bef2:	f000 80a7 	beq.w	800c044 <_vfiprintf_r+0x1ec>
 800bef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bef8:	445a      	add	r2, fp
 800befa:	9209      	str	r2, [sp, #36]	@ 0x24
 800befc:	f89a 3000 	ldrb.w	r3, [sl]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 809f 	beq.w	800c044 <_vfiprintf_r+0x1ec>
 800bf06:	2300      	movs	r3, #0
 800bf08:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf10:	f10a 0a01 	add.w	sl, sl, #1
 800bf14:	9304      	str	r3, [sp, #16]
 800bf16:	9307      	str	r3, [sp, #28]
 800bf18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf1e:	4654      	mov	r4, sl
 800bf20:	2205      	movs	r2, #5
 800bf22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf26:	4853      	ldr	r0, [pc, #332]	@ (800c074 <_vfiprintf_r+0x21c>)
 800bf28:	f7f4 f97a 	bl	8000220 <memchr>
 800bf2c:	9a04      	ldr	r2, [sp, #16]
 800bf2e:	b9d8      	cbnz	r0, 800bf68 <_vfiprintf_r+0x110>
 800bf30:	06d1      	lsls	r1, r2, #27
 800bf32:	bf44      	itt	mi
 800bf34:	2320      	movmi	r3, #32
 800bf36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf3a:	0713      	lsls	r3, r2, #28
 800bf3c:	bf44      	itt	mi
 800bf3e:	232b      	movmi	r3, #43	@ 0x2b
 800bf40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf44:	f89a 3000 	ldrb.w	r3, [sl]
 800bf48:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf4a:	d015      	beq.n	800bf78 <_vfiprintf_r+0x120>
 800bf4c:	9a07      	ldr	r2, [sp, #28]
 800bf4e:	4654      	mov	r4, sl
 800bf50:	2000      	movs	r0, #0
 800bf52:	f04f 0c0a 	mov.w	ip, #10
 800bf56:	4621      	mov	r1, r4
 800bf58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf5c:	3b30      	subs	r3, #48	@ 0x30
 800bf5e:	2b09      	cmp	r3, #9
 800bf60:	d94b      	bls.n	800bffa <_vfiprintf_r+0x1a2>
 800bf62:	b1b0      	cbz	r0, 800bf92 <_vfiprintf_r+0x13a>
 800bf64:	9207      	str	r2, [sp, #28]
 800bf66:	e014      	b.n	800bf92 <_vfiprintf_r+0x13a>
 800bf68:	eba0 0308 	sub.w	r3, r0, r8
 800bf6c:	fa09 f303 	lsl.w	r3, r9, r3
 800bf70:	4313      	orrs	r3, r2
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	46a2      	mov	sl, r4
 800bf76:	e7d2      	b.n	800bf1e <_vfiprintf_r+0xc6>
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	1d19      	adds	r1, r3, #4
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	9103      	str	r1, [sp, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	bfbb      	ittet	lt
 800bf84:	425b      	neglt	r3, r3
 800bf86:	f042 0202 	orrlt.w	r2, r2, #2
 800bf8a:	9307      	strge	r3, [sp, #28]
 800bf8c:	9307      	strlt	r3, [sp, #28]
 800bf8e:	bfb8      	it	lt
 800bf90:	9204      	strlt	r2, [sp, #16]
 800bf92:	7823      	ldrb	r3, [r4, #0]
 800bf94:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf96:	d10a      	bne.n	800bfae <_vfiprintf_r+0x156>
 800bf98:	7863      	ldrb	r3, [r4, #1]
 800bf9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf9c:	d132      	bne.n	800c004 <_vfiprintf_r+0x1ac>
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	1d1a      	adds	r2, r3, #4
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	9203      	str	r2, [sp, #12]
 800bfa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfaa:	3402      	adds	r4, #2
 800bfac:	9305      	str	r3, [sp, #20]
 800bfae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c084 <_vfiprintf_r+0x22c>
 800bfb2:	7821      	ldrb	r1, [r4, #0]
 800bfb4:	2203      	movs	r2, #3
 800bfb6:	4650      	mov	r0, sl
 800bfb8:	f7f4 f932 	bl	8000220 <memchr>
 800bfbc:	b138      	cbz	r0, 800bfce <_vfiprintf_r+0x176>
 800bfbe:	9b04      	ldr	r3, [sp, #16]
 800bfc0:	eba0 000a 	sub.w	r0, r0, sl
 800bfc4:	2240      	movs	r2, #64	@ 0x40
 800bfc6:	4082      	lsls	r2, r0
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	3401      	adds	r4, #1
 800bfcc:	9304      	str	r3, [sp, #16]
 800bfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd2:	4829      	ldr	r0, [pc, #164]	@ (800c078 <_vfiprintf_r+0x220>)
 800bfd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfd8:	2206      	movs	r2, #6
 800bfda:	f7f4 f921 	bl	8000220 <memchr>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d03f      	beq.n	800c062 <_vfiprintf_r+0x20a>
 800bfe2:	4b26      	ldr	r3, [pc, #152]	@ (800c07c <_vfiprintf_r+0x224>)
 800bfe4:	bb1b      	cbnz	r3, 800c02e <_vfiprintf_r+0x1d6>
 800bfe6:	9b03      	ldr	r3, [sp, #12]
 800bfe8:	3307      	adds	r3, #7
 800bfea:	f023 0307 	bic.w	r3, r3, #7
 800bfee:	3308      	adds	r3, #8
 800bff0:	9303      	str	r3, [sp, #12]
 800bff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff4:	443b      	add	r3, r7
 800bff6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bff8:	e76a      	b.n	800bed0 <_vfiprintf_r+0x78>
 800bffa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bffe:	460c      	mov	r4, r1
 800c000:	2001      	movs	r0, #1
 800c002:	e7a8      	b.n	800bf56 <_vfiprintf_r+0xfe>
 800c004:	2300      	movs	r3, #0
 800c006:	3401      	adds	r4, #1
 800c008:	9305      	str	r3, [sp, #20]
 800c00a:	4619      	mov	r1, r3
 800c00c:	f04f 0c0a 	mov.w	ip, #10
 800c010:	4620      	mov	r0, r4
 800c012:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c016:	3a30      	subs	r2, #48	@ 0x30
 800c018:	2a09      	cmp	r2, #9
 800c01a:	d903      	bls.n	800c024 <_vfiprintf_r+0x1cc>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d0c6      	beq.n	800bfae <_vfiprintf_r+0x156>
 800c020:	9105      	str	r1, [sp, #20]
 800c022:	e7c4      	b.n	800bfae <_vfiprintf_r+0x156>
 800c024:	fb0c 2101 	mla	r1, ip, r1, r2
 800c028:	4604      	mov	r4, r0
 800c02a:	2301      	movs	r3, #1
 800c02c:	e7f0      	b.n	800c010 <_vfiprintf_r+0x1b8>
 800c02e:	ab03      	add	r3, sp, #12
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	462a      	mov	r2, r5
 800c034:	4b12      	ldr	r3, [pc, #72]	@ (800c080 <_vfiprintf_r+0x228>)
 800c036:	a904      	add	r1, sp, #16
 800c038:	4630      	mov	r0, r6
 800c03a:	f7fd fc51 	bl	80098e0 <_printf_float>
 800c03e:	4607      	mov	r7, r0
 800c040:	1c78      	adds	r0, r7, #1
 800c042:	d1d6      	bne.n	800bff2 <_vfiprintf_r+0x19a>
 800c044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c046:	07d9      	lsls	r1, r3, #31
 800c048:	d405      	bmi.n	800c056 <_vfiprintf_r+0x1fe>
 800c04a:	89ab      	ldrh	r3, [r5, #12]
 800c04c:	059a      	lsls	r2, r3, #22
 800c04e:	d402      	bmi.n	800c056 <_vfiprintf_r+0x1fe>
 800c050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c052:	f7fe faa5 	bl	800a5a0 <__retarget_lock_release_recursive>
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	065b      	lsls	r3, r3, #25
 800c05a:	f53f af1f 	bmi.w	800be9c <_vfiprintf_r+0x44>
 800c05e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c060:	e71e      	b.n	800bea0 <_vfiprintf_r+0x48>
 800c062:	ab03      	add	r3, sp, #12
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	462a      	mov	r2, r5
 800c068:	4b05      	ldr	r3, [pc, #20]	@ (800c080 <_vfiprintf_r+0x228>)
 800c06a:	a904      	add	r1, sp, #16
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7fd fecf 	bl	8009e10 <_printf_i>
 800c072:	e7e4      	b.n	800c03e <_vfiprintf_r+0x1e6>
 800c074:	0800d100 	.word	0x0800d100
 800c078:	0800d10a 	.word	0x0800d10a
 800c07c:	080098e1 	.word	0x080098e1
 800c080:	0800be33 	.word	0x0800be33
 800c084:	0800d106 	.word	0x0800d106

0800c088 <__sflush_r>:
 800c088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c090:	0716      	lsls	r6, r2, #28
 800c092:	4605      	mov	r5, r0
 800c094:	460c      	mov	r4, r1
 800c096:	d454      	bmi.n	800c142 <__sflush_r+0xba>
 800c098:	684b      	ldr	r3, [r1, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	dc02      	bgt.n	800c0a4 <__sflush_r+0x1c>
 800c09e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	dd48      	ble.n	800c136 <__sflush_r+0xae>
 800c0a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0a6:	2e00      	cmp	r6, #0
 800c0a8:	d045      	beq.n	800c136 <__sflush_r+0xae>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0b0:	682f      	ldr	r7, [r5, #0]
 800c0b2:	6a21      	ldr	r1, [r4, #32]
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	d030      	beq.n	800c11a <__sflush_r+0x92>
 800c0b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	0759      	lsls	r1, r3, #29
 800c0be:	d505      	bpl.n	800c0cc <__sflush_r+0x44>
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	1ad2      	subs	r2, r2, r3
 800c0c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0c6:	b10b      	cbz	r3, 800c0cc <__sflush_r+0x44>
 800c0c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ca:	1ad2      	subs	r2, r2, r3
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0d0:	6a21      	ldr	r1, [r4, #32]
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	47b0      	blx	r6
 800c0d6:	1c43      	adds	r3, r0, #1
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	d106      	bne.n	800c0ea <__sflush_r+0x62>
 800c0dc:	6829      	ldr	r1, [r5, #0]
 800c0de:	291d      	cmp	r1, #29
 800c0e0:	d82b      	bhi.n	800c13a <__sflush_r+0xb2>
 800c0e2:	4a2a      	ldr	r2, [pc, #168]	@ (800c18c <__sflush_r+0x104>)
 800c0e4:	410a      	asrs	r2, r1
 800c0e6:	07d6      	lsls	r6, r2, #31
 800c0e8:	d427      	bmi.n	800c13a <__sflush_r+0xb2>
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	6062      	str	r2, [r4, #4]
 800c0ee:	04d9      	lsls	r1, r3, #19
 800c0f0:	6922      	ldr	r2, [r4, #16]
 800c0f2:	6022      	str	r2, [r4, #0]
 800c0f4:	d504      	bpl.n	800c100 <__sflush_r+0x78>
 800c0f6:	1c42      	adds	r2, r0, #1
 800c0f8:	d101      	bne.n	800c0fe <__sflush_r+0x76>
 800c0fa:	682b      	ldr	r3, [r5, #0]
 800c0fc:	b903      	cbnz	r3, 800c100 <__sflush_r+0x78>
 800c0fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800c100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c102:	602f      	str	r7, [r5, #0]
 800c104:	b1b9      	cbz	r1, 800c136 <__sflush_r+0xae>
 800c106:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c10a:	4299      	cmp	r1, r3
 800c10c:	d002      	beq.n	800c114 <__sflush_r+0x8c>
 800c10e:	4628      	mov	r0, r5
 800c110:	f7ff f89e 	bl	800b250 <_free_r>
 800c114:	2300      	movs	r3, #0
 800c116:	6363      	str	r3, [r4, #52]	@ 0x34
 800c118:	e00d      	b.n	800c136 <__sflush_r+0xae>
 800c11a:	2301      	movs	r3, #1
 800c11c:	4628      	mov	r0, r5
 800c11e:	47b0      	blx	r6
 800c120:	4602      	mov	r2, r0
 800c122:	1c50      	adds	r0, r2, #1
 800c124:	d1c9      	bne.n	800c0ba <__sflush_r+0x32>
 800c126:	682b      	ldr	r3, [r5, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0c6      	beq.n	800c0ba <__sflush_r+0x32>
 800c12c:	2b1d      	cmp	r3, #29
 800c12e:	d001      	beq.n	800c134 <__sflush_r+0xac>
 800c130:	2b16      	cmp	r3, #22
 800c132:	d11e      	bne.n	800c172 <__sflush_r+0xea>
 800c134:	602f      	str	r7, [r5, #0]
 800c136:	2000      	movs	r0, #0
 800c138:	e022      	b.n	800c180 <__sflush_r+0xf8>
 800c13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c13e:	b21b      	sxth	r3, r3
 800c140:	e01b      	b.n	800c17a <__sflush_r+0xf2>
 800c142:	690f      	ldr	r7, [r1, #16]
 800c144:	2f00      	cmp	r7, #0
 800c146:	d0f6      	beq.n	800c136 <__sflush_r+0xae>
 800c148:	0793      	lsls	r3, r2, #30
 800c14a:	680e      	ldr	r6, [r1, #0]
 800c14c:	bf08      	it	eq
 800c14e:	694b      	ldreq	r3, [r1, #20]
 800c150:	600f      	str	r7, [r1, #0]
 800c152:	bf18      	it	ne
 800c154:	2300      	movne	r3, #0
 800c156:	eba6 0807 	sub.w	r8, r6, r7
 800c15a:	608b      	str	r3, [r1, #8]
 800c15c:	f1b8 0f00 	cmp.w	r8, #0
 800c160:	dde9      	ble.n	800c136 <__sflush_r+0xae>
 800c162:	6a21      	ldr	r1, [r4, #32]
 800c164:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c166:	4643      	mov	r3, r8
 800c168:	463a      	mov	r2, r7
 800c16a:	4628      	mov	r0, r5
 800c16c:	47b0      	blx	r6
 800c16e:	2800      	cmp	r0, #0
 800c170:	dc08      	bgt.n	800c184 <__sflush_r+0xfc>
 800c172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c17a:	81a3      	strh	r3, [r4, #12]
 800c17c:	f04f 30ff 	mov.w	r0, #4294967295
 800c180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c184:	4407      	add	r7, r0
 800c186:	eba8 0800 	sub.w	r8, r8, r0
 800c18a:	e7e7      	b.n	800c15c <__sflush_r+0xd4>
 800c18c:	dfbffffe 	.word	0xdfbffffe

0800c190 <_fflush_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	690b      	ldr	r3, [r1, #16]
 800c194:	4605      	mov	r5, r0
 800c196:	460c      	mov	r4, r1
 800c198:	b913      	cbnz	r3, 800c1a0 <_fflush_r+0x10>
 800c19a:	2500      	movs	r5, #0
 800c19c:	4628      	mov	r0, r5
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	b118      	cbz	r0, 800c1aa <_fflush_r+0x1a>
 800c1a2:	6a03      	ldr	r3, [r0, #32]
 800c1a4:	b90b      	cbnz	r3, 800c1aa <_fflush_r+0x1a>
 800c1a6:	f7fd ffdf 	bl	800a168 <__sinit>
 800c1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d0f3      	beq.n	800c19a <_fflush_r+0xa>
 800c1b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1b4:	07d0      	lsls	r0, r2, #31
 800c1b6:	d404      	bmi.n	800c1c2 <_fflush_r+0x32>
 800c1b8:	0599      	lsls	r1, r3, #22
 800c1ba:	d402      	bmi.n	800c1c2 <_fflush_r+0x32>
 800c1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1be:	f7fe f9ee 	bl	800a59e <__retarget_lock_acquire_recursive>
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	f7ff ff5f 	bl	800c088 <__sflush_r>
 800c1ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1cc:	07da      	lsls	r2, r3, #31
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	d4e4      	bmi.n	800c19c <_fflush_r+0xc>
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	059b      	lsls	r3, r3, #22
 800c1d6:	d4e1      	bmi.n	800c19c <_fflush_r+0xc>
 800c1d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1da:	f7fe f9e1 	bl	800a5a0 <__retarget_lock_release_recursive>
 800c1de:	e7dd      	b.n	800c19c <_fflush_r+0xc>

0800c1e0 <__swhatbuf_r>:
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e8:	2900      	cmp	r1, #0
 800c1ea:	b096      	sub	sp, #88	@ 0x58
 800c1ec:	4615      	mov	r5, r2
 800c1ee:	461e      	mov	r6, r3
 800c1f0:	da0d      	bge.n	800c20e <__swhatbuf_r+0x2e>
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1f8:	f04f 0100 	mov.w	r1, #0
 800c1fc:	bf14      	ite	ne
 800c1fe:	2340      	movne	r3, #64	@ 0x40
 800c200:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c204:	2000      	movs	r0, #0
 800c206:	6031      	str	r1, [r6, #0]
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	b016      	add	sp, #88	@ 0x58
 800c20c:	bd70      	pop	{r4, r5, r6, pc}
 800c20e:	466a      	mov	r2, sp
 800c210:	f000 f862 	bl	800c2d8 <_fstat_r>
 800c214:	2800      	cmp	r0, #0
 800c216:	dbec      	blt.n	800c1f2 <__swhatbuf_r+0x12>
 800c218:	9901      	ldr	r1, [sp, #4]
 800c21a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c21e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c222:	4259      	negs	r1, r3
 800c224:	4159      	adcs	r1, r3
 800c226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c22a:	e7eb      	b.n	800c204 <__swhatbuf_r+0x24>

0800c22c <__smakebuf_r>:
 800c22c:	898b      	ldrh	r3, [r1, #12]
 800c22e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c230:	079d      	lsls	r5, r3, #30
 800c232:	4606      	mov	r6, r0
 800c234:	460c      	mov	r4, r1
 800c236:	d507      	bpl.n	800c248 <__smakebuf_r+0x1c>
 800c238:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	6123      	str	r3, [r4, #16]
 800c240:	2301      	movs	r3, #1
 800c242:	6163      	str	r3, [r4, #20]
 800c244:	b003      	add	sp, #12
 800c246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c248:	ab01      	add	r3, sp, #4
 800c24a:	466a      	mov	r2, sp
 800c24c:	f7ff ffc8 	bl	800c1e0 <__swhatbuf_r>
 800c250:	9f00      	ldr	r7, [sp, #0]
 800c252:	4605      	mov	r5, r0
 800c254:	4639      	mov	r1, r7
 800c256:	4630      	mov	r0, r6
 800c258:	f7ff f86e 	bl	800b338 <_malloc_r>
 800c25c:	b948      	cbnz	r0, 800c272 <__smakebuf_r+0x46>
 800c25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c262:	059a      	lsls	r2, r3, #22
 800c264:	d4ee      	bmi.n	800c244 <__smakebuf_r+0x18>
 800c266:	f023 0303 	bic.w	r3, r3, #3
 800c26a:	f043 0302 	orr.w	r3, r3, #2
 800c26e:	81a3      	strh	r3, [r4, #12]
 800c270:	e7e2      	b.n	800c238 <__smakebuf_r+0xc>
 800c272:	89a3      	ldrh	r3, [r4, #12]
 800c274:	6020      	str	r0, [r4, #0]
 800c276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c27a:	81a3      	strh	r3, [r4, #12]
 800c27c:	9b01      	ldr	r3, [sp, #4]
 800c27e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c282:	b15b      	cbz	r3, 800c29c <__smakebuf_r+0x70>
 800c284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c288:	4630      	mov	r0, r6
 800c28a:	f000 f837 	bl	800c2fc <_isatty_r>
 800c28e:	b128      	cbz	r0, 800c29c <__smakebuf_r+0x70>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	f023 0303 	bic.w	r3, r3, #3
 800c296:	f043 0301 	orr.w	r3, r3, #1
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	431d      	orrs	r5, r3
 800c2a0:	81a5      	strh	r5, [r4, #12]
 800c2a2:	e7cf      	b.n	800c244 <__smakebuf_r+0x18>

0800c2a4 <memmove>:
 800c2a4:	4288      	cmp	r0, r1
 800c2a6:	b510      	push	{r4, lr}
 800c2a8:	eb01 0402 	add.w	r4, r1, r2
 800c2ac:	d902      	bls.n	800c2b4 <memmove+0x10>
 800c2ae:	4284      	cmp	r4, r0
 800c2b0:	4623      	mov	r3, r4
 800c2b2:	d807      	bhi.n	800c2c4 <memmove+0x20>
 800c2b4:	1e43      	subs	r3, r0, #1
 800c2b6:	42a1      	cmp	r1, r4
 800c2b8:	d008      	beq.n	800c2cc <memmove+0x28>
 800c2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2c2:	e7f8      	b.n	800c2b6 <memmove+0x12>
 800c2c4:	4402      	add	r2, r0
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	428a      	cmp	r2, r1
 800c2ca:	d100      	bne.n	800c2ce <memmove+0x2a>
 800c2cc:	bd10      	pop	{r4, pc}
 800c2ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2d6:	e7f7      	b.n	800c2c8 <memmove+0x24>

0800c2d8 <_fstat_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	4d07      	ldr	r5, [pc, #28]	@ (800c2f8 <_fstat_r+0x20>)
 800c2dc:	2300      	movs	r3, #0
 800c2de:	4604      	mov	r4, r0
 800c2e0:	4608      	mov	r0, r1
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	602b      	str	r3, [r5, #0]
 800c2e6:	f7f7 f871 	bl	80033cc <_fstat>
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	d102      	bne.n	800c2f4 <_fstat_r+0x1c>
 800c2ee:	682b      	ldr	r3, [r5, #0]
 800c2f0:	b103      	cbz	r3, 800c2f4 <_fstat_r+0x1c>
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	bd38      	pop	{r3, r4, r5, pc}
 800c2f6:	bf00      	nop
 800c2f8:	200008b0 	.word	0x200008b0

0800c2fc <_isatty_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4d06      	ldr	r5, [pc, #24]	@ (800c318 <_isatty_r+0x1c>)
 800c300:	2300      	movs	r3, #0
 800c302:	4604      	mov	r4, r0
 800c304:	4608      	mov	r0, r1
 800c306:	602b      	str	r3, [r5, #0]
 800c308:	f7f7 f870 	bl	80033ec <_isatty>
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	d102      	bne.n	800c316 <_isatty_r+0x1a>
 800c310:	682b      	ldr	r3, [r5, #0]
 800c312:	b103      	cbz	r3, 800c316 <_isatty_r+0x1a>
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	bd38      	pop	{r3, r4, r5, pc}
 800c318:	200008b0 	.word	0x200008b0

0800c31c <_sbrk_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4d06      	ldr	r5, [pc, #24]	@ (800c338 <_sbrk_r+0x1c>)
 800c320:	2300      	movs	r3, #0
 800c322:	4604      	mov	r4, r0
 800c324:	4608      	mov	r0, r1
 800c326:	602b      	str	r3, [r5, #0]
 800c328:	f7f7 f878 	bl	800341c <_sbrk>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_sbrk_r+0x1a>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	b103      	cbz	r3, 800c336 <_sbrk_r+0x1a>
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	200008b0 	.word	0x200008b0

0800c33c <memcpy>:
 800c33c:	440a      	add	r2, r1
 800c33e:	4291      	cmp	r1, r2
 800c340:	f100 33ff 	add.w	r3, r0, #4294967295
 800c344:	d100      	bne.n	800c348 <memcpy+0xc>
 800c346:	4770      	bx	lr
 800c348:	b510      	push	{r4, lr}
 800c34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c34e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c352:	4291      	cmp	r1, r2
 800c354:	d1f9      	bne.n	800c34a <memcpy+0xe>
 800c356:	bd10      	pop	{r4, pc}

0800c358 <__assert_func>:
 800c358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c35a:	4614      	mov	r4, r2
 800c35c:	461a      	mov	r2, r3
 800c35e:	4b09      	ldr	r3, [pc, #36]	@ (800c384 <__assert_func+0x2c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4605      	mov	r5, r0
 800c364:	68d8      	ldr	r0, [r3, #12]
 800c366:	b954      	cbnz	r4, 800c37e <__assert_func+0x26>
 800c368:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <__assert_func+0x30>)
 800c36a:	461c      	mov	r4, r3
 800c36c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c370:	9100      	str	r1, [sp, #0]
 800c372:	462b      	mov	r3, r5
 800c374:	4905      	ldr	r1, [pc, #20]	@ (800c38c <__assert_func+0x34>)
 800c376:	f000 f86f 	bl	800c458 <fiprintf>
 800c37a:	f000 f87f 	bl	800c47c <abort>
 800c37e:	4b04      	ldr	r3, [pc, #16]	@ (800c390 <__assert_func+0x38>)
 800c380:	e7f4      	b.n	800c36c <__assert_func+0x14>
 800c382:	bf00      	nop
 800c384:	20000098 	.word	0x20000098
 800c388:	0800d156 	.word	0x0800d156
 800c38c:	0800d128 	.word	0x0800d128
 800c390:	0800d11b 	.word	0x0800d11b

0800c394 <_calloc_r>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	fba1 5402 	umull	r5, r4, r1, r2
 800c39a:	b93c      	cbnz	r4, 800c3ac <_calloc_r+0x18>
 800c39c:	4629      	mov	r1, r5
 800c39e:	f7fe ffcb 	bl	800b338 <_malloc_r>
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	b928      	cbnz	r0, 800c3b2 <_calloc_r+0x1e>
 800c3a6:	2600      	movs	r6, #0
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}
 800c3ac:	220c      	movs	r2, #12
 800c3ae:	6002      	str	r2, [r0, #0]
 800c3b0:	e7f9      	b.n	800c3a6 <_calloc_r+0x12>
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	4621      	mov	r1, r4
 800c3b6:	f7fe f875 	bl	800a4a4 <memset>
 800c3ba:	e7f5      	b.n	800c3a8 <_calloc_r+0x14>

0800c3bc <__ascii_mbtowc>:
 800c3bc:	b082      	sub	sp, #8
 800c3be:	b901      	cbnz	r1, 800c3c2 <__ascii_mbtowc+0x6>
 800c3c0:	a901      	add	r1, sp, #4
 800c3c2:	b142      	cbz	r2, 800c3d6 <__ascii_mbtowc+0x1a>
 800c3c4:	b14b      	cbz	r3, 800c3da <__ascii_mbtowc+0x1e>
 800c3c6:	7813      	ldrb	r3, [r2, #0]
 800c3c8:	600b      	str	r3, [r1, #0]
 800c3ca:	7812      	ldrb	r2, [r2, #0]
 800c3cc:	1e10      	subs	r0, r2, #0
 800c3ce:	bf18      	it	ne
 800c3d0:	2001      	movne	r0, #1
 800c3d2:	b002      	add	sp, #8
 800c3d4:	4770      	bx	lr
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	e7fb      	b.n	800c3d2 <__ascii_mbtowc+0x16>
 800c3da:	f06f 0001 	mvn.w	r0, #1
 800c3de:	e7f8      	b.n	800c3d2 <__ascii_mbtowc+0x16>

0800c3e0 <_realloc_r>:
 800c3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e4:	4680      	mov	r8, r0
 800c3e6:	4615      	mov	r5, r2
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	b921      	cbnz	r1, 800c3f6 <_realloc_r+0x16>
 800c3ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	f7fe bfa1 	b.w	800b338 <_malloc_r>
 800c3f6:	b92a      	cbnz	r2, 800c404 <_realloc_r+0x24>
 800c3f8:	f7fe ff2a 	bl	800b250 <_free_r>
 800c3fc:	2400      	movs	r4, #0
 800c3fe:	4620      	mov	r0, r4
 800c400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c404:	f000 f841 	bl	800c48a <_malloc_usable_size_r>
 800c408:	4285      	cmp	r5, r0
 800c40a:	4606      	mov	r6, r0
 800c40c:	d802      	bhi.n	800c414 <_realloc_r+0x34>
 800c40e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c412:	d8f4      	bhi.n	800c3fe <_realloc_r+0x1e>
 800c414:	4629      	mov	r1, r5
 800c416:	4640      	mov	r0, r8
 800c418:	f7fe ff8e 	bl	800b338 <_malloc_r>
 800c41c:	4607      	mov	r7, r0
 800c41e:	2800      	cmp	r0, #0
 800c420:	d0ec      	beq.n	800c3fc <_realloc_r+0x1c>
 800c422:	42b5      	cmp	r5, r6
 800c424:	462a      	mov	r2, r5
 800c426:	4621      	mov	r1, r4
 800c428:	bf28      	it	cs
 800c42a:	4632      	movcs	r2, r6
 800c42c:	f7ff ff86 	bl	800c33c <memcpy>
 800c430:	4621      	mov	r1, r4
 800c432:	4640      	mov	r0, r8
 800c434:	f7fe ff0c 	bl	800b250 <_free_r>
 800c438:	463c      	mov	r4, r7
 800c43a:	e7e0      	b.n	800c3fe <_realloc_r+0x1e>

0800c43c <__ascii_wctomb>:
 800c43c:	4603      	mov	r3, r0
 800c43e:	4608      	mov	r0, r1
 800c440:	b141      	cbz	r1, 800c454 <__ascii_wctomb+0x18>
 800c442:	2aff      	cmp	r2, #255	@ 0xff
 800c444:	d904      	bls.n	800c450 <__ascii_wctomb+0x14>
 800c446:	228a      	movs	r2, #138	@ 0x8a
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	f04f 30ff 	mov.w	r0, #4294967295
 800c44e:	4770      	bx	lr
 800c450:	700a      	strb	r2, [r1, #0]
 800c452:	2001      	movs	r0, #1
 800c454:	4770      	bx	lr
	...

0800c458 <fiprintf>:
 800c458:	b40e      	push	{r1, r2, r3}
 800c45a:	b503      	push	{r0, r1, lr}
 800c45c:	4601      	mov	r1, r0
 800c45e:	ab03      	add	r3, sp, #12
 800c460:	4805      	ldr	r0, [pc, #20]	@ (800c478 <fiprintf+0x20>)
 800c462:	f853 2b04 	ldr.w	r2, [r3], #4
 800c466:	6800      	ldr	r0, [r0, #0]
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	f7ff fcf5 	bl	800be58 <_vfiprintf_r>
 800c46e:	b002      	add	sp, #8
 800c470:	f85d eb04 	ldr.w	lr, [sp], #4
 800c474:	b003      	add	sp, #12
 800c476:	4770      	bx	lr
 800c478:	20000098 	.word	0x20000098

0800c47c <abort>:
 800c47c:	b508      	push	{r3, lr}
 800c47e:	2006      	movs	r0, #6
 800c480:	f000 f834 	bl	800c4ec <raise>
 800c484:	2001      	movs	r0, #1
 800c486:	f7f6 ff51 	bl	800332c <_exit>

0800c48a <_malloc_usable_size_r>:
 800c48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c48e:	1f18      	subs	r0, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	bfbc      	itt	lt
 800c494:	580b      	ldrlt	r3, [r1, r0]
 800c496:	18c0      	addlt	r0, r0, r3
 800c498:	4770      	bx	lr

0800c49a <_raise_r>:
 800c49a:	291f      	cmp	r1, #31
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4605      	mov	r5, r0
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	d904      	bls.n	800c4ae <_raise_r+0x14>
 800c4a4:	2316      	movs	r3, #22
 800c4a6:	6003      	str	r3, [r0, #0]
 800c4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4b0:	b112      	cbz	r2, 800c4b8 <_raise_r+0x1e>
 800c4b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4b6:	b94b      	cbnz	r3, 800c4cc <_raise_r+0x32>
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f000 f831 	bl	800c520 <_getpid_r>
 800c4be:	4622      	mov	r2, r4
 800c4c0:	4601      	mov	r1, r0
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c8:	f000 b818 	b.w	800c4fc <_kill_r>
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d00a      	beq.n	800c4e6 <_raise_r+0x4c>
 800c4d0:	1c59      	adds	r1, r3, #1
 800c4d2:	d103      	bne.n	800c4dc <_raise_r+0x42>
 800c4d4:	2316      	movs	r3, #22
 800c4d6:	6003      	str	r3, [r0, #0]
 800c4d8:	2001      	movs	r0, #1
 800c4da:	e7e7      	b.n	800c4ac <_raise_r+0x12>
 800c4dc:	2100      	movs	r1, #0
 800c4de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	4798      	blx	r3
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	e7e0      	b.n	800c4ac <_raise_r+0x12>
	...

0800c4ec <raise>:
 800c4ec:	4b02      	ldr	r3, [pc, #8]	@ (800c4f8 <raise+0xc>)
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	6818      	ldr	r0, [r3, #0]
 800c4f2:	f7ff bfd2 	b.w	800c49a <_raise_r>
 800c4f6:	bf00      	nop
 800c4f8:	20000098 	.word	0x20000098

0800c4fc <_kill_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d07      	ldr	r5, [pc, #28]	@ (800c51c <_kill_r+0x20>)
 800c500:	2300      	movs	r3, #0
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	4611      	mov	r1, r2
 800c508:	602b      	str	r3, [r5, #0]
 800c50a:	f7f6 feff 	bl	800330c <_kill>
 800c50e:	1c43      	adds	r3, r0, #1
 800c510:	d102      	bne.n	800c518 <_kill_r+0x1c>
 800c512:	682b      	ldr	r3, [r5, #0]
 800c514:	b103      	cbz	r3, 800c518 <_kill_r+0x1c>
 800c516:	6023      	str	r3, [r4, #0]
 800c518:	bd38      	pop	{r3, r4, r5, pc}
 800c51a:	bf00      	nop
 800c51c:	200008b0 	.word	0x200008b0

0800c520 <_getpid_r>:
 800c520:	f7f6 beec 	b.w	80032fc <_getpid>

0800c524 <_init>:
 800c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c526:	bf00      	nop
 800c528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52a:	bc08      	pop	{r3}
 800c52c:	469e      	mov	lr, r3
 800c52e:	4770      	bx	lr

0800c530 <_fini>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	bf00      	nop
 800c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c536:	bc08      	pop	{r3}
 800c538:	469e      	mov	lr, r3
 800c53a:	4770      	bx	lr
