
eecs373uarthttp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e1c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009fe0  08009fe0  00019fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ec  0800a3ec  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f4  0800a3f4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f4  0800a3f4  0001a3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3f8  0800a3f8  0001a3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a3fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001d4  0800a5d0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800a5d0  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168ef  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a7b  00000000  00000000  00036b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fae  00000000  00000000  0003a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bba5  00000000  00000000  0003b956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bd5  00000000  00000000  000674fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c8fe  00000000  00000000  000800d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006694  00000000  00000000  0018c9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00193064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009fc4 	.word	0x08009fc4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08009fc4 	.word	0x08009fc4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <FoodOrder_Init>:
typedef struct FoodOrder {
    char name[20];
    uint8_t valid;
    int id;
} FoodOrder;
void FoodOrder_Init(FoodOrder* order) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    order->valid = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	751a      	strb	r2, [r3, #20]
    for(int i = 0; i < 20; ++i){
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e007      	b.n	8000ef8 <FoodOrder_Init+0x24>
    	order->name[i] = '\0';
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4413      	add	r3, r2
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 20; ++i){
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b13      	cmp	r3, #19
 8000efc:	ddf4      	ble.n	8000ee8 <FoodOrder_Init+0x14>
    }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <readTinyCodeData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void uartSend (char *str);
void readTinyCodeData(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0c4      	sub	sp, #272	; 0x110
 8000f10:	af02      	add	r7, sp, #8
    uint8_t readBuffer[256]; // Buffer to store the read data
    uint16_t contentLength = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102

    // First, read the content length
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, READ_LEN, HAL_MAX_DELAY);
 8000f18:	463a      	mov	r2, r7
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2302      	movs	r3, #2
 8000f22:	2118      	movs	r1, #24
 8000f24:	4831      	ldr	r0, [pc, #196]	; (8000fec <readTinyCodeData+0xe0>)
 8000f26:	f001 fc47 	bl	80027b8 <HAL_I2C_Master_Receive>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
    if(status != HAL_OK) {
 8000f30:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d154      	bne.n	8000fe2 <readTinyCodeData+0xd6>
        // Handle communication error
    } else {
        // If read is successful, parse the content length
        contentLength = readBuffer[0] | (readBuffer[1] << 8);
 8000f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
        if(contentLength == 0){
 8000f5a:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d03e      	beq.n	8000fe0 <readTinyCodeData+0xd4>
        	return;
        }
        printf("content length %d\n", contentLength);
 8000f62:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000f66:	4619      	mov	r1, r3
 8000f68:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <readTinyCodeData+0xe4>)
 8000f6a:	f007 f83f 	bl	8007fec <iprintf>
        if(contentLength > 0 && contentLength <= 254) {
 8000f6e:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d035      	beq.n	8000fe2 <readTinyCodeData+0xd6>
 8000f76:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000f7a:	2bfe      	cmp	r3, #254	; 0xfe
 8000f7c:	d831      	bhi.n	8000fe2 <readTinyCodeData+0xd6>
            // Now, read the actual content based on the content length
            status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, contentLength + 2, HAL_MAX_DELAY);
 8000f7e:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000f82:	3302      	adds	r3, #2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	463a      	mov	r2, r7
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	9100      	str	r1, [sp, #0]
 8000f8e:	2118      	movs	r1, #24
 8000f90:	4816      	ldr	r0, [pc, #88]	; (8000fec <readTinyCodeData+0xe0>)
 8000f92:	f001 fc11 	bl	80027b8 <HAL_I2C_Master_Receive>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
            if(status != HAL_OK) {
 8000f9c:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d11e      	bne.n	8000fe2 <readTinyCodeData+0xd6>
                // Handle communication error
            } else {
                // Data is now in readBuffer[2] to readBuffer[contentLength+1], process it as needed
                // Remember to handle non-UTF-8 or other data safely
            	for(int i =0; i < contentLength; ++i){
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000faa:	e00f      	b.n	8000fcc <readTinyCodeData+0xc0>
            		printf("%c",readBuffer[2 + i]);
 8000fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000fb6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 f827 	bl	8008010 <putchar>
            	for(int i =0; i < contentLength; ++i){
 8000fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000fcc:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000fd0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbe9      	blt.n	8000fac <readTinyCodeData+0xa0>
            	}
            	printf("\n");
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f007 f819 	bl	8008010 <putchar>
 8000fde:	e000      	b.n	8000fe2 <readTinyCodeData+0xd6>
        	return;
 8000fe0:	bf00      	nop
            }
        } else {
            // No content or content length invalid
        }
    }
}
 8000fe2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001f0 	.word	0x200001f0
 8000ff0:	08009fe0 	.word	0x08009fe0

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
//	if(htim->Instance == TIM1){
//		  uartSend("LIST\n");
//		  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
//	}
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_UART_RxCpltCallback+0x28>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d104      	bne.n	8001024 <HAL_UART_RxCpltCallback+0x1c>
		 ++i;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_UART_RxCpltCallback+0x2c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_UART_RxCpltCallback+0x2c>)
 8001022:	6013      	str	r3, [r2, #0]
	}

}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40004800 	.word	0x40004800
 8001034:	200005d4 	.word	0x200005d4

08001038 <processReceivedData>:

void processReceivedData(char* data) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    int totalOrders = atoi(data);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f006 fa1b 	bl	800747c <atoi>
 8001046:	60b8      	str	r0, [r7, #8]
    data += 3;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3303      	adds	r3, #3
 800104c:	607b      	str	r3, [r7, #4]
    int processedOrders = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
    if(totalOrders == 0){
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d06d      	beq.n	8001134 <processReceivedData+0xfc>
    	return;
    }
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	e00c      	b.n	8001078 <processReceivedData+0x40>
    		FoodOrder_Init(&foodOrders[i]);
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4a34      	ldr	r2, [pc, #208]	; (800113c <processReceivedData+0x104>)
 800106a:	4413      	add	r3, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <FoodOrder_Init>
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	3301      	adds	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2b09      	cmp	r3, #9
 800107c:	ddef      	ble.n	800105e <processReceivedData+0x26>
    	}
    while(processedOrders < totalOrders){
 800107e:	e032      	b.n	80010e6 <processReceivedData+0xae>
    	foodOrders[processedOrders].id = atoi(data);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f006 f9fb 	bl	800747c <atoi>
 8001086:	4601      	mov	r1, r0
 8001088:	482c      	ldr	r0, [pc, #176]	; (800113c <processReceivedData+0x104>)
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4403      	add	r3, r0
 8001096:	3318      	adds	r3, #24
 8001098:	6019      	str	r1, [r3, #0]
    	data += 11;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	330b      	adds	r3, #11
 800109e:	607b      	str	r3, [r7, #4]
    	strcpy(foodOrders[processedOrders].name, data);
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4a24      	ldr	r2, [pc, #144]	; (800113c <processReceivedData+0x104>)
 80010ac:	4413      	add	r3, r2
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f007 f878 	bl	80081a6 <strcpy>
    	while(*data != '\0'){
 80010b6:	e002      	b.n	80010be <processReceivedData+0x86>
    		++data;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3301      	adds	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
    	while(*data != '\0'){
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f8      	bne.n	80010b8 <processReceivedData+0x80>
    	}
    	++data;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3301      	adds	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
    	foodOrders[processedOrders].valid = 1;
 80010cc:	491b      	ldr	r1, [pc, #108]	; (800113c <processReceivedData+0x104>)
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3314      	adds	r3, #20
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
    	++processedOrders;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
    while(processedOrders < totalOrders){
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	dbc8      	blt.n	8001080 <processReceivedData+0x48>
    }
    for(int i = 0; i < processedOrders; ++i){
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	e01a      	b.n	800112a <processReceivedData+0xf2>
    	printf("Name: %s\n", foodOrders[i].name);
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <processReceivedData+0x104>)
 8001100:	4413      	add	r3, r2
 8001102:	4619      	mov	r1, r3
 8001104:	480e      	ldr	r0, [pc, #56]	; (8001140 <processReceivedData+0x108>)
 8001106:	f006 ff71 	bl	8007fec <iprintf>
    	printf("id: %d\n", foodOrders[i].id);
 800110a:	490c      	ldr	r1, [pc, #48]	; (800113c <processReceivedData+0x104>)
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	3318      	adds	r3, #24
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <processReceivedData+0x10c>)
 8001120:	f006 ff64 	bl	8007fec <iprintf>
    for(int i = 0; i < processedOrders; ++i){
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	429a      	cmp	r2, r3
 8001130:	dbe0      	blt.n	80010f4 <processReceivedData+0xbc>
 8001132:	e000      	b.n	8001136 <processReceivedData+0xfe>
    	return;
 8001134:	bf00      	nop
    }
}
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200004b8 	.word	0x200004b8
 8001140:	08009ff4 	.word	0x08009ff4
 8001144:	0800a000 	.word	0x0800a000

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	e00c      	b.n	800116e <main+0x26>
		FoodOrder_Init(&foodOrders[i]);
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4a2f      	ldr	r2, [pc, #188]	; (800121c <main+0xd4>)
 8001160:	4413      	add	r3, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff feb6 	bl	8000ed4 <FoodOrder_Init>
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3301      	adds	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b09      	cmp	r3, #9
 8001172:	ddef      	ble.n	8001154 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001174:	f000 feb1 	bl	8001eda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001178:	f000 f85c 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f000 f9ca 	bl	8001514 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001180:	f000 f928 	bl	80013d4 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001184:	f000 f8da 	bl	800133c <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001188:	f000 f970 	bl	800146c <MX_TIM1_Init>
  MX_I2C2_Init();
 800118c:	f000 f898 	bl	80012c0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8001190:	4823      	ldr	r0, [pc, #140]	; (8001220 <main+0xd8>)
 8001192:	f003 fc05 	bl	80049a0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  while(i > 0){
 8001196:	e039      	b.n	800120c <main+0xc4>
//		  printf("%c", rxBuffer[rxIndex]);
	 	if (rxBuffer[rxIndex] == '\n' || rxIndex >= RX_BUFFER_SIZE - 1 ||rxBuffer[rxIndex] == '\r' ) {
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <main+0xdc>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <main+0xe0>)
 80011a2:	5c9b      	ldrb	r3, [r3, r2]
 80011a4:	2b0a      	cmp	r3, #10
 80011a6:	d00c      	beq.n	80011c2 <main+0x7a>
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <main+0xdc>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	2bfe      	cmp	r3, #254	; 0xfe
 80011b0:	d807      	bhi.n	80011c2 <main+0x7a>
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <main+0xdc>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <main+0xe0>)
 80011bc:	5c9b      	ldrb	r3, [r3, r2]
 80011be:	2b0d      	cmp	r3, #13
 80011c0:	d10d      	bne.n	80011de <main+0x96>
	 		// Null-terminate the string
	 		rxBuffer[rxIndex] = '\0';
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <main+0xdc>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <main+0xe0>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	5499      	strb	r1, [r3, r2]

	 		// Process received data
	 		processReceivedData(rxBuffer);
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <main+0xe0>)
 80011d2:	f7ff ff31 	bl	8001038 <processReceivedData>

	 		// Reset index
	 		rxIndex = 0;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <main+0xdc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	801a      	strh	r2, [r3, #0]
 80011dc:	e006      	b.n	80011ec <main+0xa4>
	 		} else {
	 		// Increment index to receive the next byte
	 		rxIndex++;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <main+0xdc>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <main+0xdc>)
 80011ea:	801a      	strh	r2, [r3, #0]
	 	}
	 		// Prepare to receive the next byte
	 		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <main+0xdc>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <main+0xe0>)
 80011f6:	4413      	add	r3, r2
 80011f8:	2201      	movs	r2, #1
 80011fa:	4619      	mov	r1, r3
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <main+0xe4>)
 80011fe:	f004 f8ed 	bl	80053dc <HAL_UART_Receive_IT>

	 		  --i;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <main+0xe8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3b01      	subs	r3, #1
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <main+0xe8>)
 800120a:	6013      	str	r3, [r2, #0]
	  while(i > 0){
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <main+0xe8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1c1      	bne.n	8001198 <main+0x50>
	 	  }
	  readTinyCodeData();
 8001214:	f7ff fe7a 	bl	8000f0c <readTinyCodeData>
	  while(i > 0){
 8001218:	e7f8      	b.n	800120c <main+0xc4>
 800121a:	bf00      	nop
 800121c:	200004b8 	.word	0x200004b8
 8001220:	2000036c 	.word	0x2000036c
 8001224:	200005d0 	.word	0x200005d0
 8001228:	200003b8 	.word	0x200003b8
 800122c:	200002d8 	.word	0x200002d8
 8001230:	200005d4 	.word	0x200005d4

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b096      	sub	sp, #88	; 0x58
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	2244      	movs	r2, #68	; 0x44
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f006 ff2f 	bl	80080a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001256:	f44f 7000 	mov.w	r0, #512	; 0x200
 800125a:	f001 fea5 	bl	8002fa8 <HAL_PWREx_ControlVoltageScaling>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001264:	f000 fb66 	bl	8001934 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001268:	2310      	movs	r3, #16
 800126a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001274:	2360      	movs	r3, #96	; 0x60
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4618      	mov	r0, r3
 8001282:	f001 ff45 	bl	8003110 <HAL_RCC_OscConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800128c:	f000 fb52 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001290:	230f      	movs	r3, #15
 8001292:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fb4b 	bl	8003944 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012b4:	f000 fb3e 	bl	8001934 <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3758      	adds	r7, #88	; 0x58
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_I2C2_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <MX_I2C2_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_I2C2_Init+0x74>)
 80012cc:	f640 6214 	movw	r2, #3604	; 0xe14
 80012d0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_I2C2_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_I2C2_Init+0x74>)
 80012da:	2201      	movs	r2, #1
 80012dc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_I2C2_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_I2C2_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C2_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_I2C2_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C2_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_I2C2_Init+0x74>)
 80012fe:	f001 f9bf 	bl	8002680 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 fb14 	bl	8001934 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <MX_I2C2_Init+0x74>)
 8001310:	f001 fd92 	bl	8002e38 <HAL_I2CEx_ConfigAnalogFilter>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800131a:	f000 fb0b 	bl	8001934 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_I2C2_Init+0x74>)
 8001322:	f001 fdd4 	bl	8002ece <HAL_I2CEx_ConfigDigitalFilter>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800132c:	f000 fb02 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001f0 	.word	0x200001f0
 8001338:	40005800 	.word	0x40005800

0800133c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_LPUART1_UART_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001386:	f003 ff49 	bl	800521c <HAL_UART_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 fad0 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 8001398:	f005 ffa5 	bl	80072e6 <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f000 fac7 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 80013aa:	f005 ffda 	bl	8007362 <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 fabe 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_LPUART1_UART_Init+0x90>)
 80013ba:	f005 ff5b 	bl	8007274 <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 fab6 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000244 	.word	0x20000244
 80013d0:	40008000 	.word	0x40008000

080013d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_USART3_UART_Init+0x90>)
 80013da:	4a23      	ldr	r2, [pc, #140]	; (8001468 <MX_USART3_UART_Init+0x94>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_USART3_UART_Init+0x90>)
 80013e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_USART3_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_USART3_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_USART3_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_USART3_UART_Init+0x90>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_USART3_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_USART3_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_USART3_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_USART3_UART_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_USART3_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800141c:	4811      	ldr	r0, [pc, #68]	; (8001464 <MX_USART3_UART_Init+0x90>)
 800141e:	f003 fefd 	bl	800521c <HAL_UART_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001428:	f000 fa84 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_USART3_UART_Init+0x90>)
 8001430:	f005 ff59 	bl	80072e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 fa7b 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <MX_USART3_UART_Init+0x90>)
 8001442:	f005 ff8e 	bl	8007362 <HAL_UARTEx_SetRxFifoThreshold>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800144c:	f000 fa72 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_USART3_UART_Init+0x90>)
 8001452:	f005 ff0f 	bl	8007274 <HAL_UARTEx_DisableFifoMode>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800145c:	f000 fa6a 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002d8 	.word	0x200002d8
 8001468:	40004800 	.word	0x40004800

0800146c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <MX_TIM1_Init+0xa0>)
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <MX_TIM1_Init+0xa4>)
 800148e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_TIM1_Init+0xa0>)
 8001492:	f240 321f 	movw	r2, #799	; 0x31f
 8001496:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_TIM1_Init+0xa0>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_TIM1_Init+0xa0>)
 80014a0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80014a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_TIM1_Init+0xa0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_TIM1_Init+0xa0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <MX_TIM1_Init+0xa0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_TIM1_Init+0xa0>)
 80014ba:	f003 fa19 	bl	80048f0 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80014c4:	f000 fa36 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4619      	mov	r1, r3
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_TIM1_Init+0xa0>)
 80014d6:	f003 fbd5 	bl	8004c84 <HAL_TIM_ConfigClockSource>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80014e0:	f000 fa28 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_TIM1_Init+0xa0>)
 80014f6:	f003 fdeb 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001500:	f000 fa18 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000036c 	.word	0x2000036c
 8001510:	40012c00 	.word	0x40012c00

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	; 0x38
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152a:	4bb2      	ldr	r3, [pc, #712]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4ab1      	ldr	r2, [pc, #708]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4baf      	ldr	r3, [pc, #700]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	623b      	str	r3, [r7, #32]
 8001540:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4bac      	ldr	r3, [pc, #688]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4aab      	ldr	r2, [pc, #684]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4ba9      	ldr	r3, [pc, #676]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	4ba6      	ldr	r3, [pc, #664]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4aa5      	ldr	r2, [pc, #660]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4ba3      	ldr	r3, [pc, #652]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001572:	4ba0      	ldr	r3, [pc, #640]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a9f      	ldr	r2, [pc, #636]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b9d      	ldr	r3, [pc, #628]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b9a      	ldr	r3, [pc, #616]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a99      	ldr	r2, [pc, #612]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b97      	ldr	r3, [pc, #604]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b94      	ldr	r3, [pc, #592]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a93      	ldr	r2, [pc, #588]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b91      	ldr	r3, [pc, #580]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a8d      	ldr	r2, [pc, #564]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d2:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a87      	ldr	r2, [pc, #540]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b85      	ldr	r3, [pc, #532]	; (80017f4 <MX_GPIO_Init+0x2e0>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80015ea:	f001 fd81 	bl	80030f0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ee:	230c      	movs	r3, #12
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015fe:	230d      	movs	r3, #13
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	487b      	ldr	r0, [pc, #492]	; (80017f8 <MX_GPIO_Init+0x2e4>)
 800160a:	f000 fea7 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800161e:	230d      	movs	r3, #13
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4874      	ldr	r0, [pc, #464]	; (80017fc <MX_GPIO_Init+0x2e8>)
 800162a:	f000 fe97 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800162e:	230f      	movs	r3, #15
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001632:	230b      	movs	r3, #11
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	486f      	ldr	r0, [pc, #444]	; (8001800 <MX_GPIO_Init+0x2ec>)
 8001642:	f000 fe8b 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001646:	2301      	movs	r3, #1
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001656:	2301      	movs	r3, #1
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f000 fe7a 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001668:	230a      	movs	r3, #10
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800166c:	230b      	movs	r3, #11
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f000 fe6d 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001682:	23f0      	movs	r3, #240	; 0xf0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001692:	2305      	movs	r3, #5
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a0:	f000 fe5c 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a4:	2301      	movs	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016b4:	2302      	movs	r3, #2
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	4619      	mov	r1, r3
 80016be:	4851      	ldr	r0, [pc, #324]	; (8001804 <MX_GPIO_Init+0x2f0>)
 80016c0:	f000 fe4c 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016c4:	2302      	movs	r3, #2
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016c8:	230b      	movs	r3, #11
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	484b      	ldr	r0, [pc, #300]	; (8001804 <MX_GPIO_Init+0x2f0>)
 80016d8:	f000 fe40 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80016dc:	2344      	movs	r3, #68	; 0x44
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e0:	2303      	movs	r3, #3
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4845      	ldr	r0, [pc, #276]	; (8001804 <MX_GPIO_Init+0x2f0>)
 80016f0:	f000 fe34 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001706:	2301      	movs	r3, #1
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	483c      	ldr	r0, [pc, #240]	; (8001804 <MX_GPIO_Init+0x2f0>)
 8001712:	f000 fe23 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001716:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001728:	230d      	movs	r3, #13
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	4834      	ldr	r0, [pc, #208]	; (8001804 <MX_GPIO_Init+0x2f0>)
 8001734:	f000 fe12 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800174a:	230e      	movs	r3, #14
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	482b      	ldr	r0, [pc, #172]	; (8001804 <MX_GPIO_Init+0x2f0>)
 8001756:	f000 fe01 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800175a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800176c:	2302      	movs	r3, #2
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	4824      	ldr	r0, [pc, #144]	; (8001808 <MX_GPIO_Init+0x2f4>)
 8001778:	f000 fdf0 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800178c:	230d      	movs	r3, #13
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	481a      	ldr	r0, [pc, #104]	; (8001800 <MX_GPIO_Init+0x2ec>)
 8001798:	f000 fde0 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ac:	2302      	movs	r3, #2
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4812      	ldr	r0, [pc, #72]	; (8001800 <MX_GPIO_Init+0x2ec>)
 80017b8:	f000 fdd0 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017bc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017ce:	230c      	movs	r3, #12
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <MX_GPIO_Init+0x2ec>)
 80017da:	f000 fdbf 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80017de:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
 80017f0:	e00c      	b.n	800180c <MX_GPIO_Init+0x2f8>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	48001000 	.word	0x48001000
 80017fc:	48001400 	.word	0x48001400
 8001800:	48000800 	.word	0x48000800
 8001804:	48000400 	.word	0x48000400
 8001808:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800180c:	230a      	movs	r3, #10
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f000 fd9f 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f000 fd91 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183a:	2301      	movs	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800184a:	2309      	movs	r3, #9
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	482b      	ldr	r0, [pc, #172]	; (8001904 <MX_GPIO_Init+0x3f0>)
 8001856:	f000 fd81 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800185a:	2304      	movs	r3, #4
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800186a:	230c      	movs	r3, #12
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_GPIO_Init+0x3f0>)
 8001876:	f000 fd71 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800187a:	2378      	movs	r3, #120	; 0x78
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188a:	2307      	movs	r3, #7
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <MX_GPIO_Init+0x3f0>)
 8001896:	f000 fd61 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800189a:	2338      	movs	r3, #56	; 0x38
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018aa:	2306      	movs	r3, #6
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4814      	ldr	r0, [pc, #80]	; (8001908 <MX_GPIO_Init+0x3f4>)
 80018b6:	f000 fd51 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018cc:	2304      	movs	r3, #4
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <MX_GPIO_Init+0x3f4>)
 80018d8:	f000 fd40 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018ec:	2302      	movs	r3, #2
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_GPIO_Init+0x3f8>)
 80018f8:	f000 fd30 	bl	800235c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018fc:	bf00      	nop
 80018fe:	3738      	adds	r7, #56	; 0x38
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	48000c00 	.word	0x48000c00
 8001908:	48000400 	.word	0x48000400
 800190c:	48001000 	.word	0x48001000

08001910 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001918:	1d39      	adds	r1, r7, #4
 800191a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191e:	2201      	movs	r2, #1
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <__io_putchar+0x20>)
 8001922:	f003 fccb 	bl	80052bc <HAL_UART_Transmit>
  return ch;
 8001926:	687b      	ldr	r3, [r7, #4]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000244 	.word	0x20000244

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	e7fe      	b.n	800193c <Error_Handler+0x8>
	...

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x44>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6613      	str	r3, [r2, #96]	; 0x60
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_MspInit+0x44>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x44>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x44>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x44>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0ae      	sub	sp, #184	; 0xb8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2294      	movs	r2, #148	; 0x94
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f006 fb7c 	bl	80080a6 <memset>
  if(hi2c->Instance==I2C2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_I2C_MspInit+0xb0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d13a      	bne.n	8001a2e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019bc:	2300      	movs	r3, #0
 80019be:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fa7b 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019d0:	f7ff ffb0 	bl	8001934 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_I2C_MspInit+0xb4>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_I2C_MspInit+0xb4>)
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_I2C_MspInit+0xb4>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019ec:	2307      	movs	r3, #7
 80019ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f2:	2312      	movs	r3, #18
 80019f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a04:	2304      	movs	r3, #4
 8001a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <HAL_I2C_MspInit+0xb8>)
 8001a12:	f000 fca3 	bl	800235c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_I2C_MspInit+0xb4>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_I2C_MspInit+0xb4>)
 8001a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_I2C_MspInit+0xb4>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	37b8      	adds	r7, #184	; 0xb8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40005800 	.word	0x40005800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48001400 	.word	0x48001400

08001a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b0      	sub	sp, #192	; 0xc0
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	f107 0318 	add.w	r3, r7, #24
 8001a60:	2294      	movs	r2, #148	; 0x94
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f006 fb1e 	bl	80080a6 <memset>
  if(huart->Instance==LPUART1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a47      	ldr	r2, [pc, #284]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d13e      	bne.n	8001af2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a74:	2320      	movs	r3, #32
 8001a76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 fa1d 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a8c:	f7ff ff52 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	4a3e      	ldr	r2, [pc, #248]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001ac0:	f001 fb16 	bl	80030f0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ac4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ade:	2308      	movs	r3, #8
 8001ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ae4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ae8:	4619      	mov	r1, r3
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <HAL_UART_MspInit+0x150>)
 8001aec:	f000 fc36 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001af0:	e047      	b.n	8001b82 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_UART_MspInit+0x154>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d142      	bne.n	8001b82 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001afc:	2304      	movs	r3, #4
 8001afe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 f9d9 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001b14:	f7ff ff0e 	bl	8001934 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b22:	6593      	str	r3, [r2, #88]	; 0x58
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b48:	2330      	movs	r3, #48	; 0x30
 8001b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b60:	2307      	movs	r3, #7
 8001b62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <HAL_UART_MspInit+0x158>)
 8001b6e:	f000 fbf5 	bl	800235c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2027      	movs	r0, #39	; 0x27
 8001b78:	f000 faff 	bl	800217a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b7c:	2027      	movs	r0, #39	; 0x27
 8001b7e:	f000 fb18 	bl	80021b2 <HAL_NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	37c0      	adds	r7, #192	; 0xc0
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40008000 	.word	0x40008000
 8001b90:	40021000 	.word	0x40021000
 8001b94:	48001800 	.word	0x48001800
 8001b98:	40004800 	.word	0x40004800
 8001b9c:	48000800 	.word	0x48000800

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_TIM_Base_MspInit+0xb0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d141      	bne.n	8001c46 <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_TIM_Base_MspInit+0xb4>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_TIM_Base_MspInit+0xb4>)
 8001bc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_TIM_Base_MspInit+0xb4>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_TIM_Base_MspInit+0xb4>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_TIM_Base_MspInit+0xb4>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_TIM_Base_MspInit+0xb4>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001bf2:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <HAL_TIM_Base_MspInit+0xb8>)
 8001c10:	f000 fba4 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c14:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001c26:	2303      	movs	r3, #3
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4809      	ldr	r0, [pc, #36]	; (8001c58 <HAL_TIM_Base_MspInit+0xb8>)
 8001c32:	f000 fb93 	bl	800235c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2019      	movs	r0, #25
 8001c3c:	f000 fa9d 	bl	800217a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c40:	2019      	movs	r0, #25
 8001c42:	f000 fab6 	bl	80021b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	; 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	48001000 	.word	0x48001000

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f96c 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001cb6:	f002 fee3 	bl	8004a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000036c 	.word	0x2000036c

08001cc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <USART3_IRQHandler+0x10>)
 8001cca:	f003 fbd3 	bl	8005474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200002d8 	.word	0x200002d8

08001cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return 1;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_kill>:

int _kill(int pid, int sig)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf2:	f006 fa2b 	bl	800814c <__errno>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2216      	movs	r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_exit>:

void _exit (int status)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffe7 	bl	8001ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d1a:	e7fe      	b.n	8001d1a <_exit+0x12>

08001d1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e00a      	b.n	8001d44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d2e:	f3af 8000 	nop.w
 8001d32:	4601      	mov	r1, r0
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	60ba      	str	r2, [r7, #8]
 8001d3a:	b2ca      	uxtb	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf0      	blt.n	8001d2e <_read+0x12>
  }

  return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e009      	b.n	8001d7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60ba      	str	r2, [r7, #8]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fdcd 	bl	8001910 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbf1      	blt.n	8001d68 <_write+0x12>
  }
  return len;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_close>:

int _close(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db6:	605a      	str	r2, [r3, #4]
  return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_isatty>:

int _isatty(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f006 f990 	bl	800814c <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <_sbrk+0x64>)
 8001e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200a0000 	.word	0x200a0000
 8001e58:	00000400 	.word	0x00000400
 8001e5c:	200005d8 	.word	0x200005d8
 8001e60:	20000730 	.word	0x20000730

08001e64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e8c:	f7ff ffea 	bl	8001e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	; (8001ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <LoopForever+0xe>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <LoopForever+0x16>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f006 f94f 	bl	8008158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eba:	f7ff f945 	bl	8001148 <main>

08001ebe <LoopForever>:

LoopForever:
    b LoopForever
 8001ebe:	e7fe      	b.n	8001ebe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ecc:	0800a3fc 	.word	0x0800a3fc
  ldr r2, =_sbss
 8001ed0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ed4:	2000072c 	.word	0x2000072c

08001ed8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_IRQHandler>

08001eda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f93d 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f80e 	bl	8001f0c <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	e001      	b.n	8001f00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001efc:	f7ff fd20 	bl	8001940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_InitTick+0x6c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d023      	beq.n	8001f68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_InitTick+0x70>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_InitTick+0x6c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f949 	bl	80021ce <HAL_SYSTICK_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d809      	bhi.n	8001f5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f000 f913 	bl	800217a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_InitTick+0x74>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e007      	b.n	8001f6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e004      	b.n	8001f6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e001      	b.n	8001f6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	200005dc 	.word	0x200005dc

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200005dc 	.word	0x200005dc

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002130:	d301      	bcc.n	8002136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002132:	2301      	movs	r3, #1
 8002134:	e00f      	b.n	8002156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <SysTick_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213e:	210f      	movs	r1, #15
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f7ff ff8e 	bl	8002064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SysTick_Config+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SysTick_Config+0x40>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff29 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff3e 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff8e 	bl	80020b8 <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5d 	bl	8002064 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff31 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffa2 	bl	8002120 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d008      	beq.n	8002210 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2204      	movs	r2, #4
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e040      	b.n	8002292 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 020e 	bic.w	r2, r2, #14
 800221e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800222e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f003 021c 	and.w	r2, r3, #28
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800225c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00c      	beq.n	8002280 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800227e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d005      	beq.n	80022c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2204      	movs	r2, #4
 80022ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e047      	b.n	8002352 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 020e 	bic.w	r2, r2, #14
 80022d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f003 021c 	and.w	r2, r3, #28
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800230e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00c      	beq.n	8002332 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002326:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002330:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
    }
  }
  return status;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	e166      	b.n	800263a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8158 	beq.w	8002634 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d005      	beq.n	800239c <HAL_GPIO_Init+0x40>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d130      	bne.n	80023fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d2:	2201      	movs	r2, #1
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 0201 	and.w	r2, r3, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b03      	cmp	r3, #3
 8002408:	d017      	beq.n	800243a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d123      	bne.n	800248e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	6939      	ldr	r1, [r7, #16]
 800248a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0203 	and.w	r2, r3, #3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80b2 	beq.w	8002634 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <HAL_GPIO_Init+0x2fc>)
 80024d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d4:	4a60      	ldr	r2, [pc, #384]	; (8002658 <HAL_GPIO_Init+0x2fc>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6613      	str	r3, [r2, #96]	; 0x60
 80024dc:	4b5e      	ldr	r3, [pc, #376]	; (8002658 <HAL_GPIO_Init+0x2fc>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024e8:	4a5c      	ldr	r2, [pc, #368]	; (800265c <HAL_GPIO_Init+0x300>)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	3302      	adds	r3, #2
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002512:	d02b      	beq.n	800256c <HAL_GPIO_Init+0x210>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_GPIO_Init+0x304>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d025      	beq.n	8002568 <HAL_GPIO_Init+0x20c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a51      	ldr	r2, [pc, #324]	; (8002664 <HAL_GPIO_Init+0x308>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d01f      	beq.n	8002564 <HAL_GPIO_Init+0x208>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a50      	ldr	r2, [pc, #320]	; (8002668 <HAL_GPIO_Init+0x30c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d019      	beq.n	8002560 <HAL_GPIO_Init+0x204>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a4f      	ldr	r2, [pc, #316]	; (800266c <HAL_GPIO_Init+0x310>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_GPIO_Init+0x200>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <HAL_GPIO_Init+0x314>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00d      	beq.n	8002558 <HAL_GPIO_Init+0x1fc>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <HAL_GPIO_Init+0x318>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d007      	beq.n	8002554 <HAL_GPIO_Init+0x1f8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a4c      	ldr	r2, [pc, #304]	; (8002678 <HAL_GPIO_Init+0x31c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_GPIO_Init+0x1f4>
 800254c:	2307      	movs	r3, #7
 800254e:	e00e      	b.n	800256e <HAL_GPIO_Init+0x212>
 8002550:	2308      	movs	r3, #8
 8002552:	e00c      	b.n	800256e <HAL_GPIO_Init+0x212>
 8002554:	2306      	movs	r3, #6
 8002556:	e00a      	b.n	800256e <HAL_GPIO_Init+0x212>
 8002558:	2305      	movs	r3, #5
 800255a:	e008      	b.n	800256e <HAL_GPIO_Init+0x212>
 800255c:	2304      	movs	r3, #4
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x212>
 8002560:	2303      	movs	r3, #3
 8002562:	e004      	b.n	800256e <HAL_GPIO_Init+0x212>
 8002564:	2302      	movs	r3, #2
 8002566:	e002      	b.n	800256e <HAL_GPIO_Init+0x212>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_GPIO_Init+0x212>
 800256c:	2300      	movs	r3, #0
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	f002 0203 	and.w	r2, r2, #3
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	4093      	lsls	r3, r2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800257e:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_GPIO_Init+0x300>)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800258c:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_GPIO_Init+0x320>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b0:	4a32      	ldr	r2, [pc, #200]	; (800267c <HAL_GPIO_Init+0x320>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b6:	4b31      	ldr	r3, [pc, #196]	; (800267c <HAL_GPIO_Init+0x320>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025da:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_GPIO_Init+0x320>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_GPIO_Init+0x320>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_GPIO_Init+0x320>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_GPIO_Init+0x320>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <HAL_GPIO_Init+0x320>)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f ae91 	bne.w	800236c <HAL_GPIO_Init+0x10>
  }
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	48000400 	.word	0x48000400
 8002664:	48000800 	.word	0x48000800
 8002668:	48000c00 	.word	0x48000c00
 800266c:	48001000 	.word	0x48001000
 8002670:	48001400 	.word	0x48001400
 8002674:	48001800 	.word	0x48001800
 8002678:	48001c00 	.word	0x48001c00
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e08d      	b.n	80027ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff f96e 	bl	8001988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2224      	movs	r2, #36	; 0x24
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	e006      	b.n	8002708 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002706:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d108      	bne.n	8002722 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	e007      	b.n	8002732 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002744:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1a      	ldr	r2, [r3, #32]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	461a      	mov	r2, r3
 80027c4:	460b      	mov	r3, r1
 80027c6:	817b      	strh	r3, [r7, #10]
 80027c8:	4613      	mov	r3, r2
 80027ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	f040 80db 	bne.w	8002990 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_I2C_Master_Receive+0x30>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0d4      	b.n	8002992 <HAL_I2C_Master_Receive+0x1da>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027f0:	f7ff fbdc 	bl	8001fac <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2319      	movs	r3, #25
 80027fc:	2201      	movs	r2, #1
 80027fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f8f2 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0bf      	b.n	8002992 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2222      	movs	r2, #34	; 0x22
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2210      	movs	r2, #16
 800281e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	893a      	ldrh	r2, [r7, #8]
 8002832:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	2bff      	cmp	r3, #255	; 0xff
 8002842:	d90e      	bls.n	8002862 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	b2da      	uxtb	r2, r3
 8002850:	8979      	ldrh	r1, [r7, #10]
 8002852:	4b52      	ldr	r3, [pc, #328]	; (800299c <HAL_I2C_Master_Receive+0x1e4>)
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 faba 	bl	8002dd4 <I2C_TransferConfig>
 8002860:	e06d      	b.n	800293e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	b2da      	uxtb	r2, r3
 8002872:	8979      	ldrh	r1, [r7, #10]
 8002874:	4b49      	ldr	r3, [pc, #292]	; (800299c <HAL_I2C_Master_Receive+0x1e4>)
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 faa9 	bl	8002dd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002882:	e05c      	b.n	800293e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	6a39      	ldr	r1, [r7, #32]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f941 	bl	8002b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e07c      	b.n	8002992 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d034      	beq.n	800293e <HAL_I2C_Master_Receive+0x186>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d130      	bne.n	800293e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f880 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e04d      	b.n	8002992 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2bff      	cmp	r3, #255	; 0xff
 80028fe:	d90e      	bls.n	800291e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	22ff      	movs	r2, #255	; 0xff
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	b2da      	uxtb	r2, r3
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fa5c 	bl	8002dd4 <I2C_TransferConfig>
 800291c:	e00f      	b.n	800293e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	b2da      	uxtb	r2, r3
 800292e:	8979      	ldrh	r1, [r7, #10]
 8002930:	2300      	movs	r3, #0
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fa4b 	bl	8002dd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d19d      	bne.n	8002884 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	6a39      	ldr	r1, [r7, #32]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f89c 	bl	8002a8a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e01a      	b.n	8002992 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2220      	movs	r2, #32
 8002962:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_I2C_Master_Receive+0x1e8>)
 8002970:	400b      	ands	r3, r1
 8002972:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	80002400 	.word	0x80002400
 80029a0:	fe00e800 	.word	0xfe00e800

080029a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d103      	bne.n	80029c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d007      	beq.n	80029e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	619a      	str	r2, [r3, #24]
  }
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fc:	e031      	b.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d02d      	beq.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a06:	f7ff fad1 	bl	8001fac <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d302      	bcc.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d122      	bne.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d113      	bne.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f043 0220 	orr.w	r2, r3, #32
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00f      	b.n	8002a82 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d0be      	beq.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a96:	e02f      	b.n	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f8b9 	bl	8002c14 <I2C_IsErrorOccurred>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e02d      	b.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7ff fa7e 	bl	8001fac <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11a      	bne.n	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d013      	beq.n	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d1c8      	bne.n	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b1c:	e06b      	b.n	8002bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f876 	bl	8002c14 <I2C_IsErrorOccurred>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e069      	b.n	8002c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d138      	bne.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d105      	bne.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e055      	b.n	8002c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d107      	bne.n	8002b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2204      	movs	r2, #4
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
 8002b76:	e002      	b.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2220      	movs	r2, #32
 8002b84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002b92:	400b      	ands	r3, r1
 8002b94:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e029      	b.n	8002c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7ff f9fb 	bl	8001fac <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d00f      	beq.n	8002bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e007      	b.n	8002c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d18c      	bne.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	fe00e800 	.word	0xfe00e800

08002c14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d068      	beq.n	8002d12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2210      	movs	r2, #16
 8002c46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c48:	e049      	b.n	8002cde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d045      	beq.n	8002cde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7ff f9ab 	bl	8001fac <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_IsErrorOccurred+0x54>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d13a      	bne.n	8002cde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8a:	d121      	bne.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c92:	d01d      	beq.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d01a      	beq.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002caa:	f7ff f97f 	bl	8001fac <HAL_GetTick>
 8002cae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb0:	e00e      	b.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cb2:	f7ff f97b 	bl	8001fac <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b19      	cmp	r3, #25
 8002cbe:	d907      	bls.n	8002cd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002cce:	e006      	b.n	8002cde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d1e9      	bne.n	8002cb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d003      	beq.n	8002cf4 <I2C_IsErrorOccurred+0xe0>
 8002cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0aa      	beq.n	8002c4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2220      	movs	r2, #32
 8002d02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f043 0308 	orr.w	r3, r3, #8
 8002d4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01c      	beq.n	8002dc2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff fe0b 	bl	80029a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <I2C_IsErrorOccurred+0x1bc>)
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3728      	adds	r7, #40	; 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	fe00e800 	.word	0xfe00e800

08002dd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	4613      	mov	r3, r2
 8002de4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dec:	7a7b      	ldrb	r3, [r7, #9]
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002df4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	0d5b      	lsrs	r3, r3, #21
 8002e0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <I2C_TransferConfig+0x60>)
 8002e14:	430b      	orrs	r3, r1
 8002e16:	43db      	mvns	r3, r3
 8002e18:	ea02 0103 	and.w	r1, r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	03ff63ff 	.word	0x03ff63ff

08002e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d138      	bne.n	8002ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e032      	b.n	8002ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e000      	b.n	8002ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
  }
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d139      	bne.n	8002f58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e033      	b.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2224      	movs	r2, #36	; 0x24
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f78:	d102      	bne.n	8002f80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f7e:	e00b      	b.n	8002f98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8e:	d102      	bne.n	8002f96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f94:	e000      	b.n	8002f98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40007000 	.word	0x40007000

08002fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d141      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fb6:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d131      	bne.n	8003028 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc4:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fca:	4a46      	ldr	r2, [pc, #280]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fdc:	4a41      	ldr	r2, [pc, #260]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fe4:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2232      	movs	r2, #50	; 0x32
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	4a3f      	ldr	r2, [pc, #252]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffa:	e002      	b.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003002:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d102      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f2      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003016:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d158      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e057      	b.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003028:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800302e:	4a2d      	ldr	r2, [pc, #180]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003038:	e04d      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003040:	d141      	bne.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304e:	d131      	bne.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003060:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003068:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800306e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2232      	movs	r2, #50	; 0x32
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	0c9b      	lsrs	r3, r3, #18
 8003082:	3301      	adds	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003086:	e002      	b.n	800308e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3b01      	subs	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309a:	d102      	bne.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f2      	bne.n	8003088 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	d112      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e011      	b.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030c4:	e007      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ce:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40007000 	.word	0x40007000
 80030e8:	20000000 	.word	0x20000000
 80030ec:	431bde83 	.word	0x431bde83

080030f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_PWREx_EnableVddIO2+0x1c>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_PWREx_EnableVddIO2+0x1c>)
 80030fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fe:	6053      	str	r3, [r2, #4]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000

08003110 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f000 bc08 	b.w	8003934 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003124:	4b96      	ldr	r3, [pc, #600]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312e:	4b94      	ldr	r3, [pc, #592]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80e4 	beq.w	800330e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_RCC_OscConfig+0x4c>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	f040 808b 	bne.w	800326a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b01      	cmp	r3, #1
 8003158:	f040 8087 	bne.w	800326a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800315c:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_OscConfig+0x64>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e3df      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1a      	ldr	r2, [r3, #32]
 8003178:	4b81      	ldr	r3, [pc, #516]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_RCC_OscConfig+0x7e>
 8003184:	4b7e      	ldr	r3, [pc, #504]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318c:	e005      	b.n	800319a <HAL_RCC_OscConfig+0x8a>
 800318e:	4b7c      	ldr	r3, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319a:	4293      	cmp	r3, r2
 800319c:	d223      	bcs.n	80031e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fdcc 	bl	8003d40 <RCC_SetFlashLatencyFromMSIRange>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e3c0      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b2:	4b73      	ldr	r3, [pc, #460]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a72      	ldr	r2, [pc, #456]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b70      	ldr	r3, [pc, #448]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	496d      	ldr	r1, [pc, #436]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d0:	4b6b      	ldr	r3, [pc, #428]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	4968      	ldr	r1, [pc, #416]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
 80031e4:	e025      	b.n	8003232 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e6:	4b66      	ldr	r3, [pc, #408]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a65      	ldr	r2, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b63      	ldr	r3, [pc, #396]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4960      	ldr	r1, [pc, #384]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003204:	4b5e      	ldr	r3, [pc, #376]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	495b      	ldr	r1, [pc, #364]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fd8c 	bl	8003d40 <RCC_SetFlashLatencyFromMSIRange>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e380      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003232:	f000 fcc1 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003236:	4602      	mov	r2, r0
 8003238:	4b51      	ldr	r3, [pc, #324]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	4950      	ldr	r1, [pc, #320]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	4a4e      	ldr	r2, [pc, #312]	; (8003388 <HAL_RCC_OscConfig+0x278>)
 8003250:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003252:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_RCC_OscConfig+0x27c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fe58 	bl	8001f0c <HAL_InitTick>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d052      	beq.n	800330c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	e364      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d032      	beq.n	80032d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a42      	ldr	r2, [pc, #264]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800327e:	f7fe fe95 	bl	8001fac <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003286:	f7fe fe91 	bl	8001fac <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e34d      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003298:	4b39      	ldr	r3, [pc, #228]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a35      	ldr	r2, [pc, #212]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4930      	ldr	r1, [pc, #192]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	492b      	ldr	r1, [pc, #172]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
 80032d6:	e01a      	b.n	800330e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032d8:	4b29      	ldr	r3, [pc, #164]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a28      	ldr	r2, [pc, #160]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fe62 	bl	8001fac <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ec:	f7fe fe5e 	bl	8001fac <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e31a      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1dc>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d073      	beq.n	8003402 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x21c>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d10e      	bne.n	8003344 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d10b      	bne.n	8003344 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d063      	beq.n	8003400 <HAL_RCC_OscConfig+0x2f0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d15f      	bne.n	8003400 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e2f7      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x24c>
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e025      	b.n	80033a8 <HAL_RCC_OscConfig+0x298>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003364:	d114      	bne.n	8003390 <HAL_RCC_OscConfig+0x280>
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a05      	ldr	r2, [pc, #20]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a02      	ldr	r2, [pc, #8]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e013      	b.n	80033a8 <HAL_RCC_OscConfig+0x298>
 8003380:	40021000 	.word	0x40021000
 8003384:	0800a008 	.word	0x0800a008
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004
 8003390:	4ba0      	ldr	r3, [pc, #640]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a9f      	ldr	r2, [pc, #636]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b9d      	ldr	r3, [pc, #628]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a9c      	ldr	r2, [pc, #624]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe fdfc 	bl	8001fac <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe fdf8 	bl	8001fac <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e2b4      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ca:	4b92      	ldr	r3, [pc, #584]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2a8>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fde8 	bl	8001fac <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe fde4 	bl	8001fac <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e2a0      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f2:	4b88      	ldr	r3, [pc, #544]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x2d0>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d060      	beq.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x310>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d119      	bne.n	800344e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d116      	bne.n	800344e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003420:	4b7c      	ldr	r3, [pc, #496]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_OscConfig+0x328>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e27d      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b76      	ldr	r3, [pc, #472]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	4973      	ldr	r1, [pc, #460]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800344c:	e040      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d023      	beq.n	800349e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003456:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6e      	ldr	r2, [pc, #440]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe fda3 	bl	8001fac <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7fe fd9f 	bl	8001fac <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e25b      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347c:	4b65      	ldr	r3, [pc, #404]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b62      	ldr	r3, [pc, #392]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	495f      	ldr	r1, [pc, #380]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	e018      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5c      	ldr	r2, [pc, #368]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fe fd7f 	bl	8001fac <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fe fd7b 	bl	8001fac <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e237      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c4:	4b53      	ldr	r3, [pc, #332]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03c      	beq.n	8003556 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01c      	beq.n	800351e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ea:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe fd5a 	bl	8001fac <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fd56 	bl	8001fac <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e212      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ef      	beq.n	80034fc <HAL_RCC_OscConfig+0x3ec>
 800351c:	e01b      	b.n	8003556 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003524:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe fd3d 	bl	8001fac <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe fd39 	bl	8001fac <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1f5      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003548:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ef      	bne.n	8003536 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80a6 	beq.w	80036b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10d      	bne.n	8003590 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b27      	ldr	r3, [pc, #156]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358c:	2301      	movs	r3, #1
 800358e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_OscConfig+0x508>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d118      	bne.n	80035ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359c:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <HAL_RCC_OscConfig+0x508>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_RCC_OscConfig+0x508>)
 80035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a8:	f7fe fd00 	bl	8001fac <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7fe fcfc 	bl	8001fac <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1b8      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCC_OscConfig+0x508>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4d8>
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e6:	e029      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d115      	bne.n	800361c <HAL_RCC_OscConfig+0x50c>
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	4a07      	ldr	r2, [pc, #28]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	4a03      	ldr	r2, [pc, #12]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
 800361c:	4b9d      	ldr	r3, [pc, #628]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003622:	4a9c      	ldr	r2, [pc, #624]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800362c:	4b99      	ldr	r3, [pc, #612]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	4a98      	ldr	r2, [pc, #608]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fe fcb2 	bl	8001fac <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe fcae 	bl	8001fac <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e168      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003662:	4b8c      	ldr	r3, [pc, #560]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ed      	beq.n	800364c <HAL_RCC_OscConfig+0x53c>
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fe fc9b 	bl	8001fac <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe fc97 	bl	8001fac <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e151      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003690:	4b80      	ldr	r3, [pc, #512]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ed      	bne.n	800367a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369e:	7ffb      	ldrb	r3, [r7, #31]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b7b      	ldr	r3, [pc, #492]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	4a7a      	ldr	r2, [pc, #488]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80036aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d03c      	beq.n	8003736 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01c      	beq.n	80036fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036c4:	4b73      	ldr	r3, [pc, #460]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80036c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ca:	4a72      	ldr	r2, [pc, #456]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fe fc6a 	bl	8001fac <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036dc:	f7fe fc66 	bl	8001fac <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e122      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ee:	4b69      	ldr	r3, [pc, #420]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80036f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ef      	beq.n	80036dc <HAL_RCC_OscConfig+0x5cc>
 80036fc:	e01b      	b.n	8003736 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003704:	4a63      	ldr	r2, [pc, #396]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fe fc4d 	bl	8001fac <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003716:	f7fe fc49 	bl	8001fac <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e105      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003728:	4b5a      	ldr	r3, [pc, #360]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 800372a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1ef      	bne.n	8003716 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80f9 	beq.w	8003932 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 80cf 	bne.w	80038e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800374a:	4b52      	ldr	r3, [pc, #328]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f003 0203 	and.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	429a      	cmp	r2, r3
 800375c:	d12c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	3b01      	subs	r3, #1
 800376a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d123      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d11b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d113      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3b01      	subs	r3, #1
 800379e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	3b01      	subs	r3, #1
 80037b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d071      	beq.n	800389c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d068      	beq.n	8003890 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037be:	4b35      	ldr	r3, [pc, #212]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037ca:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0ac      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 80037e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e6:	f7fe fbe1 	bl	8001fac <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe fbdd 	bl	8001fac <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e099      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x788>)
 8003812:	4013      	ands	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800381c:	3a01      	subs	r2, #1
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003826:	0212      	lsls	r2, r2, #8
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800382e:	0852      	lsrs	r2, r2, #1
 8003830:	3a01      	subs	r2, #1
 8003832:	0552      	lsls	r2, r2, #21
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	3a01      	subs	r2, #1
 800383e:	0652      	lsls	r2, r2, #25
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003846:	06d2      	lsls	r2, r2, #27
 8003848:	430a      	orrs	r2, r1
 800384a:	4912      	ldr	r1, [pc, #72]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 800384c:	4313      	orrs	r3, r2
 800384e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003868:	f7fe fba0 	bl	8001fac <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003870:	f7fe fb9c 	bl	8001fac <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e058      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800388e:	e050      	b.n	8003932 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e04f      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
 8003894:	40021000 	.word	0x40021000
 8003898:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d144      	bne.n	8003932 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a23      	ldr	r2, [pc, #140]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b4:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a20      	ldr	r2, [pc, #128]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038c0:	f7fe fb74 	bl	8001fac <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fe fb70 	bl	8001fac <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e02c      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	4b18      	ldr	r3, [pc, #96]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x7b8>
 80038e6:	e024      	b.n	8003932 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d01f      	beq.n	800392e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 80038f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fe fb57 	bl	8001fac <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7fe fb53 	bl	8001fac <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e00f      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	4905      	ldr	r1, [pc, #20]	; (800393c <HAL_RCC_OscConfig+0x82c>)
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_OscConfig+0x830>)
 8003928:	4013      	ands	r3, r2
 800392a:	60cb      	str	r3, [r1, #12]
 800392c:	e001      	b.n	8003932 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	feeefffc 	.word	0xfeeefffc

08003944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e11d      	b.n	8003b98 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b90      	ldr	r3, [pc, #576]	; (8003ba0 <HAL_RCC_ClockConfig+0x25c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d910      	bls.n	800398c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b8d      	ldr	r3, [pc, #564]	; (8003ba0 <HAL_RCC_ClockConfig+0x25c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 020f 	bic.w	r2, r3, #15
 8003972:	498b      	ldr	r1, [pc, #556]	; (8003ba0 <HAL_RCC_ClockConfig+0x25c>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b89      	ldr	r3, [pc, #548]	; (8003ba0 <HAL_RCC_ClockConfig+0x25c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e105      	b.n	8003b98 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	4b81      	ldr	r3, [pc, #516]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d908      	bls.n	80039ba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a8:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	497b      	ldr	r1, [pc, #492]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d079      	beq.n	8003aba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d11e      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ce:	4b75      	ldr	r3, [pc, #468]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0dc      	b.n	8003b98 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80039de:	f000 fa09 	bl	8003df4 <RCC_GetSysClockFreqFromPLLSource>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4a70      	ldr	r2, [pc, #448]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d946      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039ea:	4b6e      	ldr	r3, [pc, #440]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d140      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039f6:	4b6b      	ldr	r3, [pc, #428]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039fe:	4a69      	ldr	r2, [pc, #420]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e035      	b.n	8003a78 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a14:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d115      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b9      	b.n	8003b98 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0ad      	b.n	8003b98 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0a5      	b.n	8003b98 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a4c:	f000 f8b4 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4a55      	ldr	r2, [pc, #340]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d90f      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a58:	4b52      	ldr	r3, [pc, #328]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a64:	4b4f      	ldr	r3, [pc, #316]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a6c:	4a4d      	ldr	r2, [pc, #308]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a72:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a78:	4b4a      	ldr	r3, [pc, #296]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 0203 	bic.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4947      	ldr	r1, [pc, #284]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fa8f 	bl	8001fac <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a92:	f7fe fa8b 	bl	8001fac <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e077      	b.n	8003b98 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 020c 	and.w	r2, r3, #12
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d1eb      	bne.n	8003a92 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ac0:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a37      	ldr	r2, [pc, #220]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d208      	bcs.n	8003afa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	492b      	ldr	r1, [pc, #172]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <HAL_RCC_ClockConfig+0x25c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d210      	bcs.n	8003b2a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_ClockConfig+0x25c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 020f 	bic.w	r2, r3, #15
 8003b10:	4923      	ldr	r1, [pc, #140]	; (8003ba0 <HAL_RCC_ClockConfig+0x25c>)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b18:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCC_ClockConfig+0x25c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e036      	b.n	8003b98 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	4918      	ldr	r1, [pc, #96]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4910      	ldr	r1, [pc, #64]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b68:	f000 f826 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	490c      	ldr	r1, [pc, #48]	; (8003bac <HAL_RCC_ClockConfig+0x268>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <HAL_RCC_ClockConfig+0x26c>)
 8003b86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x270>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe f9bd 	bl	8001f0c <HAL_InitTick>
 8003b92:	4603      	mov	r3, r0
 8003b94:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40022000 	.word	0x40022000
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	04c4b400 	.word	0x04c4b400
 8003bac:	0800a008 	.word	0x0800a008
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	; 0x24
 8003bbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd0:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x34>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d121      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d11e      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bec:	4b34      	ldr	r3, [pc, #208]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bf8:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e005      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c14:	4a2b      	ldr	r2, [pc, #172]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c28:	e00a      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d102      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c30:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e004      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8003c3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d134      	bne.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0xa6>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d003      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0xac>
 8003c5c:	e005      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c60:	617b      	str	r3, [r7, #20]
      break;
 8003c62:	e005      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8003c66:	617b      	str	r3, [r7, #20]
      break;
 8003c68:	e002      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	617b      	str	r3, [r7, #20]
      break;
 8003c6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	fb03 f202 	mul.w	r2, r3, r2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c96:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	0e5b      	lsrs	r3, r3, #25
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3724      	adds	r7, #36	; 0x24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	0800a020 	.word	0x0800a020
 8003cc8:	00f42400 	.word	0x00f42400
 8003ccc:	007a1200 	.word	0x007a1200

08003cd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000000 	.word	0x20000000

08003ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cec:	f7ff fff0 	bl	8003cd0 <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4904      	ldr	r1, [pc, #16]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	0800a018 	.word	0x0800a018

08003d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d18:	f7ff ffda 	bl	8003cd0 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0adb      	lsrs	r3, r3, #11
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4904      	ldr	r1, [pc, #16]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	0800a018 	.word	0x0800a018

08003d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d4c:	4b27      	ldr	r3, [pc, #156]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d58:	f7ff f906 	bl	8002f68 <HAL_PWREx_GetVoltageRange>
 8003d5c:	6178      	str	r0, [r7, #20]
 8003d5e:	e014      	b.n	8003d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d60:	4b22      	ldr	r3, [pc, #136]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	4a21      	ldr	r2, [pc, #132]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d78:	f7ff f8f6 	bl	8002f68 <HAL_PWREx_GetVoltageRange>
 8003d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d90:	d10b      	bne.n	8003daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d913      	bls.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d9c:	d902      	bls.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d9e:	2302      	movs	r3, #2
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	e00d      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da4:	2301      	movs	r3, #1
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	e00a      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b7f      	cmp	r3, #127	; 0x7f
 8003dae:	d902      	bls.n	8003db6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003db0:	2302      	movs	r3, #2
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	e004      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d101      	bne.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 020f 	bic.w	r2, r3, #15
 8003dc8:	4909      	ldr	r1, [pc, #36]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d001      	beq.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40022000 	.word	0x40022000

08003df4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dfa:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d00b      	beq.n	8003e22 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d825      	bhi.n	8003e5c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d008      	beq.n	8003e28 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d11f      	bne.n	8003e5c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e1e:	613b      	str	r3, [r7, #16]
    break;
 8003e20:	e01f      	b.n	8003e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e24:	613b      	str	r3, [r7, #16]
    break;
 8003e26:	e01c      	b.n	8003e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e28:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d107      	bne.n	8003e44 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e34:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	e005      	b.n	8003e50 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003e50:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e58:	613b      	str	r3, [r7, #16]
    break;
 8003e5a:	e002      	b.n	8003e62 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
    break;
 8003e60:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	fb03 f202 	mul.w	r2, r3, r2
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	0e5b      	lsrs	r3, r3, #25
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ea2:	683b      	ldr	r3, [r7, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	007a1200 	.word	0x007a1200
 8003ebc:	0800a020 	.word	0x0800a020

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d040      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d02a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d825      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ee8:	2b60      	cmp	r3, #96	; 0x60
 8003eea:	d026      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003eec:	2b60      	cmp	r3, #96	; 0x60
 8003eee:	d821      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d006      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d81d      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d010      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003f00:	e018      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f02:	4b89      	ldr	r3, [pc, #548]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4a88      	ldr	r2, [pc, #544]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f0e:	e015      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fb02 	bl	8004520 <RCCEx_PLLSAI1_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f20:	e00c      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3320      	adds	r3, #32
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fbed 	bl	8004708 <RCCEx_PLLSAI2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	74fb      	strb	r3, [r7, #19]
      break;
 8003f38:	e000      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f42:	4b79      	ldr	r3, [pc, #484]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f48:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f50:	4975      	ldr	r1, [pc, #468]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f58:	e001      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d047      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f72:	d030      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d82a      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f7e:	d02a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f84:	d824      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d81e      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9a:	d010      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f9c:	e018      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f9e:	4b62      	ldr	r3, [pc, #392]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	4a61      	ldr	r2, [pc, #388]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003faa:	e015      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fab4 	bl	8004520 <RCCEx_PLLSAI1_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fbc:	e00c      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3320      	adds	r3, #32
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fb9f 	bl	8004708 <RCCEx_PLLSAI2_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fce:	e003      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	74fb      	strb	r3, [r7, #19]
      break;
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fde:	4b52      	ldr	r3, [pc, #328]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	494e      	ldr	r1, [pc, #312]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ff4:	e001      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 809f 	beq.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004008:	2300      	movs	r3, #0
 800400a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800400c:	4b46      	ldr	r3, [pc, #280]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800401c:	2300      	movs	r3, #0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	4a40      	ldr	r2, [pc, #256]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	; 0x58
 800402e:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403a:	2301      	movs	r3, #1
 800403c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800403e:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a3a      	ldr	r2, [pc, #232]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404a:	f7fd ffaf 	bl	8001fac <HAL_GetTick>
 800404e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004050:	e009      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fd ffab 	bl	8001fac <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d902      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	74fb      	strb	r3, [r7, #19]
        break;
 8004064:	e005      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004066:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ef      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d15b      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004078:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	429a      	cmp	r2, r3
 8004094:	d019      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a2:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c2:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d016      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd ff6a 	bl	8001fac <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040da:	e00b      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fd ff66 	bl	8001fac <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d902      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	74fb      	strb	r3, [r7, #19]
            break;
 80040f2:	e006      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0ec      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004102:	7cfb      	ldrb	r3, [r7, #19]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10c      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004108:	4b07      	ldr	r3, [pc, #28]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	4903      	ldr	r1, [pc, #12]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004120:	e008      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	74bb      	strb	r3, [r7, #18]
 8004126:	e005      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004134:	7c7b      	ldrb	r3, [r7, #17]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d105      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413a:	4ba0      	ldr	r3, [pc, #640]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	4a9f      	ldr	r2, [pc, #636]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004152:	4b9a      	ldr	r3, [pc, #616]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 0203 	bic.w	r2, r3, #3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	4996      	ldr	r1, [pc, #600]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004174:	4b91      	ldr	r3, [pc, #580]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 020c 	bic.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	498e      	ldr	r1, [pc, #568]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004196:	4b89      	ldr	r3, [pc, #548]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	4985      	ldr	r1, [pc, #532]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b8:	4b80      	ldr	r3, [pc, #512]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c6:	497d      	ldr	r1, [pc, #500]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041da:	4b78      	ldr	r3, [pc, #480]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e8:	4974      	ldr	r1, [pc, #464]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041fc:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	496c      	ldr	r1, [pc, #432]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800421e:	4b67      	ldr	r3, [pc, #412]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800422c:	4963      	ldr	r1, [pc, #396]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004240:	4b5e      	ldr	r3, [pc, #376]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800424e:	495b      	ldr	r1, [pc, #364]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004262:	4b56      	ldr	r3, [pc, #344]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	4952      	ldr	r1, [pc, #328]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004284:	4b4d      	ldr	r3, [pc, #308]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	494a      	ldr	r1, [pc, #296]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042a6:	4b45      	ldr	r3, [pc, #276]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	4941      	ldr	r1, [pc, #260]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042c8:	4b3c      	ldr	r3, [pc, #240]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d6:	4939      	ldr	r1, [pc, #228]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d028      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ea:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	4930      	ldr	r1, [pc, #192]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004308:	d106      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800430a:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004314:	60d3      	str	r3, [r2, #12]
 8004316:	e011      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004320:	d10c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f8f9 	bl	8004520 <RCCEx_PLLSAI1_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d04d      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800434c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004350:	d108      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800435e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004362:	e012      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004364:	4b15      	ldr	r3, [pc, #84]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800436a:	4a14      	ldr	r2, [pc, #80]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004370:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004382:	490e      	ldr	r1, [pc, #56]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004392:	d106      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439e:	60d3      	str	r3, [r2, #12]
 80043a0:	e020      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043aa:	d109      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a02      	ldr	r2, [pc, #8]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b6:	60d3      	str	r3, [r2, #12]
 80043b8:	e014      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f8a5 	bl	8004520 <RCCEx_PLLSAI1_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d028      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fe:	4947      	ldr	r1, [pc, #284]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800440e:	d106      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004410:	4b42      	ldr	r3, [pc, #264]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a41      	ldr	r2, [pc, #260]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441a:	60d3      	str	r3, [r2, #12]
 800441c:	e011      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004426:	d10c      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f876 	bl	8004520 <RCCEx_PLLSAI1_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01e      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800444e:	4b33      	ldr	r3, [pc, #204]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445e:	492f      	ldr	r1, [pc, #188]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004470:	d10c      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f851 	bl	8004520 <RCCEx_PLLSAI1_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004482:	7cfb      	ldrb	r3, [r7, #19]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004498:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800449e:	f023 0204 	bic.w	r2, r3, #4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a8:	491c      	ldr	r1, [pc, #112]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00b      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c2:	f023 0218 	bic.w	r2, r3, #24
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044cc:	4913      	ldr	r1, [pc, #76]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d017      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f0:	490a      	ldr	r1, [pc, #40]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004502:	d105      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a04      	ldr	r2, [pc, #16]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004510:	7cbb      	ldrb	r3, [r7, #18]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000

08004520 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800452e:	4b72      	ldr	r3, [pc, #456]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00e      	beq.n	8004558 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800453a:	4b6f      	ldr	r3, [pc, #444]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0203 	and.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d103      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
       ||
 800454e:	2b00      	cmp	r3, #0
 8004550:	d142      	bne.n	80045d8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
 8004556:	e03f      	b.n	80045d8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d018      	beq.n	8004592 <RCCEx_PLLSAI1_Config+0x72>
 8004560:	2b03      	cmp	r3, #3
 8004562:	d825      	bhi.n	80045b0 <RCCEx_PLLSAI1_Config+0x90>
 8004564:	2b01      	cmp	r3, #1
 8004566:	d002      	beq.n	800456e <RCCEx_PLLSAI1_Config+0x4e>
 8004568:	2b02      	cmp	r3, #2
 800456a:	d009      	beq.n	8004580 <RCCEx_PLLSAI1_Config+0x60>
 800456c:	e020      	b.n	80045b0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800456e:	4b62      	ldr	r3, [pc, #392]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d11d      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457e:	e01a      	b.n	80045b6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004580:	4b5d      	ldr	r3, [pc, #372]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004588:	2b00      	cmp	r3, #0
 800458a:	d116      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004590:	e013      	b.n	80045ba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004592:	4b59      	ldr	r3, [pc, #356]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800459e:	4b56      	ldr	r3, [pc, #344]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045ae:	e006      	b.n	80045be <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      break;
 80045b4:	e004      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045b6:	bf00      	nop
 80045b8:	e002      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045be:	bf00      	nop
    }

    if(status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d108      	bne.n	80045d8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80045c6:	4b4c      	ldr	r3, [pc, #304]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4949      	ldr	r1, [pc, #292]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 8086 	bne.w	80046ec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045e0:	4b45      	ldr	r3, [pc, #276]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a44      	ldr	r2, [pc, #272]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ec:	f7fd fcde 	bl	8001fac <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045f2:	e009      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f4:	f7fd fcda 	bl	8001fac <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d902      	bls.n	8004608 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	73fb      	strb	r3, [r7, #15]
        break;
 8004606:	e005      	b.n	8004614 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004608:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ef      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d168      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d113      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004620:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	4b35      	ldr	r3, [pc, #212]	; (80046fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004626:	4013      	ands	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6892      	ldr	r2, [r2, #8]
 800462c:	0211      	lsls	r1, r2, #8
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68d2      	ldr	r2, [r2, #12]
 8004632:	06d2      	lsls	r2, r2, #27
 8004634:	4311      	orrs	r1, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6852      	ldr	r2, [r2, #4]
 800463a:	3a01      	subs	r2, #1
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	430a      	orrs	r2, r1
 8004640:	492d      	ldr	r1, [pc, #180]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	610b      	str	r3, [r1, #16]
 8004646:	e02d      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d115      	bne.n	800467a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800464e:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	0211      	lsls	r1, r2, #8
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6912      	ldr	r2, [r2, #16]
 8004660:	0852      	lsrs	r2, r2, #1
 8004662:	3a01      	subs	r2, #1
 8004664:	0552      	lsls	r2, r2, #21
 8004666:	4311      	orrs	r1, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6852      	ldr	r2, [r2, #4]
 800466c:	3a01      	subs	r2, #1
 800466e:	0112      	lsls	r2, r2, #4
 8004670:	430a      	orrs	r2, r1
 8004672:	4921      	ldr	r1, [pc, #132]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
 8004678:	e014      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800467a:	4b1f      	ldr	r3, [pc, #124]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	4b21      	ldr	r3, [pc, #132]	; (8004704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6892      	ldr	r2, [r2, #8]
 8004686:	0211      	lsls	r1, r2, #8
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6952      	ldr	r2, [r2, #20]
 800468c:	0852      	lsrs	r2, r2, #1
 800468e:	3a01      	subs	r2, #1
 8004690:	0652      	lsls	r2, r2, #25
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6852      	ldr	r2, [r2, #4]
 8004698:	3a01      	subs	r2, #1
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	430a      	orrs	r2, r1
 800469e:	4916      	ldr	r1, [pc, #88]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046a4:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fd fc7c 	bl	8001fac <HAL_GetTick>
 80046b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046b6:	e009      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b8:	f7fd fc78 	bl	8001fac <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d902      	bls.n	80046cc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	73fb      	strb	r3, [r7, #15]
          break;
 80046ca:	e005      	b.n	80046d8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	4904      	ldr	r1, [pc, #16]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	07ff800f 	.word	0x07ff800f
 8004700:	ff9f800f 	.word	0xff9f800f
 8004704:	f9ff800f 	.word	0xf9ff800f

08004708 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004716:	4b72      	ldr	r3, [pc, #456]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004722:	4b6f      	ldr	r3, [pc, #444]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0203 	and.w	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d103      	bne.n	800473a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
       ||
 8004736:	2b00      	cmp	r3, #0
 8004738:	d142      	bne.n	80047c0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
 800473e:	e03f      	b.n	80047c0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d018      	beq.n	800477a <RCCEx_PLLSAI2_Config+0x72>
 8004748:	2b03      	cmp	r3, #3
 800474a:	d825      	bhi.n	8004798 <RCCEx_PLLSAI2_Config+0x90>
 800474c:	2b01      	cmp	r3, #1
 800474e:	d002      	beq.n	8004756 <RCCEx_PLLSAI2_Config+0x4e>
 8004750:	2b02      	cmp	r3, #2
 8004752:	d009      	beq.n	8004768 <RCCEx_PLLSAI2_Config+0x60>
 8004754:	e020      	b.n	8004798 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004756:	4b62      	ldr	r3, [pc, #392]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11d      	bne.n	800479e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004766:	e01a      	b.n	800479e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004768:	4b5d      	ldr	r3, [pc, #372]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d116      	bne.n	80047a2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004778:	e013      	b.n	80047a2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800477a:	4b59      	ldr	r3, [pc, #356]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004786:	4b56      	ldr	r3, [pc, #344]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004796:	e006      	b.n	80047a6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e004      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800479e:	bf00      	nop
 80047a0:	e002      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d108      	bne.n	80047c0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80047ae:	4b4c      	ldr	r3, [pc, #304]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4949      	ldr	r1, [pc, #292]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 8086 	bne.w	80048d4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047c8:	4b45      	ldr	r3, [pc, #276]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a44      	ldr	r2, [pc, #272]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd fbea 	bl	8001fac <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047da:	e009      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047dc:	f7fd fbe6 	bl	8001fac <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	73fb      	strb	r3, [r7, #15]
        break;
 80047ee:	e005      	b.n	80047fc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047f0:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ef      	bne.n	80047dc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d168      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d113      	bne.n	8004830 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004808:	4b35      	ldr	r3, [pc, #212]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	4b35      	ldr	r3, [pc, #212]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800480e:	4013      	ands	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6892      	ldr	r2, [r2, #8]
 8004814:	0211      	lsls	r1, r2, #8
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68d2      	ldr	r2, [r2, #12]
 800481a:	06d2      	lsls	r2, r2, #27
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6852      	ldr	r2, [r2, #4]
 8004822:	3a01      	subs	r2, #1
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	430a      	orrs	r2, r1
 8004828:	492d      	ldr	r1, [pc, #180]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800482a:	4313      	orrs	r3, r2
 800482c:	614b      	str	r3, [r1, #20]
 800482e:	e02d      	b.n	800488c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d115      	bne.n	8004862 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004836:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6892      	ldr	r2, [r2, #8]
 8004842:	0211      	lsls	r1, r2, #8
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6912      	ldr	r2, [r2, #16]
 8004848:	0852      	lsrs	r2, r2, #1
 800484a:	3a01      	subs	r2, #1
 800484c:	0552      	lsls	r2, r2, #21
 800484e:	4311      	orrs	r1, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6852      	ldr	r2, [r2, #4]
 8004854:	3a01      	subs	r2, #1
 8004856:	0112      	lsls	r2, r2, #4
 8004858:	430a      	orrs	r2, r1
 800485a:	4921      	ldr	r1, [pc, #132]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	614b      	str	r3, [r1, #20]
 8004860:	e014      	b.n	800488c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004862:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	4b21      	ldr	r3, [pc, #132]	; (80048ec <RCCEx_PLLSAI2_Config+0x1e4>)
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6892      	ldr	r2, [r2, #8]
 800486e:	0211      	lsls	r1, r2, #8
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6952      	ldr	r2, [r2, #20]
 8004874:	0852      	lsrs	r2, r2, #1
 8004876:	3a01      	subs	r2, #1
 8004878:	0652      	lsls	r2, r2, #25
 800487a:	4311      	orrs	r1, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6852      	ldr	r2, [r2, #4]
 8004880:	3a01      	subs	r2, #1
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	430a      	orrs	r2, r1
 8004886:	4916      	ldr	r1, [pc, #88]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004888:	4313      	orrs	r3, r2
 800488a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fd fb88 	bl	8001fac <HAL_GetTick>
 800489c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800489e:	e009      	b.n	80048b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048a0:	f7fd fb84 	bl	8001fac <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d902      	bls.n	80048b4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	73fb      	strb	r3, [r7, #15]
          break;
 80048b2:	e005      	b.n	80048c0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ef      	beq.n	80048a0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	4904      	ldr	r1, [pc, #16]	; (80048e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	07ff800f 	.word	0x07ff800f
 80048e8:	ff9f800f 	.word	0xff9f800f
 80048ec:	f9ff800f 	.word	0xf9ff800f

080048f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e049      	b.n	8004996 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd f942 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f000 fa9a 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e04f      	b.n	8004a58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a23      	ldr	r2, [pc, #140]	; (8004a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01d      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x76>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d018      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x76>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x76>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00e      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x76>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d009      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x76>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x76>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a19      	ldr	r2, [pc, #100]	; (8004a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d115      	bne.n	8004a42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b06      	cmp	r3, #6
 8004a26:	d015      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0xb4>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2e:	d011      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a40:	e008      	b.n	8004a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e000      	b.n	8004a56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40013400 	.word	0x40013400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	00010007 	.word	0x00010007

08004a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d020      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0202 	mvn.w	r2, #2
 8004ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f9ad 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f99f 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f9b0 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d020      	beq.n	8004b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01b      	beq.n	8004b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0204 	mvn.w	r2, #4
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f987 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f979 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f98a 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d020      	beq.n	8004b7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0208 	mvn.w	r2, #8
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2204      	movs	r2, #4
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f961 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f953 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f964 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0210 	mvn.w	r2, #16
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f93b 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f92d 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f93e 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00c      	beq.n	8004bec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0201 	mvn.w	r2, #1
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc fa04 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 faf2 	bl	80051f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00c      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 faea 	bl	8005208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00c      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8fd 	bl	8004e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0220 	mvn.w	r2, #32
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fab2 	bl	80051e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e0b6      	b.n	8004e0e <HAL_TIM_ConfigClockSource+0x18a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cdc:	d03e      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0xd8>
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce2:	f200 8087 	bhi.w	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cea:	f000 8086 	beq.w	8004dfa <HAL_TIM_ConfigClockSource+0x176>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf2:	d87f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004cf4:	2b70      	cmp	r3, #112	; 0x70
 8004cf6:	d01a      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0xaa>
 8004cf8:	2b70      	cmp	r3, #112	; 0x70
 8004cfa:	d87b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004cfc:	2b60      	cmp	r3, #96	; 0x60
 8004cfe:	d050      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x11e>
 8004d00:	2b60      	cmp	r3, #96	; 0x60
 8004d02:	d877      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d04:	2b50      	cmp	r3, #80	; 0x50
 8004d06:	d03c      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0xfe>
 8004d08:	2b50      	cmp	r3, #80	; 0x50
 8004d0a:	d873      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d058      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x13e>
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d86f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d14:	2b30      	cmp	r3, #48	; 0x30
 8004d16:	d064      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d18:	2b30      	cmp	r3, #48	; 0x30
 8004d1a:	d86b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d060      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d867      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d05c      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d05a      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d2c:	e062      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d3e:	f000 f9a7 	bl	8005090 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	609a      	str	r2, [r3, #8]
      break;
 8004d5a:	e04f      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d6c:	f000 f990 	bl	8005090 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d7e:	609a      	str	r2, [r3, #8]
      break;
 8004d80:	e03c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 f904 	bl	8004f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2150      	movs	r1, #80	; 0x50
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f95d 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004da0:	e02c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 f923 	bl	8004ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2160      	movs	r1, #96	; 0x60
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f94d 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e01c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 f8e4 	bl	8004f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2140      	movs	r1, #64	; 0x40
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f93d 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004de0:	e00c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4619      	mov	r1, r3
 8004dec:	4610      	mov	r0, r2
 8004dee:	f000 f934 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004df2:	e003      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e000      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a40      	ldr	r2, [pc, #256]	; (8004f7c <TIM_Base_SetConfig+0x114>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d013      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e86:	d00f      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a3d      	ldr	r2, [pc, #244]	; (8004f80 <TIM_Base_SetConfig+0x118>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a3c      	ldr	r2, [pc, #240]	; (8004f84 <TIM_Base_SetConfig+0x11c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a3b      	ldr	r2, [pc, #236]	; (8004f88 <TIM_Base_SetConfig+0x120>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3a      	ldr	r2, [pc, #232]	; (8004f8c <TIM_Base_SetConfig+0x124>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d108      	bne.n	8004eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2f      	ldr	r2, [pc, #188]	; (8004f7c <TIM_Base_SetConfig+0x114>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <TIM_Base_SetConfig+0x9a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec8:	d01b      	beq.n	8004f02 <TIM_Base_SetConfig+0x9a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2c      	ldr	r2, [pc, #176]	; (8004f80 <TIM_Base_SetConfig+0x118>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d017      	beq.n	8004f02 <TIM_Base_SetConfig+0x9a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a2b      	ldr	r2, [pc, #172]	; (8004f84 <TIM_Base_SetConfig+0x11c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <TIM_Base_SetConfig+0x9a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2a      	ldr	r2, [pc, #168]	; (8004f88 <TIM_Base_SetConfig+0x120>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00f      	beq.n	8004f02 <TIM_Base_SetConfig+0x9a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <TIM_Base_SetConfig+0x124>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0x9a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <TIM_Base_SetConfig+0x128>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0x9a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a26      	ldr	r2, [pc, #152]	; (8004f98 <TIM_Base_SetConfig+0x130>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a10      	ldr	r2, [pc, #64]	; (8004f7c <TIM_Base_SetConfig+0x114>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00f      	beq.n	8004f60 <TIM_Base_SetConfig+0xf8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a12      	ldr	r2, [pc, #72]	; (8004f8c <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <TIM_Base_SetConfig+0xf8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <TIM_Base_SetConfig+0x128>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d007      	beq.n	8004f60 <TIM_Base_SetConfig+0xf8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_Base_SetConfig+0xf8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a0f      	ldr	r2, [pc, #60]	; (8004f98 <TIM_Base_SetConfig+0x130>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d103      	bne.n	8004f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40013400 	.word	0x40013400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40014400 	.word	0x40014400
 8004f98:	40014800 	.word	0x40014800

08004f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 030a 	bic.w	r3, r3, #10
 8004fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b087      	sub	sp, #28
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f023 0210 	bic.w	r2, r3, #16
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	031b      	lsls	r3, r3, #12
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005036:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	f043 0307 	orr.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	021a      	lsls	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e068      	b.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2e      	ldr	r2, [pc, #184]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2d      	ldr	r2, [pc, #180]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d108      	bne.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d018      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10c      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4313      	orrs	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40014000 	.word	0x40014000

080051e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e042      	b.n	80052b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fc fbff 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2224      	movs	r2, #36	; 0x24
 800524a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 ff44 	bl	80060f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fc45 	bl	8005afc <UART_SetConfig>
 8005272:	4603      	mov	r3, r0
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e01b      	b.n	80052b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 ffc3 	bl	8006238 <UART_CheckIdleState>
 80052b2:	4603      	mov	r3, r0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d17c      	bne.n	80053d0 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_UART_Transmit+0x26>
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e075      	b.n	80053d2 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2221      	movs	r2, #33	; 0x21
 80052f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052f6:	f7fc fe59 	bl	8001fac <HAL_GetTick>
 80052fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	88fa      	ldrh	r2, [r7, #6]
 8005300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005314:	d108      	bne.n	8005328 <HAL_UART_Transmit+0x6c>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	e003      	b.n	8005330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005330:	e031      	b.n	8005396 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f001 f825 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e03e      	b.n	80053d2 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005366:	b292      	uxth	r2, r2
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3302      	adds	r3, #2
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	e008      	b.n	8005384 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	781a      	ldrb	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	b292      	uxth	r2, r2
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	3301      	adds	r3, #1
 8005382:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1c7      	bne.n	8005332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2140      	movs	r1, #64	; 0x40
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 ffed 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e006      	b.n	80053d2 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08a      	sub	sp, #40	; 0x28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d137      	bne.n	8005464 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_UART_Receive_IT+0x24>
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e030      	b.n	8005466 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a18      	ldr	r2, [pc, #96]	; (8005470 <HAL_UART_Receive_IT+0x94>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01f      	beq.n	8005454 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d018      	beq.n	8005454 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	613b      	str	r3, [r7, #16]
   return(result);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	623b      	str	r3, [r7, #32]
 8005442:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	69f9      	ldr	r1, [r7, #28]
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	61bb      	str	r3, [r7, #24]
   return(result);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	461a      	mov	r2, r3
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fffe 	bl	800645c <UART_Start_Receive_IT>
 8005460:	4603      	mov	r3, r0
 8005462:	e000      	b.n	8005466 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3728      	adds	r7, #40	; 0x28
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40008000 	.word	0x40008000

08005474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b0ba      	sub	sp, #232	; 0xe8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800549a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800549e:	f640 030f 	movw	r3, #2063	; 0x80f
 80054a2:	4013      	ands	r3, r2
 80054a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d11b      	bne.n	80054e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d009      	beq.n	80054e8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 82e3 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
      }
      return;
 80054e6:	e2dd      	b.n	8005aa4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80054e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8123 	beq.w	8005738 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80054f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80054f6:	4b8d      	ldr	r3, [pc, #564]	; (800572c <HAL_UART_IRQHandler+0x2b8>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80054fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005502:	4b8b      	ldr	r3, [pc, #556]	; (8005730 <HAL_UART_IRQHandler+0x2bc>)
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 8116 	beq.w	8005738 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d011      	beq.n	800553c <HAL_UART_IRQHandler+0xc8>
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d011      	beq.n	800556c <HAL_UART_IRQHandler+0xf8>
 8005548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2202      	movs	r2, #2
 800555a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d011      	beq.n	800559c <HAL_UART_IRQHandler+0x128>
 8005578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2204      	movs	r2, #4
 800558a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800559c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d017      	beq.n	80055d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80055b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80055b8:	4b5c      	ldr	r3, [pc, #368]	; (800572c <HAL_UART_IRQHandler+0x2b8>)
 80055ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2208      	movs	r2, #8
 80055c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f043 0208 	orr.w	r2, r3, #8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d012      	beq.n	800560a <HAL_UART_IRQHandler+0x196>
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8249 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d013      	beq.n	800564a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800562e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b40      	cmp	r3, #64	; 0x40
 8005660:	d005      	beq.n	800566e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005666:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800566a:	2b00      	cmp	r3, #0
 800566c:	d054      	beq.n	8005718 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 f816 	bl	80066a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b40      	cmp	r3, #64	; 0x40
 8005680:	d146      	bne.n	8005710 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800569c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1d9      	bne.n	8005682 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d017      	beq.n	8005708 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056de:	4a15      	ldr	r2, [pc, #84]	; (8005734 <HAL_UART_IRQHandler+0x2c0>)
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fc fdd8 	bl	800229e <HAL_DMA_Abort_IT>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d019      	beq.n	8005728 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005702:	4610      	mov	r0, r2
 8005704:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005706:	e00f      	b.n	8005728 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f9e1 	bl	8005ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570e:	e00b      	b.n	8005728 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f9dd 	bl	8005ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005716:	e007      	b.n	8005728 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f9d9 	bl	8005ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005726:	e1bf      	b.n	8005aa8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	bf00      	nop
    return;
 800572a:	e1bd      	b.n	8005aa8 <HAL_UART_IRQHandler+0x634>
 800572c:	10000001 	.word	0x10000001
 8005730:	04000120 	.word	0x04000120
 8005734:	0800676d 	.word	0x0800676d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800573c:	2b01      	cmp	r3, #1
 800573e:	f040 8153 	bne.w	80059e8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 814c 	beq.w	80059e8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8145 	beq.w	80059e8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2210      	movs	r2, #16
 8005764:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	f040 80bb 	bne.w	80058ec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 818f 	beq.w	8005aac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005794:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005798:	429a      	cmp	r2, r3
 800579a:	f080 8187 	bcs.w	8005aac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 8087 	bne.w	80058ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1da      	bne.n	80057bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800582a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800582e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005832:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800583c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e1      	bne.n	8005806 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3308      	adds	r3, #8
 8005862:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005866:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005868:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800586c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e3      	bne.n	8005842 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005898:	f023 0310 	bic.w	r3, r3, #16
 800589c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e4      	bne.n	8005888 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fc fc8e 	bl	80021e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f8fd 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058ea:	e0df      	b.n	8005aac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80d1 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800590e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80cc 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800592c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800593a:	647b      	str	r3, [r7, #68]	; 0x44
 800593c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e4      	bne.n	8005918 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	623b      	str	r3, [r7, #32]
   return(result);
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005976:	633a      	str	r2, [r7, #48]	; 0x30
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800597c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e1      	bne.n	800594e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0310 	bic.w	r3, r3, #16
 80059b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	69b9      	ldr	r1, [r7, #24]
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	617b      	str	r3, [r7, #20]
   return(result);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e4      	bne.n	800599e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f87f 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059e6:	e063      	b.n	8005ab0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00e      	beq.n	8005a12 <HAL_UART_IRQHandler+0x59e>
 80059f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 fc14 	bl	8007238 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a10:	e051      	b.n	8005ab6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d014      	beq.n	8005a48 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d105      	bne.n	8005a36 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d03a      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
    }
    return;
 8005a46:	e035      	b.n	8005ab4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <HAL_UART_IRQHandler+0x5f4>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fe99 	bl	8006798 <UART_EndTransmit_IT>
    return;
 8005a66:	e026      	b.n	8005ab6 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HAL_UART_IRQHandler+0x614>
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 fbed 	bl	8007260 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a86:	e016      	b.n	8005ab6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x642>
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da0c      	bge.n	8005ab6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 fbd5 	bl	800724c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aa2:	e008      	b.n	8005ab6 <HAL_UART_IRQHandler+0x642>
      return;
 8005aa4:	bf00      	nop
 8005aa6:	e006      	b.n	8005ab6 <HAL_UART_IRQHandler+0x642>
    return;
 8005aa8:	bf00      	nop
 8005aaa:	e004      	b.n	8005ab6 <HAL_UART_IRQHandler+0x642>
      return;
 8005aac:	bf00      	nop
 8005aae:	e002      	b.n	8005ab6 <HAL_UART_IRQHandler+0x642>
      return;
 8005ab0:	bf00      	nop
 8005ab2:	e000      	b.n	8005ab6 <HAL_UART_IRQHandler+0x642>
    return;
 8005ab4:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ab6:	37e8      	adds	r7, #232	; 0xe8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b00:	b08c      	sub	sp, #48	; 0x30
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4baa      	ldr	r3, [pc, #680]	; (8005dd4 <UART_SetConfig+0x2d8>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a9f      	ldr	r2, [pc, #636]	; (8005dd8 <UART_SetConfig+0x2dc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b64:	4313      	orrs	r3, r2
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	f023 010f 	bic.w	r1, r3, #15
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a90      	ldr	r2, [pc, #576]	; (8005ddc <UART_SetConfig+0x2e0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d125      	bne.n	8005bec <UART_SetConfig+0xf0>
 8005ba0:	4b8f      	ldr	r3, [pc, #572]	; (8005de0 <UART_SetConfig+0x2e4>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d81a      	bhi.n	8005be4 <UART_SetConfig+0xe8>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <UART_SetConfig+0xb8>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bd5 	.word	0x08005bd5
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bdd 	.word	0x08005bdd
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bca:	e116      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	e112      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e10e      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e10a      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bea:	e106      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a7c      	ldr	r2, [pc, #496]	; (8005de4 <UART_SetConfig+0x2e8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d138      	bne.n	8005c68 <UART_SetConfig+0x16c>
 8005bf6:	4b7a      	ldr	r3, [pc, #488]	; (8005de0 <UART_SetConfig+0x2e4>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f003 030c 	and.w	r3, r3, #12
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d82d      	bhi.n	8005c60 <UART_SetConfig+0x164>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x110>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c41 	.word	0x08005c41
 8005c10:	08005c61 	.word	0x08005c61
 8005c14:	08005c61 	.word	0x08005c61
 8005c18:	08005c61 	.word	0x08005c61
 8005c1c:	08005c51 	.word	0x08005c51
 8005c20:	08005c61 	.word	0x08005c61
 8005c24:	08005c61 	.word	0x08005c61
 8005c28:	08005c61 	.word	0x08005c61
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c61 	.word	0x08005c61
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	08005c61 	.word	0x08005c61
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c46:	e0d8      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c4e:	e0d4      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c56:	e0d0      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c5e:	e0cc      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c66:	e0c8      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a5e      	ldr	r2, [pc, #376]	; (8005de8 <UART_SetConfig+0x2ec>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d125      	bne.n	8005cbe <UART_SetConfig+0x1c2>
 8005c72:	4b5b      	ldr	r3, [pc, #364]	; (8005de0 <UART_SetConfig+0x2e4>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c7c:	2b30      	cmp	r3, #48	; 0x30
 8005c7e:	d016      	beq.n	8005cae <UART_SetConfig+0x1b2>
 8005c80:	2b30      	cmp	r3, #48	; 0x30
 8005c82:	d818      	bhi.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d00a      	beq.n	8005c9e <UART_SetConfig+0x1a2>
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d814      	bhi.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <UART_SetConfig+0x19a>
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d008      	beq.n	8005ca6 <UART_SetConfig+0x1aa>
 8005c94:	e00f      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9c:	e0ad      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca4:	e0a9      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005ca6:	2304      	movs	r3, #4
 8005ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cac:	e0a5      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005cae:	2308      	movs	r3, #8
 8005cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb4:	e0a1      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cbc:	e09d      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a4a      	ldr	r2, [pc, #296]	; (8005dec <UART_SetConfig+0x2f0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d125      	bne.n	8005d14 <UART_SetConfig+0x218>
 8005cc8:	4b45      	ldr	r3, [pc, #276]	; (8005de0 <UART_SetConfig+0x2e4>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8005cd4:	d016      	beq.n	8005d04 <UART_SetConfig+0x208>
 8005cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005cd8:	d818      	bhi.n	8005d0c <UART_SetConfig+0x210>
 8005cda:	2b80      	cmp	r3, #128	; 0x80
 8005cdc:	d00a      	beq.n	8005cf4 <UART_SetConfig+0x1f8>
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d814      	bhi.n	8005d0c <UART_SetConfig+0x210>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <UART_SetConfig+0x1f0>
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d008      	beq.n	8005cfc <UART_SetConfig+0x200>
 8005cea:	e00f      	b.n	8005d0c <UART_SetConfig+0x210>
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	e082      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e07e      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d02:	e07a      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005d04:	2308      	movs	r3, #8
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0a:	e076      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d12:	e072      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a35      	ldr	r2, [pc, #212]	; (8005df0 <UART_SetConfig+0x2f4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d12a      	bne.n	8005d74 <UART_SetConfig+0x278>
 8005d1e:	4b30      	ldr	r3, [pc, #192]	; (8005de0 <UART_SetConfig+0x2e4>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d2c:	d01a      	beq.n	8005d64 <UART_SetConfig+0x268>
 8005d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d32:	d81b      	bhi.n	8005d6c <UART_SetConfig+0x270>
 8005d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d38:	d00c      	beq.n	8005d54 <UART_SetConfig+0x258>
 8005d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d3e:	d815      	bhi.n	8005d6c <UART_SetConfig+0x270>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <UART_SetConfig+0x250>
 8005d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d48:	d008      	beq.n	8005d5c <UART_SetConfig+0x260>
 8005d4a:	e00f      	b.n	8005d6c <UART_SetConfig+0x270>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d52:	e052      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005d54:	2302      	movs	r3, #2
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5a:	e04e      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d62:	e04a      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005d64:	2308      	movs	r3, #8
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6a:	e046      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d72:	e042      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <UART_SetConfig+0x2dc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d13a      	bne.n	8005df4 <UART_SetConfig+0x2f8>
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <UART_SetConfig+0x2e4>)
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d8c:	d01a      	beq.n	8005dc4 <UART_SetConfig+0x2c8>
 8005d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d92:	d81b      	bhi.n	8005dcc <UART_SetConfig+0x2d0>
 8005d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d98:	d00c      	beq.n	8005db4 <UART_SetConfig+0x2b8>
 8005d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d9e:	d815      	bhi.n	8005dcc <UART_SetConfig+0x2d0>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <UART_SetConfig+0x2b0>
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da8:	d008      	beq.n	8005dbc <UART_SetConfig+0x2c0>
 8005daa:	e00f      	b.n	8005dcc <UART_SetConfig+0x2d0>
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db2:	e022      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005db4:	2302      	movs	r3, #2
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dba:	e01e      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc2:	e01a      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dca:	e016      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd2:	e012      	b.n	8005dfa <UART_SetConfig+0x2fe>
 8005dd4:	cfff69f3 	.word	0xcfff69f3
 8005dd8:	40008000 	.word	0x40008000
 8005ddc:	40013800 	.word	0x40013800
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40004400 	.word	0x40004400
 8005de8:	40004800 	.word	0x40004800
 8005dec:	40004c00 	.word	0x40004c00
 8005df0:	40005000 	.word	0x40005000
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4aae      	ldr	r2, [pc, #696]	; (80060b8 <UART_SetConfig+0x5bc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	f040 8097 	bne.w	8005f34 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d823      	bhi.n	8005e56 <UART_SetConfig+0x35a>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <UART_SetConfig+0x318>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e57 	.word	0x08005e57
 8005e1c:	08005e41 	.word	0x08005e41
 8005e20:	08005e57 	.word	0x08005e57
 8005e24:	08005e47 	.word	0x08005e47
 8005e28:	08005e57 	.word	0x08005e57
 8005e2c:	08005e57 	.word	0x08005e57
 8005e30:	08005e57 	.word	0x08005e57
 8005e34:	08005e4f 	.word	0x08005e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e38:	f7fd ff56 	bl	8003ce8 <HAL_RCC_GetPCLK1Freq>
 8005e3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e3e:	e010      	b.n	8005e62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e40:	4b9e      	ldr	r3, [pc, #632]	; (80060bc <UART_SetConfig+0x5c0>)
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e44:	e00d      	b.n	8005e62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e46:	f7fd feb7 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8005e4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e4c:	e009      	b.n	8005e62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e54:	e005      	b.n	8005e62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 8130 	beq.w	80060ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	4a94      	ldr	r2, [pc, #592]	; (80060c0 <UART_SetConfig+0x5c4>)
 8005e70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	4413      	add	r3, r2
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d305      	bcc.n	8005e9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d903      	bls.n	8005ea2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ea0:	e113      	b.n	80060ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	60bb      	str	r3, [r7, #8]
 8005ea8:	60fa      	str	r2, [r7, #12]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	4a84      	ldr	r2, [pc, #528]	; (80060c0 <UART_SetConfig+0x5c4>)
 8005eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	603b      	str	r3, [r7, #0]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ec4:	f7fa fe88 	bl	8000bd8 <__aeabi_uldivmod>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	020b      	lsls	r3, r1, #8
 8005eda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ede:	0202      	lsls	r2, r0, #8
 8005ee0:	6979      	ldr	r1, [r7, #20]
 8005ee2:	6849      	ldr	r1, [r1, #4]
 8005ee4:	0849      	lsrs	r1, r1, #1
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	460c      	mov	r4, r1
 8005eea:	4605      	mov	r5, r0
 8005eec:	eb12 0804 	adds.w	r8, r2, r4
 8005ef0:	eb43 0905 	adc.w	r9, r3, r5
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	469a      	mov	sl, r3
 8005efc:	4693      	mov	fp, r2
 8005efe:	4652      	mov	r2, sl
 8005f00:	465b      	mov	r3, fp
 8005f02:	4640      	mov	r0, r8
 8005f04:	4649      	mov	r1, r9
 8005f06:	f7fa fe67 	bl	8000bd8 <__aeabi_uldivmod>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4613      	mov	r3, r2
 8005f10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f18:	d308      	bcc.n	8005f2c <UART_SetConfig+0x430>
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f20:	d204      	bcs.n	8005f2c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	e0ce      	b.n	80060ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f32:	e0ca      	b.n	80060ca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3c:	d166      	bne.n	800600c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005f3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d827      	bhi.n	8005f96 <UART_SetConfig+0x49a>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <UART_SetConfig+0x450>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	08005f97 	.word	0x08005f97
 8005f5c:	08005f87 	.word	0x08005f87
 8005f60:	08005f97 	.word	0x08005f97
 8005f64:	08005f97 	.word	0x08005f97
 8005f68:	08005f97 	.word	0x08005f97
 8005f6c:	08005f8f 	.word	0x08005f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f70:	f7fd feba 	bl	8003ce8 <HAL_RCC_GetPCLK1Freq>
 8005f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f76:	e014      	b.n	8005fa2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f78:	f7fd fecc 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8005f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f7e:	e010      	b.n	8005fa2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f80:	4b4e      	ldr	r3, [pc, #312]	; (80060bc <UART_SetConfig+0x5c0>)
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f84:	e00d      	b.n	8005fa2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f86:	f7fd fe17 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8005f8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f8c:	e009      	b.n	8005fa2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f94:	e005      	b.n	8005fa2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8090 	beq.w	80060ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	4a44      	ldr	r2, [pc, #272]	; (80060c0 <UART_SetConfig+0x5c4>)
 8005fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fbc:	005a      	lsls	r2, r3, #1
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	441a      	add	r2, r3
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	2b0f      	cmp	r3, #15
 8005fd4:	d916      	bls.n	8006004 <UART_SetConfig+0x508>
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fdc:	d212      	bcs.n	8006004 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f023 030f 	bic.w	r3, r3, #15
 8005fe6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	8bfb      	ldrh	r3, [r7, #30]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	8bfa      	ldrh	r2, [r7, #30]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	e062      	b.n	80060ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800600a:	e05e      	b.n	80060ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800600c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006010:	2b08      	cmp	r3, #8
 8006012:	d828      	bhi.n	8006066 <UART_SetConfig+0x56a>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x520>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006041 	.word	0x08006041
 8006020:	08006049 	.word	0x08006049
 8006024:	08006051 	.word	0x08006051
 8006028:	08006067 	.word	0x08006067
 800602c:	08006057 	.word	0x08006057
 8006030:	08006067 	.word	0x08006067
 8006034:	08006067 	.word	0x08006067
 8006038:	08006067 	.word	0x08006067
 800603c:	0800605f 	.word	0x0800605f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006040:	f7fd fe52 	bl	8003ce8 <HAL_RCC_GetPCLK1Freq>
 8006044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006046:	e014      	b.n	8006072 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006048:	f7fd fe64 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 800604c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800604e:	e010      	b.n	8006072 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <UART_SetConfig+0x5c0>)
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006054:	e00d      	b.n	8006072 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006056:	f7fd fdaf 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 800605a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800605c:	e009      	b.n	8006072 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006064:	e005      	b.n	8006072 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006070:	bf00      	nop
    }

    if (pclk != 0U)
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	2b00      	cmp	r3, #0
 8006076:	d028      	beq.n	80060ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <UART_SetConfig+0x5c4>)
 800607e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006082:	461a      	mov	r2, r3
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	fbb3 f2f2 	udiv	r2, r3, r2
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	441a      	add	r2, r3
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	fbb2 f3f3 	udiv	r3, r2, r3
 800609a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	2b0f      	cmp	r3, #15
 80060a0:	d910      	bls.n	80060c4 <UART_SetConfig+0x5c8>
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a8:	d20c      	bcs.n	80060c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60da      	str	r2, [r3, #12]
 80060b4:	e009      	b.n	80060ca <UART_SetConfig+0x5ce>
 80060b6:	bf00      	nop
 80060b8:	40008000 	.word	0x40008000
 80060bc:	00f42400 	.word	0x00f42400
 80060c0:	0800a050 	.word	0x0800a050
      }
      else
      {
        ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2200      	movs	r2, #0
 80060e4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80060e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3730      	adds	r7, #48	; 0x30
 80060ee:	46bd      	mov	sp, r7
 80060f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080060f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01a      	beq.n	800620a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f2:	d10a      	bne.n	800620a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b098      	sub	sp, #96	; 0x60
 800623c:	af02      	add	r7, sp, #8
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006248:	f7fb feb0 	bl	8001fac <HAL_GetTick>
 800624c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b08      	cmp	r3, #8
 800625a:	d12f      	bne.n	80062bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800625c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006264:	2200      	movs	r2, #0
 8006266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f88e 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d022      	beq.n	80062bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628a:	653b      	str	r3, [r7, #80]	; 0x50
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006294:	647b      	str	r3, [r7, #68]	; 0x44
 8006296:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800629a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e6      	bne.n	8006276 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e063      	b.n	8006384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d149      	bne.n	800635e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d2:	2200      	movs	r2, #0
 80062d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f857 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d03c      	beq.n	800635e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	623b      	str	r3, [r7, #32]
   return(result);
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006302:	633b      	str	r3, [r7, #48]	; 0x30
 8006304:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e6      	bne.n	80062e4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	60fb      	str	r3, [r7, #12]
   return(result);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006336:	61fa      	str	r2, [r7, #28]
 8006338:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	69b9      	ldr	r1, [r7, #24]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	617b      	str	r3, [r7, #20]
   return(result);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e5      	bne.n	8006316 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e012      	b.n	8006384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3758      	adds	r7, #88	; 0x58
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639c:	e049      	b.n	8006432 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d045      	beq.n	8006432 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a6:	f7fb fe01 	bl	8001fac <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <UART_WaitOnFlagUntilTimeout+0x30>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e048      	b.n	8006452 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d031      	beq.n	8006432 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d110      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2208      	movs	r2, #8
 80063e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f95b 	bl	80066a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2208      	movs	r2, #8
 80063ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e029      	b.n	8006452 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640c:	d111      	bne.n	8006432 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f941 	bl	80066a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2220      	movs	r2, #32
 8006422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e00f      	b.n	8006452 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69da      	ldr	r2, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4013      	ands	r3, r2
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	429a      	cmp	r2, r3
 800644e:	d0a6      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800645c:	b480      	push	{r7}
 800645e:	b0a3      	sub	sp, #140	; 0x8c
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	4613      	mov	r3, r2
 8006468:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648e:	d10e      	bne.n	80064ae <UART_Start_Receive_IT+0x52>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <UART_Start_Receive_IT+0x48>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800649e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064a2:	e02d      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	22ff      	movs	r2, #255	; 0xff
 80064a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ac:	e028      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10d      	bne.n	80064d2 <UART_Start_Receive_IT+0x76>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <UART_Start_Receive_IT+0x6c>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064c6:	e01b      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	227f      	movs	r2, #127	; 0x7f
 80064cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064d0:	e016      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064da:	d10d      	bne.n	80064f8 <UART_Start_Receive_IT+0x9c>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <UART_Start_Receive_IT+0x92>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	227f      	movs	r2, #127	; 0x7f
 80064e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ec:	e008      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	223f      	movs	r2, #63	; 0x3f
 80064f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064f6:	e003      	b.n	8006500 <UART_Start_Receive_IT+0xa4>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2222      	movs	r2, #34	; 0x22
 800650c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3308      	adds	r3, #8
 8006530:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006534:	673a      	str	r2, [r7, #112]	; 0x70
 8006536:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800653a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e3      	bne.n	8006510 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006550:	d14f      	bne.n	80065f2 <UART_Start_Receive_IT+0x196>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006558:	88fa      	ldrh	r2, [r7, #6]
 800655a:	429a      	cmp	r2, r3
 800655c:	d349      	bcc.n	80065f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006566:	d107      	bne.n	8006578 <UART_Start_Receive_IT+0x11c>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d103      	bne.n	8006578 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a47      	ldr	r2, [pc, #284]	; (8006690 <UART_Start_Receive_IT+0x234>)
 8006574:	675a      	str	r2, [r3, #116]	; 0x74
 8006576:	e002      	b.n	800657e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a46      	ldr	r2, [pc, #280]	; (8006694 <UART_Start_Receive_IT+0x238>)
 800657c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01a      	beq.n	80065bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e4      	bne.n	8006586 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3308      	adds	r3, #8
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3308      	adds	r3, #8
 80065da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80065de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e5      	bne.n	80065bc <UART_Start_Receive_IT+0x160>
 80065f0:	e046      	b.n	8006680 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fa:	d107      	bne.n	800660c <UART_Start_Receive_IT+0x1b0>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4a24      	ldr	r2, [pc, #144]	; (8006698 <UART_Start_Receive_IT+0x23c>)
 8006608:	675a      	str	r2, [r3, #116]	; 0x74
 800660a:	e002      	b.n	8006612 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a23      	ldr	r2, [pc, #140]	; (800669c <UART_Start_Receive_IT+0x240>)
 8006610:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d019      	beq.n	800664e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800662e:	677b      	str	r3, [r7, #116]	; 0x74
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
 800663a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_Start_Receive_IT+0x1be>
 800664c:	e018      	b.n	8006680 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	613b      	str	r3, [r7, #16]
   return(result);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f043 0320 	orr.w	r3, r3, #32
 8006662:	67bb      	str	r3, [r7, #120]	; 0x78
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800666c:	623b      	str	r3, [r7, #32]
 800666e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	69f9      	ldr	r1, [r7, #28]
 8006672:	6a3a      	ldr	r2, [r7, #32]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	61bb      	str	r3, [r7, #24]
   return(result);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e6      	bne.n	800664e <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	378c      	adds	r7, #140	; 0x8c
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	08006ecd 	.word	0x08006ecd
 8006694:	08006b69 	.word	0x08006b69
 8006698:	080069ad 	.word	0x080069ad
 800669c:	080067f1 	.word	0x080067f1

080066a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b095      	sub	sp, #84	; 0x54
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40
 80066c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e6      	bne.n	80066a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3308      	adds	r3, #8
 80066fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e3      	bne.n	80066da <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d118      	bne.n	800674c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	60bb      	str	r3, [r7, #8]
   return(result);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f023 0310 	bic.w	r3, r3, #16
 800672e:	647b      	str	r3, [r7, #68]	; 0x44
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6979      	ldr	r1, [r7, #20]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	613b      	str	r3, [r7, #16]
   return(result);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e6      	bne.n	800671a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006760:	bf00      	nop
 8006762:	3754      	adds	r7, #84	; 0x54
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff f9a0 	bl	8005ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6979      	ldr	r1, [r7, #20]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	613b      	str	r3, [r7, #16]
   return(result);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e6      	bne.n	80067a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff f96b 	bl	8005abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067e6:	bf00      	nop
 80067e8:	3720      	adds	r7, #32
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b09c      	sub	sp, #112	; 0x70
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006808:	2b22      	cmp	r3, #34	; 0x22
 800680a:	f040 80be 	bne.w	800698a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006814:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006818:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800681c:	b2d9      	uxtb	r1, r3
 800681e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	400a      	ands	r2, r1
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006850:	b29b      	uxth	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 80a3 	bne.w	800699e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686c:	66bb      	str	r3, [r7, #104]	; 0x68
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006876:	65bb      	str	r3, [r7, #88]	; 0x58
 8006878:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800687c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e6      	bne.n	8006858 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	667b      	str	r3, [r7, #100]	; 0x64
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068aa:	647a      	str	r2, [r7, #68]	; 0x44
 80068ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a34      	ldr	r2, [pc, #208]	; (80069a8 <UART_RxISR_8BIT+0x1b8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d01f      	beq.n	800691c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d018      	beq.n	800691c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	623b      	str	r3, [r7, #32]
   return(result);
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006908:	633b      	str	r3, [r7, #48]	; 0x30
 800690a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800690e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e6      	bne.n	80068ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d12e      	bne.n	8006982 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	60fb      	str	r3, [r7, #12]
   return(result);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	617b      	str	r3, [r7, #20]
   return(result);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e6      	bne.n	800692a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b10      	cmp	r3, #16
 8006968:	d103      	bne.n	8006972 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff f8b2 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006980:	e00d      	b.n	800699e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fa fb40 	bl	8001008 <HAL_UART_RxCpltCallback>
}
 8006988:	e009      	b.n	800699e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	8b1b      	ldrh	r3, [r3, #24]
 8006990:	b29a      	uxth	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0208 	orr.w	r2, r2, #8
 800699a:	b292      	uxth	r2, r2
 800699c:	831a      	strh	r2, [r3, #24]
}
 800699e:	bf00      	nop
 80069a0:	3770      	adds	r7, #112	; 0x70
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40008000 	.word	0x40008000

080069ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b09c      	sub	sp, #112	; 0x70
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c4:	2b22      	cmp	r3, #34	; 0x22
 80069c6:	f040 80be 	bne.w	8006b46 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80069de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069e2:	4013      	ands	r3, r2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ee:	1c9a      	adds	r2, r3, #2
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 80a3 	bne.w	8006b5a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a28:	667b      	str	r3, [r7, #100]	; 0x64
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a32:	657b      	str	r3, [r7, #84]	; 0x54
 8006a34:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e6      	bne.n	8006a14 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a66:	643a      	str	r2, [r7, #64]	; 0x40
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e5      	bne.n	8006a46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a34      	ldr	r2, [pc, #208]	; (8006b64 <UART_RxISR_16BIT+0x1b8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d01f      	beq.n	8006ad8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d018      	beq.n	8006ad8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d12e      	bne.n	8006b3e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6979      	ldr	r1, [r7, #20]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	613b      	str	r3, [r7, #16]
   return(result);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e6      	bne.n	8006ae6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d103      	bne.n	8006b2e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fe ffd4 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b3c:	e00d      	b.n	8006b5a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fa fa62 	bl	8001008 <HAL_UART_RxCpltCallback>
}
 8006b44:	e009      	b.n	8006b5a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	8b1b      	ldrh	r3, [r3, #24]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0208 	orr.w	r2, r2, #8
 8006b56:	b292      	uxth	r2, r2
 8006b58:	831a      	strh	r2, [r3, #24]
}
 8006b5a:	bf00      	nop
 8006b5c:	3770      	adds	r7, #112	; 0x70
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40008000 	.word	0x40008000

08006b68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b0ac      	sub	sp, #176	; 0xb0
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b76:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9e:	2b22      	cmp	r3, #34	; 0x22
 8006ba0:	f040 8182 	bne.w	8006ea8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006baa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bae:	e125      	b.n	8006dfc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bb6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006bbe:	b2d9      	uxtb	r1, r3
 8006bc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bca:	400a      	ands	r2, r1
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d053      	beq.n	8006caa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d011      	beq.n	8006c32 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00b      	beq.n	8006c32 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c28:	f043 0201 	orr.w	r2, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d011      	beq.n	8006c62 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c58:	f043 0204 	orr.w	r2, r3, #4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c66:	f003 0304 	and.w	r3, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d011      	beq.n	8006c92 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00b      	beq.n	8006c92 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	f043 0202 	orr.w	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d006      	beq.n	8006caa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7fe ff17 	bl	8005ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f040 80a2 	bne.w	8006dfc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cdc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006ce0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e4      	bne.n	8006cb8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3308      	adds	r3, #8
 8006d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d16:	66ba      	str	r2, [r7, #104]	; 0x68
 8006d18:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006d1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1e1      	bne.n	8006cee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a60      	ldr	r2, [pc, #384]	; (8006ec4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d021      	beq.n	8006d8c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01a      	beq.n	8006d8c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d78:	657b      	str	r3, [r7, #84]	; 0x54
 8006d7a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e4      	bne.n	8006d56 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d130      	bne.n	8006df6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	f023 0310 	bic.w	r3, r3, #16
 8006dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e4      	bne.n	8006d9a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b10      	cmp	r3, #16
 8006ddc:	d103      	bne.n	8006de6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2210      	movs	r2, #16
 8006de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fe fe78 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
 8006df4:	e002      	b.n	8006dfc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fa f906 	bl	8001008 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006dfc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d006      	beq.n	8006e12 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f47f aecf 	bne.w	8006bb0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d04b      	beq.n	8006ebc <UART_RxISR_8BIT_FIFOEN+0x354>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d244      	bcs.n	8006ebc <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e3      	bne.n	8006e32 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006e6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f043 0320 	orr.w	r3, r3, #32
 8006e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e4      	bne.n	8006e70 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ea6:	e009      	b.n	8006ebc <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	8b1b      	ldrh	r3, [r3, #24]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0208 	orr.w	r2, r2, #8
 8006eb8:	b292      	uxth	r2, r2
 8006eba:	831a      	strh	r2, [r3, #24]
}
 8006ebc:	bf00      	nop
 8006ebe:	37b0      	adds	r7, #176	; 0xb0
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40008000 	.word	0x40008000
 8006ec8:	080067f1 	.word	0x080067f1

08006ecc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b0ae      	sub	sp, #184	; 0xb8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eda:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f02:	2b22      	cmp	r3, #34	; 0x22
 8006f04:	f040 8186 	bne.w	8007214 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f12:	e129      	b.n	8007168 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f1a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f26:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006f2a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006f2e:	4013      	ands	r3, r2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d053      	beq.n	8007012 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d011      	beq.n	8006f9a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2201      	movs	r2, #1
 8006f88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f90:	f043 0201 	orr.w	r2, r3, #1
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d011      	beq.n	8006fca <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00b      	beq.n	8006fca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	f043 0204 	orr.w	r2, r3, #4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d011      	beq.n	8006ffa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00b      	beq.n	8006ffa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff0:	f043 0202 	orr.w	r2, r3, #2
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007000:	2b00      	cmp	r3, #0
 8007002:	d006      	beq.n	8007012 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fe fd63 	bl	8005ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	f040 80a4 	bne.w	8007168 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800702e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007046:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800704a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e2      	bne.n	8007020 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3308      	adds	r3, #8
 8007060:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800706a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800706c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3308      	adds	r3, #8
 800707e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007082:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007084:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007088:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e1      	bne.n	800705a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a60      	ldr	r2, [pc, #384]	; (8007230 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d021      	beq.n	80070f8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01a      	beq.n	80070f8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e4      	bne.n	80070c2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d130      	bne.n	8007162 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007116:	f023 0310 	bic.w	r3, r3, #16
 800711a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007128:	647b      	str	r3, [r7, #68]	; 0x44
 800712a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800712e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e4      	bne.n	8007106 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	2b10      	cmp	r3, #16
 8007148:	d103      	bne.n	8007152 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2210      	movs	r2, #16
 8007150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fe fcc2 	bl	8005ae4 <HAL_UARTEx_RxEventCallback>
 8007160:	e002      	b.n	8007168 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7f9 ff50 	bl	8001008 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007168:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800716c:	2b00      	cmp	r3, #0
 800716e:	d006      	beq.n	800717e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007170:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	f47f aecb 	bne.w	8006f14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007184:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007188:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800718c:	2b00      	cmp	r3, #0
 800718e:	d04b      	beq.n	8007228 <UART_RxISR_16BIT_FIFOEN+0x35c>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007196:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800719a:	429a      	cmp	r2, r3
 800719c:	d244      	bcs.n	8007228 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3308      	adds	r3, #8
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	623b      	str	r3, [r7, #32]
   return(result);
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80071c2:	633a      	str	r2, [r7, #48]	; 0x30
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e3      	bne.n	800719e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a16      	ldr	r2, [pc, #88]	; (8007234 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80071da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f043 0320 	orr.w	r3, r3, #32
 80071f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	69b9      	ldr	r1, [r7, #24]
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	617b      	str	r3, [r7, #20]
   return(result);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e4      	bne.n	80071dc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007212:	e009      	b.n	8007228 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	8b1b      	ldrh	r3, [r3, #24]
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0208 	orr.w	r2, r2, #8
 8007224:	b292      	uxth	r2, r2
 8007226:	831a      	strh	r2, [r3, #24]
}
 8007228:	bf00      	nop
 800722a:	37b8      	adds	r7, #184	; 0xb8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40008000 	.word	0x40008000
 8007234:	080069ad 	.word	0x080069ad

08007238 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_UARTEx_DisableFifoMode+0x16>
 8007286:	2302      	movs	r3, #2
 8007288:	e027      	b.n	80072da <HAL_UARTEx_DisableFifoMode+0x66>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2224      	movs	r2, #36	; 0x24
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e02d      	b.n	800735a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2224      	movs	r2, #36	; 0x24
 800730a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0201 	bic.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f850 	bl	80073e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007376:	2302      	movs	r3, #2
 8007378:	e02d      	b.n	80073d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2224      	movs	r2, #36	; 0x24
 8007386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f812 	bl	80073e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d108      	bne.n	8007402 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007400:	e031      	b.n	8007466 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007402:	2308      	movs	r3, #8
 8007404:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007406:	2308      	movs	r3, #8
 8007408:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	0e5b      	lsrs	r3, r3, #25
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	0f5b      	lsrs	r3, r3, #29
 8007422:	b2db      	uxtb	r3, r3
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	7b3a      	ldrb	r2, [r7, #12]
 800742e:	4911      	ldr	r1, [pc, #68]	; (8007474 <UARTEx_SetNbDataToProcess+0x94>)
 8007430:	5c8a      	ldrb	r2, [r1, r2]
 8007432:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007436:	7b3a      	ldrb	r2, [r7, #12]
 8007438:	490f      	ldr	r1, [pc, #60]	; (8007478 <UARTEx_SetNbDataToProcess+0x98>)
 800743a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800743c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007440:	b29a      	uxth	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	7b7a      	ldrb	r2, [r7, #13]
 800744c:	4909      	ldr	r1, [pc, #36]	; (8007474 <UARTEx_SetNbDataToProcess+0x94>)
 800744e:	5c8a      	ldrb	r2, [r1, r2]
 8007450:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007454:	7b7a      	ldrb	r2, [r7, #13]
 8007456:	4908      	ldr	r1, [pc, #32]	; (8007478 <UARTEx_SetNbDataToProcess+0x98>)
 8007458:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800745a:	fb93 f3f2 	sdiv	r3, r3, r2
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	0800a068 	.word	0x0800a068
 8007478:	0800a070 	.word	0x0800a070

0800747c <atoi>:
 800747c:	220a      	movs	r2, #10
 800747e:	2100      	movs	r1, #0
 8007480:	f000 b882 	b.w	8007588 <strtol>

08007484 <_strtol_l.constprop.0>:
 8007484:	2b01      	cmp	r3, #1
 8007486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748a:	d001      	beq.n	8007490 <_strtol_l.constprop.0+0xc>
 800748c:	2b24      	cmp	r3, #36	; 0x24
 800748e:	d906      	bls.n	800749e <_strtol_l.constprop.0+0x1a>
 8007490:	f000 fe5c 	bl	800814c <__errno>
 8007494:	2316      	movs	r3, #22
 8007496:	6003      	str	r3, [r0, #0]
 8007498:	2000      	movs	r0, #0
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007584 <_strtol_l.constprop.0+0x100>
 80074a2:	460d      	mov	r5, r1
 80074a4:	462e      	mov	r6, r5
 80074a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074aa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80074ae:	f017 0708 	ands.w	r7, r7, #8
 80074b2:	d1f7      	bne.n	80074a4 <_strtol_l.constprop.0+0x20>
 80074b4:	2c2d      	cmp	r4, #45	; 0x2d
 80074b6:	d132      	bne.n	800751e <_strtol_l.constprop.0+0x9a>
 80074b8:	782c      	ldrb	r4, [r5, #0]
 80074ba:	2701      	movs	r7, #1
 80074bc:	1cb5      	adds	r5, r6, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d05b      	beq.n	800757a <_strtol_l.constprop.0+0xf6>
 80074c2:	2b10      	cmp	r3, #16
 80074c4:	d109      	bne.n	80074da <_strtol_l.constprop.0+0x56>
 80074c6:	2c30      	cmp	r4, #48	; 0x30
 80074c8:	d107      	bne.n	80074da <_strtol_l.constprop.0+0x56>
 80074ca:	782c      	ldrb	r4, [r5, #0]
 80074cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80074d0:	2c58      	cmp	r4, #88	; 0x58
 80074d2:	d14d      	bne.n	8007570 <_strtol_l.constprop.0+0xec>
 80074d4:	786c      	ldrb	r4, [r5, #1]
 80074d6:	2310      	movs	r3, #16
 80074d8:	3502      	adds	r5, #2
 80074da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80074de:	f108 38ff 	add.w	r8, r8, #4294967295
 80074e2:	f04f 0e00 	mov.w	lr, #0
 80074e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80074ea:	4676      	mov	r6, lr
 80074ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80074f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80074f4:	f1bc 0f09 	cmp.w	ip, #9
 80074f8:	d816      	bhi.n	8007528 <_strtol_l.constprop.0+0xa4>
 80074fa:	4664      	mov	r4, ip
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	dd24      	ble.n	800754a <_strtol_l.constprop.0+0xc6>
 8007500:	f1be 3fff 	cmp.w	lr, #4294967295
 8007504:	d008      	beq.n	8007518 <_strtol_l.constprop.0+0x94>
 8007506:	45b1      	cmp	r9, r6
 8007508:	d31c      	bcc.n	8007544 <_strtol_l.constprop.0+0xc0>
 800750a:	d101      	bne.n	8007510 <_strtol_l.constprop.0+0x8c>
 800750c:	45a2      	cmp	sl, r4
 800750e:	db19      	blt.n	8007544 <_strtol_l.constprop.0+0xc0>
 8007510:	fb06 4603 	mla	r6, r6, r3, r4
 8007514:	f04f 0e01 	mov.w	lr, #1
 8007518:	f815 4b01 	ldrb.w	r4, [r5], #1
 800751c:	e7e8      	b.n	80074f0 <_strtol_l.constprop.0+0x6c>
 800751e:	2c2b      	cmp	r4, #43	; 0x2b
 8007520:	bf04      	itt	eq
 8007522:	782c      	ldrbeq	r4, [r5, #0]
 8007524:	1cb5      	addeq	r5, r6, #2
 8007526:	e7ca      	b.n	80074be <_strtol_l.constprop.0+0x3a>
 8007528:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800752c:	f1bc 0f19 	cmp.w	ip, #25
 8007530:	d801      	bhi.n	8007536 <_strtol_l.constprop.0+0xb2>
 8007532:	3c37      	subs	r4, #55	; 0x37
 8007534:	e7e2      	b.n	80074fc <_strtol_l.constprop.0+0x78>
 8007536:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800753a:	f1bc 0f19 	cmp.w	ip, #25
 800753e:	d804      	bhi.n	800754a <_strtol_l.constprop.0+0xc6>
 8007540:	3c57      	subs	r4, #87	; 0x57
 8007542:	e7db      	b.n	80074fc <_strtol_l.constprop.0+0x78>
 8007544:	f04f 3eff 	mov.w	lr, #4294967295
 8007548:	e7e6      	b.n	8007518 <_strtol_l.constprop.0+0x94>
 800754a:	f1be 3fff 	cmp.w	lr, #4294967295
 800754e:	d105      	bne.n	800755c <_strtol_l.constprop.0+0xd8>
 8007550:	2322      	movs	r3, #34	; 0x22
 8007552:	6003      	str	r3, [r0, #0]
 8007554:	4646      	mov	r6, r8
 8007556:	b942      	cbnz	r2, 800756a <_strtol_l.constprop.0+0xe6>
 8007558:	4630      	mov	r0, r6
 800755a:	e79e      	b.n	800749a <_strtol_l.constprop.0+0x16>
 800755c:	b107      	cbz	r7, 8007560 <_strtol_l.constprop.0+0xdc>
 800755e:	4276      	negs	r6, r6
 8007560:	2a00      	cmp	r2, #0
 8007562:	d0f9      	beq.n	8007558 <_strtol_l.constprop.0+0xd4>
 8007564:	f1be 0f00 	cmp.w	lr, #0
 8007568:	d000      	beq.n	800756c <_strtol_l.constprop.0+0xe8>
 800756a:	1e69      	subs	r1, r5, #1
 800756c:	6011      	str	r1, [r2, #0]
 800756e:	e7f3      	b.n	8007558 <_strtol_l.constprop.0+0xd4>
 8007570:	2430      	movs	r4, #48	; 0x30
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1b1      	bne.n	80074da <_strtol_l.constprop.0+0x56>
 8007576:	2308      	movs	r3, #8
 8007578:	e7af      	b.n	80074da <_strtol_l.constprop.0+0x56>
 800757a:	2c30      	cmp	r4, #48	; 0x30
 800757c:	d0a5      	beq.n	80074ca <_strtol_l.constprop.0+0x46>
 800757e:	230a      	movs	r3, #10
 8007580:	e7ab      	b.n	80074da <_strtol_l.constprop.0+0x56>
 8007582:	bf00      	nop
 8007584:	0800a079 	.word	0x0800a079

08007588 <strtol>:
 8007588:	4613      	mov	r3, r2
 800758a:	460a      	mov	r2, r1
 800758c:	4601      	mov	r1, r0
 800758e:	4802      	ldr	r0, [pc, #8]	; (8007598 <strtol+0x10>)
 8007590:	6800      	ldr	r0, [r0, #0]
 8007592:	f7ff bf77 	b.w	8007484 <_strtol_l.constprop.0>
 8007596:	bf00      	nop
 8007598:	20000064 	.word	0x20000064

0800759c <__cvt>:
 800759c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	ec55 4b10 	vmov	r4, r5, d0
 80075a4:	2d00      	cmp	r5, #0
 80075a6:	460e      	mov	r6, r1
 80075a8:	4619      	mov	r1, r3
 80075aa:	462b      	mov	r3, r5
 80075ac:	bfbb      	ittet	lt
 80075ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075b2:	461d      	movlt	r5, r3
 80075b4:	2300      	movge	r3, #0
 80075b6:	232d      	movlt	r3, #45	; 0x2d
 80075b8:	700b      	strb	r3, [r1, #0]
 80075ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075c0:	4691      	mov	r9, r2
 80075c2:	f023 0820 	bic.w	r8, r3, #32
 80075c6:	bfbc      	itt	lt
 80075c8:	4622      	movlt	r2, r4
 80075ca:	4614      	movlt	r4, r2
 80075cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075d0:	d005      	beq.n	80075de <__cvt+0x42>
 80075d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075d6:	d100      	bne.n	80075da <__cvt+0x3e>
 80075d8:	3601      	adds	r6, #1
 80075da:	2102      	movs	r1, #2
 80075dc:	e000      	b.n	80075e0 <__cvt+0x44>
 80075de:	2103      	movs	r1, #3
 80075e0:	ab03      	add	r3, sp, #12
 80075e2:	9301      	str	r3, [sp, #4]
 80075e4:	ab02      	add	r3, sp, #8
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	ec45 4b10 	vmov	d0, r4, r5
 80075ec:	4653      	mov	r3, sl
 80075ee:	4632      	mov	r2, r6
 80075f0:	f000 fe6a 	bl	80082c8 <_dtoa_r>
 80075f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075f8:	4607      	mov	r7, r0
 80075fa:	d102      	bne.n	8007602 <__cvt+0x66>
 80075fc:	f019 0f01 	tst.w	r9, #1
 8007600:	d022      	beq.n	8007648 <__cvt+0xac>
 8007602:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007606:	eb07 0906 	add.w	r9, r7, r6
 800760a:	d110      	bne.n	800762e <__cvt+0x92>
 800760c:	783b      	ldrb	r3, [r7, #0]
 800760e:	2b30      	cmp	r3, #48	; 0x30
 8007610:	d10a      	bne.n	8007628 <__cvt+0x8c>
 8007612:	2200      	movs	r2, #0
 8007614:	2300      	movs	r3, #0
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f9 fa6d 	bl	8000af8 <__aeabi_dcmpeq>
 800761e:	b918      	cbnz	r0, 8007628 <__cvt+0x8c>
 8007620:	f1c6 0601 	rsb	r6, r6, #1
 8007624:	f8ca 6000 	str.w	r6, [sl]
 8007628:	f8da 3000 	ldr.w	r3, [sl]
 800762c:	4499      	add	r9, r3
 800762e:	2200      	movs	r2, #0
 8007630:	2300      	movs	r3, #0
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f9 fa5f 	bl	8000af8 <__aeabi_dcmpeq>
 800763a:	b108      	cbz	r0, 8007640 <__cvt+0xa4>
 800763c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007640:	2230      	movs	r2, #48	; 0x30
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	454b      	cmp	r3, r9
 8007646:	d307      	bcc.n	8007658 <__cvt+0xbc>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800764c:	1bdb      	subs	r3, r3, r7
 800764e:	4638      	mov	r0, r7
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	b004      	add	sp, #16
 8007654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007658:	1c59      	adds	r1, r3, #1
 800765a:	9103      	str	r1, [sp, #12]
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	e7f0      	b.n	8007642 <__cvt+0xa6>

08007660 <__exponent>:
 8007660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007662:	4603      	mov	r3, r0
 8007664:	2900      	cmp	r1, #0
 8007666:	bfb8      	it	lt
 8007668:	4249      	neglt	r1, r1
 800766a:	f803 2b02 	strb.w	r2, [r3], #2
 800766e:	bfb4      	ite	lt
 8007670:	222d      	movlt	r2, #45	; 0x2d
 8007672:	222b      	movge	r2, #43	; 0x2b
 8007674:	2909      	cmp	r1, #9
 8007676:	7042      	strb	r2, [r0, #1]
 8007678:	dd2a      	ble.n	80076d0 <__exponent+0x70>
 800767a:	f10d 0207 	add.w	r2, sp, #7
 800767e:	4617      	mov	r7, r2
 8007680:	260a      	movs	r6, #10
 8007682:	4694      	mov	ip, r2
 8007684:	fb91 f5f6 	sdiv	r5, r1, r6
 8007688:	fb06 1415 	mls	r4, r6, r5, r1
 800768c:	3430      	adds	r4, #48	; 0x30
 800768e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007692:	460c      	mov	r4, r1
 8007694:	2c63      	cmp	r4, #99	; 0x63
 8007696:	f102 32ff 	add.w	r2, r2, #4294967295
 800769a:	4629      	mov	r1, r5
 800769c:	dcf1      	bgt.n	8007682 <__exponent+0x22>
 800769e:	3130      	adds	r1, #48	; 0x30
 80076a0:	f1ac 0402 	sub.w	r4, ip, #2
 80076a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80076a8:	1c41      	adds	r1, r0, #1
 80076aa:	4622      	mov	r2, r4
 80076ac:	42ba      	cmp	r2, r7
 80076ae:	d30a      	bcc.n	80076c6 <__exponent+0x66>
 80076b0:	f10d 0209 	add.w	r2, sp, #9
 80076b4:	eba2 020c 	sub.w	r2, r2, ip
 80076b8:	42bc      	cmp	r4, r7
 80076ba:	bf88      	it	hi
 80076bc:	2200      	movhi	r2, #0
 80076be:	4413      	add	r3, r2
 80076c0:	1a18      	subs	r0, r3, r0
 80076c2:	b003      	add	sp, #12
 80076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80076ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80076ce:	e7ed      	b.n	80076ac <__exponent+0x4c>
 80076d0:	2330      	movs	r3, #48	; 0x30
 80076d2:	3130      	adds	r1, #48	; 0x30
 80076d4:	7083      	strb	r3, [r0, #2]
 80076d6:	70c1      	strb	r1, [r0, #3]
 80076d8:	1d03      	adds	r3, r0, #4
 80076da:	e7f1      	b.n	80076c0 <__exponent+0x60>

080076dc <_printf_float>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	ed2d 8b02 	vpush	{d8}
 80076e4:	b08d      	sub	sp, #52	; 0x34
 80076e6:	460c      	mov	r4, r1
 80076e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076ec:	4616      	mov	r6, r2
 80076ee:	461f      	mov	r7, r3
 80076f0:	4605      	mov	r5, r0
 80076f2:	f000 fce1 	bl	80080b8 <_localeconv_r>
 80076f6:	f8d0 a000 	ldr.w	sl, [r0]
 80076fa:	4650      	mov	r0, sl
 80076fc:	f7f8 fdd0 	bl	80002a0 <strlen>
 8007700:	2300      	movs	r3, #0
 8007702:	930a      	str	r3, [sp, #40]	; 0x28
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	9305      	str	r3, [sp, #20]
 8007708:	f8d8 3000 	ldr.w	r3, [r8]
 800770c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007710:	3307      	adds	r3, #7
 8007712:	f023 0307 	bic.w	r3, r3, #7
 8007716:	f103 0208 	add.w	r2, r3, #8
 800771a:	f8c8 2000 	str.w	r2, [r8]
 800771e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007726:	9307      	str	r3, [sp, #28]
 8007728:	f8cd 8018 	str.w	r8, [sp, #24]
 800772c:	ee08 0a10 	vmov	s16, r0
 8007730:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007734:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007738:	4b9e      	ldr	r3, [pc, #632]	; (80079b4 <_printf_float+0x2d8>)
 800773a:	f04f 32ff 	mov.w	r2, #4294967295
 800773e:	f7f9 fa0d 	bl	8000b5c <__aeabi_dcmpun>
 8007742:	bb88      	cbnz	r0, 80077a8 <_printf_float+0xcc>
 8007744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007748:	4b9a      	ldr	r3, [pc, #616]	; (80079b4 <_printf_float+0x2d8>)
 800774a:	f04f 32ff 	mov.w	r2, #4294967295
 800774e:	f7f9 f9e7 	bl	8000b20 <__aeabi_dcmple>
 8007752:	bb48      	cbnz	r0, 80077a8 <_printf_float+0xcc>
 8007754:	2200      	movs	r2, #0
 8007756:	2300      	movs	r3, #0
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	f7f9 f9d6 	bl	8000b0c <__aeabi_dcmplt>
 8007760:	b110      	cbz	r0, 8007768 <_printf_float+0x8c>
 8007762:	232d      	movs	r3, #45	; 0x2d
 8007764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007768:	4a93      	ldr	r2, [pc, #588]	; (80079b8 <_printf_float+0x2dc>)
 800776a:	4b94      	ldr	r3, [pc, #592]	; (80079bc <_printf_float+0x2e0>)
 800776c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007770:	bf94      	ite	ls
 8007772:	4690      	movls	r8, r2
 8007774:	4698      	movhi	r8, r3
 8007776:	2303      	movs	r3, #3
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	f023 0304 	bic.w	r3, r3, #4
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	f04f 0900 	mov.w	r9, #0
 8007786:	9700      	str	r7, [sp, #0]
 8007788:	4633      	mov	r3, r6
 800778a:	aa0b      	add	r2, sp, #44	; 0x2c
 800778c:	4621      	mov	r1, r4
 800778e:	4628      	mov	r0, r5
 8007790:	f000 f9da 	bl	8007b48 <_printf_common>
 8007794:	3001      	adds	r0, #1
 8007796:	f040 8090 	bne.w	80078ba <_printf_float+0x1de>
 800779a:	f04f 30ff 	mov.w	r0, #4294967295
 800779e:	b00d      	add	sp, #52	; 0x34
 80077a0:	ecbd 8b02 	vpop	{d8}
 80077a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a8:	4642      	mov	r2, r8
 80077aa:	464b      	mov	r3, r9
 80077ac:	4640      	mov	r0, r8
 80077ae:	4649      	mov	r1, r9
 80077b0:	f7f9 f9d4 	bl	8000b5c <__aeabi_dcmpun>
 80077b4:	b140      	cbz	r0, 80077c8 <_printf_float+0xec>
 80077b6:	464b      	mov	r3, r9
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bfbc      	itt	lt
 80077bc:	232d      	movlt	r3, #45	; 0x2d
 80077be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077c2:	4a7f      	ldr	r2, [pc, #508]	; (80079c0 <_printf_float+0x2e4>)
 80077c4:	4b7f      	ldr	r3, [pc, #508]	; (80079c4 <_printf_float+0x2e8>)
 80077c6:	e7d1      	b.n	800776c <_printf_float+0x90>
 80077c8:	6863      	ldr	r3, [r4, #4]
 80077ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077ce:	9206      	str	r2, [sp, #24]
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	d13f      	bne.n	8007854 <_printf_float+0x178>
 80077d4:	2306      	movs	r3, #6
 80077d6:	6063      	str	r3, [r4, #4]
 80077d8:	9b05      	ldr	r3, [sp, #20]
 80077da:	6861      	ldr	r1, [r4, #4]
 80077dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077e0:	2300      	movs	r3, #0
 80077e2:	9303      	str	r3, [sp, #12]
 80077e4:	ab0a      	add	r3, sp, #40	; 0x28
 80077e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80077ea:	ab09      	add	r3, sp, #36	; 0x24
 80077ec:	ec49 8b10 	vmov	d0, r8, r9
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	6022      	str	r2, [r4, #0]
 80077f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077f8:	4628      	mov	r0, r5
 80077fa:	f7ff fecf 	bl	800759c <__cvt>
 80077fe:	9b06      	ldr	r3, [sp, #24]
 8007800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007802:	2b47      	cmp	r3, #71	; 0x47
 8007804:	4680      	mov	r8, r0
 8007806:	d108      	bne.n	800781a <_printf_float+0x13e>
 8007808:	1cc8      	adds	r0, r1, #3
 800780a:	db02      	blt.n	8007812 <_printf_float+0x136>
 800780c:	6863      	ldr	r3, [r4, #4]
 800780e:	4299      	cmp	r1, r3
 8007810:	dd41      	ble.n	8007896 <_printf_float+0x1ba>
 8007812:	f1ab 0302 	sub.w	r3, fp, #2
 8007816:	fa5f fb83 	uxtb.w	fp, r3
 800781a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800781e:	d820      	bhi.n	8007862 <_printf_float+0x186>
 8007820:	3901      	subs	r1, #1
 8007822:	465a      	mov	r2, fp
 8007824:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007828:	9109      	str	r1, [sp, #36]	; 0x24
 800782a:	f7ff ff19 	bl	8007660 <__exponent>
 800782e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007830:	1813      	adds	r3, r2, r0
 8007832:	2a01      	cmp	r2, #1
 8007834:	4681      	mov	r9, r0
 8007836:	6123      	str	r3, [r4, #16]
 8007838:	dc02      	bgt.n	8007840 <_printf_float+0x164>
 800783a:	6822      	ldr	r2, [r4, #0]
 800783c:	07d2      	lsls	r2, r2, #31
 800783e:	d501      	bpl.n	8007844 <_printf_float+0x168>
 8007840:	3301      	adds	r3, #1
 8007842:	6123      	str	r3, [r4, #16]
 8007844:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007848:	2b00      	cmp	r3, #0
 800784a:	d09c      	beq.n	8007786 <_printf_float+0xaa>
 800784c:	232d      	movs	r3, #45	; 0x2d
 800784e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007852:	e798      	b.n	8007786 <_printf_float+0xaa>
 8007854:	9a06      	ldr	r2, [sp, #24]
 8007856:	2a47      	cmp	r2, #71	; 0x47
 8007858:	d1be      	bne.n	80077d8 <_printf_float+0xfc>
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1bc      	bne.n	80077d8 <_printf_float+0xfc>
 800785e:	2301      	movs	r3, #1
 8007860:	e7b9      	b.n	80077d6 <_printf_float+0xfa>
 8007862:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007866:	d118      	bne.n	800789a <_printf_float+0x1be>
 8007868:	2900      	cmp	r1, #0
 800786a:	6863      	ldr	r3, [r4, #4]
 800786c:	dd0b      	ble.n	8007886 <_printf_float+0x1aa>
 800786e:	6121      	str	r1, [r4, #16]
 8007870:	b913      	cbnz	r3, 8007878 <_printf_float+0x19c>
 8007872:	6822      	ldr	r2, [r4, #0]
 8007874:	07d0      	lsls	r0, r2, #31
 8007876:	d502      	bpl.n	800787e <_printf_float+0x1a2>
 8007878:	3301      	adds	r3, #1
 800787a:	440b      	add	r3, r1
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007880:	f04f 0900 	mov.w	r9, #0
 8007884:	e7de      	b.n	8007844 <_printf_float+0x168>
 8007886:	b913      	cbnz	r3, 800788e <_printf_float+0x1b2>
 8007888:	6822      	ldr	r2, [r4, #0]
 800788a:	07d2      	lsls	r2, r2, #31
 800788c:	d501      	bpl.n	8007892 <_printf_float+0x1b6>
 800788e:	3302      	adds	r3, #2
 8007890:	e7f4      	b.n	800787c <_printf_float+0x1a0>
 8007892:	2301      	movs	r3, #1
 8007894:	e7f2      	b.n	800787c <_printf_float+0x1a0>
 8007896:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800789a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789c:	4299      	cmp	r1, r3
 800789e:	db05      	blt.n	80078ac <_printf_float+0x1d0>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	6121      	str	r1, [r4, #16]
 80078a4:	07d8      	lsls	r0, r3, #31
 80078a6:	d5ea      	bpl.n	800787e <_printf_float+0x1a2>
 80078a8:	1c4b      	adds	r3, r1, #1
 80078aa:	e7e7      	b.n	800787c <_printf_float+0x1a0>
 80078ac:	2900      	cmp	r1, #0
 80078ae:	bfd4      	ite	le
 80078b0:	f1c1 0202 	rsble	r2, r1, #2
 80078b4:	2201      	movgt	r2, #1
 80078b6:	4413      	add	r3, r2
 80078b8:	e7e0      	b.n	800787c <_printf_float+0x1a0>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	055a      	lsls	r2, r3, #21
 80078be:	d407      	bmi.n	80078d0 <_printf_float+0x1f4>
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	4642      	mov	r2, r8
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	d12c      	bne.n	8007928 <_printf_float+0x24c>
 80078ce:	e764      	b.n	800779a <_printf_float+0xbe>
 80078d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078d4:	f240 80e0 	bls.w	8007a98 <_printf_float+0x3bc>
 80078d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078dc:	2200      	movs	r2, #0
 80078de:	2300      	movs	r3, #0
 80078e0:	f7f9 f90a 	bl	8000af8 <__aeabi_dcmpeq>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d034      	beq.n	8007952 <_printf_float+0x276>
 80078e8:	4a37      	ldr	r2, [pc, #220]	; (80079c8 <_printf_float+0x2ec>)
 80078ea:	2301      	movs	r3, #1
 80078ec:	4631      	mov	r1, r6
 80078ee:	4628      	mov	r0, r5
 80078f0:	47b8      	blx	r7
 80078f2:	3001      	adds	r0, #1
 80078f4:	f43f af51 	beq.w	800779a <_printf_float+0xbe>
 80078f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078fc:	429a      	cmp	r2, r3
 80078fe:	db02      	blt.n	8007906 <_printf_float+0x22a>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	07d8      	lsls	r0, r3, #31
 8007904:	d510      	bpl.n	8007928 <_printf_float+0x24c>
 8007906:	ee18 3a10 	vmov	r3, s16
 800790a:	4652      	mov	r2, sl
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	47b8      	blx	r7
 8007912:	3001      	adds	r0, #1
 8007914:	f43f af41 	beq.w	800779a <_printf_float+0xbe>
 8007918:	f04f 0800 	mov.w	r8, #0
 800791c:	f104 091a 	add.w	r9, r4, #26
 8007920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007922:	3b01      	subs	r3, #1
 8007924:	4543      	cmp	r3, r8
 8007926:	dc09      	bgt.n	800793c <_printf_float+0x260>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	079b      	lsls	r3, r3, #30
 800792c:	f100 8107 	bmi.w	8007b3e <_printf_float+0x462>
 8007930:	68e0      	ldr	r0, [r4, #12]
 8007932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007934:	4298      	cmp	r0, r3
 8007936:	bfb8      	it	lt
 8007938:	4618      	movlt	r0, r3
 800793a:	e730      	b.n	800779e <_printf_float+0xc2>
 800793c:	2301      	movs	r3, #1
 800793e:	464a      	mov	r2, r9
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	f43f af27 	beq.w	800779a <_printf_float+0xbe>
 800794c:	f108 0801 	add.w	r8, r8, #1
 8007950:	e7e6      	b.n	8007920 <_printf_float+0x244>
 8007952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc39      	bgt.n	80079cc <_printf_float+0x2f0>
 8007958:	4a1b      	ldr	r2, [pc, #108]	; (80079c8 <_printf_float+0x2ec>)
 800795a:	2301      	movs	r3, #1
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	f43f af19 	beq.w	800779a <_printf_float+0xbe>
 8007968:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800796c:	4313      	orrs	r3, r2
 800796e:	d102      	bne.n	8007976 <_printf_float+0x29a>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	07d9      	lsls	r1, r3, #31
 8007974:	d5d8      	bpl.n	8007928 <_printf_float+0x24c>
 8007976:	ee18 3a10 	vmov	r3, s16
 800797a:	4652      	mov	r2, sl
 800797c:	4631      	mov	r1, r6
 800797e:	4628      	mov	r0, r5
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	f43f af09 	beq.w	800779a <_printf_float+0xbe>
 8007988:	f04f 0900 	mov.w	r9, #0
 800798c:	f104 0a1a 	add.w	sl, r4, #26
 8007990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007992:	425b      	negs	r3, r3
 8007994:	454b      	cmp	r3, r9
 8007996:	dc01      	bgt.n	800799c <_printf_float+0x2c0>
 8007998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799a:	e792      	b.n	80078c2 <_printf_float+0x1e6>
 800799c:	2301      	movs	r3, #1
 800799e:	4652      	mov	r2, sl
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	f43f aef7 	beq.w	800779a <_printf_float+0xbe>
 80079ac:	f109 0901 	add.w	r9, r9, #1
 80079b0:	e7ee      	b.n	8007990 <_printf_float+0x2b4>
 80079b2:	bf00      	nop
 80079b4:	7fefffff 	.word	0x7fefffff
 80079b8:	0800a179 	.word	0x0800a179
 80079bc:	0800a17d 	.word	0x0800a17d
 80079c0:	0800a181 	.word	0x0800a181
 80079c4:	0800a185 	.word	0x0800a185
 80079c8:	0800a189 	.word	0x0800a189
 80079cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079d0:	429a      	cmp	r2, r3
 80079d2:	bfa8      	it	ge
 80079d4:	461a      	movge	r2, r3
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	4691      	mov	r9, r2
 80079da:	dc37      	bgt.n	8007a4c <_printf_float+0x370>
 80079dc:	f04f 0b00 	mov.w	fp, #0
 80079e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079e4:	f104 021a 	add.w	r2, r4, #26
 80079e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079ea:	9305      	str	r3, [sp, #20]
 80079ec:	eba3 0309 	sub.w	r3, r3, r9
 80079f0:	455b      	cmp	r3, fp
 80079f2:	dc33      	bgt.n	8007a5c <_printf_float+0x380>
 80079f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079f8:	429a      	cmp	r2, r3
 80079fa:	db3b      	blt.n	8007a74 <_printf_float+0x398>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	07da      	lsls	r2, r3, #31
 8007a00:	d438      	bmi.n	8007a74 <_printf_float+0x398>
 8007a02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a06:	eba2 0903 	sub.w	r9, r2, r3
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	1ad2      	subs	r2, r2, r3
 8007a0e:	4591      	cmp	r9, r2
 8007a10:	bfa8      	it	ge
 8007a12:	4691      	movge	r9, r2
 8007a14:	f1b9 0f00 	cmp.w	r9, #0
 8007a18:	dc35      	bgt.n	8007a86 <_printf_float+0x3aa>
 8007a1a:	f04f 0800 	mov.w	r8, #0
 8007a1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a22:	f104 0a1a 	add.w	sl, r4, #26
 8007a26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	eba3 0309 	sub.w	r3, r3, r9
 8007a30:	4543      	cmp	r3, r8
 8007a32:	f77f af79 	ble.w	8007928 <_printf_float+0x24c>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4652      	mov	r2, sl
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	f43f aeaa 	beq.w	800779a <_printf_float+0xbe>
 8007a46:	f108 0801 	add.w	r8, r8, #1
 8007a4a:	e7ec      	b.n	8007a26 <_printf_float+0x34a>
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4642      	mov	r2, r8
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	d1c0      	bne.n	80079dc <_printf_float+0x300>
 8007a5a:	e69e      	b.n	800779a <_printf_float+0xbe>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4628      	mov	r0, r5
 8007a62:	9205      	str	r2, [sp, #20]
 8007a64:	47b8      	blx	r7
 8007a66:	3001      	adds	r0, #1
 8007a68:	f43f ae97 	beq.w	800779a <_printf_float+0xbe>
 8007a6c:	9a05      	ldr	r2, [sp, #20]
 8007a6e:	f10b 0b01 	add.w	fp, fp, #1
 8007a72:	e7b9      	b.n	80079e8 <_printf_float+0x30c>
 8007a74:	ee18 3a10 	vmov	r3, s16
 8007a78:	4652      	mov	r2, sl
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	d1be      	bne.n	8007a02 <_printf_float+0x326>
 8007a84:	e689      	b.n	800779a <_printf_float+0xbe>
 8007a86:	9a05      	ldr	r2, [sp, #20]
 8007a88:	464b      	mov	r3, r9
 8007a8a:	4442      	add	r2, r8
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	d1c1      	bne.n	8007a1a <_printf_float+0x33e>
 8007a96:	e680      	b.n	800779a <_printf_float+0xbe>
 8007a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a9a:	2a01      	cmp	r2, #1
 8007a9c:	dc01      	bgt.n	8007aa2 <_printf_float+0x3c6>
 8007a9e:	07db      	lsls	r3, r3, #31
 8007aa0:	d53a      	bpl.n	8007b18 <_printf_float+0x43c>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f ae74 	beq.w	800779a <_printf_float+0xbe>
 8007ab2:	ee18 3a10 	vmov	r3, s16
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f ae6b 	beq.w	800779a <_printf_float+0xbe>
 8007ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2300      	movs	r3, #0
 8007acc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007ad0:	f7f9 f812 	bl	8000af8 <__aeabi_dcmpeq>
 8007ad4:	b9d8      	cbnz	r0, 8007b0e <_printf_float+0x432>
 8007ad6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ada:	f108 0201 	add.w	r2, r8, #1
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d10e      	bne.n	8007b06 <_printf_float+0x42a>
 8007ae8:	e657      	b.n	800779a <_printf_float+0xbe>
 8007aea:	2301      	movs	r3, #1
 8007aec:	4652      	mov	r2, sl
 8007aee:	4631      	mov	r1, r6
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b8      	blx	r7
 8007af4:	3001      	adds	r0, #1
 8007af6:	f43f ae50 	beq.w	800779a <_printf_float+0xbe>
 8007afa:	f108 0801 	add.w	r8, r8, #1
 8007afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b00:	3b01      	subs	r3, #1
 8007b02:	4543      	cmp	r3, r8
 8007b04:	dcf1      	bgt.n	8007aea <_printf_float+0x40e>
 8007b06:	464b      	mov	r3, r9
 8007b08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b0c:	e6da      	b.n	80078c4 <_printf_float+0x1e8>
 8007b0e:	f04f 0800 	mov.w	r8, #0
 8007b12:	f104 0a1a 	add.w	sl, r4, #26
 8007b16:	e7f2      	b.n	8007afe <_printf_float+0x422>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	e7df      	b.n	8007ade <_printf_float+0x402>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	464a      	mov	r2, r9
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f43f ae36 	beq.w	800779a <_printf_float+0xbe>
 8007b2e:	f108 0801 	add.w	r8, r8, #1
 8007b32:	68e3      	ldr	r3, [r4, #12]
 8007b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b36:	1a5b      	subs	r3, r3, r1
 8007b38:	4543      	cmp	r3, r8
 8007b3a:	dcf0      	bgt.n	8007b1e <_printf_float+0x442>
 8007b3c:	e6f8      	b.n	8007930 <_printf_float+0x254>
 8007b3e:	f04f 0800 	mov.w	r8, #0
 8007b42:	f104 0919 	add.w	r9, r4, #25
 8007b46:	e7f4      	b.n	8007b32 <_printf_float+0x456>

08007b48 <_printf_common>:
 8007b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	4699      	mov	r9, r3
 8007b50:	688a      	ldr	r2, [r1, #8]
 8007b52:	690b      	ldr	r3, [r1, #16]
 8007b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	bfb8      	it	lt
 8007b5c:	4613      	movlt	r3, r2
 8007b5e:	6033      	str	r3, [r6, #0]
 8007b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b64:	4607      	mov	r7, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	b10a      	cbz	r2, 8007b6e <_printf_common+0x26>
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	6033      	str	r3, [r6, #0]
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	0699      	lsls	r1, r3, #26
 8007b72:	bf42      	ittt	mi
 8007b74:	6833      	ldrmi	r3, [r6, #0]
 8007b76:	3302      	addmi	r3, #2
 8007b78:	6033      	strmi	r3, [r6, #0]
 8007b7a:	6825      	ldr	r5, [r4, #0]
 8007b7c:	f015 0506 	ands.w	r5, r5, #6
 8007b80:	d106      	bne.n	8007b90 <_printf_common+0x48>
 8007b82:	f104 0a19 	add.w	sl, r4, #25
 8007b86:	68e3      	ldr	r3, [r4, #12]
 8007b88:	6832      	ldr	r2, [r6, #0]
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	42ab      	cmp	r3, r5
 8007b8e:	dc26      	bgt.n	8007bde <_printf_common+0x96>
 8007b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b94:	1e13      	subs	r3, r2, #0
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	bf18      	it	ne
 8007b9a:	2301      	movne	r3, #1
 8007b9c:	0692      	lsls	r2, r2, #26
 8007b9e:	d42b      	bmi.n	8007bf8 <_printf_common+0xb0>
 8007ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	47c0      	blx	r8
 8007baa:	3001      	adds	r0, #1
 8007bac:	d01e      	beq.n	8007bec <_printf_common+0xa4>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	6922      	ldr	r2, [r4, #16]
 8007bb2:	f003 0306 	and.w	r3, r3, #6
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	bf02      	ittt	eq
 8007bba:	68e5      	ldreq	r5, [r4, #12]
 8007bbc:	6833      	ldreq	r3, [r6, #0]
 8007bbe:	1aed      	subeq	r5, r5, r3
 8007bc0:	68a3      	ldr	r3, [r4, #8]
 8007bc2:	bf0c      	ite	eq
 8007bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bc8:	2500      	movne	r5, #0
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	bfc4      	itt	gt
 8007bce:	1a9b      	subgt	r3, r3, r2
 8007bd0:	18ed      	addgt	r5, r5, r3
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	341a      	adds	r4, #26
 8007bd6:	42b5      	cmp	r5, r6
 8007bd8:	d11a      	bne.n	8007c10 <_printf_common+0xc8>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e008      	b.n	8007bf0 <_printf_common+0xa8>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4652      	mov	r2, sl
 8007be2:	4649      	mov	r1, r9
 8007be4:	4638      	mov	r0, r7
 8007be6:	47c0      	blx	r8
 8007be8:	3001      	adds	r0, #1
 8007bea:	d103      	bne.n	8007bf4 <_printf_common+0xac>
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf4:	3501      	adds	r5, #1
 8007bf6:	e7c6      	b.n	8007b86 <_printf_common+0x3e>
 8007bf8:	18e1      	adds	r1, r4, r3
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	2030      	movs	r0, #48	; 0x30
 8007bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c02:	4422      	add	r2, r4
 8007c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	e7c7      	b.n	8007ba0 <_printf_common+0x58>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4622      	mov	r2, r4
 8007c14:	4649      	mov	r1, r9
 8007c16:	4638      	mov	r0, r7
 8007c18:	47c0      	blx	r8
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d0e6      	beq.n	8007bec <_printf_common+0xa4>
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7d9      	b.n	8007bd6 <_printf_common+0x8e>
	...

08007c24 <_printf_i>:
 8007c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	7e0f      	ldrb	r7, [r1, #24]
 8007c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c2c:	2f78      	cmp	r7, #120	; 0x78
 8007c2e:	4691      	mov	r9, r2
 8007c30:	4680      	mov	r8, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	469a      	mov	sl, r3
 8007c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c3a:	d807      	bhi.n	8007c4c <_printf_i+0x28>
 8007c3c:	2f62      	cmp	r7, #98	; 0x62
 8007c3e:	d80a      	bhi.n	8007c56 <_printf_i+0x32>
 8007c40:	2f00      	cmp	r7, #0
 8007c42:	f000 80d4 	beq.w	8007dee <_printf_i+0x1ca>
 8007c46:	2f58      	cmp	r7, #88	; 0x58
 8007c48:	f000 80c0 	beq.w	8007dcc <_printf_i+0x1a8>
 8007c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c54:	e03a      	b.n	8007ccc <_printf_i+0xa8>
 8007c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c5a:	2b15      	cmp	r3, #21
 8007c5c:	d8f6      	bhi.n	8007c4c <_printf_i+0x28>
 8007c5e:	a101      	add	r1, pc, #4	; (adr r1, 8007c64 <_printf_i+0x40>)
 8007c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c64:	08007cbd 	.word	0x08007cbd
 8007c68:	08007cd1 	.word	0x08007cd1
 8007c6c:	08007c4d 	.word	0x08007c4d
 8007c70:	08007c4d 	.word	0x08007c4d
 8007c74:	08007c4d 	.word	0x08007c4d
 8007c78:	08007c4d 	.word	0x08007c4d
 8007c7c:	08007cd1 	.word	0x08007cd1
 8007c80:	08007c4d 	.word	0x08007c4d
 8007c84:	08007c4d 	.word	0x08007c4d
 8007c88:	08007c4d 	.word	0x08007c4d
 8007c8c:	08007c4d 	.word	0x08007c4d
 8007c90:	08007dd5 	.word	0x08007dd5
 8007c94:	08007cfd 	.word	0x08007cfd
 8007c98:	08007d8f 	.word	0x08007d8f
 8007c9c:	08007c4d 	.word	0x08007c4d
 8007ca0:	08007c4d 	.word	0x08007c4d
 8007ca4:	08007df7 	.word	0x08007df7
 8007ca8:	08007c4d 	.word	0x08007c4d
 8007cac:	08007cfd 	.word	0x08007cfd
 8007cb0:	08007c4d 	.word	0x08007c4d
 8007cb4:	08007c4d 	.word	0x08007c4d
 8007cb8:	08007d97 	.word	0x08007d97
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	1d1a      	adds	r2, r3, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	602a      	str	r2, [r5, #0]
 8007cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e09f      	b.n	8007e10 <_printf_i+0x1ec>
 8007cd0:	6820      	ldr	r0, [r4, #0]
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	0607      	lsls	r7, r0, #24
 8007cd6:	f103 0104 	add.w	r1, r3, #4
 8007cda:	6029      	str	r1, [r5, #0]
 8007cdc:	d501      	bpl.n	8007ce2 <_printf_i+0xbe>
 8007cde:	681e      	ldr	r6, [r3, #0]
 8007ce0:	e003      	b.n	8007cea <_printf_i+0xc6>
 8007ce2:	0646      	lsls	r6, r0, #25
 8007ce4:	d5fb      	bpl.n	8007cde <_printf_i+0xba>
 8007ce6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cea:	2e00      	cmp	r6, #0
 8007cec:	da03      	bge.n	8007cf6 <_printf_i+0xd2>
 8007cee:	232d      	movs	r3, #45	; 0x2d
 8007cf0:	4276      	negs	r6, r6
 8007cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf6:	485a      	ldr	r0, [pc, #360]	; (8007e60 <_printf_i+0x23c>)
 8007cf8:	230a      	movs	r3, #10
 8007cfa:	e012      	b.n	8007d22 <_printf_i+0xfe>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	6029      	str	r1, [r5, #0]
 8007d04:	0605      	lsls	r5, r0, #24
 8007d06:	d501      	bpl.n	8007d0c <_printf_i+0xe8>
 8007d08:	681e      	ldr	r6, [r3, #0]
 8007d0a:	e002      	b.n	8007d12 <_printf_i+0xee>
 8007d0c:	0641      	lsls	r1, r0, #25
 8007d0e:	d5fb      	bpl.n	8007d08 <_printf_i+0xe4>
 8007d10:	881e      	ldrh	r6, [r3, #0]
 8007d12:	4853      	ldr	r0, [pc, #332]	; (8007e60 <_printf_i+0x23c>)
 8007d14:	2f6f      	cmp	r7, #111	; 0x6f
 8007d16:	bf0c      	ite	eq
 8007d18:	2308      	moveq	r3, #8
 8007d1a:	230a      	movne	r3, #10
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d22:	6865      	ldr	r5, [r4, #4]
 8007d24:	60a5      	str	r5, [r4, #8]
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	bfa2      	ittt	ge
 8007d2a:	6821      	ldrge	r1, [r4, #0]
 8007d2c:	f021 0104 	bicge.w	r1, r1, #4
 8007d30:	6021      	strge	r1, [r4, #0]
 8007d32:	b90e      	cbnz	r6, 8007d38 <_printf_i+0x114>
 8007d34:	2d00      	cmp	r5, #0
 8007d36:	d04b      	beq.n	8007dd0 <_printf_i+0x1ac>
 8007d38:	4615      	mov	r5, r2
 8007d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d42:	5dc7      	ldrb	r7, [r0, r7]
 8007d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d48:	4637      	mov	r7, r6
 8007d4a:	42bb      	cmp	r3, r7
 8007d4c:	460e      	mov	r6, r1
 8007d4e:	d9f4      	bls.n	8007d3a <_printf_i+0x116>
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d10b      	bne.n	8007d6c <_printf_i+0x148>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	07de      	lsls	r6, r3, #31
 8007d58:	d508      	bpl.n	8007d6c <_printf_i+0x148>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	6861      	ldr	r1, [r4, #4]
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	bfde      	ittt	le
 8007d62:	2330      	movle	r3, #48	; 0x30
 8007d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d6c:	1b52      	subs	r2, r2, r5
 8007d6e:	6122      	str	r2, [r4, #16]
 8007d70:	f8cd a000 	str.w	sl, [sp]
 8007d74:	464b      	mov	r3, r9
 8007d76:	aa03      	add	r2, sp, #12
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f7ff fee4 	bl	8007b48 <_printf_common>
 8007d80:	3001      	adds	r0, #1
 8007d82:	d14a      	bne.n	8007e1a <_printf_i+0x1f6>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	b004      	add	sp, #16
 8007d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	f043 0320 	orr.w	r3, r3, #32
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	4833      	ldr	r0, [pc, #204]	; (8007e64 <_printf_i+0x240>)
 8007d98:	2778      	movs	r7, #120	; 0x78
 8007d9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	6829      	ldr	r1, [r5, #0]
 8007da2:	061f      	lsls	r7, r3, #24
 8007da4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007da8:	d402      	bmi.n	8007db0 <_printf_i+0x18c>
 8007daa:	065f      	lsls	r7, r3, #25
 8007dac:	bf48      	it	mi
 8007dae:	b2b6      	uxthmi	r6, r6
 8007db0:	07df      	lsls	r7, r3, #31
 8007db2:	bf48      	it	mi
 8007db4:	f043 0320 	orrmi.w	r3, r3, #32
 8007db8:	6029      	str	r1, [r5, #0]
 8007dba:	bf48      	it	mi
 8007dbc:	6023      	strmi	r3, [r4, #0]
 8007dbe:	b91e      	cbnz	r6, 8007dc8 <_printf_i+0x1a4>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	f023 0320 	bic.w	r3, r3, #32
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	2310      	movs	r3, #16
 8007dca:	e7a7      	b.n	8007d1c <_printf_i+0xf8>
 8007dcc:	4824      	ldr	r0, [pc, #144]	; (8007e60 <_printf_i+0x23c>)
 8007dce:	e7e4      	b.n	8007d9a <_printf_i+0x176>
 8007dd0:	4615      	mov	r5, r2
 8007dd2:	e7bd      	b.n	8007d50 <_printf_i+0x12c>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	6826      	ldr	r6, [r4, #0]
 8007dd8:	6961      	ldr	r1, [r4, #20]
 8007dda:	1d18      	adds	r0, r3, #4
 8007ddc:	6028      	str	r0, [r5, #0]
 8007dde:	0635      	lsls	r5, r6, #24
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	d501      	bpl.n	8007de8 <_printf_i+0x1c4>
 8007de4:	6019      	str	r1, [r3, #0]
 8007de6:	e002      	b.n	8007dee <_printf_i+0x1ca>
 8007de8:	0670      	lsls	r0, r6, #25
 8007dea:	d5fb      	bpl.n	8007de4 <_printf_i+0x1c0>
 8007dec:	8019      	strh	r1, [r3, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	4615      	mov	r5, r2
 8007df4:	e7bc      	b.n	8007d70 <_printf_i+0x14c>
 8007df6:	682b      	ldr	r3, [r5, #0]
 8007df8:	1d1a      	adds	r2, r3, #4
 8007dfa:	602a      	str	r2, [r5, #0]
 8007dfc:	681d      	ldr	r5, [r3, #0]
 8007dfe:	6862      	ldr	r2, [r4, #4]
 8007e00:	2100      	movs	r1, #0
 8007e02:	4628      	mov	r0, r5
 8007e04:	f7f8 f9fc 	bl	8000200 <memchr>
 8007e08:	b108      	cbz	r0, 8007e0e <_printf_i+0x1ea>
 8007e0a:	1b40      	subs	r0, r0, r5
 8007e0c:	6060      	str	r0, [r4, #4]
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	2300      	movs	r3, #0
 8007e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e18:	e7aa      	b.n	8007d70 <_printf_i+0x14c>
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	47d0      	blx	sl
 8007e24:	3001      	adds	r0, #1
 8007e26:	d0ad      	beq.n	8007d84 <_printf_i+0x160>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	079b      	lsls	r3, r3, #30
 8007e2c:	d413      	bmi.n	8007e56 <_printf_i+0x232>
 8007e2e:	68e0      	ldr	r0, [r4, #12]
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	4298      	cmp	r0, r3
 8007e34:	bfb8      	it	lt
 8007e36:	4618      	movlt	r0, r3
 8007e38:	e7a6      	b.n	8007d88 <_printf_i+0x164>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	47d0      	blx	sl
 8007e44:	3001      	adds	r0, #1
 8007e46:	d09d      	beq.n	8007d84 <_printf_i+0x160>
 8007e48:	3501      	adds	r5, #1
 8007e4a:	68e3      	ldr	r3, [r4, #12]
 8007e4c:	9903      	ldr	r1, [sp, #12]
 8007e4e:	1a5b      	subs	r3, r3, r1
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	dcf2      	bgt.n	8007e3a <_printf_i+0x216>
 8007e54:	e7eb      	b.n	8007e2e <_printf_i+0x20a>
 8007e56:	2500      	movs	r5, #0
 8007e58:	f104 0619 	add.w	r6, r4, #25
 8007e5c:	e7f5      	b.n	8007e4a <_printf_i+0x226>
 8007e5e:	bf00      	nop
 8007e60:	0800a18b 	.word	0x0800a18b
 8007e64:	0800a19c 	.word	0x0800a19c

08007e68 <std>:
 8007e68:	2300      	movs	r3, #0
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e76:	6083      	str	r3, [r0, #8]
 8007e78:	8181      	strh	r1, [r0, #12]
 8007e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e7c:	81c2      	strh	r2, [r0, #14]
 8007e7e:	6183      	str	r3, [r0, #24]
 8007e80:	4619      	mov	r1, r3
 8007e82:	2208      	movs	r2, #8
 8007e84:	305c      	adds	r0, #92	; 0x5c
 8007e86:	f000 f90e 	bl	80080a6 <memset>
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <std+0x58>)
 8007e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <std+0x5c>)
 8007e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e92:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <std+0x60>)
 8007e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e96:	4b0d      	ldr	r3, [pc, #52]	; (8007ecc <std+0x64>)
 8007e98:	6323      	str	r3, [r4, #48]	; 0x30
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <std+0x68>)
 8007e9c:	6224      	str	r4, [r4, #32]
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d006      	beq.n	8007eb0 <std+0x48>
 8007ea2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ea6:	4294      	cmp	r4, r2
 8007ea8:	d002      	beq.n	8007eb0 <std+0x48>
 8007eaa:	33d0      	adds	r3, #208	; 0xd0
 8007eac:	429c      	cmp	r4, r3
 8007eae:	d105      	bne.n	8007ebc <std+0x54>
 8007eb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb8:	f000 b972 	b.w	80081a0 <__retarget_lock_init_recursive>
 8007ebc:	bd10      	pop	{r4, pc}
 8007ebe:	bf00      	nop
 8007ec0:	08008021 	.word	0x08008021
 8007ec4:	08008043 	.word	0x08008043
 8007ec8:	0800807b 	.word	0x0800807b
 8007ecc:	0800809f 	.word	0x0800809f
 8007ed0:	200005e0 	.word	0x200005e0

08007ed4 <stdio_exit_handler>:
 8007ed4:	4a02      	ldr	r2, [pc, #8]	; (8007ee0 <stdio_exit_handler+0xc>)
 8007ed6:	4903      	ldr	r1, [pc, #12]	; (8007ee4 <stdio_exit_handler+0x10>)
 8007ed8:	4803      	ldr	r0, [pc, #12]	; (8007ee8 <stdio_exit_handler+0x14>)
 8007eda:	f000 b869 	b.w	8007fb0 <_fwalk_sglue>
 8007ede:	bf00      	nop
 8007ee0:	2000000c 	.word	0x2000000c
 8007ee4:	08009b39 	.word	0x08009b39
 8007ee8:	20000018 	.word	0x20000018

08007eec <cleanup_stdio>:
 8007eec:	6841      	ldr	r1, [r0, #4]
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <cleanup_stdio+0x34>)
 8007ef0:	4299      	cmp	r1, r3
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	d001      	beq.n	8007efc <cleanup_stdio+0x10>
 8007ef8:	f001 fe1e 	bl	8009b38 <_fflush_r>
 8007efc:	68a1      	ldr	r1, [r4, #8]
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <cleanup_stdio+0x38>)
 8007f00:	4299      	cmp	r1, r3
 8007f02:	d002      	beq.n	8007f0a <cleanup_stdio+0x1e>
 8007f04:	4620      	mov	r0, r4
 8007f06:	f001 fe17 	bl	8009b38 <_fflush_r>
 8007f0a:	68e1      	ldr	r1, [r4, #12]
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <cleanup_stdio+0x3c>)
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	d004      	beq.n	8007f1c <cleanup_stdio+0x30>
 8007f12:	4620      	mov	r0, r4
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f001 be0e 	b.w	8009b38 <_fflush_r>
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	200005e0 	.word	0x200005e0
 8007f24:	20000648 	.word	0x20000648
 8007f28:	200006b0 	.word	0x200006b0

08007f2c <global_stdio_init.part.0>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <global_stdio_init.part.0+0x30>)
 8007f30:	4c0b      	ldr	r4, [pc, #44]	; (8007f60 <global_stdio_init.part.0+0x34>)
 8007f32:	4a0c      	ldr	r2, [pc, #48]	; (8007f64 <global_stdio_init.part.0+0x38>)
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	4620      	mov	r0, r4
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2104      	movs	r1, #4
 8007f3c:	f7ff ff94 	bl	8007e68 <std>
 8007f40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f44:	2201      	movs	r2, #1
 8007f46:	2109      	movs	r1, #9
 8007f48:	f7ff ff8e 	bl	8007e68 <std>
 8007f4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f50:	2202      	movs	r2, #2
 8007f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f56:	2112      	movs	r1, #18
 8007f58:	f7ff bf86 	b.w	8007e68 <std>
 8007f5c:	20000718 	.word	0x20000718
 8007f60:	200005e0 	.word	0x200005e0
 8007f64:	08007ed5 	.word	0x08007ed5

08007f68 <__sfp_lock_acquire>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__sfp_lock_acquire+0x8>)
 8007f6a:	f000 b91a 	b.w	80081a2 <__retarget_lock_acquire_recursive>
 8007f6e:	bf00      	nop
 8007f70:	20000721 	.word	0x20000721

08007f74 <__sfp_lock_release>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__sfp_lock_release+0x8>)
 8007f76:	f000 b915 	b.w	80081a4 <__retarget_lock_release_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	20000721 	.word	0x20000721

08007f80 <__sinit>:
 8007f80:	b510      	push	{r4, lr}
 8007f82:	4604      	mov	r4, r0
 8007f84:	f7ff fff0 	bl	8007f68 <__sfp_lock_acquire>
 8007f88:	6a23      	ldr	r3, [r4, #32]
 8007f8a:	b11b      	cbz	r3, 8007f94 <__sinit+0x14>
 8007f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f90:	f7ff bff0 	b.w	8007f74 <__sfp_lock_release>
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <__sinit+0x28>)
 8007f96:	6223      	str	r3, [r4, #32]
 8007f98:	4b04      	ldr	r3, [pc, #16]	; (8007fac <__sinit+0x2c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f5      	bne.n	8007f8c <__sinit+0xc>
 8007fa0:	f7ff ffc4 	bl	8007f2c <global_stdio_init.part.0>
 8007fa4:	e7f2      	b.n	8007f8c <__sinit+0xc>
 8007fa6:	bf00      	nop
 8007fa8:	08007eed 	.word	0x08007eed
 8007fac:	20000718 	.word	0x20000718

08007fb0 <_fwalk_sglue>:
 8007fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	4688      	mov	r8, r1
 8007fb8:	4614      	mov	r4, r2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8007fc4:	d505      	bpl.n	8007fd2 <_fwalk_sglue+0x22>
 8007fc6:	6824      	ldr	r4, [r4, #0]
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	d1f7      	bne.n	8007fbc <_fwalk_sglue+0xc>
 8007fcc:	4630      	mov	r0, r6
 8007fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd2:	89ab      	ldrh	r3, [r5, #12]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d907      	bls.n	8007fe8 <_fwalk_sglue+0x38>
 8007fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	d003      	beq.n	8007fe8 <_fwalk_sglue+0x38>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	47c0      	blx	r8
 8007fe6:	4306      	orrs	r6, r0
 8007fe8:	3568      	adds	r5, #104	; 0x68
 8007fea:	e7e9      	b.n	8007fc0 <_fwalk_sglue+0x10>

08007fec <iprintf>:
 8007fec:	b40f      	push	{r0, r1, r2, r3}
 8007fee:	b507      	push	{r0, r1, r2, lr}
 8007ff0:	4906      	ldr	r1, [pc, #24]	; (800800c <iprintf+0x20>)
 8007ff2:	ab04      	add	r3, sp, #16
 8007ff4:	6808      	ldr	r0, [r1, #0]
 8007ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffa:	6881      	ldr	r1, [r0, #8]
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	f001 fbfb 	bl	80097f8 <_vfiprintf_r>
 8008002:	b003      	add	sp, #12
 8008004:	f85d eb04 	ldr.w	lr, [sp], #4
 8008008:	b004      	add	sp, #16
 800800a:	4770      	bx	lr
 800800c:	20000064 	.word	0x20000064

08008010 <putchar>:
 8008010:	4b02      	ldr	r3, [pc, #8]	; (800801c <putchar+0xc>)
 8008012:	4601      	mov	r1, r0
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	6882      	ldr	r2, [r0, #8]
 8008018:	f001 bdb6 	b.w	8009b88 <_putc_r>
 800801c:	20000064 	.word	0x20000064

08008020 <__sread>:
 8008020:	b510      	push	{r4, lr}
 8008022:	460c      	mov	r4, r1
 8008024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008028:	f000 f86c 	bl	8008104 <_read_r>
 800802c:	2800      	cmp	r0, #0
 800802e:	bfab      	itete	ge
 8008030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008032:	89a3      	ldrhlt	r3, [r4, #12]
 8008034:	181b      	addge	r3, r3, r0
 8008036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800803a:	bfac      	ite	ge
 800803c:	6563      	strge	r3, [r4, #84]	; 0x54
 800803e:	81a3      	strhlt	r3, [r4, #12]
 8008040:	bd10      	pop	{r4, pc}

08008042 <__swrite>:
 8008042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008046:	461f      	mov	r7, r3
 8008048:	898b      	ldrh	r3, [r1, #12]
 800804a:	05db      	lsls	r3, r3, #23
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	4616      	mov	r6, r2
 8008052:	d505      	bpl.n	8008060 <__swrite+0x1e>
 8008054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008058:	2302      	movs	r3, #2
 800805a:	2200      	movs	r2, #0
 800805c:	f000 f840 	bl	80080e0 <_lseek_r>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	4632      	mov	r2, r6
 800806e:	463b      	mov	r3, r7
 8008070:	4628      	mov	r0, r5
 8008072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	f000 b857 	b.w	8008128 <_write_r>

0800807a <__sseek>:
 800807a:	b510      	push	{r4, lr}
 800807c:	460c      	mov	r4, r1
 800807e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008082:	f000 f82d 	bl	80080e0 <_lseek_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	bf15      	itete	ne
 800808c:	6560      	strne	r0, [r4, #84]	; 0x54
 800808e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008096:	81a3      	strheq	r3, [r4, #12]
 8008098:	bf18      	it	ne
 800809a:	81a3      	strhne	r3, [r4, #12]
 800809c:	bd10      	pop	{r4, pc}

0800809e <__sclose>:
 800809e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a2:	f000 b80d 	b.w	80080c0 <_close_r>

080080a6 <memset>:
 80080a6:	4402      	add	r2, r0
 80080a8:	4603      	mov	r3, r0
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d100      	bne.n	80080b0 <memset+0xa>
 80080ae:	4770      	bx	lr
 80080b0:	f803 1b01 	strb.w	r1, [r3], #1
 80080b4:	e7f9      	b.n	80080aa <memset+0x4>
	...

080080b8 <_localeconv_r>:
 80080b8:	4800      	ldr	r0, [pc, #0]	; (80080bc <_localeconv_r+0x4>)
 80080ba:	4770      	bx	lr
 80080bc:	20000158 	.word	0x20000158

080080c0 <_close_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d06      	ldr	r5, [pc, #24]	; (80080dc <_close_r+0x1c>)
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f7f9 fe5f 	bl	8001d8e <_close>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_close_r+0x1a>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_close_r+0x1a>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	2000071c 	.word	0x2000071c

080080e0 <_lseek_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4d07      	ldr	r5, [pc, #28]	; (8008100 <_lseek_r+0x20>)
 80080e4:	4604      	mov	r4, r0
 80080e6:	4608      	mov	r0, r1
 80080e8:	4611      	mov	r1, r2
 80080ea:	2200      	movs	r2, #0
 80080ec:	602a      	str	r2, [r5, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	f7f9 fe74 	bl	8001ddc <_lseek>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_lseek_r+0x1e>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_lseek_r+0x1e>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	2000071c 	.word	0x2000071c

08008104 <_read_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d07      	ldr	r5, [pc, #28]	; (8008124 <_read_r+0x20>)
 8008108:	4604      	mov	r4, r0
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	2200      	movs	r2, #0
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7f9 fe02 	bl	8001d1c <_read>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_read_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_read_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	2000071c 	.word	0x2000071c

08008128 <_write_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d07      	ldr	r5, [pc, #28]	; (8008148 <_write_r+0x20>)
 800812c:	4604      	mov	r4, r0
 800812e:	4608      	mov	r0, r1
 8008130:	4611      	mov	r1, r2
 8008132:	2200      	movs	r2, #0
 8008134:	602a      	str	r2, [r5, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f7f9 fe0d 	bl	8001d56 <_write>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_write_r+0x1e>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_write_r+0x1e>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	2000071c 	.word	0x2000071c

0800814c <__errno>:
 800814c:	4b01      	ldr	r3, [pc, #4]	; (8008154 <__errno+0x8>)
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000064 	.word	0x20000064

08008158 <__libc_init_array>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	4d0d      	ldr	r5, [pc, #52]	; (8008190 <__libc_init_array+0x38>)
 800815c:	4c0d      	ldr	r4, [pc, #52]	; (8008194 <__libc_init_array+0x3c>)
 800815e:	1b64      	subs	r4, r4, r5
 8008160:	10a4      	asrs	r4, r4, #2
 8008162:	2600      	movs	r6, #0
 8008164:	42a6      	cmp	r6, r4
 8008166:	d109      	bne.n	800817c <__libc_init_array+0x24>
 8008168:	4d0b      	ldr	r5, [pc, #44]	; (8008198 <__libc_init_array+0x40>)
 800816a:	4c0c      	ldr	r4, [pc, #48]	; (800819c <__libc_init_array+0x44>)
 800816c:	f001 ff2a 	bl	8009fc4 <_init>
 8008170:	1b64      	subs	r4, r4, r5
 8008172:	10a4      	asrs	r4, r4, #2
 8008174:	2600      	movs	r6, #0
 8008176:	42a6      	cmp	r6, r4
 8008178:	d105      	bne.n	8008186 <__libc_init_array+0x2e>
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008180:	4798      	blx	r3
 8008182:	3601      	adds	r6, #1
 8008184:	e7ee      	b.n	8008164 <__libc_init_array+0xc>
 8008186:	f855 3b04 	ldr.w	r3, [r5], #4
 800818a:	4798      	blx	r3
 800818c:	3601      	adds	r6, #1
 800818e:	e7f2      	b.n	8008176 <__libc_init_array+0x1e>
 8008190:	0800a3f4 	.word	0x0800a3f4
 8008194:	0800a3f4 	.word	0x0800a3f4
 8008198:	0800a3f4 	.word	0x0800a3f4
 800819c:	0800a3f8 	.word	0x0800a3f8

080081a0 <__retarget_lock_init_recursive>:
 80081a0:	4770      	bx	lr

080081a2 <__retarget_lock_acquire_recursive>:
 80081a2:	4770      	bx	lr

080081a4 <__retarget_lock_release_recursive>:
 80081a4:	4770      	bx	lr

080081a6 <strcpy>:
 80081a6:	4603      	mov	r3, r0
 80081a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081ac:	f803 2b01 	strb.w	r2, [r3], #1
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	d1f9      	bne.n	80081a8 <strcpy+0x2>
 80081b4:	4770      	bx	lr

080081b6 <quorem>:
 80081b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	6903      	ldr	r3, [r0, #16]
 80081bc:	690c      	ldr	r4, [r1, #16]
 80081be:	42a3      	cmp	r3, r4
 80081c0:	4607      	mov	r7, r0
 80081c2:	db7e      	blt.n	80082c2 <quorem+0x10c>
 80081c4:	3c01      	subs	r4, #1
 80081c6:	f101 0814 	add.w	r8, r1, #20
 80081ca:	f100 0514 	add.w	r5, r0, #20
 80081ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081dc:	3301      	adds	r3, #1
 80081de:	429a      	cmp	r2, r3
 80081e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80081ec:	d331      	bcc.n	8008252 <quorem+0x9c>
 80081ee:	f04f 0e00 	mov.w	lr, #0
 80081f2:	4640      	mov	r0, r8
 80081f4:	46ac      	mov	ip, r5
 80081f6:	46f2      	mov	sl, lr
 80081f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80081fc:	b293      	uxth	r3, r2
 80081fe:	fb06 e303 	mla	r3, r6, r3, lr
 8008202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008206:	0c1a      	lsrs	r2, r3, #16
 8008208:	b29b      	uxth	r3, r3
 800820a:	ebaa 0303 	sub.w	r3, sl, r3
 800820e:	f8dc a000 	ldr.w	sl, [ip]
 8008212:	fa13 f38a 	uxtah	r3, r3, sl
 8008216:	fb06 220e 	mla	r2, r6, lr, r2
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008222:	b292      	uxth	r2, r2
 8008224:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800822c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008230:	4581      	cmp	r9, r0
 8008232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008236:	f84c 3b04 	str.w	r3, [ip], #4
 800823a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800823e:	d2db      	bcs.n	80081f8 <quorem+0x42>
 8008240:	f855 300b 	ldr.w	r3, [r5, fp]
 8008244:	b92b      	cbnz	r3, 8008252 <quorem+0x9c>
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	3b04      	subs	r3, #4
 800824a:	429d      	cmp	r5, r3
 800824c:	461a      	mov	r2, r3
 800824e:	d32c      	bcc.n	80082aa <quorem+0xf4>
 8008250:	613c      	str	r4, [r7, #16]
 8008252:	4638      	mov	r0, r7
 8008254:	f001 f9a6 	bl	80095a4 <__mcmp>
 8008258:	2800      	cmp	r0, #0
 800825a:	db22      	blt.n	80082a2 <quorem+0xec>
 800825c:	3601      	adds	r6, #1
 800825e:	4629      	mov	r1, r5
 8008260:	2000      	movs	r0, #0
 8008262:	f858 2b04 	ldr.w	r2, [r8], #4
 8008266:	f8d1 c000 	ldr.w	ip, [r1]
 800826a:	b293      	uxth	r3, r2
 800826c:	1ac3      	subs	r3, r0, r3
 800826e:	0c12      	lsrs	r2, r2, #16
 8008270:	fa13 f38c 	uxtah	r3, r3, ip
 8008274:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800827c:	b29b      	uxth	r3, r3
 800827e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008282:	45c1      	cmp	r9, r8
 8008284:	f841 3b04 	str.w	r3, [r1], #4
 8008288:	ea4f 4022 	mov.w	r0, r2, asr #16
 800828c:	d2e9      	bcs.n	8008262 <quorem+0xac>
 800828e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008296:	b922      	cbnz	r2, 80082a2 <quorem+0xec>
 8008298:	3b04      	subs	r3, #4
 800829a:	429d      	cmp	r5, r3
 800829c:	461a      	mov	r2, r3
 800829e:	d30a      	bcc.n	80082b6 <quorem+0x100>
 80082a0:	613c      	str	r4, [r7, #16]
 80082a2:	4630      	mov	r0, r6
 80082a4:	b003      	add	sp, #12
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	3b04      	subs	r3, #4
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	d1ce      	bne.n	8008250 <quorem+0x9a>
 80082b2:	3c01      	subs	r4, #1
 80082b4:	e7c9      	b.n	800824a <quorem+0x94>
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	3b04      	subs	r3, #4
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	d1f0      	bne.n	80082a0 <quorem+0xea>
 80082be:	3c01      	subs	r4, #1
 80082c0:	e7eb      	b.n	800829a <quorem+0xe4>
 80082c2:	2000      	movs	r0, #0
 80082c4:	e7ee      	b.n	80082a4 <quorem+0xee>
	...

080082c8 <_dtoa_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	ed2d 8b04 	vpush	{d8-d9}
 80082d0:	69c5      	ldr	r5, [r0, #28]
 80082d2:	b093      	sub	sp, #76	; 0x4c
 80082d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80082d8:	ec57 6b10 	vmov	r6, r7, d0
 80082dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082e0:	9107      	str	r1, [sp, #28]
 80082e2:	4604      	mov	r4, r0
 80082e4:	920a      	str	r2, [sp, #40]	; 0x28
 80082e6:	930d      	str	r3, [sp, #52]	; 0x34
 80082e8:	b975      	cbnz	r5, 8008308 <_dtoa_r+0x40>
 80082ea:	2010      	movs	r0, #16
 80082ec:	f000 fe2a 	bl	8008f44 <malloc>
 80082f0:	4602      	mov	r2, r0
 80082f2:	61e0      	str	r0, [r4, #28]
 80082f4:	b920      	cbnz	r0, 8008300 <_dtoa_r+0x38>
 80082f6:	4bae      	ldr	r3, [pc, #696]	; (80085b0 <_dtoa_r+0x2e8>)
 80082f8:	21ef      	movs	r1, #239	; 0xef
 80082fa:	48ae      	ldr	r0, [pc, #696]	; (80085b4 <_dtoa_r+0x2ec>)
 80082fc:	f001 fd2c 	bl	8009d58 <__assert_func>
 8008300:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008304:	6005      	str	r5, [r0, #0]
 8008306:	60c5      	str	r5, [r0, #12]
 8008308:	69e3      	ldr	r3, [r4, #28]
 800830a:	6819      	ldr	r1, [r3, #0]
 800830c:	b151      	cbz	r1, 8008324 <_dtoa_r+0x5c>
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	604a      	str	r2, [r1, #4]
 8008312:	2301      	movs	r3, #1
 8008314:	4093      	lsls	r3, r2
 8008316:	608b      	str	r3, [r1, #8]
 8008318:	4620      	mov	r0, r4
 800831a:	f000 ff07 	bl	800912c <_Bfree>
 800831e:	69e3      	ldr	r3, [r4, #28]
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	1e3b      	subs	r3, r7, #0
 8008326:	bfbb      	ittet	lt
 8008328:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800832c:	9303      	strlt	r3, [sp, #12]
 800832e:	2300      	movge	r3, #0
 8008330:	2201      	movlt	r2, #1
 8008332:	bfac      	ite	ge
 8008334:	f8c8 3000 	strge.w	r3, [r8]
 8008338:	f8c8 2000 	strlt.w	r2, [r8]
 800833c:	4b9e      	ldr	r3, [pc, #632]	; (80085b8 <_dtoa_r+0x2f0>)
 800833e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008342:	ea33 0308 	bics.w	r3, r3, r8
 8008346:	d11b      	bne.n	8008380 <_dtoa_r+0xb8>
 8008348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800834a:	f242 730f 	movw	r3, #9999	; 0x270f
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008354:	4333      	orrs	r3, r6
 8008356:	f000 8593 	beq.w	8008e80 <_dtoa_r+0xbb8>
 800835a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800835c:	b963      	cbnz	r3, 8008378 <_dtoa_r+0xb0>
 800835e:	4b97      	ldr	r3, [pc, #604]	; (80085bc <_dtoa_r+0x2f4>)
 8008360:	e027      	b.n	80083b2 <_dtoa_r+0xea>
 8008362:	4b97      	ldr	r3, [pc, #604]	; (80085c0 <_dtoa_r+0x2f8>)
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	3308      	adds	r3, #8
 8008368:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	9800      	ldr	r0, [sp, #0]
 800836e:	b013      	add	sp, #76	; 0x4c
 8008370:	ecbd 8b04 	vpop	{d8-d9}
 8008374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008378:	4b90      	ldr	r3, [pc, #576]	; (80085bc <_dtoa_r+0x2f4>)
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	3303      	adds	r3, #3
 800837e:	e7f3      	b.n	8008368 <_dtoa_r+0xa0>
 8008380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008384:	2200      	movs	r2, #0
 8008386:	ec51 0b17 	vmov	r0, r1, d7
 800838a:	eeb0 8a47 	vmov.f32	s16, s14
 800838e:	eef0 8a67 	vmov.f32	s17, s15
 8008392:	2300      	movs	r3, #0
 8008394:	f7f8 fbb0 	bl	8000af8 <__aeabi_dcmpeq>
 8008398:	4681      	mov	r9, r0
 800839a:	b160      	cbz	r0, 80083b6 <_dtoa_r+0xee>
 800839c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800839e:	2301      	movs	r3, #1
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8568 	beq.w	8008e7a <_dtoa_r+0xbb2>
 80083aa:	4b86      	ldr	r3, [pc, #536]	; (80085c4 <_dtoa_r+0x2fc>)
 80083ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	e7da      	b.n	800836c <_dtoa_r+0xa4>
 80083b6:	aa10      	add	r2, sp, #64	; 0x40
 80083b8:	a911      	add	r1, sp, #68	; 0x44
 80083ba:	4620      	mov	r0, r4
 80083bc:	eeb0 0a48 	vmov.f32	s0, s16
 80083c0:	eef0 0a68 	vmov.f32	s1, s17
 80083c4:	f001 f994 	bl	80096f0 <__d2b>
 80083c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80083cc:	4682      	mov	sl, r0
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	d07f      	beq.n	80084d2 <_dtoa_r+0x20a>
 80083d2:	ee18 3a90 	vmov	r3, s17
 80083d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80083de:	ec51 0b18 	vmov	r0, r1, d8
 80083e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80083ee:	4619      	mov	r1, r3
 80083f0:	2200      	movs	r2, #0
 80083f2:	4b75      	ldr	r3, [pc, #468]	; (80085c8 <_dtoa_r+0x300>)
 80083f4:	f7f7 ff60 	bl	80002b8 <__aeabi_dsub>
 80083f8:	a367      	add	r3, pc, #412	; (adr r3, 8008598 <_dtoa_r+0x2d0>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f8 f913 	bl	8000628 <__aeabi_dmul>
 8008402:	a367      	add	r3, pc, #412	; (adr r3, 80085a0 <_dtoa_r+0x2d8>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f7 ff58 	bl	80002bc <__adddf3>
 800840c:	4606      	mov	r6, r0
 800840e:	4628      	mov	r0, r5
 8008410:	460f      	mov	r7, r1
 8008412:	f7f8 f89f 	bl	8000554 <__aeabi_i2d>
 8008416:	a364      	add	r3, pc, #400	; (adr r3, 80085a8 <_dtoa_r+0x2e0>)
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f7f8 f904 	bl	8000628 <__aeabi_dmul>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4630      	mov	r0, r6
 8008426:	4639      	mov	r1, r7
 8008428:	f7f7 ff48 	bl	80002bc <__adddf3>
 800842c:	4606      	mov	r6, r0
 800842e:	460f      	mov	r7, r1
 8008430:	f7f8 fbaa 	bl	8000b88 <__aeabi_d2iz>
 8008434:	2200      	movs	r2, #0
 8008436:	4683      	mov	fp, r0
 8008438:	2300      	movs	r3, #0
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	f7f8 fb65 	bl	8000b0c <__aeabi_dcmplt>
 8008442:	b148      	cbz	r0, 8008458 <_dtoa_r+0x190>
 8008444:	4658      	mov	r0, fp
 8008446:	f7f8 f885 	bl	8000554 <__aeabi_i2d>
 800844a:	4632      	mov	r2, r6
 800844c:	463b      	mov	r3, r7
 800844e:	f7f8 fb53 	bl	8000af8 <__aeabi_dcmpeq>
 8008452:	b908      	cbnz	r0, 8008458 <_dtoa_r+0x190>
 8008454:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008458:	f1bb 0f16 	cmp.w	fp, #22
 800845c:	d857      	bhi.n	800850e <_dtoa_r+0x246>
 800845e:	4b5b      	ldr	r3, [pc, #364]	; (80085cc <_dtoa_r+0x304>)
 8008460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	ec51 0b18 	vmov	r0, r1, d8
 800846c:	f7f8 fb4e 	bl	8000b0c <__aeabi_dcmplt>
 8008470:	2800      	cmp	r0, #0
 8008472:	d04e      	beq.n	8008512 <_dtoa_r+0x24a>
 8008474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008478:	2300      	movs	r3, #0
 800847a:	930c      	str	r3, [sp, #48]	; 0x30
 800847c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800847e:	1b5b      	subs	r3, r3, r5
 8008480:	1e5a      	subs	r2, r3, #1
 8008482:	bf45      	ittet	mi
 8008484:	f1c3 0301 	rsbmi	r3, r3, #1
 8008488:	9305      	strmi	r3, [sp, #20]
 800848a:	2300      	movpl	r3, #0
 800848c:	2300      	movmi	r3, #0
 800848e:	9206      	str	r2, [sp, #24]
 8008490:	bf54      	ite	pl
 8008492:	9305      	strpl	r3, [sp, #20]
 8008494:	9306      	strmi	r3, [sp, #24]
 8008496:	f1bb 0f00 	cmp.w	fp, #0
 800849a:	db3c      	blt.n	8008516 <_dtoa_r+0x24e>
 800849c:	9b06      	ldr	r3, [sp, #24]
 800849e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80084a2:	445b      	add	r3, fp
 80084a4:	9306      	str	r3, [sp, #24]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9308      	str	r3, [sp, #32]
 80084aa:	9b07      	ldr	r3, [sp, #28]
 80084ac:	2b09      	cmp	r3, #9
 80084ae:	d868      	bhi.n	8008582 <_dtoa_r+0x2ba>
 80084b0:	2b05      	cmp	r3, #5
 80084b2:	bfc4      	itt	gt
 80084b4:	3b04      	subgt	r3, #4
 80084b6:	9307      	strgt	r3, [sp, #28]
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	f1a3 0302 	sub.w	r3, r3, #2
 80084be:	bfcc      	ite	gt
 80084c0:	2500      	movgt	r5, #0
 80084c2:	2501      	movle	r5, #1
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	f200 8085 	bhi.w	80085d4 <_dtoa_r+0x30c>
 80084ca:	e8df f003 	tbb	[pc, r3]
 80084ce:	3b2e      	.short	0x3b2e
 80084d0:	5839      	.short	0x5839
 80084d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084d6:	441d      	add	r5, r3
 80084d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084dc:	2b20      	cmp	r3, #32
 80084de:	bfc1      	itttt	gt
 80084e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80084e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80084ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80084f0:	bfd6      	itet	le
 80084f2:	f1c3 0320 	rsble	r3, r3, #32
 80084f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80084fa:	fa06 f003 	lslle.w	r0, r6, r3
 80084fe:	f7f8 f819 	bl	8000534 <__aeabi_ui2d>
 8008502:	2201      	movs	r2, #1
 8008504:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008508:	3d01      	subs	r5, #1
 800850a:	920e      	str	r2, [sp, #56]	; 0x38
 800850c:	e76f      	b.n	80083ee <_dtoa_r+0x126>
 800850e:	2301      	movs	r3, #1
 8008510:	e7b3      	b.n	800847a <_dtoa_r+0x1b2>
 8008512:	900c      	str	r0, [sp, #48]	; 0x30
 8008514:	e7b2      	b.n	800847c <_dtoa_r+0x1b4>
 8008516:	9b05      	ldr	r3, [sp, #20]
 8008518:	eba3 030b 	sub.w	r3, r3, fp
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	f1cb 0300 	rsb	r3, fp, #0
 8008522:	9308      	str	r3, [sp, #32]
 8008524:	2300      	movs	r3, #0
 8008526:	930b      	str	r3, [sp, #44]	; 0x2c
 8008528:	e7bf      	b.n	80084aa <_dtoa_r+0x1e2>
 800852a:	2300      	movs	r3, #0
 800852c:	9309      	str	r3, [sp, #36]	; 0x24
 800852e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008530:	2b00      	cmp	r3, #0
 8008532:	dc52      	bgt.n	80085da <_dtoa_r+0x312>
 8008534:	2301      	movs	r3, #1
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	461a      	mov	r2, r3
 800853c:	920a      	str	r2, [sp, #40]	; 0x28
 800853e:	e00b      	b.n	8008558 <_dtoa_r+0x290>
 8008540:	2301      	movs	r3, #1
 8008542:	e7f3      	b.n	800852c <_dtoa_r+0x264>
 8008544:	2300      	movs	r3, #0
 8008546:	9309      	str	r3, [sp, #36]	; 0x24
 8008548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854a:	445b      	add	r3, fp
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	3301      	adds	r3, #1
 8008550:	2b01      	cmp	r3, #1
 8008552:	9304      	str	r3, [sp, #16]
 8008554:	bfb8      	it	lt
 8008556:	2301      	movlt	r3, #1
 8008558:	69e0      	ldr	r0, [r4, #28]
 800855a:	2100      	movs	r1, #0
 800855c:	2204      	movs	r2, #4
 800855e:	f102 0614 	add.w	r6, r2, #20
 8008562:	429e      	cmp	r6, r3
 8008564:	d93d      	bls.n	80085e2 <_dtoa_r+0x31a>
 8008566:	6041      	str	r1, [r0, #4]
 8008568:	4620      	mov	r0, r4
 800856a:	f000 fd9f 	bl	80090ac <_Balloc>
 800856e:	9000      	str	r0, [sp, #0]
 8008570:	2800      	cmp	r0, #0
 8008572:	d139      	bne.n	80085e8 <_dtoa_r+0x320>
 8008574:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <_dtoa_r+0x308>)
 8008576:	4602      	mov	r2, r0
 8008578:	f240 11af 	movw	r1, #431	; 0x1af
 800857c:	e6bd      	b.n	80082fa <_dtoa_r+0x32>
 800857e:	2301      	movs	r3, #1
 8008580:	e7e1      	b.n	8008546 <_dtoa_r+0x27e>
 8008582:	2501      	movs	r5, #1
 8008584:	2300      	movs	r3, #0
 8008586:	9307      	str	r3, [sp, #28]
 8008588:	9509      	str	r5, [sp, #36]	; 0x24
 800858a:	f04f 33ff 	mov.w	r3, #4294967295
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	2200      	movs	r2, #0
 8008594:	2312      	movs	r3, #18
 8008596:	e7d1      	b.n	800853c <_dtoa_r+0x274>
 8008598:	636f4361 	.word	0x636f4361
 800859c:	3fd287a7 	.word	0x3fd287a7
 80085a0:	8b60c8b3 	.word	0x8b60c8b3
 80085a4:	3fc68a28 	.word	0x3fc68a28
 80085a8:	509f79fb 	.word	0x509f79fb
 80085ac:	3fd34413 	.word	0x3fd34413
 80085b0:	0800a1ba 	.word	0x0800a1ba
 80085b4:	0800a1d1 	.word	0x0800a1d1
 80085b8:	7ff00000 	.word	0x7ff00000
 80085bc:	0800a1b6 	.word	0x0800a1b6
 80085c0:	0800a1ad 	.word	0x0800a1ad
 80085c4:	0800a18a 	.word	0x0800a18a
 80085c8:	3ff80000 	.word	0x3ff80000
 80085cc:	0800a2c0 	.word	0x0800a2c0
 80085d0:	0800a229 	.word	0x0800a229
 80085d4:	2301      	movs	r3, #1
 80085d6:	9309      	str	r3, [sp, #36]	; 0x24
 80085d8:	e7d7      	b.n	800858a <_dtoa_r+0x2c2>
 80085da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	e7ba      	b.n	8008558 <_dtoa_r+0x290>
 80085e2:	3101      	adds	r1, #1
 80085e4:	0052      	lsls	r2, r2, #1
 80085e6:	e7ba      	b.n	800855e <_dtoa_r+0x296>
 80085e8:	69e3      	ldr	r3, [r4, #28]
 80085ea:	9a00      	ldr	r2, [sp, #0]
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	2b0e      	cmp	r3, #14
 80085f2:	f200 80a8 	bhi.w	8008746 <_dtoa_r+0x47e>
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	f000 80a5 	beq.w	8008746 <_dtoa_r+0x47e>
 80085fc:	f1bb 0f00 	cmp.w	fp, #0
 8008600:	dd38      	ble.n	8008674 <_dtoa_r+0x3ac>
 8008602:	4bc0      	ldr	r3, [pc, #768]	; (8008904 <_dtoa_r+0x63c>)
 8008604:	f00b 020f 	and.w	r2, fp, #15
 8008608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800860c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008610:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008614:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008618:	d019      	beq.n	800864e <_dtoa_r+0x386>
 800861a:	4bbb      	ldr	r3, [pc, #748]	; (8008908 <_dtoa_r+0x640>)
 800861c:	ec51 0b18 	vmov	r0, r1, d8
 8008620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008624:	f7f8 f92a 	bl	800087c <__aeabi_ddiv>
 8008628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800862c:	f008 080f 	and.w	r8, r8, #15
 8008630:	2503      	movs	r5, #3
 8008632:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008908 <_dtoa_r+0x640>
 8008636:	f1b8 0f00 	cmp.w	r8, #0
 800863a:	d10a      	bne.n	8008652 <_dtoa_r+0x38a>
 800863c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008640:	4632      	mov	r2, r6
 8008642:	463b      	mov	r3, r7
 8008644:	f7f8 f91a 	bl	800087c <__aeabi_ddiv>
 8008648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800864c:	e02b      	b.n	80086a6 <_dtoa_r+0x3de>
 800864e:	2502      	movs	r5, #2
 8008650:	e7ef      	b.n	8008632 <_dtoa_r+0x36a>
 8008652:	f018 0f01 	tst.w	r8, #1
 8008656:	d008      	beq.n	800866a <_dtoa_r+0x3a2>
 8008658:	4630      	mov	r0, r6
 800865a:	4639      	mov	r1, r7
 800865c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008660:	f7f7 ffe2 	bl	8000628 <__aeabi_dmul>
 8008664:	3501      	adds	r5, #1
 8008666:	4606      	mov	r6, r0
 8008668:	460f      	mov	r7, r1
 800866a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800866e:	f109 0908 	add.w	r9, r9, #8
 8008672:	e7e0      	b.n	8008636 <_dtoa_r+0x36e>
 8008674:	f000 809f 	beq.w	80087b6 <_dtoa_r+0x4ee>
 8008678:	f1cb 0600 	rsb	r6, fp, #0
 800867c:	4ba1      	ldr	r3, [pc, #644]	; (8008904 <_dtoa_r+0x63c>)
 800867e:	4fa2      	ldr	r7, [pc, #648]	; (8008908 <_dtoa_r+0x640>)
 8008680:	f006 020f 	and.w	r2, r6, #15
 8008684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	ec51 0b18 	vmov	r0, r1, d8
 8008690:	f7f7 ffca 	bl	8000628 <__aeabi_dmul>
 8008694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008698:	1136      	asrs	r6, r6, #4
 800869a:	2300      	movs	r3, #0
 800869c:	2502      	movs	r5, #2
 800869e:	2e00      	cmp	r6, #0
 80086a0:	d17e      	bne.n	80087a0 <_dtoa_r+0x4d8>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1d0      	bne.n	8008648 <_dtoa_r+0x380>
 80086a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8084 	beq.w	80087ba <_dtoa_r+0x4f2>
 80086b2:	4b96      	ldr	r3, [pc, #600]	; (800890c <_dtoa_r+0x644>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f8 fa27 	bl	8000b0c <__aeabi_dcmplt>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d07b      	beq.n	80087ba <_dtoa_r+0x4f2>
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d078      	beq.n	80087ba <_dtoa_r+0x4f2>
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dd39      	ble.n	8008742 <_dtoa_r+0x47a>
 80086ce:	4b90      	ldr	r3, [pc, #576]	; (8008910 <_dtoa_r+0x648>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	f7f7 ffa7 	bl	8000628 <__aeabi_dmul>
 80086da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086de:	9e01      	ldr	r6, [sp, #4]
 80086e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80086e4:	3501      	adds	r5, #1
 80086e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086ea:	4628      	mov	r0, r5
 80086ec:	f7f7 ff32 	bl	8000554 <__aeabi_i2d>
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	f7f7 ff98 	bl	8000628 <__aeabi_dmul>
 80086f8:	4b86      	ldr	r3, [pc, #536]	; (8008914 <_dtoa_r+0x64c>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	f7f7 fdde 	bl	80002bc <__adddf3>
 8008700:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008708:	9303      	str	r3, [sp, #12]
 800870a:	2e00      	cmp	r6, #0
 800870c:	d158      	bne.n	80087c0 <_dtoa_r+0x4f8>
 800870e:	4b82      	ldr	r3, [pc, #520]	; (8008918 <_dtoa_r+0x650>)
 8008710:	2200      	movs	r2, #0
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 fdcf 	bl	80002b8 <__aeabi_dsub>
 800871a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800871e:	4680      	mov	r8, r0
 8008720:	4689      	mov	r9, r1
 8008722:	f7f8 fa11 	bl	8000b48 <__aeabi_dcmpgt>
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 8296 	bne.w	8008c58 <_dtoa_r+0x990>
 800872c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008730:	4640      	mov	r0, r8
 8008732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008736:	4649      	mov	r1, r9
 8008738:	f7f8 f9e8 	bl	8000b0c <__aeabi_dcmplt>
 800873c:	2800      	cmp	r0, #0
 800873e:	f040 8289 	bne.w	8008c54 <_dtoa_r+0x98c>
 8008742:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008748:	2b00      	cmp	r3, #0
 800874a:	f2c0 814e 	blt.w	80089ea <_dtoa_r+0x722>
 800874e:	f1bb 0f0e 	cmp.w	fp, #14
 8008752:	f300 814a 	bgt.w	80089ea <_dtoa_r+0x722>
 8008756:	4b6b      	ldr	r3, [pc, #428]	; (8008904 <_dtoa_r+0x63c>)
 8008758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800875c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008762:	2b00      	cmp	r3, #0
 8008764:	f280 80dc 	bge.w	8008920 <_dtoa_r+0x658>
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f300 80d8 	bgt.w	8008920 <_dtoa_r+0x658>
 8008770:	f040 826f 	bne.w	8008c52 <_dtoa_r+0x98a>
 8008774:	4b68      	ldr	r3, [pc, #416]	; (8008918 <_dtoa_r+0x650>)
 8008776:	2200      	movs	r2, #0
 8008778:	4640      	mov	r0, r8
 800877a:	4649      	mov	r1, r9
 800877c:	f7f7 ff54 	bl	8000628 <__aeabi_dmul>
 8008780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008784:	f7f8 f9d6 	bl	8000b34 <__aeabi_dcmpge>
 8008788:	9e04      	ldr	r6, [sp, #16]
 800878a:	4637      	mov	r7, r6
 800878c:	2800      	cmp	r0, #0
 800878e:	f040 8245 	bne.w	8008c1c <_dtoa_r+0x954>
 8008792:	9d00      	ldr	r5, [sp, #0]
 8008794:	2331      	movs	r3, #49	; 0x31
 8008796:	f805 3b01 	strb.w	r3, [r5], #1
 800879a:	f10b 0b01 	add.w	fp, fp, #1
 800879e:	e241      	b.n	8008c24 <_dtoa_r+0x95c>
 80087a0:	07f2      	lsls	r2, r6, #31
 80087a2:	d505      	bpl.n	80087b0 <_dtoa_r+0x4e8>
 80087a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a8:	f7f7 ff3e 	bl	8000628 <__aeabi_dmul>
 80087ac:	3501      	adds	r5, #1
 80087ae:	2301      	movs	r3, #1
 80087b0:	1076      	asrs	r6, r6, #1
 80087b2:	3708      	adds	r7, #8
 80087b4:	e773      	b.n	800869e <_dtoa_r+0x3d6>
 80087b6:	2502      	movs	r5, #2
 80087b8:	e775      	b.n	80086a6 <_dtoa_r+0x3de>
 80087ba:	9e04      	ldr	r6, [sp, #16]
 80087bc:	465f      	mov	r7, fp
 80087be:	e792      	b.n	80086e6 <_dtoa_r+0x41e>
 80087c0:	9900      	ldr	r1, [sp, #0]
 80087c2:	4b50      	ldr	r3, [pc, #320]	; (8008904 <_dtoa_r+0x63c>)
 80087c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087c8:	4431      	add	r1, r6
 80087ca:	9102      	str	r1, [sp, #8]
 80087cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ce:	eeb0 9a47 	vmov.f32	s18, s14
 80087d2:	eef0 9a67 	vmov.f32	s19, s15
 80087d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087de:	2900      	cmp	r1, #0
 80087e0:	d044      	beq.n	800886c <_dtoa_r+0x5a4>
 80087e2:	494e      	ldr	r1, [pc, #312]	; (800891c <_dtoa_r+0x654>)
 80087e4:	2000      	movs	r0, #0
 80087e6:	f7f8 f849 	bl	800087c <__aeabi_ddiv>
 80087ea:	ec53 2b19 	vmov	r2, r3, d9
 80087ee:	f7f7 fd63 	bl	80002b8 <__aeabi_dsub>
 80087f2:	9d00      	ldr	r5, [sp, #0]
 80087f4:	ec41 0b19 	vmov	d9, r0, r1
 80087f8:	4649      	mov	r1, r9
 80087fa:	4640      	mov	r0, r8
 80087fc:	f7f8 f9c4 	bl	8000b88 <__aeabi_d2iz>
 8008800:	4606      	mov	r6, r0
 8008802:	f7f7 fea7 	bl	8000554 <__aeabi_i2d>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4640      	mov	r0, r8
 800880c:	4649      	mov	r1, r9
 800880e:	f7f7 fd53 	bl	80002b8 <__aeabi_dsub>
 8008812:	3630      	adds	r6, #48	; 0x30
 8008814:	f805 6b01 	strb.w	r6, [r5], #1
 8008818:	ec53 2b19 	vmov	r2, r3, d9
 800881c:	4680      	mov	r8, r0
 800881e:	4689      	mov	r9, r1
 8008820:	f7f8 f974 	bl	8000b0c <__aeabi_dcmplt>
 8008824:	2800      	cmp	r0, #0
 8008826:	d164      	bne.n	80088f2 <_dtoa_r+0x62a>
 8008828:	4642      	mov	r2, r8
 800882a:	464b      	mov	r3, r9
 800882c:	4937      	ldr	r1, [pc, #220]	; (800890c <_dtoa_r+0x644>)
 800882e:	2000      	movs	r0, #0
 8008830:	f7f7 fd42 	bl	80002b8 <__aeabi_dsub>
 8008834:	ec53 2b19 	vmov	r2, r3, d9
 8008838:	f7f8 f968 	bl	8000b0c <__aeabi_dcmplt>
 800883c:	2800      	cmp	r0, #0
 800883e:	f040 80b6 	bne.w	80089ae <_dtoa_r+0x6e6>
 8008842:	9b02      	ldr	r3, [sp, #8]
 8008844:	429d      	cmp	r5, r3
 8008846:	f43f af7c 	beq.w	8008742 <_dtoa_r+0x47a>
 800884a:	4b31      	ldr	r3, [pc, #196]	; (8008910 <_dtoa_r+0x648>)
 800884c:	ec51 0b19 	vmov	r0, r1, d9
 8008850:	2200      	movs	r2, #0
 8008852:	f7f7 fee9 	bl	8000628 <__aeabi_dmul>
 8008856:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <_dtoa_r+0x648>)
 8008858:	ec41 0b19 	vmov	d9, r0, r1
 800885c:	2200      	movs	r2, #0
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f7f7 fee1 	bl	8000628 <__aeabi_dmul>
 8008866:	4680      	mov	r8, r0
 8008868:	4689      	mov	r9, r1
 800886a:	e7c5      	b.n	80087f8 <_dtoa_r+0x530>
 800886c:	ec51 0b17 	vmov	r0, r1, d7
 8008870:	f7f7 feda 	bl	8000628 <__aeabi_dmul>
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	9d00      	ldr	r5, [sp, #0]
 8008878:	930f      	str	r3, [sp, #60]	; 0x3c
 800887a:	ec41 0b19 	vmov	d9, r0, r1
 800887e:	4649      	mov	r1, r9
 8008880:	4640      	mov	r0, r8
 8008882:	f7f8 f981 	bl	8000b88 <__aeabi_d2iz>
 8008886:	4606      	mov	r6, r0
 8008888:	f7f7 fe64 	bl	8000554 <__aeabi_i2d>
 800888c:	3630      	adds	r6, #48	; 0x30
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4640      	mov	r0, r8
 8008894:	4649      	mov	r1, r9
 8008896:	f7f7 fd0f 	bl	80002b8 <__aeabi_dsub>
 800889a:	f805 6b01 	strb.w	r6, [r5], #1
 800889e:	9b02      	ldr	r3, [sp, #8]
 80088a0:	429d      	cmp	r5, r3
 80088a2:	4680      	mov	r8, r0
 80088a4:	4689      	mov	r9, r1
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	d124      	bne.n	80088f6 <_dtoa_r+0x62e>
 80088ac:	4b1b      	ldr	r3, [pc, #108]	; (800891c <_dtoa_r+0x654>)
 80088ae:	ec51 0b19 	vmov	r0, r1, d9
 80088b2:	f7f7 fd03 	bl	80002bc <__adddf3>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4640      	mov	r0, r8
 80088bc:	4649      	mov	r1, r9
 80088be:	f7f8 f943 	bl	8000b48 <__aeabi_dcmpgt>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d173      	bne.n	80089ae <_dtoa_r+0x6e6>
 80088c6:	ec53 2b19 	vmov	r2, r3, d9
 80088ca:	4914      	ldr	r1, [pc, #80]	; (800891c <_dtoa_r+0x654>)
 80088cc:	2000      	movs	r0, #0
 80088ce:	f7f7 fcf3 	bl	80002b8 <__aeabi_dsub>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4640      	mov	r0, r8
 80088d8:	4649      	mov	r1, r9
 80088da:	f7f8 f917 	bl	8000b0c <__aeabi_dcmplt>
 80088de:	2800      	cmp	r0, #0
 80088e0:	f43f af2f 	beq.w	8008742 <_dtoa_r+0x47a>
 80088e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088e6:	1e6b      	subs	r3, r5, #1
 80088e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80088ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088ee:	2b30      	cmp	r3, #48	; 0x30
 80088f0:	d0f8      	beq.n	80088e4 <_dtoa_r+0x61c>
 80088f2:	46bb      	mov	fp, r7
 80088f4:	e04a      	b.n	800898c <_dtoa_r+0x6c4>
 80088f6:	4b06      	ldr	r3, [pc, #24]	; (8008910 <_dtoa_r+0x648>)
 80088f8:	f7f7 fe96 	bl	8000628 <__aeabi_dmul>
 80088fc:	4680      	mov	r8, r0
 80088fe:	4689      	mov	r9, r1
 8008900:	e7bd      	b.n	800887e <_dtoa_r+0x5b6>
 8008902:	bf00      	nop
 8008904:	0800a2c0 	.word	0x0800a2c0
 8008908:	0800a298 	.word	0x0800a298
 800890c:	3ff00000 	.word	0x3ff00000
 8008910:	40240000 	.word	0x40240000
 8008914:	401c0000 	.word	0x401c0000
 8008918:	40140000 	.word	0x40140000
 800891c:	3fe00000 	.word	0x3fe00000
 8008920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008924:	9d00      	ldr	r5, [sp, #0]
 8008926:	4642      	mov	r2, r8
 8008928:	464b      	mov	r3, r9
 800892a:	4630      	mov	r0, r6
 800892c:	4639      	mov	r1, r7
 800892e:	f7f7 ffa5 	bl	800087c <__aeabi_ddiv>
 8008932:	f7f8 f929 	bl	8000b88 <__aeabi_d2iz>
 8008936:	9001      	str	r0, [sp, #4]
 8008938:	f7f7 fe0c 	bl	8000554 <__aeabi_i2d>
 800893c:	4642      	mov	r2, r8
 800893e:	464b      	mov	r3, r9
 8008940:	f7f7 fe72 	bl	8000628 <__aeabi_dmul>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fcb4 	bl	80002b8 <__aeabi_dsub>
 8008950:	9e01      	ldr	r6, [sp, #4]
 8008952:	9f04      	ldr	r7, [sp, #16]
 8008954:	3630      	adds	r6, #48	; 0x30
 8008956:	f805 6b01 	strb.w	r6, [r5], #1
 800895a:	9e00      	ldr	r6, [sp, #0]
 800895c:	1bae      	subs	r6, r5, r6
 800895e:	42b7      	cmp	r7, r6
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	d134      	bne.n	80089d0 <_dtoa_r+0x708>
 8008966:	f7f7 fca9 	bl	80002bc <__adddf3>
 800896a:	4642      	mov	r2, r8
 800896c:	464b      	mov	r3, r9
 800896e:	4606      	mov	r6, r0
 8008970:	460f      	mov	r7, r1
 8008972:	f7f8 f8e9 	bl	8000b48 <__aeabi_dcmpgt>
 8008976:	b9c8      	cbnz	r0, 80089ac <_dtoa_r+0x6e4>
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	4630      	mov	r0, r6
 800897e:	4639      	mov	r1, r7
 8008980:	f7f8 f8ba 	bl	8000af8 <__aeabi_dcmpeq>
 8008984:	b110      	cbz	r0, 800898c <_dtoa_r+0x6c4>
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	07db      	lsls	r3, r3, #31
 800898a:	d40f      	bmi.n	80089ac <_dtoa_r+0x6e4>
 800898c:	4651      	mov	r1, sl
 800898e:	4620      	mov	r0, r4
 8008990:	f000 fbcc 	bl	800912c <_Bfree>
 8008994:	2300      	movs	r3, #0
 8008996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008998:	702b      	strb	r3, [r5, #0]
 800899a:	f10b 0301 	add.w	r3, fp, #1
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f43f ace2 	beq.w	800836c <_dtoa_r+0xa4>
 80089a8:	601d      	str	r5, [r3, #0]
 80089aa:	e4df      	b.n	800836c <_dtoa_r+0xa4>
 80089ac:	465f      	mov	r7, fp
 80089ae:	462b      	mov	r3, r5
 80089b0:	461d      	mov	r5, r3
 80089b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089b6:	2a39      	cmp	r2, #57	; 0x39
 80089b8:	d106      	bne.n	80089c8 <_dtoa_r+0x700>
 80089ba:	9a00      	ldr	r2, [sp, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d1f7      	bne.n	80089b0 <_dtoa_r+0x6e8>
 80089c0:	9900      	ldr	r1, [sp, #0]
 80089c2:	2230      	movs	r2, #48	; 0x30
 80089c4:	3701      	adds	r7, #1
 80089c6:	700a      	strb	r2, [r1, #0]
 80089c8:	781a      	ldrb	r2, [r3, #0]
 80089ca:	3201      	adds	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	e790      	b.n	80088f2 <_dtoa_r+0x62a>
 80089d0:	4ba3      	ldr	r3, [pc, #652]	; (8008c60 <_dtoa_r+0x998>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	f7f7 fe28 	bl	8000628 <__aeabi_dmul>
 80089d8:	2200      	movs	r2, #0
 80089da:	2300      	movs	r3, #0
 80089dc:	4606      	mov	r6, r0
 80089de:	460f      	mov	r7, r1
 80089e0:	f7f8 f88a 	bl	8000af8 <__aeabi_dcmpeq>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d09e      	beq.n	8008926 <_dtoa_r+0x65e>
 80089e8:	e7d0      	b.n	800898c <_dtoa_r+0x6c4>
 80089ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	f000 80ca 	beq.w	8008b86 <_dtoa_r+0x8be>
 80089f2:	9a07      	ldr	r2, [sp, #28]
 80089f4:	2a01      	cmp	r2, #1
 80089f6:	f300 80ad 	bgt.w	8008b54 <_dtoa_r+0x88c>
 80089fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089fc:	2a00      	cmp	r2, #0
 80089fe:	f000 80a5 	beq.w	8008b4c <_dtoa_r+0x884>
 8008a02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a06:	9e08      	ldr	r6, [sp, #32]
 8008a08:	9d05      	ldr	r5, [sp, #20]
 8008a0a:	9a05      	ldr	r2, [sp, #20]
 8008a0c:	441a      	add	r2, r3
 8008a0e:	9205      	str	r2, [sp, #20]
 8008a10:	9a06      	ldr	r2, [sp, #24]
 8008a12:	2101      	movs	r1, #1
 8008a14:	441a      	add	r2, r3
 8008a16:	4620      	mov	r0, r4
 8008a18:	9206      	str	r2, [sp, #24]
 8008a1a:	f000 fc3d 	bl	8009298 <__i2b>
 8008a1e:	4607      	mov	r7, r0
 8008a20:	b165      	cbz	r5, 8008a3c <_dtoa_r+0x774>
 8008a22:	9b06      	ldr	r3, [sp, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dd09      	ble.n	8008a3c <_dtoa_r+0x774>
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	9a05      	ldr	r2, [sp, #20]
 8008a2c:	bfa8      	it	ge
 8008a2e:	462b      	movge	r3, r5
 8008a30:	1ad2      	subs	r2, r2, r3
 8008a32:	9205      	str	r2, [sp, #20]
 8008a34:	9a06      	ldr	r2, [sp, #24]
 8008a36:	1aed      	subs	r5, r5, r3
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	9306      	str	r3, [sp, #24]
 8008a3c:	9b08      	ldr	r3, [sp, #32]
 8008a3e:	b1f3      	cbz	r3, 8008a7e <_dtoa_r+0x7b6>
 8008a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 80a3 	beq.w	8008b8e <_dtoa_r+0x8c6>
 8008a48:	2e00      	cmp	r6, #0
 8008a4a:	dd10      	ble.n	8008a6e <_dtoa_r+0x7a6>
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	4632      	mov	r2, r6
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 fce1 	bl	8009418 <__pow5mult>
 8008a56:	4652      	mov	r2, sl
 8008a58:	4601      	mov	r1, r0
 8008a5a:	4607      	mov	r7, r0
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 fc31 	bl	80092c4 <__multiply>
 8008a62:	4651      	mov	r1, sl
 8008a64:	4680      	mov	r8, r0
 8008a66:	4620      	mov	r0, r4
 8008a68:	f000 fb60 	bl	800912c <_Bfree>
 8008a6c:	46c2      	mov	sl, r8
 8008a6e:	9b08      	ldr	r3, [sp, #32]
 8008a70:	1b9a      	subs	r2, r3, r6
 8008a72:	d004      	beq.n	8008a7e <_dtoa_r+0x7b6>
 8008a74:	4651      	mov	r1, sl
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 fcce 	bl	8009418 <__pow5mult>
 8008a7c:	4682      	mov	sl, r0
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fc09 	bl	8009298 <__i2b>
 8008a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	f340 8081 	ble.w	8008b92 <_dtoa_r+0x8ca>
 8008a90:	461a      	mov	r2, r3
 8008a92:	4601      	mov	r1, r0
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fcbf 	bl	8009418 <__pow5mult>
 8008a9a:	9b07      	ldr	r3, [sp, #28]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	dd7a      	ble.n	8008b98 <_dtoa_r+0x8d0>
 8008aa2:	f04f 0800 	mov.w	r8, #0
 8008aa6:	6933      	ldr	r3, [r6, #16]
 8008aa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aac:	6918      	ldr	r0, [r3, #16]
 8008aae:	f000 fba5 	bl	80091fc <__hi0bits>
 8008ab2:	f1c0 0020 	rsb	r0, r0, #32
 8008ab6:	9b06      	ldr	r3, [sp, #24]
 8008ab8:	4418      	add	r0, r3
 8008aba:	f010 001f 	ands.w	r0, r0, #31
 8008abe:	f000 8094 	beq.w	8008bea <_dtoa_r+0x922>
 8008ac2:	f1c0 0320 	rsb	r3, r0, #32
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	f340 8085 	ble.w	8008bd6 <_dtoa_r+0x90e>
 8008acc:	9b05      	ldr	r3, [sp, #20]
 8008ace:	f1c0 001c 	rsb	r0, r0, #28
 8008ad2:	4403      	add	r3, r0
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	9b06      	ldr	r3, [sp, #24]
 8008ad8:	4403      	add	r3, r0
 8008ada:	4405      	add	r5, r0
 8008adc:	9306      	str	r3, [sp, #24]
 8008ade:	9b05      	ldr	r3, [sp, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	dd05      	ble.n	8008af0 <_dtoa_r+0x828>
 8008ae4:	4651      	mov	r1, sl
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fcef 	bl	80094cc <__lshift>
 8008aee:	4682      	mov	sl, r0
 8008af0:	9b06      	ldr	r3, [sp, #24]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dd05      	ble.n	8008b02 <_dtoa_r+0x83a>
 8008af6:	4631      	mov	r1, r6
 8008af8:	461a      	mov	r2, r3
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fce6 	bl	80094cc <__lshift>
 8008b00:	4606      	mov	r6, r0
 8008b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d072      	beq.n	8008bee <_dtoa_r+0x926>
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f000 fd4a 	bl	80095a4 <__mcmp>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	da6c      	bge.n	8008bee <_dtoa_r+0x926>
 8008b14:	2300      	movs	r3, #0
 8008b16:	4651      	mov	r1, sl
 8008b18:	220a      	movs	r2, #10
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fb28 	bl	8009170 <__multadd>
 8008b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b26:	4682      	mov	sl, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 81b0 	beq.w	8008e8e <_dtoa_r+0xbc6>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4639      	mov	r1, r7
 8008b32:	220a      	movs	r2, #10
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 fb1b 	bl	8009170 <__multadd>
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	4607      	mov	r7, r0
 8008b40:	f300 8096 	bgt.w	8008c70 <_dtoa_r+0x9a8>
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	dc59      	bgt.n	8008bfe <_dtoa_r+0x936>
 8008b4a:	e091      	b.n	8008c70 <_dtoa_r+0x9a8>
 8008b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b52:	e758      	b.n	8008a06 <_dtoa_r+0x73e>
 8008b54:	9b04      	ldr	r3, [sp, #16]
 8008b56:	1e5e      	subs	r6, r3, #1
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	42b3      	cmp	r3, r6
 8008b5c:	bfbf      	itttt	lt
 8008b5e:	9b08      	ldrlt	r3, [sp, #32]
 8008b60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008b62:	9608      	strlt	r6, [sp, #32]
 8008b64:	1af3      	sublt	r3, r6, r3
 8008b66:	bfb4      	ite	lt
 8008b68:	18d2      	addlt	r2, r2, r3
 8008b6a:	1b9e      	subge	r6, r3, r6
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	bfbc      	itt	lt
 8008b70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008b72:	2600      	movlt	r6, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bfb7      	itett	lt
 8008b78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008b80:	1a9d      	sublt	r5, r3, r2
 8008b82:	2300      	movlt	r3, #0
 8008b84:	e741      	b.n	8008a0a <_dtoa_r+0x742>
 8008b86:	9e08      	ldr	r6, [sp, #32]
 8008b88:	9d05      	ldr	r5, [sp, #20]
 8008b8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b8c:	e748      	b.n	8008a20 <_dtoa_r+0x758>
 8008b8e:	9a08      	ldr	r2, [sp, #32]
 8008b90:	e770      	b.n	8008a74 <_dtoa_r+0x7ac>
 8008b92:	9b07      	ldr	r3, [sp, #28]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	dc19      	bgt.n	8008bcc <_dtoa_r+0x904>
 8008b98:	9b02      	ldr	r3, [sp, #8]
 8008b9a:	b9bb      	cbnz	r3, 8008bcc <_dtoa_r+0x904>
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ba2:	b99b      	cbnz	r3, 8008bcc <_dtoa_r+0x904>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008baa:	0d1b      	lsrs	r3, r3, #20
 8008bac:	051b      	lsls	r3, r3, #20
 8008bae:	b183      	cbz	r3, 8008bd2 <_dtoa_r+0x90a>
 8008bb0:	9b05      	ldr	r3, [sp, #20]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	9305      	str	r3, [sp, #20]
 8008bb6:	9b06      	ldr	r3, [sp, #24]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	9306      	str	r3, [sp, #24]
 8008bbc:	f04f 0801 	mov.w	r8, #1
 8008bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f47f af6f 	bne.w	8008aa6 <_dtoa_r+0x7de>
 8008bc8:	2001      	movs	r0, #1
 8008bca:	e774      	b.n	8008ab6 <_dtoa_r+0x7ee>
 8008bcc:	f04f 0800 	mov.w	r8, #0
 8008bd0:	e7f6      	b.n	8008bc0 <_dtoa_r+0x8f8>
 8008bd2:	4698      	mov	r8, r3
 8008bd4:	e7f4      	b.n	8008bc0 <_dtoa_r+0x8f8>
 8008bd6:	d082      	beq.n	8008ade <_dtoa_r+0x816>
 8008bd8:	9a05      	ldr	r2, [sp, #20]
 8008bda:	331c      	adds	r3, #28
 8008bdc:	441a      	add	r2, r3
 8008bde:	9205      	str	r2, [sp, #20]
 8008be0:	9a06      	ldr	r2, [sp, #24]
 8008be2:	441a      	add	r2, r3
 8008be4:	441d      	add	r5, r3
 8008be6:	9206      	str	r2, [sp, #24]
 8008be8:	e779      	b.n	8008ade <_dtoa_r+0x816>
 8008bea:	4603      	mov	r3, r0
 8008bec:	e7f4      	b.n	8008bd8 <_dtoa_r+0x910>
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dc37      	bgt.n	8008c64 <_dtoa_r+0x99c>
 8008bf4:	9b07      	ldr	r3, [sp, #28]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	dd34      	ble.n	8008c64 <_dtoa_r+0x99c>
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	b963      	cbnz	r3, 8008c1c <_dtoa_r+0x954>
 8008c02:	4631      	mov	r1, r6
 8008c04:	2205      	movs	r2, #5
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 fab2 	bl	8009170 <__multadd>
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	4606      	mov	r6, r0
 8008c10:	4650      	mov	r0, sl
 8008c12:	f000 fcc7 	bl	80095a4 <__mcmp>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f73f adbb 	bgt.w	8008792 <_dtoa_r+0x4ca>
 8008c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1e:	9d00      	ldr	r5, [sp, #0]
 8008c20:	ea6f 0b03 	mvn.w	fp, r3
 8008c24:	f04f 0800 	mov.w	r8, #0
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fa7e 	bl	800912c <_Bfree>
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	f43f aeab 	beq.w	800898c <_dtoa_r+0x6c4>
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	d005      	beq.n	8008c48 <_dtoa_r+0x980>
 8008c3c:	45b8      	cmp	r8, r7
 8008c3e:	d003      	beq.n	8008c48 <_dtoa_r+0x980>
 8008c40:	4641      	mov	r1, r8
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fa72 	bl	800912c <_Bfree>
 8008c48:	4639      	mov	r1, r7
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 fa6e 	bl	800912c <_Bfree>
 8008c50:	e69c      	b.n	800898c <_dtoa_r+0x6c4>
 8008c52:	2600      	movs	r6, #0
 8008c54:	4637      	mov	r7, r6
 8008c56:	e7e1      	b.n	8008c1c <_dtoa_r+0x954>
 8008c58:	46bb      	mov	fp, r7
 8008c5a:	4637      	mov	r7, r6
 8008c5c:	e599      	b.n	8008792 <_dtoa_r+0x4ca>
 8008c5e:	bf00      	nop
 8008c60:	40240000 	.word	0x40240000
 8008c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 80c8 	beq.w	8008dfc <_dtoa_r+0xb34>
 8008c6c:	9b04      	ldr	r3, [sp, #16]
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	2d00      	cmp	r5, #0
 8008c72:	dd05      	ble.n	8008c80 <_dtoa_r+0x9b8>
 8008c74:	4639      	mov	r1, r7
 8008c76:	462a      	mov	r2, r5
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fc27 	bl	80094cc <__lshift>
 8008c7e:	4607      	mov	r7, r0
 8008c80:	f1b8 0f00 	cmp.w	r8, #0
 8008c84:	d05b      	beq.n	8008d3e <_dtoa_r+0xa76>
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fa0f 	bl	80090ac <_Balloc>
 8008c8e:	4605      	mov	r5, r0
 8008c90:	b928      	cbnz	r0, 8008c9e <_dtoa_r+0x9d6>
 8008c92:	4b83      	ldr	r3, [pc, #524]	; (8008ea0 <_dtoa_r+0xbd8>)
 8008c94:	4602      	mov	r2, r0
 8008c96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008c9a:	f7ff bb2e 	b.w	80082fa <_dtoa_r+0x32>
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	3202      	adds	r2, #2
 8008ca2:	0092      	lsls	r2, r2, #2
 8008ca4:	f107 010c 	add.w	r1, r7, #12
 8008ca8:	300c      	adds	r0, #12
 8008caa:	f001 f847 	bl	8009d3c <memcpy>
 8008cae:	2201      	movs	r2, #1
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 fc0a 	bl	80094cc <__lshift>
 8008cb8:	9b00      	ldr	r3, [sp, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	9308      	str	r3, [sp, #32]
 8008cc6:	9b02      	ldr	r3, [sp, #8]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	46b8      	mov	r8, r7
 8008cce:	9306      	str	r3, [sp, #24]
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	9b04      	ldr	r3, [sp, #16]
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	4650      	mov	r0, sl
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	f7ff fa6b 	bl	80081b6 <quorem>
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	9002      	str	r0, [sp, #8]
 8008ce4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ce8:	4650      	mov	r0, sl
 8008cea:	f000 fc5b 	bl	80095a4 <__mcmp>
 8008cee:	463a      	mov	r2, r7
 8008cf0:	9005      	str	r0, [sp, #20]
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 fc71 	bl	80095dc <__mdiff>
 8008cfa:	68c2      	ldr	r2, [r0, #12]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	bb02      	cbnz	r2, 8008d42 <_dtoa_r+0xa7a>
 8008d00:	4601      	mov	r1, r0
 8008d02:	4650      	mov	r0, sl
 8008d04:	f000 fc4e 	bl	80095a4 <__mcmp>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d10:	f000 fa0c 	bl	800912c <_Bfree>
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d18:	9d04      	ldr	r5, [sp, #16]
 8008d1a:	ea43 0102 	orr.w	r1, r3, r2
 8008d1e:	9b06      	ldr	r3, [sp, #24]
 8008d20:	4319      	orrs	r1, r3
 8008d22:	d110      	bne.n	8008d46 <_dtoa_r+0xa7e>
 8008d24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d28:	d029      	beq.n	8008d7e <_dtoa_r+0xab6>
 8008d2a:	9b05      	ldr	r3, [sp, #20]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dd02      	ble.n	8008d36 <_dtoa_r+0xa6e>
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	f883 9000 	strb.w	r9, [r3]
 8008d3c:	e774      	b.n	8008c28 <_dtoa_r+0x960>
 8008d3e:	4638      	mov	r0, r7
 8008d40:	e7ba      	b.n	8008cb8 <_dtoa_r+0x9f0>
 8008d42:	2201      	movs	r2, #1
 8008d44:	e7e1      	b.n	8008d0a <_dtoa_r+0xa42>
 8008d46:	9b05      	ldr	r3, [sp, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	db04      	blt.n	8008d56 <_dtoa_r+0xa8e>
 8008d4c:	9907      	ldr	r1, [sp, #28]
 8008d4e:	430b      	orrs	r3, r1
 8008d50:	9906      	ldr	r1, [sp, #24]
 8008d52:	430b      	orrs	r3, r1
 8008d54:	d120      	bne.n	8008d98 <_dtoa_r+0xad0>
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	dded      	ble.n	8008d36 <_dtoa_r+0xa6e>
 8008d5a:	4651      	mov	r1, sl
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fbb4 	bl	80094cc <__lshift>
 8008d64:	4631      	mov	r1, r6
 8008d66:	4682      	mov	sl, r0
 8008d68:	f000 fc1c 	bl	80095a4 <__mcmp>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	dc03      	bgt.n	8008d78 <_dtoa_r+0xab0>
 8008d70:	d1e1      	bne.n	8008d36 <_dtoa_r+0xa6e>
 8008d72:	f019 0f01 	tst.w	r9, #1
 8008d76:	d0de      	beq.n	8008d36 <_dtoa_r+0xa6e>
 8008d78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d7c:	d1d8      	bne.n	8008d30 <_dtoa_r+0xa68>
 8008d7e:	9a01      	ldr	r2, [sp, #4]
 8008d80:	2339      	movs	r3, #57	; 0x39
 8008d82:	7013      	strb	r3, [r2, #0]
 8008d84:	462b      	mov	r3, r5
 8008d86:	461d      	mov	r5, r3
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d8e:	2a39      	cmp	r2, #57	; 0x39
 8008d90:	d06c      	beq.n	8008e6c <_dtoa_r+0xba4>
 8008d92:	3201      	adds	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	e747      	b.n	8008c28 <_dtoa_r+0x960>
 8008d98:	2a00      	cmp	r2, #0
 8008d9a:	dd07      	ble.n	8008dac <_dtoa_r+0xae4>
 8008d9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008da0:	d0ed      	beq.n	8008d7e <_dtoa_r+0xab6>
 8008da2:	9a01      	ldr	r2, [sp, #4]
 8008da4:	f109 0301 	add.w	r3, r9, #1
 8008da8:	7013      	strb	r3, [r2, #0]
 8008daa:	e73d      	b.n	8008c28 <_dtoa_r+0x960>
 8008dac:	9b04      	ldr	r3, [sp, #16]
 8008dae:	9a08      	ldr	r2, [sp, #32]
 8008db0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d043      	beq.n	8008e40 <_dtoa_r+0xb78>
 8008db8:	4651      	mov	r1, sl
 8008dba:	2300      	movs	r3, #0
 8008dbc:	220a      	movs	r2, #10
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 f9d6 	bl	8009170 <__multadd>
 8008dc4:	45b8      	cmp	r8, r7
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	f04f 0300 	mov.w	r3, #0
 8008dcc:	f04f 020a 	mov.w	r2, #10
 8008dd0:	4641      	mov	r1, r8
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	d107      	bne.n	8008de6 <_dtoa_r+0xb1e>
 8008dd6:	f000 f9cb 	bl	8009170 <__multadd>
 8008dda:	4680      	mov	r8, r0
 8008ddc:	4607      	mov	r7, r0
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	3301      	adds	r3, #1
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	e775      	b.n	8008cd2 <_dtoa_r+0xa0a>
 8008de6:	f000 f9c3 	bl	8009170 <__multadd>
 8008dea:	4639      	mov	r1, r7
 8008dec:	4680      	mov	r8, r0
 8008dee:	2300      	movs	r3, #0
 8008df0:	220a      	movs	r2, #10
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 f9bc 	bl	8009170 <__multadd>
 8008df8:	4607      	mov	r7, r0
 8008dfa:	e7f0      	b.n	8008dde <_dtoa_r+0xb16>
 8008dfc:	9b04      	ldr	r3, [sp, #16]
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	9d00      	ldr	r5, [sp, #0]
 8008e02:	4631      	mov	r1, r6
 8008e04:	4650      	mov	r0, sl
 8008e06:	f7ff f9d6 	bl	80081b6 <quorem>
 8008e0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e0e:	9b00      	ldr	r3, [sp, #0]
 8008e10:	f805 9b01 	strb.w	r9, [r5], #1
 8008e14:	1aea      	subs	r2, r5, r3
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	dd07      	ble.n	8008e2c <_dtoa_r+0xb64>
 8008e1c:	4651      	mov	r1, sl
 8008e1e:	2300      	movs	r3, #0
 8008e20:	220a      	movs	r2, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 f9a4 	bl	8009170 <__multadd>
 8008e28:	4682      	mov	sl, r0
 8008e2a:	e7ea      	b.n	8008e02 <_dtoa_r+0xb3a>
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfc8      	it	gt
 8008e32:	461d      	movgt	r5, r3
 8008e34:	9b00      	ldr	r3, [sp, #0]
 8008e36:	bfd8      	it	le
 8008e38:	2501      	movle	r5, #1
 8008e3a:	441d      	add	r5, r3
 8008e3c:	f04f 0800 	mov.w	r8, #0
 8008e40:	4651      	mov	r1, sl
 8008e42:	2201      	movs	r2, #1
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 fb41 	bl	80094cc <__lshift>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	f000 fba9 	bl	80095a4 <__mcmp>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	dc96      	bgt.n	8008d84 <_dtoa_r+0xabc>
 8008e56:	d102      	bne.n	8008e5e <_dtoa_r+0xb96>
 8008e58:	f019 0f01 	tst.w	r9, #1
 8008e5c:	d192      	bne.n	8008d84 <_dtoa_r+0xabc>
 8008e5e:	462b      	mov	r3, r5
 8008e60:	461d      	mov	r5, r3
 8008e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e66:	2a30      	cmp	r2, #48	; 0x30
 8008e68:	d0fa      	beq.n	8008e60 <_dtoa_r+0xb98>
 8008e6a:	e6dd      	b.n	8008c28 <_dtoa_r+0x960>
 8008e6c:	9a00      	ldr	r2, [sp, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d189      	bne.n	8008d86 <_dtoa_r+0xabe>
 8008e72:	f10b 0b01 	add.w	fp, fp, #1
 8008e76:	2331      	movs	r3, #49	; 0x31
 8008e78:	e796      	b.n	8008da8 <_dtoa_r+0xae0>
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <_dtoa_r+0xbdc>)
 8008e7c:	f7ff ba99 	b.w	80083b2 <_dtoa_r+0xea>
 8008e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f47f aa6d 	bne.w	8008362 <_dtoa_r+0x9a>
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <_dtoa_r+0xbe0>)
 8008e8a:	f7ff ba92 	b.w	80083b2 <_dtoa_r+0xea>
 8008e8e:	9b01      	ldr	r3, [sp, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dcb5      	bgt.n	8008e00 <_dtoa_r+0xb38>
 8008e94:	9b07      	ldr	r3, [sp, #28]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	f73f aeb1 	bgt.w	8008bfe <_dtoa_r+0x936>
 8008e9c:	e7b0      	b.n	8008e00 <_dtoa_r+0xb38>
 8008e9e:	bf00      	nop
 8008ea0:	0800a229 	.word	0x0800a229
 8008ea4:	0800a189 	.word	0x0800a189
 8008ea8:	0800a1ad 	.word	0x0800a1ad

08008eac <_free_r>:
 8008eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eae:	2900      	cmp	r1, #0
 8008eb0:	d044      	beq.n	8008f3c <_free_r+0x90>
 8008eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb6:	9001      	str	r0, [sp, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f1a1 0404 	sub.w	r4, r1, #4
 8008ebe:	bfb8      	it	lt
 8008ec0:	18e4      	addlt	r4, r4, r3
 8008ec2:	f000 f8e7 	bl	8009094 <__malloc_lock>
 8008ec6:	4a1e      	ldr	r2, [pc, #120]	; (8008f40 <_free_r+0x94>)
 8008ec8:	9801      	ldr	r0, [sp, #4]
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	b933      	cbnz	r3, 8008edc <_free_r+0x30>
 8008ece:	6063      	str	r3, [r4, #4]
 8008ed0:	6014      	str	r4, [r2, #0]
 8008ed2:	b003      	add	sp, #12
 8008ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ed8:	f000 b8e2 	b.w	80090a0 <__malloc_unlock>
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d908      	bls.n	8008ef2 <_free_r+0x46>
 8008ee0:	6825      	ldr	r5, [r4, #0]
 8008ee2:	1961      	adds	r1, r4, r5
 8008ee4:	428b      	cmp	r3, r1
 8008ee6:	bf01      	itttt	eq
 8008ee8:	6819      	ldreq	r1, [r3, #0]
 8008eea:	685b      	ldreq	r3, [r3, #4]
 8008eec:	1949      	addeq	r1, r1, r5
 8008eee:	6021      	streq	r1, [r4, #0]
 8008ef0:	e7ed      	b.n	8008ece <_free_r+0x22>
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	b10b      	cbz	r3, 8008efc <_free_r+0x50>
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d9fa      	bls.n	8008ef2 <_free_r+0x46>
 8008efc:	6811      	ldr	r1, [r2, #0]
 8008efe:	1855      	adds	r5, r2, r1
 8008f00:	42a5      	cmp	r5, r4
 8008f02:	d10b      	bne.n	8008f1c <_free_r+0x70>
 8008f04:	6824      	ldr	r4, [r4, #0]
 8008f06:	4421      	add	r1, r4
 8008f08:	1854      	adds	r4, r2, r1
 8008f0a:	42a3      	cmp	r3, r4
 8008f0c:	6011      	str	r1, [r2, #0]
 8008f0e:	d1e0      	bne.n	8008ed2 <_free_r+0x26>
 8008f10:	681c      	ldr	r4, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	6053      	str	r3, [r2, #4]
 8008f16:	440c      	add	r4, r1
 8008f18:	6014      	str	r4, [r2, #0]
 8008f1a:	e7da      	b.n	8008ed2 <_free_r+0x26>
 8008f1c:	d902      	bls.n	8008f24 <_free_r+0x78>
 8008f1e:	230c      	movs	r3, #12
 8008f20:	6003      	str	r3, [r0, #0]
 8008f22:	e7d6      	b.n	8008ed2 <_free_r+0x26>
 8008f24:	6825      	ldr	r5, [r4, #0]
 8008f26:	1961      	adds	r1, r4, r5
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	bf04      	itt	eq
 8008f2c:	6819      	ldreq	r1, [r3, #0]
 8008f2e:	685b      	ldreq	r3, [r3, #4]
 8008f30:	6063      	str	r3, [r4, #4]
 8008f32:	bf04      	itt	eq
 8008f34:	1949      	addeq	r1, r1, r5
 8008f36:	6021      	streq	r1, [r4, #0]
 8008f38:	6054      	str	r4, [r2, #4]
 8008f3a:	e7ca      	b.n	8008ed2 <_free_r+0x26>
 8008f3c:	b003      	add	sp, #12
 8008f3e:	bd30      	pop	{r4, r5, pc}
 8008f40:	20000724 	.word	0x20000724

08008f44 <malloc>:
 8008f44:	4b02      	ldr	r3, [pc, #8]	; (8008f50 <malloc+0xc>)
 8008f46:	4601      	mov	r1, r0
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f000 b823 	b.w	8008f94 <_malloc_r>
 8008f4e:	bf00      	nop
 8008f50:	20000064 	.word	0x20000064

08008f54 <sbrk_aligned>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	4e0e      	ldr	r6, [pc, #56]	; (8008f90 <sbrk_aligned+0x3c>)
 8008f58:	460c      	mov	r4, r1
 8008f5a:	6831      	ldr	r1, [r6, #0]
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	b911      	cbnz	r1, 8008f66 <sbrk_aligned+0x12>
 8008f60:	f000 fedc 	bl	8009d1c <_sbrk_r>
 8008f64:	6030      	str	r0, [r6, #0]
 8008f66:	4621      	mov	r1, r4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f000 fed7 	bl	8009d1c <_sbrk_r>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d00a      	beq.n	8008f88 <sbrk_aligned+0x34>
 8008f72:	1cc4      	adds	r4, r0, #3
 8008f74:	f024 0403 	bic.w	r4, r4, #3
 8008f78:	42a0      	cmp	r0, r4
 8008f7a:	d007      	beq.n	8008f8c <sbrk_aligned+0x38>
 8008f7c:	1a21      	subs	r1, r4, r0
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f000 fecc 	bl	8009d1c <_sbrk_r>
 8008f84:	3001      	adds	r0, #1
 8008f86:	d101      	bne.n	8008f8c <sbrk_aligned+0x38>
 8008f88:	f04f 34ff 	mov.w	r4, #4294967295
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	20000728 	.word	0x20000728

08008f94 <_malloc_r>:
 8008f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	1ccd      	adds	r5, r1, #3
 8008f9a:	f025 0503 	bic.w	r5, r5, #3
 8008f9e:	3508      	adds	r5, #8
 8008fa0:	2d0c      	cmp	r5, #12
 8008fa2:	bf38      	it	cc
 8008fa4:	250c      	movcc	r5, #12
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	4607      	mov	r7, r0
 8008faa:	db01      	blt.n	8008fb0 <_malloc_r+0x1c>
 8008fac:	42a9      	cmp	r1, r5
 8008fae:	d905      	bls.n	8008fbc <_malloc_r+0x28>
 8008fb0:	230c      	movs	r3, #12
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009090 <_malloc_r+0xfc>
 8008fc0:	f000 f868 	bl	8009094 <__malloc_lock>
 8008fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc8:	461c      	mov	r4, r3
 8008fca:	bb5c      	cbnz	r4, 8009024 <_malloc_r+0x90>
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4638      	mov	r0, r7
 8008fd0:	f7ff ffc0 	bl	8008f54 <sbrk_aligned>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	d155      	bne.n	8009086 <_malloc_r+0xf2>
 8008fda:	f8d8 4000 	ldr.w	r4, [r8]
 8008fde:	4626      	mov	r6, r4
 8008fe0:	2e00      	cmp	r6, #0
 8008fe2:	d145      	bne.n	8009070 <_malloc_r+0xdc>
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	d048      	beq.n	800907a <_malloc_r+0xe6>
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	4631      	mov	r1, r6
 8008fec:	4638      	mov	r0, r7
 8008fee:	eb04 0903 	add.w	r9, r4, r3
 8008ff2:	f000 fe93 	bl	8009d1c <_sbrk_r>
 8008ff6:	4581      	cmp	r9, r0
 8008ff8:	d13f      	bne.n	800907a <_malloc_r+0xe6>
 8008ffa:	6821      	ldr	r1, [r4, #0]
 8008ffc:	1a6d      	subs	r5, r5, r1
 8008ffe:	4629      	mov	r1, r5
 8009000:	4638      	mov	r0, r7
 8009002:	f7ff ffa7 	bl	8008f54 <sbrk_aligned>
 8009006:	3001      	adds	r0, #1
 8009008:	d037      	beq.n	800907a <_malloc_r+0xe6>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	442b      	add	r3, r5
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	f8d8 3000 	ldr.w	r3, [r8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d038      	beq.n	800908a <_malloc_r+0xf6>
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	42a2      	cmp	r2, r4
 800901c:	d12b      	bne.n	8009076 <_malloc_r+0xe2>
 800901e:	2200      	movs	r2, #0
 8009020:	605a      	str	r2, [r3, #4]
 8009022:	e00f      	b.n	8009044 <_malloc_r+0xb0>
 8009024:	6822      	ldr	r2, [r4, #0]
 8009026:	1b52      	subs	r2, r2, r5
 8009028:	d41f      	bmi.n	800906a <_malloc_r+0xd6>
 800902a:	2a0b      	cmp	r2, #11
 800902c:	d917      	bls.n	800905e <_malloc_r+0xca>
 800902e:	1961      	adds	r1, r4, r5
 8009030:	42a3      	cmp	r3, r4
 8009032:	6025      	str	r5, [r4, #0]
 8009034:	bf18      	it	ne
 8009036:	6059      	strne	r1, [r3, #4]
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	bf08      	it	eq
 800903c:	f8c8 1000 	streq.w	r1, [r8]
 8009040:	5162      	str	r2, [r4, r5]
 8009042:	604b      	str	r3, [r1, #4]
 8009044:	4638      	mov	r0, r7
 8009046:	f104 060b 	add.w	r6, r4, #11
 800904a:	f000 f829 	bl	80090a0 <__malloc_unlock>
 800904e:	f026 0607 	bic.w	r6, r6, #7
 8009052:	1d23      	adds	r3, r4, #4
 8009054:	1af2      	subs	r2, r6, r3
 8009056:	d0ae      	beq.n	8008fb6 <_malloc_r+0x22>
 8009058:	1b9b      	subs	r3, r3, r6
 800905a:	50a3      	str	r3, [r4, r2]
 800905c:	e7ab      	b.n	8008fb6 <_malloc_r+0x22>
 800905e:	42a3      	cmp	r3, r4
 8009060:	6862      	ldr	r2, [r4, #4]
 8009062:	d1dd      	bne.n	8009020 <_malloc_r+0x8c>
 8009064:	f8c8 2000 	str.w	r2, [r8]
 8009068:	e7ec      	b.n	8009044 <_malloc_r+0xb0>
 800906a:	4623      	mov	r3, r4
 800906c:	6864      	ldr	r4, [r4, #4]
 800906e:	e7ac      	b.n	8008fca <_malloc_r+0x36>
 8009070:	4634      	mov	r4, r6
 8009072:	6876      	ldr	r6, [r6, #4]
 8009074:	e7b4      	b.n	8008fe0 <_malloc_r+0x4c>
 8009076:	4613      	mov	r3, r2
 8009078:	e7cc      	b.n	8009014 <_malloc_r+0x80>
 800907a:	230c      	movs	r3, #12
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	4638      	mov	r0, r7
 8009080:	f000 f80e 	bl	80090a0 <__malloc_unlock>
 8009084:	e797      	b.n	8008fb6 <_malloc_r+0x22>
 8009086:	6025      	str	r5, [r4, #0]
 8009088:	e7dc      	b.n	8009044 <_malloc_r+0xb0>
 800908a:	605b      	str	r3, [r3, #4]
 800908c:	deff      	udf	#255	; 0xff
 800908e:	bf00      	nop
 8009090:	20000724 	.word	0x20000724

08009094 <__malloc_lock>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__malloc_lock+0x8>)
 8009096:	f7ff b884 	b.w	80081a2 <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	20000720 	.word	0x20000720

080090a0 <__malloc_unlock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__malloc_unlock+0x8>)
 80090a2:	f7ff b87f 	b.w	80081a4 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000720 	.word	0x20000720

080090ac <_Balloc>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	69c6      	ldr	r6, [r0, #28]
 80090b0:	4604      	mov	r4, r0
 80090b2:	460d      	mov	r5, r1
 80090b4:	b976      	cbnz	r6, 80090d4 <_Balloc+0x28>
 80090b6:	2010      	movs	r0, #16
 80090b8:	f7ff ff44 	bl	8008f44 <malloc>
 80090bc:	4602      	mov	r2, r0
 80090be:	61e0      	str	r0, [r4, #28]
 80090c0:	b920      	cbnz	r0, 80090cc <_Balloc+0x20>
 80090c2:	4b18      	ldr	r3, [pc, #96]	; (8009124 <_Balloc+0x78>)
 80090c4:	4818      	ldr	r0, [pc, #96]	; (8009128 <_Balloc+0x7c>)
 80090c6:	216b      	movs	r1, #107	; 0x6b
 80090c8:	f000 fe46 	bl	8009d58 <__assert_func>
 80090cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090d0:	6006      	str	r6, [r0, #0]
 80090d2:	60c6      	str	r6, [r0, #12]
 80090d4:	69e6      	ldr	r6, [r4, #28]
 80090d6:	68f3      	ldr	r3, [r6, #12]
 80090d8:	b183      	cbz	r3, 80090fc <_Balloc+0x50>
 80090da:	69e3      	ldr	r3, [r4, #28]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090e2:	b9b8      	cbnz	r0, 8009114 <_Balloc+0x68>
 80090e4:	2101      	movs	r1, #1
 80090e6:	fa01 f605 	lsl.w	r6, r1, r5
 80090ea:	1d72      	adds	r2, r6, #5
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fe50 	bl	8009d94 <_calloc_r>
 80090f4:	b160      	cbz	r0, 8009110 <_Balloc+0x64>
 80090f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090fa:	e00e      	b.n	800911a <_Balloc+0x6e>
 80090fc:	2221      	movs	r2, #33	; 0x21
 80090fe:	2104      	movs	r1, #4
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fe47 	bl	8009d94 <_calloc_r>
 8009106:	69e3      	ldr	r3, [r4, #28]
 8009108:	60f0      	str	r0, [r6, #12]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e4      	bne.n	80090da <_Balloc+0x2e>
 8009110:	2000      	movs	r0, #0
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	6802      	ldr	r2, [r0, #0]
 8009116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800911a:	2300      	movs	r3, #0
 800911c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009120:	e7f7      	b.n	8009112 <_Balloc+0x66>
 8009122:	bf00      	nop
 8009124:	0800a1ba 	.word	0x0800a1ba
 8009128:	0800a23a 	.word	0x0800a23a

0800912c <_Bfree>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	69c6      	ldr	r6, [r0, #28]
 8009130:	4605      	mov	r5, r0
 8009132:	460c      	mov	r4, r1
 8009134:	b976      	cbnz	r6, 8009154 <_Bfree+0x28>
 8009136:	2010      	movs	r0, #16
 8009138:	f7ff ff04 	bl	8008f44 <malloc>
 800913c:	4602      	mov	r2, r0
 800913e:	61e8      	str	r0, [r5, #28]
 8009140:	b920      	cbnz	r0, 800914c <_Bfree+0x20>
 8009142:	4b09      	ldr	r3, [pc, #36]	; (8009168 <_Bfree+0x3c>)
 8009144:	4809      	ldr	r0, [pc, #36]	; (800916c <_Bfree+0x40>)
 8009146:	218f      	movs	r1, #143	; 0x8f
 8009148:	f000 fe06 	bl	8009d58 <__assert_func>
 800914c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009150:	6006      	str	r6, [r0, #0]
 8009152:	60c6      	str	r6, [r0, #12]
 8009154:	b13c      	cbz	r4, 8009166 <_Bfree+0x3a>
 8009156:	69eb      	ldr	r3, [r5, #28]
 8009158:	6862      	ldr	r2, [r4, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009160:	6021      	str	r1, [r4, #0]
 8009162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	0800a1ba 	.word	0x0800a1ba
 800916c:	0800a23a 	.word	0x0800a23a

08009170 <__multadd>:
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	690d      	ldr	r5, [r1, #16]
 8009176:	4607      	mov	r7, r0
 8009178:	460c      	mov	r4, r1
 800917a:	461e      	mov	r6, r3
 800917c:	f101 0c14 	add.w	ip, r1, #20
 8009180:	2000      	movs	r0, #0
 8009182:	f8dc 3000 	ldr.w	r3, [ip]
 8009186:	b299      	uxth	r1, r3
 8009188:	fb02 6101 	mla	r1, r2, r1, r6
 800918c:	0c1e      	lsrs	r6, r3, #16
 800918e:	0c0b      	lsrs	r3, r1, #16
 8009190:	fb02 3306 	mla	r3, r2, r6, r3
 8009194:	b289      	uxth	r1, r1
 8009196:	3001      	adds	r0, #1
 8009198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800919c:	4285      	cmp	r5, r0
 800919e:	f84c 1b04 	str.w	r1, [ip], #4
 80091a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091a6:	dcec      	bgt.n	8009182 <__multadd+0x12>
 80091a8:	b30e      	cbz	r6, 80091ee <__multadd+0x7e>
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	dc19      	bgt.n	80091e4 <__multadd+0x74>
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	4638      	mov	r0, r7
 80091b4:	3101      	adds	r1, #1
 80091b6:	f7ff ff79 	bl	80090ac <_Balloc>
 80091ba:	4680      	mov	r8, r0
 80091bc:	b928      	cbnz	r0, 80091ca <__multadd+0x5a>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <__multadd+0x84>)
 80091c2:	480d      	ldr	r0, [pc, #52]	; (80091f8 <__multadd+0x88>)
 80091c4:	21ba      	movs	r1, #186	; 0xba
 80091c6:	f000 fdc7 	bl	8009d58 <__assert_func>
 80091ca:	6922      	ldr	r2, [r4, #16]
 80091cc:	3202      	adds	r2, #2
 80091ce:	f104 010c 	add.w	r1, r4, #12
 80091d2:	0092      	lsls	r2, r2, #2
 80091d4:	300c      	adds	r0, #12
 80091d6:	f000 fdb1 	bl	8009d3c <memcpy>
 80091da:	4621      	mov	r1, r4
 80091dc:	4638      	mov	r0, r7
 80091de:	f7ff ffa5 	bl	800912c <_Bfree>
 80091e2:	4644      	mov	r4, r8
 80091e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091e8:	3501      	adds	r5, #1
 80091ea:	615e      	str	r6, [r3, #20]
 80091ec:	6125      	str	r5, [r4, #16]
 80091ee:	4620      	mov	r0, r4
 80091f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f4:	0800a229 	.word	0x0800a229
 80091f8:	0800a23a 	.word	0x0800a23a

080091fc <__hi0bits>:
 80091fc:	0c03      	lsrs	r3, r0, #16
 80091fe:	041b      	lsls	r3, r3, #16
 8009200:	b9d3      	cbnz	r3, 8009238 <__hi0bits+0x3c>
 8009202:	0400      	lsls	r0, r0, #16
 8009204:	2310      	movs	r3, #16
 8009206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800920a:	bf04      	itt	eq
 800920c:	0200      	lsleq	r0, r0, #8
 800920e:	3308      	addeq	r3, #8
 8009210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009214:	bf04      	itt	eq
 8009216:	0100      	lsleq	r0, r0, #4
 8009218:	3304      	addeq	r3, #4
 800921a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800921e:	bf04      	itt	eq
 8009220:	0080      	lsleq	r0, r0, #2
 8009222:	3302      	addeq	r3, #2
 8009224:	2800      	cmp	r0, #0
 8009226:	db05      	blt.n	8009234 <__hi0bits+0x38>
 8009228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800922c:	f103 0301 	add.w	r3, r3, #1
 8009230:	bf08      	it	eq
 8009232:	2320      	moveq	r3, #32
 8009234:	4618      	mov	r0, r3
 8009236:	4770      	bx	lr
 8009238:	2300      	movs	r3, #0
 800923a:	e7e4      	b.n	8009206 <__hi0bits+0xa>

0800923c <__lo0bits>:
 800923c:	6803      	ldr	r3, [r0, #0]
 800923e:	f013 0207 	ands.w	r2, r3, #7
 8009242:	d00c      	beq.n	800925e <__lo0bits+0x22>
 8009244:	07d9      	lsls	r1, r3, #31
 8009246:	d422      	bmi.n	800928e <__lo0bits+0x52>
 8009248:	079a      	lsls	r2, r3, #30
 800924a:	bf49      	itett	mi
 800924c:	085b      	lsrmi	r3, r3, #1
 800924e:	089b      	lsrpl	r3, r3, #2
 8009250:	6003      	strmi	r3, [r0, #0]
 8009252:	2201      	movmi	r2, #1
 8009254:	bf5c      	itt	pl
 8009256:	6003      	strpl	r3, [r0, #0]
 8009258:	2202      	movpl	r2, #2
 800925a:	4610      	mov	r0, r2
 800925c:	4770      	bx	lr
 800925e:	b299      	uxth	r1, r3
 8009260:	b909      	cbnz	r1, 8009266 <__lo0bits+0x2a>
 8009262:	0c1b      	lsrs	r3, r3, #16
 8009264:	2210      	movs	r2, #16
 8009266:	b2d9      	uxtb	r1, r3
 8009268:	b909      	cbnz	r1, 800926e <__lo0bits+0x32>
 800926a:	3208      	adds	r2, #8
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	0719      	lsls	r1, r3, #28
 8009270:	bf04      	itt	eq
 8009272:	091b      	lsreq	r3, r3, #4
 8009274:	3204      	addeq	r2, #4
 8009276:	0799      	lsls	r1, r3, #30
 8009278:	bf04      	itt	eq
 800927a:	089b      	lsreq	r3, r3, #2
 800927c:	3202      	addeq	r2, #2
 800927e:	07d9      	lsls	r1, r3, #31
 8009280:	d403      	bmi.n	800928a <__lo0bits+0x4e>
 8009282:	085b      	lsrs	r3, r3, #1
 8009284:	f102 0201 	add.w	r2, r2, #1
 8009288:	d003      	beq.n	8009292 <__lo0bits+0x56>
 800928a:	6003      	str	r3, [r0, #0]
 800928c:	e7e5      	b.n	800925a <__lo0bits+0x1e>
 800928e:	2200      	movs	r2, #0
 8009290:	e7e3      	b.n	800925a <__lo0bits+0x1e>
 8009292:	2220      	movs	r2, #32
 8009294:	e7e1      	b.n	800925a <__lo0bits+0x1e>
	...

08009298 <__i2b>:
 8009298:	b510      	push	{r4, lr}
 800929a:	460c      	mov	r4, r1
 800929c:	2101      	movs	r1, #1
 800929e:	f7ff ff05 	bl	80090ac <_Balloc>
 80092a2:	4602      	mov	r2, r0
 80092a4:	b928      	cbnz	r0, 80092b2 <__i2b+0x1a>
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <__i2b+0x24>)
 80092a8:	4805      	ldr	r0, [pc, #20]	; (80092c0 <__i2b+0x28>)
 80092aa:	f240 1145 	movw	r1, #325	; 0x145
 80092ae:	f000 fd53 	bl	8009d58 <__assert_func>
 80092b2:	2301      	movs	r3, #1
 80092b4:	6144      	str	r4, [r0, #20]
 80092b6:	6103      	str	r3, [r0, #16]
 80092b8:	bd10      	pop	{r4, pc}
 80092ba:	bf00      	nop
 80092bc:	0800a229 	.word	0x0800a229
 80092c0:	0800a23a 	.word	0x0800a23a

080092c4 <__multiply>:
 80092c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c8:	4691      	mov	r9, r2
 80092ca:	690a      	ldr	r2, [r1, #16]
 80092cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	bfb8      	it	lt
 80092d4:	460b      	movlt	r3, r1
 80092d6:	460c      	mov	r4, r1
 80092d8:	bfbc      	itt	lt
 80092da:	464c      	movlt	r4, r9
 80092dc:	4699      	movlt	r9, r3
 80092de:	6927      	ldr	r7, [r4, #16]
 80092e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092e4:	68a3      	ldr	r3, [r4, #8]
 80092e6:	6861      	ldr	r1, [r4, #4]
 80092e8:	eb07 060a 	add.w	r6, r7, sl
 80092ec:	42b3      	cmp	r3, r6
 80092ee:	b085      	sub	sp, #20
 80092f0:	bfb8      	it	lt
 80092f2:	3101      	addlt	r1, #1
 80092f4:	f7ff feda 	bl	80090ac <_Balloc>
 80092f8:	b930      	cbnz	r0, 8009308 <__multiply+0x44>
 80092fa:	4602      	mov	r2, r0
 80092fc:	4b44      	ldr	r3, [pc, #272]	; (8009410 <__multiply+0x14c>)
 80092fe:	4845      	ldr	r0, [pc, #276]	; (8009414 <__multiply+0x150>)
 8009300:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009304:	f000 fd28 	bl	8009d58 <__assert_func>
 8009308:	f100 0514 	add.w	r5, r0, #20
 800930c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009310:	462b      	mov	r3, r5
 8009312:	2200      	movs	r2, #0
 8009314:	4543      	cmp	r3, r8
 8009316:	d321      	bcc.n	800935c <__multiply+0x98>
 8009318:	f104 0314 	add.w	r3, r4, #20
 800931c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009320:	f109 0314 	add.w	r3, r9, #20
 8009324:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009328:	9202      	str	r2, [sp, #8]
 800932a:	1b3a      	subs	r2, r7, r4
 800932c:	3a15      	subs	r2, #21
 800932e:	f022 0203 	bic.w	r2, r2, #3
 8009332:	3204      	adds	r2, #4
 8009334:	f104 0115 	add.w	r1, r4, #21
 8009338:	428f      	cmp	r7, r1
 800933a:	bf38      	it	cc
 800933c:	2204      	movcc	r2, #4
 800933e:	9201      	str	r2, [sp, #4]
 8009340:	9a02      	ldr	r2, [sp, #8]
 8009342:	9303      	str	r3, [sp, #12]
 8009344:	429a      	cmp	r2, r3
 8009346:	d80c      	bhi.n	8009362 <__multiply+0x9e>
 8009348:	2e00      	cmp	r6, #0
 800934a:	dd03      	ble.n	8009354 <__multiply+0x90>
 800934c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009350:	2b00      	cmp	r3, #0
 8009352:	d05b      	beq.n	800940c <__multiply+0x148>
 8009354:	6106      	str	r6, [r0, #16]
 8009356:	b005      	add	sp, #20
 8009358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935c:	f843 2b04 	str.w	r2, [r3], #4
 8009360:	e7d8      	b.n	8009314 <__multiply+0x50>
 8009362:	f8b3 a000 	ldrh.w	sl, [r3]
 8009366:	f1ba 0f00 	cmp.w	sl, #0
 800936a:	d024      	beq.n	80093b6 <__multiply+0xf2>
 800936c:	f104 0e14 	add.w	lr, r4, #20
 8009370:	46a9      	mov	r9, r5
 8009372:	f04f 0c00 	mov.w	ip, #0
 8009376:	f85e 2b04 	ldr.w	r2, [lr], #4
 800937a:	f8d9 1000 	ldr.w	r1, [r9]
 800937e:	fa1f fb82 	uxth.w	fp, r2
 8009382:	b289      	uxth	r1, r1
 8009384:	fb0a 110b 	mla	r1, sl, fp, r1
 8009388:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800938c:	f8d9 2000 	ldr.w	r2, [r9]
 8009390:	4461      	add	r1, ip
 8009392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009396:	fb0a c20b 	mla	r2, sl, fp, ip
 800939a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800939e:	b289      	uxth	r1, r1
 80093a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093a4:	4577      	cmp	r7, lr
 80093a6:	f849 1b04 	str.w	r1, [r9], #4
 80093aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ae:	d8e2      	bhi.n	8009376 <__multiply+0xb2>
 80093b0:	9a01      	ldr	r2, [sp, #4]
 80093b2:	f845 c002 	str.w	ip, [r5, r2]
 80093b6:	9a03      	ldr	r2, [sp, #12]
 80093b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093bc:	3304      	adds	r3, #4
 80093be:	f1b9 0f00 	cmp.w	r9, #0
 80093c2:	d021      	beq.n	8009408 <__multiply+0x144>
 80093c4:	6829      	ldr	r1, [r5, #0]
 80093c6:	f104 0c14 	add.w	ip, r4, #20
 80093ca:	46ae      	mov	lr, r5
 80093cc:	f04f 0a00 	mov.w	sl, #0
 80093d0:	f8bc b000 	ldrh.w	fp, [ip]
 80093d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093d8:	fb09 220b 	mla	r2, r9, fp, r2
 80093dc:	4452      	add	r2, sl
 80093de:	b289      	uxth	r1, r1
 80093e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093e4:	f84e 1b04 	str.w	r1, [lr], #4
 80093e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093f0:	f8be 1000 	ldrh.w	r1, [lr]
 80093f4:	fb09 110a 	mla	r1, r9, sl, r1
 80093f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80093fc:	4567      	cmp	r7, ip
 80093fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009402:	d8e5      	bhi.n	80093d0 <__multiply+0x10c>
 8009404:	9a01      	ldr	r2, [sp, #4]
 8009406:	50a9      	str	r1, [r5, r2]
 8009408:	3504      	adds	r5, #4
 800940a:	e799      	b.n	8009340 <__multiply+0x7c>
 800940c:	3e01      	subs	r6, #1
 800940e:	e79b      	b.n	8009348 <__multiply+0x84>
 8009410:	0800a229 	.word	0x0800a229
 8009414:	0800a23a 	.word	0x0800a23a

08009418 <__pow5mult>:
 8009418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800941c:	4615      	mov	r5, r2
 800941e:	f012 0203 	ands.w	r2, r2, #3
 8009422:	4606      	mov	r6, r0
 8009424:	460f      	mov	r7, r1
 8009426:	d007      	beq.n	8009438 <__pow5mult+0x20>
 8009428:	4c25      	ldr	r4, [pc, #148]	; (80094c0 <__pow5mult+0xa8>)
 800942a:	3a01      	subs	r2, #1
 800942c:	2300      	movs	r3, #0
 800942e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009432:	f7ff fe9d 	bl	8009170 <__multadd>
 8009436:	4607      	mov	r7, r0
 8009438:	10ad      	asrs	r5, r5, #2
 800943a:	d03d      	beq.n	80094b8 <__pow5mult+0xa0>
 800943c:	69f4      	ldr	r4, [r6, #28]
 800943e:	b97c      	cbnz	r4, 8009460 <__pow5mult+0x48>
 8009440:	2010      	movs	r0, #16
 8009442:	f7ff fd7f 	bl	8008f44 <malloc>
 8009446:	4602      	mov	r2, r0
 8009448:	61f0      	str	r0, [r6, #28]
 800944a:	b928      	cbnz	r0, 8009458 <__pow5mult+0x40>
 800944c:	4b1d      	ldr	r3, [pc, #116]	; (80094c4 <__pow5mult+0xac>)
 800944e:	481e      	ldr	r0, [pc, #120]	; (80094c8 <__pow5mult+0xb0>)
 8009450:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009454:	f000 fc80 	bl	8009d58 <__assert_func>
 8009458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800945c:	6004      	str	r4, [r0, #0]
 800945e:	60c4      	str	r4, [r0, #12]
 8009460:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009468:	b94c      	cbnz	r4, 800947e <__pow5mult+0x66>
 800946a:	f240 2171 	movw	r1, #625	; 0x271
 800946e:	4630      	mov	r0, r6
 8009470:	f7ff ff12 	bl	8009298 <__i2b>
 8009474:	2300      	movs	r3, #0
 8009476:	f8c8 0008 	str.w	r0, [r8, #8]
 800947a:	4604      	mov	r4, r0
 800947c:	6003      	str	r3, [r0, #0]
 800947e:	f04f 0900 	mov.w	r9, #0
 8009482:	07eb      	lsls	r3, r5, #31
 8009484:	d50a      	bpl.n	800949c <__pow5mult+0x84>
 8009486:	4639      	mov	r1, r7
 8009488:	4622      	mov	r2, r4
 800948a:	4630      	mov	r0, r6
 800948c:	f7ff ff1a 	bl	80092c4 <__multiply>
 8009490:	4639      	mov	r1, r7
 8009492:	4680      	mov	r8, r0
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff fe49 	bl	800912c <_Bfree>
 800949a:	4647      	mov	r7, r8
 800949c:	106d      	asrs	r5, r5, #1
 800949e:	d00b      	beq.n	80094b8 <__pow5mult+0xa0>
 80094a0:	6820      	ldr	r0, [r4, #0]
 80094a2:	b938      	cbnz	r0, 80094b4 <__pow5mult+0x9c>
 80094a4:	4622      	mov	r2, r4
 80094a6:	4621      	mov	r1, r4
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7ff ff0b 	bl	80092c4 <__multiply>
 80094ae:	6020      	str	r0, [r4, #0]
 80094b0:	f8c0 9000 	str.w	r9, [r0]
 80094b4:	4604      	mov	r4, r0
 80094b6:	e7e4      	b.n	8009482 <__pow5mult+0x6a>
 80094b8:	4638      	mov	r0, r7
 80094ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094be:	bf00      	nop
 80094c0:	0800a388 	.word	0x0800a388
 80094c4:	0800a1ba 	.word	0x0800a1ba
 80094c8:	0800a23a 	.word	0x0800a23a

080094cc <__lshift>:
 80094cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d0:	460c      	mov	r4, r1
 80094d2:	6849      	ldr	r1, [r1, #4]
 80094d4:	6923      	ldr	r3, [r4, #16]
 80094d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094da:	68a3      	ldr	r3, [r4, #8]
 80094dc:	4607      	mov	r7, r0
 80094de:	4691      	mov	r9, r2
 80094e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094e4:	f108 0601 	add.w	r6, r8, #1
 80094e8:	42b3      	cmp	r3, r6
 80094ea:	db0b      	blt.n	8009504 <__lshift+0x38>
 80094ec:	4638      	mov	r0, r7
 80094ee:	f7ff fddd 	bl	80090ac <_Balloc>
 80094f2:	4605      	mov	r5, r0
 80094f4:	b948      	cbnz	r0, 800950a <__lshift+0x3e>
 80094f6:	4602      	mov	r2, r0
 80094f8:	4b28      	ldr	r3, [pc, #160]	; (800959c <__lshift+0xd0>)
 80094fa:	4829      	ldr	r0, [pc, #164]	; (80095a0 <__lshift+0xd4>)
 80094fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009500:	f000 fc2a 	bl	8009d58 <__assert_func>
 8009504:	3101      	adds	r1, #1
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	e7ee      	b.n	80094e8 <__lshift+0x1c>
 800950a:	2300      	movs	r3, #0
 800950c:	f100 0114 	add.w	r1, r0, #20
 8009510:	f100 0210 	add.w	r2, r0, #16
 8009514:	4618      	mov	r0, r3
 8009516:	4553      	cmp	r3, sl
 8009518:	db33      	blt.n	8009582 <__lshift+0xb6>
 800951a:	6920      	ldr	r0, [r4, #16]
 800951c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009520:	f104 0314 	add.w	r3, r4, #20
 8009524:	f019 091f 	ands.w	r9, r9, #31
 8009528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800952c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009530:	d02b      	beq.n	800958a <__lshift+0xbe>
 8009532:	f1c9 0e20 	rsb	lr, r9, #32
 8009536:	468a      	mov	sl, r1
 8009538:	2200      	movs	r2, #0
 800953a:	6818      	ldr	r0, [r3, #0]
 800953c:	fa00 f009 	lsl.w	r0, r0, r9
 8009540:	4310      	orrs	r0, r2
 8009542:	f84a 0b04 	str.w	r0, [sl], #4
 8009546:	f853 2b04 	ldr.w	r2, [r3], #4
 800954a:	459c      	cmp	ip, r3
 800954c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009550:	d8f3      	bhi.n	800953a <__lshift+0x6e>
 8009552:	ebac 0304 	sub.w	r3, ip, r4
 8009556:	3b15      	subs	r3, #21
 8009558:	f023 0303 	bic.w	r3, r3, #3
 800955c:	3304      	adds	r3, #4
 800955e:	f104 0015 	add.w	r0, r4, #21
 8009562:	4584      	cmp	ip, r0
 8009564:	bf38      	it	cc
 8009566:	2304      	movcc	r3, #4
 8009568:	50ca      	str	r2, [r1, r3]
 800956a:	b10a      	cbz	r2, 8009570 <__lshift+0xa4>
 800956c:	f108 0602 	add.w	r6, r8, #2
 8009570:	3e01      	subs	r6, #1
 8009572:	4638      	mov	r0, r7
 8009574:	612e      	str	r6, [r5, #16]
 8009576:	4621      	mov	r1, r4
 8009578:	f7ff fdd8 	bl	800912c <_Bfree>
 800957c:	4628      	mov	r0, r5
 800957e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009582:	f842 0f04 	str.w	r0, [r2, #4]!
 8009586:	3301      	adds	r3, #1
 8009588:	e7c5      	b.n	8009516 <__lshift+0x4a>
 800958a:	3904      	subs	r1, #4
 800958c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009590:	f841 2f04 	str.w	r2, [r1, #4]!
 8009594:	459c      	cmp	ip, r3
 8009596:	d8f9      	bhi.n	800958c <__lshift+0xc0>
 8009598:	e7ea      	b.n	8009570 <__lshift+0xa4>
 800959a:	bf00      	nop
 800959c:	0800a229 	.word	0x0800a229
 80095a0:	0800a23a 	.word	0x0800a23a

080095a4 <__mcmp>:
 80095a4:	b530      	push	{r4, r5, lr}
 80095a6:	6902      	ldr	r2, [r0, #16]
 80095a8:	690c      	ldr	r4, [r1, #16]
 80095aa:	1b12      	subs	r2, r2, r4
 80095ac:	d10e      	bne.n	80095cc <__mcmp+0x28>
 80095ae:	f100 0314 	add.w	r3, r0, #20
 80095b2:	3114      	adds	r1, #20
 80095b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095c4:	42a5      	cmp	r5, r4
 80095c6:	d003      	beq.n	80095d0 <__mcmp+0x2c>
 80095c8:	d305      	bcc.n	80095d6 <__mcmp+0x32>
 80095ca:	2201      	movs	r2, #1
 80095cc:	4610      	mov	r0, r2
 80095ce:	bd30      	pop	{r4, r5, pc}
 80095d0:	4283      	cmp	r3, r0
 80095d2:	d3f3      	bcc.n	80095bc <__mcmp+0x18>
 80095d4:	e7fa      	b.n	80095cc <__mcmp+0x28>
 80095d6:	f04f 32ff 	mov.w	r2, #4294967295
 80095da:	e7f7      	b.n	80095cc <__mcmp+0x28>

080095dc <__mdiff>:
 80095dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e0:	460c      	mov	r4, r1
 80095e2:	4606      	mov	r6, r0
 80095e4:	4611      	mov	r1, r2
 80095e6:	4620      	mov	r0, r4
 80095e8:	4690      	mov	r8, r2
 80095ea:	f7ff ffdb 	bl	80095a4 <__mcmp>
 80095ee:	1e05      	subs	r5, r0, #0
 80095f0:	d110      	bne.n	8009614 <__mdiff+0x38>
 80095f2:	4629      	mov	r1, r5
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7ff fd59 	bl	80090ac <_Balloc>
 80095fa:	b930      	cbnz	r0, 800960a <__mdiff+0x2e>
 80095fc:	4b3a      	ldr	r3, [pc, #232]	; (80096e8 <__mdiff+0x10c>)
 80095fe:	4602      	mov	r2, r0
 8009600:	f240 2137 	movw	r1, #567	; 0x237
 8009604:	4839      	ldr	r0, [pc, #228]	; (80096ec <__mdiff+0x110>)
 8009606:	f000 fba7 	bl	8009d58 <__assert_func>
 800960a:	2301      	movs	r3, #1
 800960c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009614:	bfa4      	itt	ge
 8009616:	4643      	movge	r3, r8
 8009618:	46a0      	movge	r8, r4
 800961a:	4630      	mov	r0, r6
 800961c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009620:	bfa6      	itte	ge
 8009622:	461c      	movge	r4, r3
 8009624:	2500      	movge	r5, #0
 8009626:	2501      	movlt	r5, #1
 8009628:	f7ff fd40 	bl	80090ac <_Balloc>
 800962c:	b920      	cbnz	r0, 8009638 <__mdiff+0x5c>
 800962e:	4b2e      	ldr	r3, [pc, #184]	; (80096e8 <__mdiff+0x10c>)
 8009630:	4602      	mov	r2, r0
 8009632:	f240 2145 	movw	r1, #581	; 0x245
 8009636:	e7e5      	b.n	8009604 <__mdiff+0x28>
 8009638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800963c:	6926      	ldr	r6, [r4, #16]
 800963e:	60c5      	str	r5, [r0, #12]
 8009640:	f104 0914 	add.w	r9, r4, #20
 8009644:	f108 0514 	add.w	r5, r8, #20
 8009648:	f100 0e14 	add.w	lr, r0, #20
 800964c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009654:	f108 0210 	add.w	r2, r8, #16
 8009658:	46f2      	mov	sl, lr
 800965a:	2100      	movs	r1, #0
 800965c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009664:	fa11 f88b 	uxtah	r8, r1, fp
 8009668:	b299      	uxth	r1, r3
 800966a:	0c1b      	lsrs	r3, r3, #16
 800966c:	eba8 0801 	sub.w	r8, r8, r1
 8009670:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009674:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009678:	fa1f f888 	uxth.w	r8, r8
 800967c:	1419      	asrs	r1, r3, #16
 800967e:	454e      	cmp	r6, r9
 8009680:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009684:	f84a 3b04 	str.w	r3, [sl], #4
 8009688:	d8e8      	bhi.n	800965c <__mdiff+0x80>
 800968a:	1b33      	subs	r3, r6, r4
 800968c:	3b15      	subs	r3, #21
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	3304      	adds	r3, #4
 8009694:	3415      	adds	r4, #21
 8009696:	42a6      	cmp	r6, r4
 8009698:	bf38      	it	cc
 800969a:	2304      	movcc	r3, #4
 800969c:	441d      	add	r5, r3
 800969e:	4473      	add	r3, lr
 80096a0:	469e      	mov	lr, r3
 80096a2:	462e      	mov	r6, r5
 80096a4:	4566      	cmp	r6, ip
 80096a6:	d30e      	bcc.n	80096c6 <__mdiff+0xea>
 80096a8:	f10c 0203 	add.w	r2, ip, #3
 80096ac:	1b52      	subs	r2, r2, r5
 80096ae:	f022 0203 	bic.w	r2, r2, #3
 80096b2:	3d03      	subs	r5, #3
 80096b4:	45ac      	cmp	ip, r5
 80096b6:	bf38      	it	cc
 80096b8:	2200      	movcc	r2, #0
 80096ba:	4413      	add	r3, r2
 80096bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80096c0:	b17a      	cbz	r2, 80096e2 <__mdiff+0x106>
 80096c2:	6107      	str	r7, [r0, #16]
 80096c4:	e7a4      	b.n	8009610 <__mdiff+0x34>
 80096c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80096ca:	fa11 f288 	uxtah	r2, r1, r8
 80096ce:	1414      	asrs	r4, r2, #16
 80096d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096d4:	b292      	uxth	r2, r2
 80096d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096da:	f84e 2b04 	str.w	r2, [lr], #4
 80096de:	1421      	asrs	r1, r4, #16
 80096e0:	e7e0      	b.n	80096a4 <__mdiff+0xc8>
 80096e2:	3f01      	subs	r7, #1
 80096e4:	e7ea      	b.n	80096bc <__mdiff+0xe0>
 80096e6:	bf00      	nop
 80096e8:	0800a229 	.word	0x0800a229
 80096ec:	0800a23a 	.word	0x0800a23a

080096f0 <__d2b>:
 80096f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096f4:	460f      	mov	r7, r1
 80096f6:	2101      	movs	r1, #1
 80096f8:	ec59 8b10 	vmov	r8, r9, d0
 80096fc:	4616      	mov	r6, r2
 80096fe:	f7ff fcd5 	bl	80090ac <_Balloc>
 8009702:	4604      	mov	r4, r0
 8009704:	b930      	cbnz	r0, 8009714 <__d2b+0x24>
 8009706:	4602      	mov	r2, r0
 8009708:	4b24      	ldr	r3, [pc, #144]	; (800979c <__d2b+0xac>)
 800970a:	4825      	ldr	r0, [pc, #148]	; (80097a0 <__d2b+0xb0>)
 800970c:	f240 310f 	movw	r1, #783	; 0x30f
 8009710:	f000 fb22 	bl	8009d58 <__assert_func>
 8009714:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800971c:	bb2d      	cbnz	r5, 800976a <__d2b+0x7a>
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	f1b8 0300 	subs.w	r3, r8, #0
 8009724:	d026      	beq.n	8009774 <__d2b+0x84>
 8009726:	4668      	mov	r0, sp
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	f7ff fd87 	bl	800923c <__lo0bits>
 800972e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009732:	b1e8      	cbz	r0, 8009770 <__d2b+0x80>
 8009734:	f1c0 0320 	rsb	r3, r0, #32
 8009738:	fa02 f303 	lsl.w	r3, r2, r3
 800973c:	430b      	orrs	r3, r1
 800973e:	40c2      	lsrs	r2, r0
 8009740:	6163      	str	r3, [r4, #20]
 8009742:	9201      	str	r2, [sp, #4]
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	61a3      	str	r3, [r4, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	bf14      	ite	ne
 800974c:	2202      	movne	r2, #2
 800974e:	2201      	moveq	r2, #1
 8009750:	6122      	str	r2, [r4, #16]
 8009752:	b1bd      	cbz	r5, 8009784 <__d2b+0x94>
 8009754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009758:	4405      	add	r5, r0
 800975a:	603d      	str	r5, [r7, #0]
 800975c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009760:	6030      	str	r0, [r6, #0]
 8009762:	4620      	mov	r0, r4
 8009764:	b003      	add	sp, #12
 8009766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800976a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800976e:	e7d6      	b.n	800971e <__d2b+0x2e>
 8009770:	6161      	str	r1, [r4, #20]
 8009772:	e7e7      	b.n	8009744 <__d2b+0x54>
 8009774:	a801      	add	r0, sp, #4
 8009776:	f7ff fd61 	bl	800923c <__lo0bits>
 800977a:	9b01      	ldr	r3, [sp, #4]
 800977c:	6163      	str	r3, [r4, #20]
 800977e:	3020      	adds	r0, #32
 8009780:	2201      	movs	r2, #1
 8009782:	e7e5      	b.n	8009750 <__d2b+0x60>
 8009784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800978c:	6038      	str	r0, [r7, #0]
 800978e:	6918      	ldr	r0, [r3, #16]
 8009790:	f7ff fd34 	bl	80091fc <__hi0bits>
 8009794:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009798:	e7e2      	b.n	8009760 <__d2b+0x70>
 800979a:	bf00      	nop
 800979c:	0800a229 	.word	0x0800a229
 80097a0:	0800a23a 	.word	0x0800a23a

080097a4 <__sfputc_r>:
 80097a4:	6893      	ldr	r3, [r2, #8]
 80097a6:	3b01      	subs	r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	b410      	push	{r4}
 80097ac:	6093      	str	r3, [r2, #8]
 80097ae:	da08      	bge.n	80097c2 <__sfputc_r+0x1e>
 80097b0:	6994      	ldr	r4, [r2, #24]
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	db01      	blt.n	80097ba <__sfputc_r+0x16>
 80097b6:	290a      	cmp	r1, #10
 80097b8:	d103      	bne.n	80097c2 <__sfputc_r+0x1e>
 80097ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097be:	f000 ba17 	b.w	8009bf0 <__swbuf_r>
 80097c2:	6813      	ldr	r3, [r2, #0]
 80097c4:	1c58      	adds	r0, r3, #1
 80097c6:	6010      	str	r0, [r2, #0]
 80097c8:	7019      	strb	r1, [r3, #0]
 80097ca:	4608      	mov	r0, r1
 80097cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <__sfputs_r>:
 80097d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d4:	4606      	mov	r6, r0
 80097d6:	460f      	mov	r7, r1
 80097d8:	4614      	mov	r4, r2
 80097da:	18d5      	adds	r5, r2, r3
 80097dc:	42ac      	cmp	r4, r5
 80097de:	d101      	bne.n	80097e4 <__sfputs_r+0x12>
 80097e0:	2000      	movs	r0, #0
 80097e2:	e007      	b.n	80097f4 <__sfputs_r+0x22>
 80097e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e8:	463a      	mov	r2, r7
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ffda 	bl	80097a4 <__sfputc_r>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d1f3      	bne.n	80097dc <__sfputs_r+0xa>
 80097f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097f8 <_vfiprintf_r>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	460d      	mov	r5, r1
 80097fe:	b09d      	sub	sp, #116	; 0x74
 8009800:	4614      	mov	r4, r2
 8009802:	4698      	mov	r8, r3
 8009804:	4606      	mov	r6, r0
 8009806:	b118      	cbz	r0, 8009810 <_vfiprintf_r+0x18>
 8009808:	6a03      	ldr	r3, [r0, #32]
 800980a:	b90b      	cbnz	r3, 8009810 <_vfiprintf_r+0x18>
 800980c:	f7fe fbb8 	bl	8007f80 <__sinit>
 8009810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009812:	07d9      	lsls	r1, r3, #31
 8009814:	d405      	bmi.n	8009822 <_vfiprintf_r+0x2a>
 8009816:	89ab      	ldrh	r3, [r5, #12]
 8009818:	059a      	lsls	r2, r3, #22
 800981a:	d402      	bmi.n	8009822 <_vfiprintf_r+0x2a>
 800981c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800981e:	f7fe fcc0 	bl	80081a2 <__retarget_lock_acquire_recursive>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	071b      	lsls	r3, r3, #28
 8009826:	d501      	bpl.n	800982c <_vfiprintf_r+0x34>
 8009828:	692b      	ldr	r3, [r5, #16]
 800982a:	b99b      	cbnz	r3, 8009854 <_vfiprintf_r+0x5c>
 800982c:	4629      	mov	r1, r5
 800982e:	4630      	mov	r0, r6
 8009830:	f000 fa1c 	bl	8009c6c <__swsetup_r>
 8009834:	b170      	cbz	r0, 8009854 <_vfiprintf_r+0x5c>
 8009836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009838:	07dc      	lsls	r4, r3, #31
 800983a:	d504      	bpl.n	8009846 <_vfiprintf_r+0x4e>
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	b01d      	add	sp, #116	; 0x74
 8009842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009846:	89ab      	ldrh	r3, [r5, #12]
 8009848:	0598      	lsls	r0, r3, #22
 800984a:	d4f7      	bmi.n	800983c <_vfiprintf_r+0x44>
 800984c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800984e:	f7fe fca9 	bl	80081a4 <__retarget_lock_release_recursive>
 8009852:	e7f3      	b.n	800983c <_vfiprintf_r+0x44>
 8009854:	2300      	movs	r3, #0
 8009856:	9309      	str	r3, [sp, #36]	; 0x24
 8009858:	2320      	movs	r3, #32
 800985a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800985e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009862:	2330      	movs	r3, #48	; 0x30
 8009864:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009a18 <_vfiprintf_r+0x220>
 8009868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800986c:	f04f 0901 	mov.w	r9, #1
 8009870:	4623      	mov	r3, r4
 8009872:	469a      	mov	sl, r3
 8009874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009878:	b10a      	cbz	r2, 800987e <_vfiprintf_r+0x86>
 800987a:	2a25      	cmp	r2, #37	; 0x25
 800987c:	d1f9      	bne.n	8009872 <_vfiprintf_r+0x7a>
 800987e:	ebba 0b04 	subs.w	fp, sl, r4
 8009882:	d00b      	beq.n	800989c <_vfiprintf_r+0xa4>
 8009884:	465b      	mov	r3, fp
 8009886:	4622      	mov	r2, r4
 8009888:	4629      	mov	r1, r5
 800988a:	4630      	mov	r0, r6
 800988c:	f7ff ffa1 	bl	80097d2 <__sfputs_r>
 8009890:	3001      	adds	r0, #1
 8009892:	f000 80a9 	beq.w	80099e8 <_vfiprintf_r+0x1f0>
 8009896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009898:	445a      	add	r2, fp
 800989a:	9209      	str	r2, [sp, #36]	; 0x24
 800989c:	f89a 3000 	ldrb.w	r3, [sl]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 80a1 	beq.w	80099e8 <_vfiprintf_r+0x1f0>
 80098a6:	2300      	movs	r3, #0
 80098a8:	f04f 32ff 	mov.w	r2, #4294967295
 80098ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098b0:	f10a 0a01 	add.w	sl, sl, #1
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	9307      	str	r3, [sp, #28]
 80098b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098bc:	931a      	str	r3, [sp, #104]	; 0x68
 80098be:	4654      	mov	r4, sl
 80098c0:	2205      	movs	r2, #5
 80098c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c6:	4854      	ldr	r0, [pc, #336]	; (8009a18 <_vfiprintf_r+0x220>)
 80098c8:	f7f6 fc9a 	bl	8000200 <memchr>
 80098cc:	9a04      	ldr	r2, [sp, #16]
 80098ce:	b9d8      	cbnz	r0, 8009908 <_vfiprintf_r+0x110>
 80098d0:	06d1      	lsls	r1, r2, #27
 80098d2:	bf44      	itt	mi
 80098d4:	2320      	movmi	r3, #32
 80098d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098da:	0713      	lsls	r3, r2, #28
 80098dc:	bf44      	itt	mi
 80098de:	232b      	movmi	r3, #43	; 0x2b
 80098e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098e4:	f89a 3000 	ldrb.w	r3, [sl]
 80098e8:	2b2a      	cmp	r3, #42	; 0x2a
 80098ea:	d015      	beq.n	8009918 <_vfiprintf_r+0x120>
 80098ec:	9a07      	ldr	r2, [sp, #28]
 80098ee:	4654      	mov	r4, sl
 80098f0:	2000      	movs	r0, #0
 80098f2:	f04f 0c0a 	mov.w	ip, #10
 80098f6:	4621      	mov	r1, r4
 80098f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098fc:	3b30      	subs	r3, #48	; 0x30
 80098fe:	2b09      	cmp	r3, #9
 8009900:	d94d      	bls.n	800999e <_vfiprintf_r+0x1a6>
 8009902:	b1b0      	cbz	r0, 8009932 <_vfiprintf_r+0x13a>
 8009904:	9207      	str	r2, [sp, #28]
 8009906:	e014      	b.n	8009932 <_vfiprintf_r+0x13a>
 8009908:	eba0 0308 	sub.w	r3, r0, r8
 800990c:	fa09 f303 	lsl.w	r3, r9, r3
 8009910:	4313      	orrs	r3, r2
 8009912:	9304      	str	r3, [sp, #16]
 8009914:	46a2      	mov	sl, r4
 8009916:	e7d2      	b.n	80098be <_vfiprintf_r+0xc6>
 8009918:	9b03      	ldr	r3, [sp, #12]
 800991a:	1d19      	adds	r1, r3, #4
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	9103      	str	r1, [sp, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	bfbb      	ittet	lt
 8009924:	425b      	neglt	r3, r3
 8009926:	f042 0202 	orrlt.w	r2, r2, #2
 800992a:	9307      	strge	r3, [sp, #28]
 800992c:	9307      	strlt	r3, [sp, #28]
 800992e:	bfb8      	it	lt
 8009930:	9204      	strlt	r2, [sp, #16]
 8009932:	7823      	ldrb	r3, [r4, #0]
 8009934:	2b2e      	cmp	r3, #46	; 0x2e
 8009936:	d10c      	bne.n	8009952 <_vfiprintf_r+0x15a>
 8009938:	7863      	ldrb	r3, [r4, #1]
 800993a:	2b2a      	cmp	r3, #42	; 0x2a
 800993c:	d134      	bne.n	80099a8 <_vfiprintf_r+0x1b0>
 800993e:	9b03      	ldr	r3, [sp, #12]
 8009940:	1d1a      	adds	r2, r3, #4
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	9203      	str	r2, [sp, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	bfb8      	it	lt
 800994a:	f04f 33ff 	movlt.w	r3, #4294967295
 800994e:	3402      	adds	r4, #2
 8009950:	9305      	str	r3, [sp, #20]
 8009952:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009a28 <_vfiprintf_r+0x230>
 8009956:	7821      	ldrb	r1, [r4, #0]
 8009958:	2203      	movs	r2, #3
 800995a:	4650      	mov	r0, sl
 800995c:	f7f6 fc50 	bl	8000200 <memchr>
 8009960:	b138      	cbz	r0, 8009972 <_vfiprintf_r+0x17a>
 8009962:	9b04      	ldr	r3, [sp, #16]
 8009964:	eba0 000a 	sub.w	r0, r0, sl
 8009968:	2240      	movs	r2, #64	; 0x40
 800996a:	4082      	lsls	r2, r0
 800996c:	4313      	orrs	r3, r2
 800996e:	3401      	adds	r4, #1
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009976:	4829      	ldr	r0, [pc, #164]	; (8009a1c <_vfiprintf_r+0x224>)
 8009978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800997c:	2206      	movs	r2, #6
 800997e:	f7f6 fc3f 	bl	8000200 <memchr>
 8009982:	2800      	cmp	r0, #0
 8009984:	d03f      	beq.n	8009a06 <_vfiprintf_r+0x20e>
 8009986:	4b26      	ldr	r3, [pc, #152]	; (8009a20 <_vfiprintf_r+0x228>)
 8009988:	bb1b      	cbnz	r3, 80099d2 <_vfiprintf_r+0x1da>
 800998a:	9b03      	ldr	r3, [sp, #12]
 800998c:	3307      	adds	r3, #7
 800998e:	f023 0307 	bic.w	r3, r3, #7
 8009992:	3308      	adds	r3, #8
 8009994:	9303      	str	r3, [sp, #12]
 8009996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009998:	443b      	add	r3, r7
 800999a:	9309      	str	r3, [sp, #36]	; 0x24
 800999c:	e768      	b.n	8009870 <_vfiprintf_r+0x78>
 800999e:	fb0c 3202 	mla	r2, ip, r2, r3
 80099a2:	460c      	mov	r4, r1
 80099a4:	2001      	movs	r0, #1
 80099a6:	e7a6      	b.n	80098f6 <_vfiprintf_r+0xfe>
 80099a8:	2300      	movs	r3, #0
 80099aa:	3401      	adds	r4, #1
 80099ac:	9305      	str	r3, [sp, #20]
 80099ae:	4619      	mov	r1, r3
 80099b0:	f04f 0c0a 	mov.w	ip, #10
 80099b4:	4620      	mov	r0, r4
 80099b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ba:	3a30      	subs	r2, #48	; 0x30
 80099bc:	2a09      	cmp	r2, #9
 80099be:	d903      	bls.n	80099c8 <_vfiprintf_r+0x1d0>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d0c6      	beq.n	8009952 <_vfiprintf_r+0x15a>
 80099c4:	9105      	str	r1, [sp, #20]
 80099c6:	e7c4      	b.n	8009952 <_vfiprintf_r+0x15a>
 80099c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099cc:	4604      	mov	r4, r0
 80099ce:	2301      	movs	r3, #1
 80099d0:	e7f0      	b.n	80099b4 <_vfiprintf_r+0x1bc>
 80099d2:	ab03      	add	r3, sp, #12
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	462a      	mov	r2, r5
 80099d8:	4b12      	ldr	r3, [pc, #72]	; (8009a24 <_vfiprintf_r+0x22c>)
 80099da:	a904      	add	r1, sp, #16
 80099dc:	4630      	mov	r0, r6
 80099de:	f7fd fe7d 	bl	80076dc <_printf_float>
 80099e2:	4607      	mov	r7, r0
 80099e4:	1c78      	adds	r0, r7, #1
 80099e6:	d1d6      	bne.n	8009996 <_vfiprintf_r+0x19e>
 80099e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ea:	07d9      	lsls	r1, r3, #31
 80099ec:	d405      	bmi.n	80099fa <_vfiprintf_r+0x202>
 80099ee:	89ab      	ldrh	r3, [r5, #12]
 80099f0:	059a      	lsls	r2, r3, #22
 80099f2:	d402      	bmi.n	80099fa <_vfiprintf_r+0x202>
 80099f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099f6:	f7fe fbd5 	bl	80081a4 <__retarget_lock_release_recursive>
 80099fa:	89ab      	ldrh	r3, [r5, #12]
 80099fc:	065b      	lsls	r3, r3, #25
 80099fe:	f53f af1d 	bmi.w	800983c <_vfiprintf_r+0x44>
 8009a02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a04:	e71c      	b.n	8009840 <_vfiprintf_r+0x48>
 8009a06:	ab03      	add	r3, sp, #12
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	462a      	mov	r2, r5
 8009a0c:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <_vfiprintf_r+0x22c>)
 8009a0e:	a904      	add	r1, sp, #16
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7fe f907 	bl	8007c24 <_printf_i>
 8009a16:	e7e4      	b.n	80099e2 <_vfiprintf_r+0x1ea>
 8009a18:	0800a394 	.word	0x0800a394
 8009a1c:	0800a39e 	.word	0x0800a39e
 8009a20:	080076dd 	.word	0x080076dd
 8009a24:	080097d3 	.word	0x080097d3
 8009a28:	0800a39a 	.word	0x0800a39a

08009a2c <__sflush_r>:
 8009a2c:	898a      	ldrh	r2, [r1, #12]
 8009a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a32:	4605      	mov	r5, r0
 8009a34:	0710      	lsls	r0, r2, #28
 8009a36:	460c      	mov	r4, r1
 8009a38:	d458      	bmi.n	8009aec <__sflush_r+0xc0>
 8009a3a:	684b      	ldr	r3, [r1, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dc05      	bgt.n	8009a4c <__sflush_r+0x20>
 8009a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	dc02      	bgt.n	8009a4c <__sflush_r+0x20>
 8009a46:	2000      	movs	r0, #0
 8009a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a4e:	2e00      	cmp	r6, #0
 8009a50:	d0f9      	beq.n	8009a46 <__sflush_r+0x1a>
 8009a52:	2300      	movs	r3, #0
 8009a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a58:	682f      	ldr	r7, [r5, #0]
 8009a5a:	6a21      	ldr	r1, [r4, #32]
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	d032      	beq.n	8009ac6 <__sflush_r+0x9a>
 8009a60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	075a      	lsls	r2, r3, #29
 8009a66:	d505      	bpl.n	8009a74 <__sflush_r+0x48>
 8009a68:	6863      	ldr	r3, [r4, #4]
 8009a6a:	1ac0      	subs	r0, r0, r3
 8009a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a6e:	b10b      	cbz	r3, 8009a74 <__sflush_r+0x48>
 8009a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a72:	1ac0      	subs	r0, r0, r3
 8009a74:	2300      	movs	r3, #0
 8009a76:	4602      	mov	r2, r0
 8009a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a7a:	6a21      	ldr	r1, [r4, #32]
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	47b0      	blx	r6
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	d106      	bne.n	8009a94 <__sflush_r+0x68>
 8009a86:	6829      	ldr	r1, [r5, #0]
 8009a88:	291d      	cmp	r1, #29
 8009a8a:	d82b      	bhi.n	8009ae4 <__sflush_r+0xb8>
 8009a8c:	4a29      	ldr	r2, [pc, #164]	; (8009b34 <__sflush_r+0x108>)
 8009a8e:	410a      	asrs	r2, r1
 8009a90:	07d6      	lsls	r6, r2, #31
 8009a92:	d427      	bmi.n	8009ae4 <__sflush_r+0xb8>
 8009a94:	2200      	movs	r2, #0
 8009a96:	6062      	str	r2, [r4, #4]
 8009a98:	04d9      	lsls	r1, r3, #19
 8009a9a:	6922      	ldr	r2, [r4, #16]
 8009a9c:	6022      	str	r2, [r4, #0]
 8009a9e:	d504      	bpl.n	8009aaa <__sflush_r+0x7e>
 8009aa0:	1c42      	adds	r2, r0, #1
 8009aa2:	d101      	bne.n	8009aa8 <__sflush_r+0x7c>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b903      	cbnz	r3, 8009aaa <__sflush_r+0x7e>
 8009aa8:	6560      	str	r0, [r4, #84]	; 0x54
 8009aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aac:	602f      	str	r7, [r5, #0]
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	d0c9      	beq.n	8009a46 <__sflush_r+0x1a>
 8009ab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ab6:	4299      	cmp	r1, r3
 8009ab8:	d002      	beq.n	8009ac0 <__sflush_r+0x94>
 8009aba:	4628      	mov	r0, r5
 8009abc:	f7ff f9f6 	bl	8008eac <_free_r>
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	6360      	str	r0, [r4, #52]	; 0x34
 8009ac4:	e7c0      	b.n	8009a48 <__sflush_r+0x1c>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b0      	blx	r6
 8009acc:	1c41      	adds	r1, r0, #1
 8009ace:	d1c8      	bne.n	8009a62 <__sflush_r+0x36>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0c5      	beq.n	8009a62 <__sflush_r+0x36>
 8009ad6:	2b1d      	cmp	r3, #29
 8009ad8:	d001      	beq.n	8009ade <__sflush_r+0xb2>
 8009ada:	2b16      	cmp	r3, #22
 8009adc:	d101      	bne.n	8009ae2 <__sflush_r+0xb6>
 8009ade:	602f      	str	r7, [r5, #0]
 8009ae0:	e7b1      	b.n	8009a46 <__sflush_r+0x1a>
 8009ae2:	89a3      	ldrh	r3, [r4, #12]
 8009ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae8:	81a3      	strh	r3, [r4, #12]
 8009aea:	e7ad      	b.n	8009a48 <__sflush_r+0x1c>
 8009aec:	690f      	ldr	r7, [r1, #16]
 8009aee:	2f00      	cmp	r7, #0
 8009af0:	d0a9      	beq.n	8009a46 <__sflush_r+0x1a>
 8009af2:	0793      	lsls	r3, r2, #30
 8009af4:	680e      	ldr	r6, [r1, #0]
 8009af6:	bf08      	it	eq
 8009af8:	694b      	ldreq	r3, [r1, #20]
 8009afa:	600f      	str	r7, [r1, #0]
 8009afc:	bf18      	it	ne
 8009afe:	2300      	movne	r3, #0
 8009b00:	eba6 0807 	sub.w	r8, r6, r7
 8009b04:	608b      	str	r3, [r1, #8]
 8009b06:	f1b8 0f00 	cmp.w	r8, #0
 8009b0a:	dd9c      	ble.n	8009a46 <__sflush_r+0x1a>
 8009b0c:	6a21      	ldr	r1, [r4, #32]
 8009b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b10:	4643      	mov	r3, r8
 8009b12:	463a      	mov	r2, r7
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b0      	blx	r6
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	dc06      	bgt.n	8009b2a <__sflush_r+0xfe>
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	e78e      	b.n	8009a48 <__sflush_r+0x1c>
 8009b2a:	4407      	add	r7, r0
 8009b2c:	eba8 0800 	sub.w	r8, r8, r0
 8009b30:	e7e9      	b.n	8009b06 <__sflush_r+0xda>
 8009b32:	bf00      	nop
 8009b34:	dfbffffe 	.word	0xdfbffffe

08009b38 <_fflush_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	690b      	ldr	r3, [r1, #16]
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	b913      	cbnz	r3, 8009b48 <_fflush_r+0x10>
 8009b42:	2500      	movs	r5, #0
 8009b44:	4628      	mov	r0, r5
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	b118      	cbz	r0, 8009b52 <_fflush_r+0x1a>
 8009b4a:	6a03      	ldr	r3, [r0, #32]
 8009b4c:	b90b      	cbnz	r3, 8009b52 <_fflush_r+0x1a>
 8009b4e:	f7fe fa17 	bl	8007f80 <__sinit>
 8009b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0f3      	beq.n	8009b42 <_fflush_r+0xa>
 8009b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b5c:	07d0      	lsls	r0, r2, #31
 8009b5e:	d404      	bmi.n	8009b6a <_fflush_r+0x32>
 8009b60:	0599      	lsls	r1, r3, #22
 8009b62:	d402      	bmi.n	8009b6a <_fflush_r+0x32>
 8009b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b66:	f7fe fb1c 	bl	80081a2 <__retarget_lock_acquire_recursive>
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	f7ff ff5d 	bl	8009a2c <__sflush_r>
 8009b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b74:	07da      	lsls	r2, r3, #31
 8009b76:	4605      	mov	r5, r0
 8009b78:	d4e4      	bmi.n	8009b44 <_fflush_r+0xc>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	059b      	lsls	r3, r3, #22
 8009b7e:	d4e1      	bmi.n	8009b44 <_fflush_r+0xc>
 8009b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b82:	f7fe fb0f 	bl	80081a4 <__retarget_lock_release_recursive>
 8009b86:	e7dd      	b.n	8009b44 <_fflush_r+0xc>

08009b88 <_putc_r>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	4614      	mov	r4, r2
 8009b8e:	4606      	mov	r6, r0
 8009b90:	b118      	cbz	r0, 8009b9a <_putc_r+0x12>
 8009b92:	6a03      	ldr	r3, [r0, #32]
 8009b94:	b90b      	cbnz	r3, 8009b9a <_putc_r+0x12>
 8009b96:	f7fe f9f3 	bl	8007f80 <__sinit>
 8009b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b9c:	07d8      	lsls	r0, r3, #31
 8009b9e:	d405      	bmi.n	8009bac <_putc_r+0x24>
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	0599      	lsls	r1, r3, #22
 8009ba4:	d402      	bmi.n	8009bac <_putc_r+0x24>
 8009ba6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ba8:	f7fe fafb 	bl	80081a2 <__retarget_lock_acquire_recursive>
 8009bac:	68a3      	ldr	r3, [r4, #8]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	60a3      	str	r3, [r4, #8]
 8009bb4:	da05      	bge.n	8009bc2 <_putc_r+0x3a>
 8009bb6:	69a2      	ldr	r2, [r4, #24]
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	db12      	blt.n	8009be2 <_putc_r+0x5a>
 8009bbc:	b2eb      	uxtb	r3, r5
 8009bbe:	2b0a      	cmp	r3, #10
 8009bc0:	d00f      	beq.n	8009be2 <_putc_r+0x5a>
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	6022      	str	r2, [r4, #0]
 8009bc8:	701d      	strb	r5, [r3, #0]
 8009bca:	b2ed      	uxtb	r5, r5
 8009bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bce:	07da      	lsls	r2, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_putc_r+0x56>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	059b      	lsls	r3, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_putc_r+0x56>
 8009bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bda:	f7fe fae3 	bl	80081a4 <__retarget_lock_release_recursive>
 8009bde:	4628      	mov	r0, r5
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	4629      	mov	r1, r5
 8009be4:	4622      	mov	r2, r4
 8009be6:	4630      	mov	r0, r6
 8009be8:	f000 f802 	bl	8009bf0 <__swbuf_r>
 8009bec:	4605      	mov	r5, r0
 8009bee:	e7ed      	b.n	8009bcc <_putc_r+0x44>

08009bf0 <__swbuf_r>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	460e      	mov	r6, r1
 8009bf4:	4614      	mov	r4, r2
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	b118      	cbz	r0, 8009c02 <__swbuf_r+0x12>
 8009bfa:	6a03      	ldr	r3, [r0, #32]
 8009bfc:	b90b      	cbnz	r3, 8009c02 <__swbuf_r+0x12>
 8009bfe:	f7fe f9bf 	bl	8007f80 <__sinit>
 8009c02:	69a3      	ldr	r3, [r4, #24]
 8009c04:	60a3      	str	r3, [r4, #8]
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	071a      	lsls	r2, r3, #28
 8009c0a:	d525      	bpl.n	8009c58 <__swbuf_r+0x68>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	b31b      	cbz	r3, 8009c58 <__swbuf_r+0x68>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	6922      	ldr	r2, [r4, #16]
 8009c14:	1a98      	subs	r0, r3, r2
 8009c16:	6963      	ldr	r3, [r4, #20]
 8009c18:	b2f6      	uxtb	r6, r6
 8009c1a:	4283      	cmp	r3, r0
 8009c1c:	4637      	mov	r7, r6
 8009c1e:	dc04      	bgt.n	8009c2a <__swbuf_r+0x3a>
 8009c20:	4621      	mov	r1, r4
 8009c22:	4628      	mov	r0, r5
 8009c24:	f7ff ff88 	bl	8009b38 <_fflush_r>
 8009c28:	b9e0      	cbnz	r0, 8009c64 <__swbuf_r+0x74>
 8009c2a:	68a3      	ldr	r3, [r4, #8]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	60a3      	str	r3, [r4, #8]
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	6022      	str	r2, [r4, #0]
 8009c36:	701e      	strb	r6, [r3, #0]
 8009c38:	6962      	ldr	r2, [r4, #20]
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d004      	beq.n	8009c4a <__swbuf_r+0x5a>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	07db      	lsls	r3, r3, #31
 8009c44:	d506      	bpl.n	8009c54 <__swbuf_r+0x64>
 8009c46:	2e0a      	cmp	r6, #10
 8009c48:	d104      	bne.n	8009c54 <__swbuf_r+0x64>
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f7ff ff73 	bl	8009b38 <_fflush_r>
 8009c52:	b938      	cbnz	r0, 8009c64 <__swbuf_r+0x74>
 8009c54:	4638      	mov	r0, r7
 8009c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f000 f806 	bl	8009c6c <__swsetup_r>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d0d5      	beq.n	8009c10 <__swbuf_r+0x20>
 8009c64:	f04f 37ff 	mov.w	r7, #4294967295
 8009c68:	e7f4      	b.n	8009c54 <__swbuf_r+0x64>
	...

08009c6c <__swsetup_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4b2a      	ldr	r3, [pc, #168]	; (8009d18 <__swsetup_r+0xac>)
 8009c70:	4605      	mov	r5, r0
 8009c72:	6818      	ldr	r0, [r3, #0]
 8009c74:	460c      	mov	r4, r1
 8009c76:	b118      	cbz	r0, 8009c80 <__swsetup_r+0x14>
 8009c78:	6a03      	ldr	r3, [r0, #32]
 8009c7a:	b90b      	cbnz	r3, 8009c80 <__swsetup_r+0x14>
 8009c7c:	f7fe f980 	bl	8007f80 <__sinit>
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c86:	0718      	lsls	r0, r3, #28
 8009c88:	d422      	bmi.n	8009cd0 <__swsetup_r+0x64>
 8009c8a:	06d9      	lsls	r1, r3, #27
 8009c8c:	d407      	bmi.n	8009c9e <__swsetup_r+0x32>
 8009c8e:	2309      	movs	r3, #9
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9c:	e034      	b.n	8009d08 <__swsetup_r+0x9c>
 8009c9e:	0758      	lsls	r0, r3, #29
 8009ca0:	d512      	bpl.n	8009cc8 <__swsetup_r+0x5c>
 8009ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ca4:	b141      	cbz	r1, 8009cb8 <__swsetup_r+0x4c>
 8009ca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009caa:	4299      	cmp	r1, r3
 8009cac:	d002      	beq.n	8009cb4 <__swsetup_r+0x48>
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f7ff f8fc 	bl	8008eac <_free_r>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	6363      	str	r3, [r4, #52]	; 0x34
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cbe:	81a3      	strh	r3, [r4, #12]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	6063      	str	r3, [r4, #4]
 8009cc4:	6923      	ldr	r3, [r4, #16]
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f043 0308 	orr.w	r3, r3, #8
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	6923      	ldr	r3, [r4, #16]
 8009cd2:	b94b      	cbnz	r3, 8009ce8 <__swsetup_r+0x7c>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cde:	d003      	beq.n	8009ce8 <__swsetup_r+0x7c>
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f000 f8c4 	bl	8009e70 <__smakebuf_r>
 8009ce8:	89a0      	ldrh	r0, [r4, #12]
 8009cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cee:	f010 0301 	ands.w	r3, r0, #1
 8009cf2:	d00a      	beq.n	8009d0a <__swsetup_r+0x9e>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60a3      	str	r3, [r4, #8]
 8009cf8:	6963      	ldr	r3, [r4, #20]
 8009cfa:	425b      	negs	r3, r3
 8009cfc:	61a3      	str	r3, [r4, #24]
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	b943      	cbnz	r3, 8009d14 <__swsetup_r+0xa8>
 8009d02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d06:	d1c4      	bne.n	8009c92 <__swsetup_r+0x26>
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	0781      	lsls	r1, r0, #30
 8009d0c:	bf58      	it	pl
 8009d0e:	6963      	ldrpl	r3, [r4, #20]
 8009d10:	60a3      	str	r3, [r4, #8]
 8009d12:	e7f4      	b.n	8009cfe <__swsetup_r+0x92>
 8009d14:	2000      	movs	r0, #0
 8009d16:	e7f7      	b.n	8009d08 <__swsetup_r+0x9c>
 8009d18:	20000064 	.word	0x20000064

08009d1c <_sbrk_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4d06      	ldr	r5, [pc, #24]	; (8009d38 <_sbrk_r+0x1c>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	4604      	mov	r4, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	602b      	str	r3, [r5, #0]
 8009d28:	f7f8 f866 	bl	8001df8 <_sbrk>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d102      	bne.n	8009d36 <_sbrk_r+0x1a>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	b103      	cbz	r3, 8009d36 <_sbrk_r+0x1a>
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	2000071c 	.word	0x2000071c

08009d3c <memcpy>:
 8009d3c:	440a      	add	r2, r1
 8009d3e:	4291      	cmp	r1, r2
 8009d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d44:	d100      	bne.n	8009d48 <memcpy+0xc>
 8009d46:	4770      	bx	lr
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d52:	4291      	cmp	r1, r2
 8009d54:	d1f9      	bne.n	8009d4a <memcpy+0xe>
 8009d56:	bd10      	pop	{r4, pc}

08009d58 <__assert_func>:
 8009d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d5a:	4614      	mov	r4, r2
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <__assert_func+0x2c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4605      	mov	r5, r0
 8009d64:	68d8      	ldr	r0, [r3, #12]
 8009d66:	b14c      	cbz	r4, 8009d7c <__assert_func+0x24>
 8009d68:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <__assert_func+0x30>)
 8009d6a:	9100      	str	r1, [sp, #0]
 8009d6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d70:	4906      	ldr	r1, [pc, #24]	; (8009d8c <__assert_func+0x34>)
 8009d72:	462b      	mov	r3, r5
 8009d74:	f000 f844 	bl	8009e00 <fiprintf>
 8009d78:	f000 f8d8 	bl	8009f2c <abort>
 8009d7c:	4b04      	ldr	r3, [pc, #16]	; (8009d90 <__assert_func+0x38>)
 8009d7e:	461c      	mov	r4, r3
 8009d80:	e7f3      	b.n	8009d6a <__assert_func+0x12>
 8009d82:	bf00      	nop
 8009d84:	20000064 	.word	0x20000064
 8009d88:	0800a3af 	.word	0x0800a3af
 8009d8c:	0800a3bc 	.word	0x0800a3bc
 8009d90:	0800a3ea 	.word	0x0800a3ea

08009d94 <_calloc_r>:
 8009d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d96:	fba1 2402 	umull	r2, r4, r1, r2
 8009d9a:	b94c      	cbnz	r4, 8009db0 <_calloc_r+0x1c>
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	9201      	str	r2, [sp, #4]
 8009da0:	f7ff f8f8 	bl	8008f94 <_malloc_r>
 8009da4:	9a01      	ldr	r2, [sp, #4]
 8009da6:	4605      	mov	r5, r0
 8009da8:	b930      	cbnz	r0, 8009db8 <_calloc_r+0x24>
 8009daa:	4628      	mov	r0, r5
 8009dac:	b003      	add	sp, #12
 8009dae:	bd30      	pop	{r4, r5, pc}
 8009db0:	220c      	movs	r2, #12
 8009db2:	6002      	str	r2, [r0, #0]
 8009db4:	2500      	movs	r5, #0
 8009db6:	e7f8      	b.n	8009daa <_calloc_r+0x16>
 8009db8:	4621      	mov	r1, r4
 8009dba:	f7fe f974 	bl	80080a6 <memset>
 8009dbe:	e7f4      	b.n	8009daa <_calloc_r+0x16>

08009dc0 <__ascii_mbtowc>:
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	b901      	cbnz	r1, 8009dc6 <__ascii_mbtowc+0x6>
 8009dc4:	a901      	add	r1, sp, #4
 8009dc6:	b142      	cbz	r2, 8009dda <__ascii_mbtowc+0x1a>
 8009dc8:	b14b      	cbz	r3, 8009dde <__ascii_mbtowc+0x1e>
 8009dca:	7813      	ldrb	r3, [r2, #0]
 8009dcc:	600b      	str	r3, [r1, #0]
 8009dce:	7812      	ldrb	r2, [r2, #0]
 8009dd0:	1e10      	subs	r0, r2, #0
 8009dd2:	bf18      	it	ne
 8009dd4:	2001      	movne	r0, #1
 8009dd6:	b002      	add	sp, #8
 8009dd8:	4770      	bx	lr
 8009dda:	4610      	mov	r0, r2
 8009ddc:	e7fb      	b.n	8009dd6 <__ascii_mbtowc+0x16>
 8009dde:	f06f 0001 	mvn.w	r0, #1
 8009de2:	e7f8      	b.n	8009dd6 <__ascii_mbtowc+0x16>

08009de4 <__ascii_wctomb>:
 8009de4:	b149      	cbz	r1, 8009dfa <__ascii_wctomb+0x16>
 8009de6:	2aff      	cmp	r2, #255	; 0xff
 8009de8:	bf85      	ittet	hi
 8009dea:	238a      	movhi	r3, #138	; 0x8a
 8009dec:	6003      	strhi	r3, [r0, #0]
 8009dee:	700a      	strbls	r2, [r1, #0]
 8009df0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009df4:	bf98      	it	ls
 8009df6:	2001      	movls	r0, #1
 8009df8:	4770      	bx	lr
 8009dfa:	4608      	mov	r0, r1
 8009dfc:	4770      	bx	lr
	...

08009e00 <fiprintf>:
 8009e00:	b40e      	push	{r1, r2, r3}
 8009e02:	b503      	push	{r0, r1, lr}
 8009e04:	4601      	mov	r1, r0
 8009e06:	ab03      	add	r3, sp, #12
 8009e08:	4805      	ldr	r0, [pc, #20]	; (8009e20 <fiprintf+0x20>)
 8009e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0e:	6800      	ldr	r0, [r0, #0]
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	f7ff fcf1 	bl	80097f8 <_vfiprintf_r>
 8009e16:	b002      	add	sp, #8
 8009e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e1c:	b003      	add	sp, #12
 8009e1e:	4770      	bx	lr
 8009e20:	20000064 	.word	0x20000064

08009e24 <__swhatbuf_r>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	460c      	mov	r4, r1
 8009e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	b096      	sub	sp, #88	; 0x58
 8009e30:	4615      	mov	r5, r2
 8009e32:	461e      	mov	r6, r3
 8009e34:	da0d      	bge.n	8009e52 <__swhatbuf_r+0x2e>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e3c:	f04f 0100 	mov.w	r1, #0
 8009e40:	bf0c      	ite	eq
 8009e42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e46:	2340      	movne	r3, #64	; 0x40
 8009e48:	2000      	movs	r0, #0
 8009e4a:	6031      	str	r1, [r6, #0]
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	b016      	add	sp, #88	; 0x58
 8009e50:	bd70      	pop	{r4, r5, r6, pc}
 8009e52:	466a      	mov	r2, sp
 8009e54:	f000 f848 	bl	8009ee8 <_fstat_r>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	dbec      	blt.n	8009e36 <__swhatbuf_r+0x12>
 8009e5c:	9901      	ldr	r1, [sp, #4]
 8009e5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e66:	4259      	negs	r1, r3
 8009e68:	4159      	adcs	r1, r3
 8009e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e6e:	e7eb      	b.n	8009e48 <__swhatbuf_r+0x24>

08009e70 <__smakebuf_r>:
 8009e70:	898b      	ldrh	r3, [r1, #12]
 8009e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e74:	079d      	lsls	r5, r3, #30
 8009e76:	4606      	mov	r6, r0
 8009e78:	460c      	mov	r4, r1
 8009e7a:	d507      	bpl.n	8009e8c <__smakebuf_r+0x1c>
 8009e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	6123      	str	r3, [r4, #16]
 8009e84:	2301      	movs	r3, #1
 8009e86:	6163      	str	r3, [r4, #20]
 8009e88:	b002      	add	sp, #8
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	ab01      	add	r3, sp, #4
 8009e8e:	466a      	mov	r2, sp
 8009e90:	f7ff ffc8 	bl	8009e24 <__swhatbuf_r>
 8009e94:	9900      	ldr	r1, [sp, #0]
 8009e96:	4605      	mov	r5, r0
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff f87b 	bl	8008f94 <_malloc_r>
 8009e9e:	b948      	cbnz	r0, 8009eb4 <__smakebuf_r+0x44>
 8009ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea4:	059a      	lsls	r2, r3, #22
 8009ea6:	d4ef      	bmi.n	8009e88 <__smakebuf_r+0x18>
 8009ea8:	f023 0303 	bic.w	r3, r3, #3
 8009eac:	f043 0302 	orr.w	r3, r3, #2
 8009eb0:	81a3      	strh	r3, [r4, #12]
 8009eb2:	e7e3      	b.n	8009e7c <__smakebuf_r+0xc>
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	6020      	str	r0, [r4, #0]
 8009eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ebc:	81a3      	strh	r3, [r4, #12]
 8009ebe:	9b00      	ldr	r3, [sp, #0]
 8009ec0:	6163      	str	r3, [r4, #20]
 8009ec2:	9b01      	ldr	r3, [sp, #4]
 8009ec4:	6120      	str	r0, [r4, #16]
 8009ec6:	b15b      	cbz	r3, 8009ee0 <__smakebuf_r+0x70>
 8009ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f000 f81d 	bl	8009f0c <_isatty_r>
 8009ed2:	b128      	cbz	r0, 8009ee0 <__smakebuf_r+0x70>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	f043 0301 	orr.w	r3, r3, #1
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	431d      	orrs	r5, r3
 8009ee4:	81a5      	strh	r5, [r4, #12]
 8009ee6:	e7cf      	b.n	8009e88 <__smakebuf_r+0x18>

08009ee8 <_fstat_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_fstat_r+0x20>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	602b      	str	r3, [r5, #0]
 8009ef6:	f7f7 ff56 	bl	8001da6 <_fstat>
 8009efa:	1c43      	adds	r3, r0, #1
 8009efc:	d102      	bne.n	8009f04 <_fstat_r+0x1c>
 8009efe:	682b      	ldr	r3, [r5, #0]
 8009f00:	b103      	cbz	r3, 8009f04 <_fstat_r+0x1c>
 8009f02:	6023      	str	r3, [r4, #0]
 8009f04:	bd38      	pop	{r3, r4, r5, pc}
 8009f06:	bf00      	nop
 8009f08:	2000071c 	.word	0x2000071c

08009f0c <_isatty_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4d06      	ldr	r5, [pc, #24]	; (8009f28 <_isatty_r+0x1c>)
 8009f10:	2300      	movs	r3, #0
 8009f12:	4604      	mov	r4, r0
 8009f14:	4608      	mov	r0, r1
 8009f16:	602b      	str	r3, [r5, #0]
 8009f18:	f7f7 ff55 	bl	8001dc6 <_isatty>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_isatty_r+0x1a>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_isatty_r+0x1a>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	2000071c 	.word	0x2000071c

08009f2c <abort>:
 8009f2c:	b508      	push	{r3, lr}
 8009f2e:	2006      	movs	r0, #6
 8009f30:	f000 f82c 	bl	8009f8c <raise>
 8009f34:	2001      	movs	r0, #1
 8009f36:	f7f7 fee7 	bl	8001d08 <_exit>

08009f3a <_raise_r>:
 8009f3a:	291f      	cmp	r1, #31
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4604      	mov	r4, r0
 8009f40:	460d      	mov	r5, r1
 8009f42:	d904      	bls.n	8009f4e <_raise_r+0x14>
 8009f44:	2316      	movs	r3, #22
 8009f46:	6003      	str	r3, [r0, #0]
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f50:	b112      	cbz	r2, 8009f58 <_raise_r+0x1e>
 8009f52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f56:	b94b      	cbnz	r3, 8009f6c <_raise_r+0x32>
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 f831 	bl	8009fc0 <_getpid_r>
 8009f5e:	462a      	mov	r2, r5
 8009f60:	4601      	mov	r1, r0
 8009f62:	4620      	mov	r0, r4
 8009f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f68:	f000 b818 	b.w	8009f9c <_kill_r>
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d00a      	beq.n	8009f86 <_raise_r+0x4c>
 8009f70:	1c59      	adds	r1, r3, #1
 8009f72:	d103      	bne.n	8009f7c <_raise_r+0x42>
 8009f74:	2316      	movs	r3, #22
 8009f76:	6003      	str	r3, [r0, #0]
 8009f78:	2001      	movs	r0, #1
 8009f7a:	e7e7      	b.n	8009f4c <_raise_r+0x12>
 8009f7c:	2400      	movs	r4, #0
 8009f7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f82:	4628      	mov	r0, r5
 8009f84:	4798      	blx	r3
 8009f86:	2000      	movs	r0, #0
 8009f88:	e7e0      	b.n	8009f4c <_raise_r+0x12>
	...

08009f8c <raise>:
 8009f8c:	4b02      	ldr	r3, [pc, #8]	; (8009f98 <raise+0xc>)
 8009f8e:	4601      	mov	r1, r0
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	f7ff bfd2 	b.w	8009f3a <_raise_r>
 8009f96:	bf00      	nop
 8009f98:	20000064 	.word	0x20000064

08009f9c <_kill_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	; (8009fbc <_kill_r+0x20>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	f7f7 fe9d 	bl	8001ce8 <_kill>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d102      	bne.n	8009fb8 <_kill_r+0x1c>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b103      	cbz	r3, 8009fb8 <_kill_r+0x1c>
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	2000071c 	.word	0x2000071c

08009fc0 <_getpid_r>:
 8009fc0:	f7f7 be8a 	b.w	8001cd8 <_getpid>

08009fc4 <_init>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	bf00      	nop
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr

08009fd0 <_fini>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr
