
eecs373uarthttp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009644  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08009808  08009808  0000a808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c20  08009c20  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009c20  08009c20  0000ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c28  08009c28  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c28  08009c28  0000ac28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c2c  08009c2c  0000ac2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009c30  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001d4  08009e04  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08009e04  0000b72c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016916  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8d  00000000  00000000  00021b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000245a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fae  00000000  00000000  00025998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbc5  00000000  00000000  00026946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cef  00000000  00000000  0005250b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c923  00000000  00000000  0006b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177b1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006620  00000000  00000000  00177b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080097ec 	.word	0x080097ec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	080097ec 	.word	0x080097ec

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <FoodOrder_Init>:
typedef struct FoodOrder {
    char name[20];
    uint8_t valid;
    int id;
} FoodOrder;
void FoodOrder_Init(FoodOrder* order) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    order->valid = 0;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	751a      	strb	r2, [r3, #20]
    for(int i = 0; i < 20; ++i){
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e007      	b.n	8000f0c <FoodOrder_Init+0x24>
    	order->name[i] = '\0';
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 20; ++i){
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b13      	cmp	r3, #19
 8000f10:	ddf4      	ble.n	8000efc <FoodOrder_Init+0x14>
    }
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_TIM_PeriodElapsedCallback>:
        } else {
            // No content or content length invalid
        }
    }
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10d      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x2e>
		  uartSend("LIST\n");
 8000f32:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f34:	f000 f8c8 	bl	80010c8 <uartSend>
		  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f42:	4413      	add	r3, r2
 8000f44:	2201      	movs	r2, #1
 8000f46:	4619      	mov	r1, r3
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f4a:	f003 fedd 	bl	8004d08 <HAL_UART_Receive_IT>
	}
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40012c00 	.word	0x40012c00
 8000f5c:	0800981c 	.word	0x0800981c
 8000f60:	200005d0 	.word	0x200005d0
 8000f64:	200003b8 	.word	0x200003b8
 8000f68:	200002d8 	.word	0x200002d8

08000f6c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a06      	ldr	r2, [pc, #24]	@ (8000f94 <HAL_UART_RxCpltCallback+0x28>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d104      	bne.n	8000f88 <HAL_UART_RxCpltCallback+0x1c>
		 ++i;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_UART_RxCpltCallback+0x2c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <HAL_UART_RxCpltCallback+0x2c>)
 8000f86:	6013      	str	r3, [r2, #0]
	}

}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40004800 	.word	0x40004800
 8000f98:	200005d4 	.word	0x200005d4

08000f9c <processReceivedData>:

void processReceivedData(char* data) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	if(strcmp(data, "DATA") != 0){
 8000fa4:	4944      	ldr	r1, [pc, #272]	@ (80010b8 <processReceivedData+0x11c>)
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff f92a 	bl	8000200 <strcmp>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d17c      	bne.n	80010ac <processReceivedData+0x110>
		return;
	}
  data += 5;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3305      	adds	r3, #5
 8000fb6:	607b      	str	r3, [r7, #4]
    int totalOrders = atoi(data);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f005 fef5 	bl	8006da8 <atoi>
 8000fbe:	60b8      	str	r0, [r7, #8]
    data += 3;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3303      	adds	r3, #3
 8000fc4:	607b      	str	r3, [r7, #4]
    int processedOrders = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
    if(totalOrders == 0){
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d06f      	beq.n	80010b0 <processReceivedData+0x114>
    	return;
    }
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e00c      	b.n	8000ff0 <processReceivedData+0x54>
    		FoodOrder_Init(&foodOrders[i]);
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4a36      	ldr	r2, [pc, #216]	@ (80010bc <processReceivedData+0x120>)
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff7f 	bl	8000ee8 <FoodOrder_Init>
    for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	3301      	adds	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b09      	cmp	r3, #9
 8000ff4:	ddef      	ble.n	8000fd6 <processReceivedData+0x3a>
    	}
    while(processedOrders < totalOrders){
 8000ff6:	e032      	b.n	800105e <processReceivedData+0xc2>
    	foodOrders[processedOrders].id = atoi(data);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f005 fed5 	bl	8006da8 <atoi>
 8000ffe:	4601      	mov	r1, r0
 8001000:	482e      	ldr	r0, [pc, #184]	@ (80010bc <processReceivedData+0x120>)
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4403      	add	r3, r0
 800100e:	3318      	adds	r3, #24
 8001010:	6019      	str	r1, [r3, #0]
    	data += 11;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	330b      	adds	r3, #11
 8001016:	607b      	str	r3, [r7, #4]
    	strcpy(foodOrders[processedOrders].name, data);
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4a26      	ldr	r2, [pc, #152]	@ (80010bc <processReceivedData+0x120>)
 8001024:	4413      	add	r3, r2
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fd34 	bl	8007a96 <strcpy>
    	while(*data != '\0'){
 800102e:	e002      	b.n	8001036 <processReceivedData+0x9a>
    		++data;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
    	while(*data != '\0'){
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f8      	bne.n	8001030 <processReceivedData+0x94>
    	}
    	++data;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3301      	adds	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
    	foodOrders[processedOrders].valid = 1;
 8001044:	491d      	ldr	r1, [pc, #116]	@ (80010bc <processReceivedData+0x120>)
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3314      	adds	r3, #20
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
    	++processedOrders;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
    while(processedOrders < totalOrders){
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbc8      	blt.n	8000ff8 <processReceivedData+0x5c>
    }
    for(int i = 0; i < processedOrders; ++i){
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e01a      	b.n	80010a2 <processReceivedData+0x106>
    	printf("Name: %s\n", foodOrders[i].name);
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a11      	ldr	r2, [pc, #68]	@ (80010bc <processReceivedData+0x120>)
 8001078:	4413      	add	r3, r2
 800107a:	4619      	mov	r1, r3
 800107c:	4810      	ldr	r0, [pc, #64]	@ (80010c0 <processReceivedData+0x124>)
 800107e:	f006 fc35 	bl	80078ec <iprintf>
    	printf("id: %d\n", foodOrders[i].id);
 8001082:	490e      	ldr	r1, [pc, #56]	@ (80010bc <processReceivedData+0x120>)
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3318      	adds	r3, #24
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <processReceivedData+0x128>)
 8001098:	f006 fc28 	bl	80078ec <iprintf>
    for(int i = 0; i < processedOrders; ++i){
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbe0      	blt.n	800106c <processReceivedData+0xd0>
 80010aa:	e002      	b.n	80010b2 <processReceivedData+0x116>
		return;
 80010ac:	bf00      	nop
 80010ae:	e000      	b.n	80010b2 <processReceivedData+0x116>
    	return;
 80010b0:	bf00      	nop
    }
}
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	08009824 	.word	0x08009824
 80010bc:	200004b8 	.word	0x200004b8
 80010c0:	0800982c 	.word	0x0800982c
 80010c4:	08009838 	.word	0x08009838

080010c8 <uartSend>:
static void uartSend (char *str)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen (str), 1000);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff f8f5 	bl	80002c0 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <uartSend+0x28>)
 80010e2:	f003 fd83 	bl	8004bec <HAL_UART_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002d8 	.word	0x200002d8

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	e00c      	b.n	800111a <main+0x26>
		FoodOrder_Init(&foodOrders[i]);
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4a2e      	ldr	r2, [pc, #184]	@ (80011c4 <main+0xd0>)
 800110c:	4413      	add	r3, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff feea 	bl	8000ee8 <FoodOrder_Init>
	for (int i = 0; i < MAX_FOOD_ORDERS; ++i){
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3301      	adds	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b09      	cmp	r3, #9
 800111e:	ddef      	ble.n	8001100 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001120:	f000 feb5 	bl	8001e8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f85a 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f000 f9c8 	bl	80014bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800112c:	f000 f926 	bl	800137c <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001130:	f000 f8d8 	bl	80012e4 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001134:	f000 f96e 	bl	8001414 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001138:	f000 f896 	bl	8001268 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 800113c:	4822      	ldr	r0, [pc, #136]	@ (80011c8 <main+0xd4>)
 800113e:	f003 f8c7 	bl	80042d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  while(i > 0){
 8001142:	e039      	b.n	80011b8 <main+0xc4>
//		  printf("%c", rxBuffer[rxIndex]);
	 	if (rxBuffer[rxIndex] == '\n' || rxIndex >= RX_BUFFER_SIZE - 1 ||rxBuffer[rxIndex] == '\r' ) {
 8001144:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <main+0xd8>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <main+0xdc>)
 800114e:	5c9b      	ldrb	r3, [r3, r2]
 8001150:	2b0a      	cmp	r3, #10
 8001152:	d00c      	beq.n	800116e <main+0x7a>
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <main+0xd8>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	2bfe      	cmp	r3, #254	@ 0xfe
 800115c:	d807      	bhi.n	800116e <main+0x7a>
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <main+0xd8>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <main+0xdc>)
 8001168:	5c9b      	ldrb	r3, [r3, r2]
 800116a:	2b0d      	cmp	r3, #13
 800116c:	d10d      	bne.n	800118a <main+0x96>
	 		// Null-terminate the string
	 		rxBuffer[rxIndex] = '\0';
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <main+0xd8>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <main+0xdc>)
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]

	 		// Process received data
	 		processReceivedData(rxBuffer);
 800117c:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <main+0xdc>)
 800117e:	f7ff ff0d 	bl	8000f9c <processReceivedData>

	 		// Reset index
	 		rxIndex = 0;
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <main+0xd8>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
 8001188:	e006      	b.n	8001198 <main+0xa4>
	 		} else {
	 		// Increment index to receive the next byte
	 		rxIndex++;
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <main+0xd8>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <main+0xd8>)
 8001196:	801a      	strh	r2, [r3, #0]
	 	}
	 		// Prepare to receive the next byte
	 		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <main+0xd8>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <main+0xdc>)
 80011a2:	4413      	add	r3, r2
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	480a      	ldr	r0, [pc, #40]	@ (80011d4 <main+0xe0>)
 80011aa:	f003 fdad 	bl	8004d08 <HAL_UART_Receive_IT>

	 		  --i;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <main+0xe4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <main+0xe4>)
 80011b6:	6013      	str	r3, [r2, #0]
	  while(i > 0){
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <main+0xe4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1c1      	bne.n	8001144 <main+0x50>
 80011c0:	e7fa      	b.n	80011b8 <main+0xc4>
 80011c2:	bf00      	nop
 80011c4:	200004b8 	.word	0x200004b8
 80011c8:	2000036c 	.word	0x2000036c
 80011cc:	200005d0 	.word	0x200005d0
 80011d0:	200003b8 	.word	0x200003b8
 80011d4:	200002d8 	.word	0x200002d8
 80011d8:	200005d4 	.word	0x200005d4

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	@ 0x58
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2244      	movs	r2, #68	@ 0x44
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 fbd3 	bl	8007996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001202:	f001 fb69 	bl	80028d8 <HAL_PWREx_ControlVoltageScaling>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800120c:	f000 fb66 	bl	80018dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001210:	2310      	movs	r3, #16
 8001212:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800121c:	2360      	movs	r3, #96	@ 0x60
 800121e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fc09 	bl	8002a40 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001234:	f000 fb52 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f002 f80f 	bl	8003274 <HAL_RCC_ClockConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800125c:	f000 fb3e 	bl	80018dc <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3758      	adds	r7, #88	@ 0x58
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <MX_I2C2_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <MX_I2C2_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_I2C2_Init+0x74>)
 8001274:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001278:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_I2C2_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <MX_I2C2_Init+0x74>)
 8001282:	2201      	movs	r2, #1
 8001284:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_I2C2_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <MX_I2C2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_I2C2_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <MX_I2C2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_I2C2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012a4:	480d      	ldr	r0, [pc, #52]	@ (80012dc <MX_I2C2_Init+0x74>)
 80012a6:	f001 f9c5 	bl	8002634 <HAL_I2C_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012b0:	f000 fb14 	bl	80018dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b4:	2100      	movs	r1, #0
 80012b6:	4809      	ldr	r0, [pc, #36]	@ (80012dc <MX_I2C2_Init+0x74>)
 80012b8:	f001 fa57 	bl	800276a <HAL_I2CEx_ConfigAnalogFilter>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80012c2:	f000 fb0b 	bl	80018dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_I2C2_Init+0x74>)
 80012ca:	f001 fa99 	bl	8002800 <HAL_I2CEx_ConfigDigitalFilter>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80012d4:	f000 fb02 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200001f0 	.word	0x200001f0
 80012e0:	40005800 	.word	0x40005800

080012e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 80012ea:	4a23      	ldr	r2, [pc, #140]	@ (8001378 <MX_LPUART1_UART_Init+0x94>)
 80012ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800132c:	4811      	ldr	r0, [pc, #68]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 800132e:	f003 fc0d 	bl	8004b4c <HAL_UART_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001338:	f000 fad0 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133c:	2100      	movs	r1, #0
 800133e:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 8001340:	f005 fc67 	bl	8006c12 <HAL_UARTEx_SetTxFifoThreshold>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800134a:	f000 fac7 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	4808      	ldr	r0, [pc, #32]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 8001352:	f005 fc9c 	bl	8006c8e <HAL_UARTEx_SetRxFifoThreshold>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800135c:	f000 fabe 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 8001362:	f005 fc1d 	bl	8006ba0 <HAL_UARTEx_DisableFifoMode>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800136c:	f000 fab6 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000244 	.word	0x20000244
 8001378:	40008000 	.word	0x40008000

0800137c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_USART3_UART_Init+0x90>)
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <MX_USART3_UART_Init+0x94>)
 8001384:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <MX_USART3_UART_Init+0x90>)
 8001388:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800138c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_USART3_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013c6:	f003 fbc1 	bl	8004b4c <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013d0:	f000 fa84 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013d8:	f005 fc1b 	bl	8006c12 <HAL_UARTEx_SetTxFifoThreshold>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 fa7b 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4808      	ldr	r0, [pc, #32]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013ea:	f005 fc50 	bl	8006c8e <HAL_UARTEx_SetRxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 fa72 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013fa:	f005 fbd1 	bl	8006ba0 <HAL_UARTEx_DisableFifoMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001404:	f000 fa6a 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200002d8 	.word	0x200002d8
 8001410:	40004800 	.word	0x40004800

08001414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001434:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <MX_TIM1_Init+0xa4>)
 8001436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800143a:	f240 321f 	movw	r2, #799	@ 0x31f
 800143e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001446:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001448:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800144c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001460:	4814      	ldr	r0, [pc, #80]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001462:	f002 fedd 	bl	8004220 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800146c:	f000 fa36 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001474:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800147e:	f003 f899 	bl	80045b4 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001488:	f000 fa28 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800149e:	f003 faaf 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014a8:	f000 fa18 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000036c 	.word	0x2000036c
 80014b8:	40012c00 	.word	0x40012c00

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	@ 0x38
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d2:	4bb2      	ldr	r3, [pc, #712]	@ (800179c <MX_GPIO_Init+0x2e0>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4ab1      	ldr	r2, [pc, #708]	@ (800179c <MX_GPIO_Init+0x2e0>)
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4baf      	ldr	r3, [pc, #700]	@ (800179c <MX_GPIO_Init+0x2e0>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	623b      	str	r3, [r7, #32]
 80014e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	4bac      	ldr	r3, [pc, #688]	@ (800179c <MX_GPIO_Init+0x2e0>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4aab      	ldr	r2, [pc, #684]	@ (800179c <MX_GPIO_Init+0x2e0>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4ba9      	ldr	r3, [pc, #676]	@ (800179c <MX_GPIO_Init+0x2e0>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	4ba6      	ldr	r3, [pc, #664]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4aa5      	ldr	r2, [pc, #660]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4ba3      	ldr	r3, [pc, #652]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	4ba0      	ldr	r3, [pc, #640]	@ (800179c <MX_GPIO_Init+0x2e0>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a9f      	ldr	r2, [pc, #636]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b9d      	ldr	r3, [pc, #628]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b9a      	ldr	r3, [pc, #616]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a99      	ldr	r2, [pc, #612]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b97      	ldr	r3, [pc, #604]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b94      	ldr	r3, [pc, #592]	@ (800179c <MX_GPIO_Init+0x2e0>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a93      	ldr	r2, [pc, #588]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b91      	ldr	r3, [pc, #580]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001562:	4b8e      	ldr	r3, [pc, #568]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a8d      	ldr	r2, [pc, #564]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b8b      	ldr	r3, [pc, #556]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800157a:	4b88      	ldr	r3, [pc, #544]	@ (800179c <MX_GPIO_Init+0x2e0>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a87      	ldr	r2, [pc, #540]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b85      	ldr	r3, [pc, #532]	@ (800179c <MX_GPIO_Init+0x2e0>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001592:	f001 fa45 	bl	8002a20 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001596:	230c      	movs	r3, #12
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015a6:	230d      	movs	r3, #13
 80015a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	487b      	ldr	r0, [pc, #492]	@ (80017a0 <MX_GPIO_Init+0x2e4>)
 80015b2:	f000 fead 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015c6:	230d      	movs	r3, #13
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	4874      	ldr	r0, [pc, #464]	@ (80017a4 <MX_GPIO_Init+0x2e8>)
 80015d2:	f000 fe9d 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015d6:	230f      	movs	r3, #15
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015da:	230b      	movs	r3, #11
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	486f      	ldr	r0, [pc, #444]	@ (80017a8 <MX_GPIO_Init+0x2ec>)
 80015ea:	f000 fe91 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ee:	2301      	movs	r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015fe:	2301      	movs	r3, #1
 8001600:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160c:	f000 fe80 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001610:	230a      	movs	r3, #10
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001614:	230b      	movs	r3, #11
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001626:	f000 fe73 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800162a:	23f0      	movs	r3, #240	@ 0xf0
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163a:	2305      	movs	r3, #5
 800163c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001648:	f000 fe62 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800164c:	2301      	movs	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165c:	2302      	movs	r3, #2
 800165e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4851      	ldr	r0, [pc, #324]	@ (80017ac <MX_GPIO_Init+0x2f0>)
 8001668:	f000 fe52 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800166c:	2302      	movs	r3, #2
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001670:	230b      	movs	r3, #11
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	484b      	ldr	r0, [pc, #300]	@ (80017ac <MX_GPIO_Init+0x2f0>)
 8001680:	f000 fe46 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001684:	2344      	movs	r3, #68	@ 0x44
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001688:	2303      	movs	r3, #3
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4845      	ldr	r0, [pc, #276]	@ (80017ac <MX_GPIO_Init+0x2f0>)
 8001698:	f000 fe3a 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800169c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ae:	2301      	movs	r3, #1
 80016b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	483c      	ldr	r0, [pc, #240]	@ (80017ac <MX_GPIO_Init+0x2f0>)
 80016ba:	f000 fe29 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80016be:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80016d0:	230d      	movs	r3, #13
 80016d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	4834      	ldr	r0, [pc, #208]	@ (80017ac <MX_GPIO_Init+0x2f0>)
 80016dc:	f000 fe18 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80016f2:	230e      	movs	r3, #14
 80016f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	482b      	ldr	r0, [pc, #172]	@ (80017ac <MX_GPIO_Init+0x2f0>)
 80016fe:	f000 fe07 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001702:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001714:	2302      	movs	r3, #2
 8001716:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171c:	4619      	mov	r1, r3
 800171e:	4824      	ldr	r0, [pc, #144]	@ (80017b0 <MX_GPIO_Init+0x2f4>)
 8001720:	f000 fdf6 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001724:	2340      	movs	r3, #64	@ 0x40
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001734:	230d      	movs	r3, #13
 8001736:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	481a      	ldr	r0, [pc, #104]	@ (80017a8 <MX_GPIO_Init+0x2ec>)
 8001740:	f000 fde6 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001754:	2302      	movs	r3, #2
 8001756:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <MX_GPIO_Init+0x2ec>)
 8001760:	f000 fdd6 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001764:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001776:	230c      	movs	r3, #12
 8001778:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <MX_GPIO_Init+0x2ec>)
 8001782:	f000 fdc5 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001786:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	633b      	str	r3, [r7, #48]	@ 0x30
 8001798:	e00c      	b.n	80017b4 <MX_GPIO_Init+0x2f8>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	48001000 	.word	0x48001000
 80017a4:	48001400 	.word	0x48001400
 80017a8:	48000800 	.word	0x48000800
 80017ac:	48000400 	.word	0x48000400
 80017b0:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b4:	230a      	movs	r3, #10
 80017b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c2:	f000 fda5 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017de:	f000 fd97 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017e2:	2301      	movs	r3, #1
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017f2:	2309      	movs	r3, #9
 80017f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	482b      	ldr	r0, [pc, #172]	@ (80018ac <MX_GPIO_Init+0x3f0>)
 80017fe:	f000 fd87 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001802:	2304      	movs	r3, #4
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001812:	230c      	movs	r3, #12
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4823      	ldr	r0, [pc, #140]	@ (80018ac <MX_GPIO_Init+0x3f0>)
 800181e:	f000 fd77 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001822:	2378      	movs	r3, #120	@ 0x78
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001832:	2307      	movs	r3, #7
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	481b      	ldr	r0, [pc, #108]	@ (80018ac <MX_GPIO_Init+0x3f0>)
 800183e:	f000 fd67 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001842:	2338      	movs	r3, #56	@ 0x38
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001852:	2306      	movs	r3, #6
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4814      	ldr	r0, [pc, #80]	@ (80018b0 <MX_GPIO_Init+0x3f4>)
 800185e:	f000 fd57 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001868:	2312      	movs	r3, #18
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001874:	2304      	movs	r3, #4
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <MX_GPIO_Init+0x3f4>)
 8001880:	f000 fd46 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001884:	2301      	movs	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001894:	2302      	movs	r3, #2
 8001896:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <MX_GPIO_Init+0x3f8>)
 80018a0:	f000 fd36 	bl	8002310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3738      	adds	r7, #56	@ 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	48000c00 	.word	0x48000c00
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48001000 	.word	0x48001000

080018b8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80018c0:	1d39      	adds	r1, r7, #4
 80018c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c6:	2201      	movs	r2, #1
 80018c8:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <__io_putchar+0x20>)
 80018ca:	f003 f98f 	bl	8004bec <HAL_UART_Transmit>
  return ch;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000244 	.word	0x20000244

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <Error_Handler+0x8>

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <HAL_MspInit+0x44>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <HAL_MspInit+0x44>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018fa:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <HAL_MspInit+0x44>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_MspInit+0x44>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	4a08      	ldr	r2, [pc, #32]	@ (800192c <HAL_MspInit+0x44>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001910:	6593      	str	r3, [r2, #88]	@ 0x58
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_MspInit+0x44>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0ae      	sub	sp, #184	@ 0xb8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2294      	movs	r2, #148	@ 0x94
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f006 f820 	bl	8007996 <memset>
  if(hi2c->Instance==I2C2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a21      	ldr	r2, [pc, #132]	@ (80019e0 <HAL_I2C_MspInit+0xb0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d13a      	bne.n	80019d6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001964:	2300      	movs	r3, #0
 8001966:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4618      	mov	r0, r3
 800196e:	f001 ff3f 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001978:	f7ff ffb0 	bl	80018dc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_I2C_MspInit+0xb4>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001980:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <HAL_I2C_MspInit+0xb4>)
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_I2C_MspInit+0xb4>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001994:	2307      	movs	r3, #7
 8001996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199a:	2312      	movs	r3, #18
 800199c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019ac:	2304      	movs	r3, #4
 80019ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019b6:	4619      	mov	r1, r3
 80019b8:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <HAL_I2C_MspInit+0xb8>)
 80019ba:	f000 fca9 	bl	8002310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c2:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	37b8      	adds	r7, #184	@ 0xb8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40005800 	.word	0x40005800
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48001400 	.word	0x48001400

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0b0      	sub	sp, #192	@ 0xc0
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	2294      	movs	r2, #148	@ 0x94
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f005 ffc2 	bl	8007996 <memset>
  if(huart->Instance==LPUART1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a47      	ldr	r2, [pc, #284]	@ (8001b34 <HAL_UART_MspInit+0x148>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d13e      	bne.n	8001a9a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a24:	f107 0318 	add.w	r3, r7, #24
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fee1 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a34:	f7ff ff52 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a38:	4b3f      	ldr	r3, [pc, #252]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a44:	4b3c      	ldr	r3, [pc, #240]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a50:	4b39      	ldr	r3, [pc, #228]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	4a38      	ldr	r2, [pc, #224]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5c:	4b36      	ldr	r3, [pc, #216]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001a68:	f000 ffda 	bl	8002a20 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a6c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a86:	2308      	movs	r3, #8
 8001a88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a90:	4619      	mov	r1, r3
 8001a92:	482a      	ldr	r0, [pc, #168]	@ (8001b3c <HAL_UART_MspInit+0x150>)
 8001a94:	f000 fc3c 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a98:	e047      	b.n	8001b2a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a28      	ldr	r2, [pc, #160]	@ (8001b40 <HAL_UART_MspInit+0x154>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d142      	bne.n	8001b2a <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f001 fe9d 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001abc:	f7ff ff0e 	bl	80018dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001ac6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	4a16      	ldr	r2, [pc, #88]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae4:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <HAL_UART_MspInit+0x14c>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001af0:	2330      	movs	r3, #48	@ 0x30
 8001af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b08:	2307      	movs	r3, #7
 8001b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b12:	4619      	mov	r1, r3
 8001b14:	480b      	ldr	r0, [pc, #44]	@ (8001b44 <HAL_UART_MspInit+0x158>)
 8001b16:	f000 fbfb 	bl	8002310 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2027      	movs	r0, #39	@ 0x27
 8001b20:	f000 fb05 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b24:	2027      	movs	r0, #39	@ 0x27
 8001b26:	f000 fb1e 	bl	8002166 <HAL_NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	37c0      	adds	r7, #192	@ 0xc0
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40008000 	.word	0x40008000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48001800 	.word	0x48001800
 8001b40:	40004800 	.word	0x40004800
 8001b44:	48000800 	.word	0x48000800

08001b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a24      	ldr	r2, [pc, #144]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d141      	bne.n	8001bee <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6a:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_TIM_Base_MspInit+0xb4>)
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <HAL_TIM_Base_MspInit+0xb4>)
 8001b70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b76:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_TIM_Base_MspInit+0xb4>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_TIM_Base_MspInit+0xb4>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <HAL_TIM_Base_MspInit+0xb4>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_TIM_Base_MspInit+0xb4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001b9a:	f44f 532a 	mov.w	r3, #10880	@ 0x2a80
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4812      	ldr	r0, [pc, #72]	@ (8001c00 <HAL_TIM_Base_MspInit+0xb8>)
 8001bb8:	f000 fbaa 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bbc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4809      	ldr	r0, [pc, #36]	@ (8001c00 <HAL_TIM_Base_MspInit+0xb8>)
 8001bda:	f000 fb99 	bl	8002310 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2019      	movs	r0, #25
 8001be4:	f000 faa3 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001be8:	2019      	movs	r0, #25
 8001bea:	f000 fabc 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	@ 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40012c00 	.word	0x40012c00
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48001000 	.word	0x48001000

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <NMI_Handler+0x4>

08001c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5a:	f000 f96d 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c6a:	f002 fba1 	bl	80043b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000036c 	.word	0x2000036c

08001c78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <USART3_IRQHandler+0x10>)
 8001c7e:	f003 f88f 	bl	8004da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200002d8 	.word	0x200002d8

08001c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return 1;
 8001c90:	2301      	movs	r3, #1
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_kill>:

int _kill(int pid, int sig)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ca6:	f005 fec9 	bl	8007a3c <__errno>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2216      	movs	r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
  return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_exit>:

void _exit (int status)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ffe7 	bl	8001c9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cce:	bf00      	nop
 8001cd0:	e7fd      	b.n	8001cce <_exit+0x12>

08001cd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e00a      	b.n	8001cfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	4601      	mov	r1, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	60ba      	str	r2, [r7, #8]
 8001cf0:	b2ca      	uxtb	r2, r1
 8001cf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dbf0      	blt.n	8001ce4 <_read+0x12>
  }

  return len;
 8001d02:	687b      	ldr	r3, [r7, #4]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e009      	b.n	8001d32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	60ba      	str	r2, [r7, #8]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fdc6 	bl	80018b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	dbf1      	blt.n	8001d1e <_write+0x12>
  }
  return len;
 8001d3a:	687b      	ldr	r3, [r7, #4]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_close>:

int _close(int file)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_isatty>:

int _isatty(int file)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	@ (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f005 fe2e 	bl	8007a3c <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200a0000 	.word	0x200a0000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	200005d8 	.word	0x200005d8
 8001e14:	20000730 	.word	0x20000730

08001e18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e40:	f7ff ffea 	bl	8001e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e44:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e46:	490d      	ldr	r1, [pc, #52]	@ (8001e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e48:	4a0d      	ldr	r2, [pc, #52]	@ (8001e80 <LoopForever+0xe>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e88 <LoopForever+0x16>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6a:	f005 fded 	bl	8007a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e6e:	f7ff f941 	bl	80010f4 <main>

08001e72 <LoopForever>:

LoopForever:
    b LoopForever
 8001e72:	e7fe      	b.n	8001e72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e74:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e80:	08009c30 	.word	0x08009c30
  ldr r2, =_sbss
 8001e84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e88:	2000072c 	.word	0x2000072c

08001e8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <ADC1_IRQHandler>

08001e8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f93d 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f80e 	bl	8001ec0 <HAL_InitTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	71fb      	strb	r3, [r7, #7]
 8001eae:	e001      	b.n	8001eb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb0:	f7ff fd1a 	bl	80018e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ecc:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <HAL_InitTick+0x6c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <HAL_InitTick+0x70>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_InitTick+0x6c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f949 	bl	8002182 <HAL_SYSTICK_Config>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d809      	bhi.n	8001f10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f913 	bl	800212e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f08:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_InitTick+0x74>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e007      	b.n	8001f20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e004      	b.n	8001f20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e001      	b.n	8001f20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	200005dc 	.word	0x200005dc

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200005dc 	.word	0x200005dc

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	@ (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	@ (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	@ (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	@ (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff29 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff3e 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff8e 	bl	800206c <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5d 	bl	8002018 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff31 	bl	8001fdc <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d008      	beq.n	80021c4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e040      	b.n	8002246 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 020e 	bic.w	r2, r2, #14
 80021d2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	f003 021c 	and.w	r2, r3, #28
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f202 	lsl.w	r2, r1, r2
 8002206:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002210:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002228:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002232:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d005      	beq.n	8002276 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2204      	movs	r2, #4
 800226e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e047      	b.n	8002306 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 020e 	bic.w	r2, r2, #14
 8002284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f003 021c 	and.w	r2, r3, #28
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00c      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022e4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4798      	blx	r3
    }
  }
  return status;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231e:	e166      	b.n	80025ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8158 	beq.w	80025e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d005      	beq.n	8002350 <HAL_GPIO_Init+0x40>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d130      	bne.n	80023b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002386:	2201      	movs	r2, #1
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	f003 0201 	and.w	r2, r3, #1
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d017      	beq.n	80023ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d123      	bne.n	8002442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	08da      	lsrs	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3208      	adds	r2, #8
 8002402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	6939      	ldr	r1, [r7, #16]
 800243e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0203 	and.w	r2, r3, #3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80b2 	beq.w	80025e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002484:	4b61      	ldr	r3, [pc, #388]	@ (800260c <HAL_GPIO_Init+0x2fc>)
 8002486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002488:	4a60      	ldr	r2, [pc, #384]	@ (800260c <HAL_GPIO_Init+0x2fc>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002490:	4b5e      	ldr	r3, [pc, #376]	@ (800260c <HAL_GPIO_Init+0x2fc>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800249c:	4a5c      	ldr	r2, [pc, #368]	@ (8002610 <HAL_GPIO_Init+0x300>)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	220f      	movs	r2, #15
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024c6:	d02b      	beq.n	8002520 <HAL_GPIO_Init+0x210>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a52      	ldr	r2, [pc, #328]	@ (8002614 <HAL_GPIO_Init+0x304>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d025      	beq.n	800251c <HAL_GPIO_Init+0x20c>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a51      	ldr	r2, [pc, #324]	@ (8002618 <HAL_GPIO_Init+0x308>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d01f      	beq.n	8002518 <HAL_GPIO_Init+0x208>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a50      	ldr	r2, [pc, #320]	@ (800261c <HAL_GPIO_Init+0x30c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d019      	beq.n	8002514 <HAL_GPIO_Init+0x204>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002620 <HAL_GPIO_Init+0x310>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d013      	beq.n	8002510 <HAL_GPIO_Init+0x200>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a4e      	ldr	r2, [pc, #312]	@ (8002624 <HAL_GPIO_Init+0x314>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00d      	beq.n	800250c <HAL_GPIO_Init+0x1fc>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002628 <HAL_GPIO_Init+0x318>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d007      	beq.n	8002508 <HAL_GPIO_Init+0x1f8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a4c      	ldr	r2, [pc, #304]	@ (800262c <HAL_GPIO_Init+0x31c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d101      	bne.n	8002504 <HAL_GPIO_Init+0x1f4>
 8002500:	2307      	movs	r3, #7
 8002502:	e00e      	b.n	8002522 <HAL_GPIO_Init+0x212>
 8002504:	2308      	movs	r3, #8
 8002506:	e00c      	b.n	8002522 <HAL_GPIO_Init+0x212>
 8002508:	2306      	movs	r3, #6
 800250a:	e00a      	b.n	8002522 <HAL_GPIO_Init+0x212>
 800250c:	2305      	movs	r3, #5
 800250e:	e008      	b.n	8002522 <HAL_GPIO_Init+0x212>
 8002510:	2304      	movs	r3, #4
 8002512:	e006      	b.n	8002522 <HAL_GPIO_Init+0x212>
 8002514:	2303      	movs	r3, #3
 8002516:	e004      	b.n	8002522 <HAL_GPIO_Init+0x212>
 8002518:	2302      	movs	r3, #2
 800251a:	e002      	b.n	8002522 <HAL_GPIO_Init+0x212>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_GPIO_Init+0x212>
 8002520:	2300      	movs	r3, #0
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	f002 0203 	and.w	r2, r2, #3
 8002528:	0092      	lsls	r2, r2, #2
 800252a:	4093      	lsls	r3, r2
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002532:	4937      	ldr	r1, [pc, #220]	@ (8002610 <HAL_GPIO_Init+0x300>)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002540:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_GPIO_Init+0x320>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002564:	4a32      	ldr	r2, [pc, #200]	@ (8002630 <HAL_GPIO_Init+0x320>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800256a:	4b31      	ldr	r3, [pc, #196]	@ (8002630 <HAL_GPIO_Init+0x320>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800258e:	4a28      	ldr	r2, [pc, #160]	@ (8002630 <HAL_GPIO_Init+0x320>)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002594:	4b26      	ldr	r3, [pc, #152]	@ (8002630 <HAL_GPIO_Init+0x320>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002630 <HAL_GPIO_Init+0x320>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025be:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <HAL_GPIO_Init+0x320>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025e2:	4a13      	ldr	r2, [pc, #76]	@ (8002630 <HAL_GPIO_Init+0x320>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f ae91 	bne.w	8002320 <HAL_GPIO_Init+0x10>
  }
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	48000400 	.word	0x48000400
 8002618:	48000800 	.word	0x48000800
 800261c:	48000c00 	.word	0x48000c00
 8002620:	48001000 	.word	0x48001000
 8002624:	48001400 	.word	0x48001400
 8002628:	48001800 	.word	0x48001800
 800262c:	48001c00 	.word	0x48001c00
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e08d      	b.n	8002762 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff f968 	bl	8001930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	@ 0x24
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002684:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002694:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	e006      	b.n	80026bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d108      	bne.n	80026d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	e007      	b.n	80026e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002708:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69d9      	ldr	r1, [r3, #28]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b20      	cmp	r3, #32
 800277e:	d138      	bne.n	80027f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800278a:	2302      	movs	r3, #2
 800278c:	e032      	b.n	80027f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2224      	movs	r2, #36	@ 0x24
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	d139      	bne.n	800288a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002820:	2302      	movs	r3, #2
 8002822:	e033      	b.n	800288c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	@ 0x24
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002852:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800289c:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a8:	d102      	bne.n	80028b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80028aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028ae:	e00b      	b.n	80028c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80028b0:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80028b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028be:	d102      	bne.n	80028c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80028c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028c4:	e000      	b.n	80028c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80028c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40007000 	.word	0x40007000

080028d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d141      	bne.n	800296a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f2:	d131      	bne.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028f4:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028fa:	4a46      	ldr	r2, [pc, #280]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002900:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800290c:	4a41      	ldr	r2, [pc, #260]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002914:	4b40      	ldr	r3, [pc, #256]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2232      	movs	r2, #50	@ 0x32
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	0c9b      	lsrs	r3, r3, #18
 8002926:	3301      	adds	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800292a:	e002      	b.n	8002932 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3b01      	subs	r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002932:	4b38      	ldr	r3, [pc, #224]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800293e:	d102      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f2      	bne.n	800292c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002946:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002952:	d158      	bne.n	8002a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e057      	b.n	8002a08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002958:	4b2e      	ldr	r3, [pc, #184]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800295e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002964:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002968:	e04d      	b.n	8002a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002970:	d141      	bne.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002972:	4b28      	ldr	r3, [pc, #160]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297e:	d131      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002980:	4b24      	ldr	r3, [pc, #144]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002986:	4a23      	ldr	r2, [pc, #140]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002990:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002998:	4a1e      	ldr	r2, [pc, #120]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800299e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2232      	movs	r2, #50	@ 0x32
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	0c9b      	lsrs	r3, r3, #18
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b6:	e002      	b.n	80029be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029be:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ca:	d102      	bne.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f2      	bne.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029de:	d112      	bne.n	8002a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e011      	b.n	8002a08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029f4:	e007      	b.n	8002a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029fe:	4a05      	ldr	r2, [pc, #20]	@ (8002a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a04:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40007000 	.word	0x40007000
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	431bde83 	.word	0x431bde83

08002a20 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a04      	ldr	r2, [pc, #16]	@ (8002a3c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a2e:	6053      	str	r3, [r2, #4]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40007000 	.word	0x40007000

08002a40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f000 bc08 	b.w	8003264 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a54:	4b96      	ldr	r3, [pc, #600]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5e:	4b94      	ldr	r3, [pc, #592]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80e4 	beq.w	8002c3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4c>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	f040 808b 	bne.w	8002b9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f040 8087 	bne.w	8002b9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8c:	4b88      	ldr	r3, [pc, #544]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x64>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e3df      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1a      	ldr	r2, [r3, #32]
 8002aa8:	4b81      	ldr	r3, [pc, #516]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <HAL_RCC_OscConfig+0x7e>
 8002ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002abc:	e005      	b.n	8002aca <HAL_RCC_OscConfig+0x8a>
 8002abe:	4b7c      	ldr	r3, [pc, #496]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d223      	bcs.n	8002b16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fdcc 	bl	8003670 <RCC_SetFlashLatencyFromMSIRange>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e3c0      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae2:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a72      	ldr	r2, [pc, #456]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	f043 0308 	orr.w	r3, r3, #8
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b70      	ldr	r3, [pc, #448]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	496d      	ldr	r1, [pc, #436]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b00:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	4968      	ldr	r1, [pc, #416]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
 8002b14:	e025      	b.n	8002b62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b16:	4b66      	ldr	r3, [pc, #408]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a65      	ldr	r2, [pc, #404]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4960      	ldr	r1, [pc, #384]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b34:	4b5e      	ldr	r3, [pc, #376]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	495b      	ldr	r1, [pc, #364]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fd8c 	bl	8003670 <RCC_SetFlashLatencyFromMSIRange>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e380      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b62:	f000 fcc1 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b51      	ldr	r3, [pc, #324]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	4950      	ldr	r1, [pc, #320]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8002cb8 <HAL_RCC_OscConfig+0x278>)
 8002b80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b82:	4b4e      	ldr	r3, [pc, #312]	@ (8002cbc <HAL_RCC_OscConfig+0x27c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f99a 	bl	8001ec0 <HAL_InitTick>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d052      	beq.n	8002c3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	e364      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d032      	beq.n	8002c08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a42      	ldr	r2, [pc, #264]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bae:	f7ff f9d7 	bl	8001f60 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb6:	f7ff f9d3 	bl	8001f60 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e34d      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc8:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd4:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a35      	ldr	r2, [pc, #212]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bda:	f043 0308 	orr.w	r3, r3, #8
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b33      	ldr	r3, [pc, #204]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4930      	ldr	r1, [pc, #192]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	492b      	ldr	r1, [pc, #172]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
 8002c06:	e01a      	b.n	8002c3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c08:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c14:	f7ff f9a4 	bl	8001f60 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c1c:	f7ff f9a0 	bl	8001f60 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e31a      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1dc>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d073      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_OscConfig+0x21c>
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d10e      	bne.n	8002c74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d063      	beq.n	8002d30 <HAL_RCC_OscConfig+0x2f0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d15f      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e2f7      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x24c>
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e025      	b.n	8002cd8 <HAL_RCC_OscConfig+0x298>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c94:	d114      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x280>
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a02      	ldr	r2, [pc, #8]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e013      	b.n	8002cd8 <HAL_RCC_OscConfig+0x298>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08009840 	.word	0x08009840
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	4ba0      	ldr	r3, [pc, #640]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a9f      	ldr	r2, [pc, #636]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b9d      	ldr	r3, [pc, #628]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a9c      	ldr	r2, [pc, #624]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7ff f93e 	bl	8001f60 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7ff f93a 	bl	8001f60 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e2b4      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfa:	4b92      	ldr	r3, [pc, #584]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2a8>
 8002d06:	e014      	b.n	8002d32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7ff f92a 	bl	8001f60 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7ff f926 	bl	8001f60 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	@ 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e2a0      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d22:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2d0>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d060      	beq.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x310>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d119      	bne.n	8002d7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d116      	bne.n	8002d7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d50:	4b7c      	ldr	r3, [pc, #496]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x328>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e27d      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b76      	ldr	r3, [pc, #472]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	4973      	ldr	r1, [pc, #460]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7c:	e040      	b.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d023      	beq.n	8002dce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d86:	4b6f      	ldr	r3, [pc, #444]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7ff f8e5 	bl	8001f60 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7ff f8e1 	bl	8001f60 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e25b      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dac:	4b65      	ldr	r3, [pc, #404]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b62      	ldr	r3, [pc, #392]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	495f      	ldr	r1, [pc, #380]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
 8002dcc:	e018      	b.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dce:	4b5d      	ldr	r3, [pc, #372]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7ff f8c1 	bl	8001f60 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de2:	f7ff f8bd 	bl	8001f60 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e237      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df4:	4b53      	ldr	r3, [pc, #332]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d03c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e14:	4b4b      	ldr	r3, [pc, #300]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7ff f89c 	bl	8001f60 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7ff f898 	bl	8001f60 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e212      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3e:	4b41      	ldr	r3, [pc, #260]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ef      	beq.n	8002e2c <HAL_RCC_OscConfig+0x3ec>
 8002e4c:	e01b      	b.n	8002e86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e54:	4a3b      	ldr	r2, [pc, #236]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7ff f87f 	bl	8001f60 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e66:	f7ff f87b 	bl	8001f60 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1f5      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e78:	4b32      	ldr	r3, [pc, #200]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ef      	bne.n	8002e66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80a6 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e98:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	4a26      	ldr	r2, [pc, #152]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eb0:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec0:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <HAL_RCC_OscConfig+0x508>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d118      	bne.n	8002efe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <HAL_RCC_OscConfig+0x508>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <HAL_RCC_OscConfig+0x508>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed8:	f7ff f842 	bl	8001f60 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7ff f83e 	bl	8001f60 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1b8      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <HAL_RCC_OscConfig+0x508>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d108      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4d8>
 8002f06:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f16:	e029      	b.n	8002f6c <HAL_RCC_OscConfig+0x52c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d115      	bne.n	8002f4c <HAL_RCC_OscConfig+0x50c>
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f26:	4a07      	ldr	r2, [pc, #28]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	4a03      	ldr	r2, [pc, #12]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f40:	e014      	b.n	8002f6c <HAL_RCC_OscConfig+0x52c>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	4b9d      	ldr	r3, [pc, #628]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	4a9c      	ldr	r2, [pc, #624]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f5c:	4b99      	ldr	r3, [pc, #612]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	4a98      	ldr	r2, [pc, #608]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe fff4 	bl	8001f60 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fff0 	bl	8001f60 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e168      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f92:	4b8c      	ldr	r3, [pc, #560]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ed      	beq.n	8002f7c <HAL_RCC_OscConfig+0x53c>
 8002fa0:	e015      	b.n	8002fce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe ffdd 	bl	8001f60 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe ffd9 	bl	8001f60 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e151      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc0:	4b80      	ldr	r3, [pc, #512]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ed      	bne.n	8002faa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03c      	beq.n	8003066 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01c      	beq.n	800302e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ff4:	4b73      	ldr	r3, [pc, #460]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ffa:	4a72      	ldr	r2, [pc, #456]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe ffac 	bl	8001f60 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800300c:	f7fe ffa8 	bl	8001f60 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e122      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800301e:	4b69      	ldr	r3, [pc, #420]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8003020:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <HAL_RCC_OscConfig+0x5cc>
 800302c:	e01b      	b.n	8003066 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800302e:	4b65      	ldr	r3, [pc, #404]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8003030:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003034:	4a63      	ldr	r2, [pc, #396]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe ff8f 	bl	8001f60 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003046:	f7fe ff8b 	bl	8001f60 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e105      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003058:	4b5a      	ldr	r3, [pc, #360]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 800305a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ef      	bne.n	8003046 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80f9 	beq.w	8003262 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	2b02      	cmp	r3, #2
 8003076:	f040 80cf 	bne.w	8003218 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800307a:	4b52      	ldr	r3, [pc, #328]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0203 	and.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	429a      	cmp	r2, r3
 800308c:	d12c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	3b01      	subs	r3, #1
 800309a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d123      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d11b      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d113      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ca:	085b      	lsrs	r3, r3, #1
 80030cc:	3b01      	subs	r3, #1
 80030ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d109      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	3b01      	subs	r3, #1
 80030e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d071      	beq.n	80031cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d068      	beq.n	80031c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ee:	4b35      	ldr	r3, [pc, #212]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030fa:	4b32      	ldr	r3, [pc, #200]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0ac      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800310a:	4b2e      	ldr	r3, [pc, #184]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2d      	ldr	r2, [pc, #180]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8003110:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003114:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003116:	f7fe ff23 	bl	8001f60 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe ff1f 	bl	8001f60 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e099      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003130:	4b24      	ldr	r3, [pc, #144]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313c:	4b21      	ldr	r3, [pc, #132]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4b21      	ldr	r3, [pc, #132]	@ (80031c8 <HAL_RCC_OscConfig+0x788>)
 8003142:	4013      	ands	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800314c:	3a01      	subs	r2, #1
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	4311      	orrs	r1, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003156:	0212      	lsls	r2, r2, #8
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800315e:	0852      	lsrs	r2, r2, #1
 8003160:	3a01      	subs	r2, #1
 8003162:	0552      	lsls	r2, r2, #21
 8003164:	4311      	orrs	r1, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800316a:	0852      	lsrs	r2, r2, #1
 800316c:	3a01      	subs	r2, #1
 800316e:	0652      	lsls	r2, r2, #25
 8003170:	4311      	orrs	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003176:	06d2      	lsls	r2, r2, #27
 8003178:	430a      	orrs	r2, r1
 800317a:	4912      	ldr	r1, [pc, #72]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 800317c:	4313      	orrs	r3, r2
 800317e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003180:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0f      	ldr	r2, [pc, #60]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800318a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800318c:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a0c      	ldr	r2, [pc, #48]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 8003192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003196:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003198:	f7fe fee2 	bl	8001f60 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fede 	bl	8001f60 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e058      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b2:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <HAL_RCC_OscConfig+0x784>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031be:	e050      	b.n	8003262 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e04f      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
 80031c4:	40021000 	.word	0x40021000
 80031c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031cc:	4b27      	ldr	r3, [pc, #156]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d144      	bne.n	8003262 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031d8:	4b24      	ldr	r3, [pc, #144]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a23      	ldr	r2, [pc, #140]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e4:	4b21      	ldr	r3, [pc, #132]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a20      	ldr	r2, [pc, #128]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 80031ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031f0:	f7fe feb6 	bl	8001f60 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe feb2 	bl	8001f60 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e02c      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	4b18      	ldr	r3, [pc, #96]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x7b8>
 8003216:	e024      	b.n	8003262 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d01f      	beq.n	800325e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b13      	ldr	r3, [pc, #76]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a12      	ldr	r2, [pc, #72]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 8003224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fe99 	bl	8001f60 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe fe95 	bl	8001f60 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e00f      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003250:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	4905      	ldr	r1, [pc, #20]	@ (800326c <HAL_RCC_OscConfig+0x82c>)
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_OscConfig+0x830>)
 8003258:	4013      	ands	r3, r2
 800325a:	60cb      	str	r3, [r1, #12]
 800325c:	e001      	b.n	8003262 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	feeefffc 	.word	0xfeeefffc

08003274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e11d      	b.n	80034c8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b90      	ldr	r3, [pc, #576]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b8d      	ldr	r3, [pc, #564]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 020f 	bic.w	r2, r3, #15
 80032a2:	498b      	ldr	r1, [pc, #556]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b89      	ldr	r3, [pc, #548]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e105      	b.n	80034c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	4b81      	ldr	r3, [pc, #516]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d908      	bls.n	80032ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b7e      	ldr	r3, [pc, #504]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	497b      	ldr	r1, [pc, #492]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d079      	beq.n	80033ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d11e      	bne.n	800333c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	4b75      	ldr	r3, [pc, #468]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0dc      	b.n	80034c8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800330e:	f000 fa09 	bl	8003724 <RCC_GetSysClockFreqFromPLLSource>
 8003312:	4603      	mov	r3, r0
 8003314:	4a70      	ldr	r2, [pc, #448]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d946      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800331a:	4b6e      	ldr	r3, [pc, #440]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d140      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003326:	4b6b      	ldr	r3, [pc, #428]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800332e:	4a69      	ldr	r2, [pc, #420]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003334:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e035      	b.n	80033a8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d107      	bne.n	8003354 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003344:	4b63      	ldr	r3, [pc, #396]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d115      	bne.n	800337c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0b9      	b.n	80034c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800335c:	4b5d      	ldr	r3, [pc, #372]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0ad      	b.n	80034c8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800336c:	4b59      	ldr	r3, [pc, #356]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0a5      	b.n	80034c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800337c:	f000 f8b4 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8003380:	4603      	mov	r3, r0
 8003382:	4a55      	ldr	r2, [pc, #340]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d90f      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003388:	4b52      	ldr	r3, [pc, #328]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003394:	4b4f      	ldr	r3, [pc, #316]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800339c:	4a4d      	ldr	r2, [pc, #308]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800339e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a8:	4b4a      	ldr	r3, [pc, #296]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 0203 	bic.w	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4947      	ldr	r1, [pc, #284]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ba:	f7fe fdd1 	bl	8001f60 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c2:	f7fe fdcd 	bl	8001f60 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e077      	b.n	80034c8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	4b3e      	ldr	r3, [pc, #248]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 020c 	and.w	r2, r3, #12
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d1eb      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b80      	cmp	r3, #128	@ 0x80
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033f0:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a37      	ldr	r2, [pc, #220]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80033f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033fa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b31      	ldr	r3, [pc, #196]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003414:	429a      	cmp	r2, r3
 8003416:	d208      	bcs.n	800342a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b2e      	ldr	r3, [pc, #184]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	492b      	ldr	r1, [pc, #172]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342a:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d210      	bcs.n	800345a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003438:	4b25      	ldr	r3, [pc, #148]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 020f 	bic.w	r2, r3, #15
 8003440:	4923      	ldr	r1, [pc, #140]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003448:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d001      	beq.n	800345a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e036      	b.n	80034c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003466:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4918      	ldr	r1, [pc, #96]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003484:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4910      	ldr	r1, [pc, #64]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003498:	f000 f826 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	490c      	ldr	r1, [pc, #48]	@ (80034dc <HAL_RCC_ClockConfig+0x268>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	4a0a      	ldr	r2, [pc, #40]	@ (80034e0 <HAL_RCC_ClockConfig+0x26c>)
 80034b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034b8:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <HAL_RCC_ClockConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fcff 	bl	8001ec0 <HAL_InitTick>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40021000 	.word	0x40021000
 80034d8:	04c4b400 	.word	0x04c4b400
 80034dc:	08009840 	.word	0x08009840
 80034e0:	20000000 	.word	0x20000000
 80034e4:	20000004 	.word	0x20000004

080034e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	@ 0x24
 80034ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f6:	4b3e      	ldr	r3, [pc, #248]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003500:	4b3b      	ldr	r3, [pc, #236]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x34>
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	d121      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d11e      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800351c:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003528:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800352a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e005      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003538:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003544:	4a2b      	ldr	r2, [pc, #172]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10d      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b04      	cmp	r3, #4
 800355e:	d102      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003560:	4b25      	ldr	r3, [pc, #148]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	e004      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d101      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800356c:	4b23      	ldr	r3, [pc, #140]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x114>)
 800356e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d134      	bne.n	80035e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003576:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d003      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0xa6>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d003      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0xac>
 800358c:	e005      	b.n	800359a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800358e:	4b1a      	ldr	r3, [pc, #104]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003590:	617b      	str	r3, [r7, #20]
      break;
 8003592:	e005      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003594:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003596:	617b      	str	r3, [r7, #20]
      break;
 8003598:	e002      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	617b      	str	r3, [r7, #20]
      break;
 800359e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035a0:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	3301      	adds	r3, #1
 80035ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035ae:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	fb03 f202 	mul.w	r2, r3, r2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	0e5b      	lsrs	r3, r3, #25
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	3301      	adds	r3, #1
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035e0:	69bb      	ldr	r3, [r7, #24]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	@ 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	08009858 	.word	0x08009858
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	007a1200 	.word	0x007a1200

08003600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_RCC_GetHCLKFreq+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800361c:	f7ff fff0 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4904      	ldr	r1, [pc, #16]	@ (8003640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	08009850 	.word	0x08009850

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003648:	f7ff ffda 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	0adb      	lsrs	r3, r3, #11
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4904      	ldr	r1, [pc, #16]	@ (800366c <HAL_RCC_GetPCLK2Freq+0x28>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	08009850 	.word	0x08009850

08003670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800367c:	4b27      	ldr	r3, [pc, #156]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003688:	f7ff f906 	bl	8002898 <HAL_PWREx_GetVoltageRange>
 800368c:	6178      	str	r0, [r7, #20]
 800368e:	e014      	b.n	80036ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b22      	ldr	r3, [pc, #136]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	4a21      	ldr	r2, [pc, #132]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800369a:	6593      	str	r3, [r2, #88]	@ 0x58
 800369c:	4b1f      	ldr	r3, [pc, #124]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036a8:	f7ff f8f6 	bl	8002898 <HAL_PWREx_GetVoltageRange>
 80036ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	4a1a      	ldr	r2, [pc, #104]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036c0:	d10b      	bne.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b80      	cmp	r3, #128	@ 0x80
 80036c6:	d913      	bls.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80036cc:	d902      	bls.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ce:	2302      	movs	r3, #2
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	e00d      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036d4:	2301      	movs	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e00a      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80036de:	d902      	bls.n	80036e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80036e0:	2302      	movs	r3, #2
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e004      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b70      	cmp	r3, #112	@ 0x70
 80036ea:	d101      	bne.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036ec:	2301      	movs	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 020f 	bic.w	r2, r3, #15
 80036f8:	4909      	ldr	r1, [pc, #36]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003700:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	40022000 	.word	0x40022000

08003724 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372a:	4b2d      	ldr	r3, [pc, #180]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d00b      	beq.n	8003752 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d825      	bhi.n	800378c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d008      	beq.n	8003758 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d11f      	bne.n	800378c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800374e:	613b      	str	r3, [r7, #16]
    break;
 8003750:	e01f      	b.n	8003792 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003752:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003754:	613b      	str	r3, [r7, #16]
    break;
 8003756:	e01c      	b.n	8003792 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003758:	4b21      	ldr	r3, [pc, #132]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003764:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e005      	b.n	8003780 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003774:	4b1a      	ldr	r3, [pc, #104]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003780:	4a1a      	ldr	r2, [pc, #104]	@ (80037ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	613b      	str	r3, [r7, #16]
    break;
 800378a:	e002      	b.n	8003792 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
    break;
 8003790:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003792:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	3301      	adds	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037a0:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	fb03 f202 	mul.w	r2, r3, r2
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b8:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0e5b      	lsrs	r3, r3, #25
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80037d2:	683b      	ldr	r3, [r7, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40021000 	.word	0x40021000
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	007a1200 	.word	0x007a1200
 80037ec:	08009858 	.word	0x08009858

080037f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037f8:	2300      	movs	r3, #0
 80037fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037fc:	2300      	movs	r3, #0
 80037fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003808:	2b00      	cmp	r3, #0
 800380a:	d040      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003810:	2b80      	cmp	r3, #128	@ 0x80
 8003812:	d02a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003814:	2b80      	cmp	r3, #128	@ 0x80
 8003816:	d825      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003818:	2b60      	cmp	r3, #96	@ 0x60
 800381a:	d026      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800381c:	2b60      	cmp	r3, #96	@ 0x60
 800381e:	d821      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d006      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d81d      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800382c:	2b20      	cmp	r3, #32
 800382e:	d010      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003830:	e018      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003832:	4b89      	ldr	r3, [pc, #548]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4a88      	ldr	r2, [pc, #544]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800383c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800383e:	e015      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb02 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003850:	e00c      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3320      	adds	r3, #32
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fbed 	bl	8004038 <RCCEx_PLLSAI2_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003862:	e003      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	74fb      	strb	r3, [r7, #19]
      break;
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800386a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003872:	4b79      	ldr	r3, [pc, #484]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003878:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003880:	4975      	ldr	r1, [pc, #468]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003888:	e001      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d047      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a2:	d030      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a8:	d82a      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ae:	d02a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038b4:	d824      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c0:	d81e      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ca:	d010      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038cc:	e018      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038ce:	4b62      	ldr	r3, [pc, #392]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4a61      	ldr	r2, [pc, #388]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038da:	e015      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fab4 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ec:	e00c      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3320      	adds	r3, #32
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fb9f 	bl	8004038 <RCCEx_PLLSAI2_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038fe:	e003      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	74fb      	strb	r3, [r7, #19]
      break;
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800390e:	4b52      	ldr	r3, [pc, #328]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003910:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391c:	494e      	ldr	r1, [pc, #312]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 809f 	beq.w	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800393c:	4b46      	ldr	r3, [pc, #280]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	4b41      	ldr	r3, [pc, #260]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	4a40      	ldr	r2, [pc, #256]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800395c:	6593      	str	r3, [r2, #88]	@ 0x58
 800395e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396a:	2301      	movs	r3, #1
 800396c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800396e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3a      	ldr	r2, [pc, #232]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800397a:	f7fe faf1 	bl	8001f60 <HAL_GetTick>
 800397e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003980:	e009      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003982:	f7fe faed 	bl	8001f60 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d902      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	74fb      	strb	r3, [r7, #19]
        break;
 8003994:	e005      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003996:	4b31      	ldr	r3, [pc, #196]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ef      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d15b      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01f      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d019      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c6:	4b24      	ldr	r3, [pc, #144]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039d2:	4b21      	ldr	r3, [pc, #132]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039f2:	4a19      	ldr	r2, [pc, #100]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d016      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fe faac 	bl	8001f60 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fe faa8 	bl	8001f60 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d902      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	74fb      	strb	r3, [r7, #19]
            break;
 8003a22:	e006      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ec      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a38:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a48:	4903      	ldr	r1, [pc, #12]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a50:	e008      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	74bb      	strb	r3, [r7, #18]
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a64:	7c7b      	ldrb	r3, [r7, #17]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d105      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6a:	4ba0      	ldr	r3, [pc, #640]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	4a9f      	ldr	r2, [pc, #636]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a82:	4b9a      	ldr	r3, [pc, #616]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	f023 0203 	bic.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	4996      	ldr	r1, [pc, #600]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa4:	4b91      	ldr	r3, [pc, #580]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aaa:	f023 020c 	bic.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	498e      	ldr	r1, [pc, #568]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac6:	4b89      	ldr	r3, [pc, #548]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003acc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad4:	4985      	ldr	r1, [pc, #532]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae8:	4b80      	ldr	r3, [pc, #512]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af6:	497d      	ldr	r1, [pc, #500]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b0a:	4b78      	ldr	r3, [pc, #480]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b18:	4974      	ldr	r1, [pc, #464]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3a:	496c      	ldr	r1, [pc, #432]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b4e:	4b67      	ldr	r3, [pc, #412]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b5c:	4963      	ldr	r1, [pc, #396]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b70:	4b5e      	ldr	r3, [pc, #376]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b7e:	495b      	ldr	r1, [pc, #364]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b92:	4b56      	ldr	r3, [pc, #344]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba0:	4952      	ldr	r1, [pc, #328]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc2:	494a      	ldr	r1, [pc, #296]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd6:	4b45      	ldr	r3, [pc, #276]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be4:	4941      	ldr	r1, [pc, #260]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c06:	4939      	ldr	r1, [pc, #228]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d028      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c1a:	4b34      	ldr	r3, [pc, #208]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c28:	4930      	ldr	r1, [pc, #192]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c38:	d106      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c44:	60d3      	str	r3, [r2, #12]
 8003c46:	e011      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2101      	movs	r1, #1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f8f9 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d04d      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c80:	d108      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003c82:	4b1a      	ldr	r3, [pc, #104]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c88:	4a18      	ldr	r2, [pc, #96]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c8e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003c92:	e012      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003c94:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c9a:	4a14      	ldr	r2, [pc, #80]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ca0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cb2:	490e      	ldr	r1, [pc, #56]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc4:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a08      	ldr	r2, [pc, #32]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e020      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cda:	d109      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a02      	ldr	r2, [pc, #8]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce6:	60d3      	str	r3, [r2, #12]
 8003ce8:	e014      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f8a5 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d028      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d20:	4b4a      	ldr	r3, [pc, #296]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d2e:	4947      	ldr	r1, [pc, #284]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d40:	4b42      	ldr	r3, [pc, #264]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a41      	ldr	r2, [pc, #260]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d4a:	60d3      	str	r3, [r2, #12]
 8003d4c:	e011      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f876 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01e      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d7e:	4b33      	ldr	r3, [pc, #204]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d8e:	492f      	ldr	r1, [pc, #188]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2102      	movs	r1, #2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f851 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dc8:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dce:	f023 0204 	bic.w	r2, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd8:	491c      	ldr	r1, [pc, #112]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003dec:	4b17      	ldr	r3, [pc, #92]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003df2:	f023 0218 	bic.w	r2, r3, #24
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	4913      	ldr	r1, [pc, #76]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e10:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e20:	490a      	ldr	r1, [pc, #40]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e32:	d105      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e40:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000

08003e50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e5e:	4b72      	ldr	r3, [pc, #456]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0203 	and.w	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d103      	bne.n	8003e82 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d142      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	e03f      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d018      	beq.n	8003ec2 <RCCEx_PLLSAI1_Config+0x72>
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d825      	bhi.n	8003ee0 <RCCEx_PLLSAI1_Config+0x90>
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d002      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0x4e>
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d009      	beq.n	8003eb0 <RCCEx_PLLSAI1_Config+0x60>
 8003e9c:	e020      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e9e:	4b62      	ldr	r3, [pc, #392]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11d      	bne.n	8003ee6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eae:	e01a      	b.n	8003ee6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eb0:	4b5d      	ldr	r3, [pc, #372]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d116      	bne.n	8003eea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec0:	e013      	b.n	8003eea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ec2:	4b59      	ldr	r3, [pc, #356]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ece:	4b56      	ldr	r3, [pc, #344]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ede:	e006      	b.n	8003eee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e004      	b.n	8003ef0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e002      	b.n	8003ef0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003eee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d108      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4949      	ldr	r1, [pc, #292]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 8086 	bne.w	800401c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f10:	4b45      	ldr	r3, [pc, #276]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a44      	ldr	r2, [pc, #272]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1c:	f7fe f820 	bl	8001f60 <HAL_GetTick>
 8003f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f22:	e009      	b.n	8003f38 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f24:	f7fe f81c 	bl	8001f60 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d902      	bls.n	8003f38 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	73fb      	strb	r3, [r7, #15]
        break;
 8003f36:	e005      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f38:	4b3b      	ldr	r3, [pc, #236]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ef      	bne.n	8003f24 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d168      	bne.n	800401c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d113      	bne.n	8003f78 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f50:	4b35      	ldr	r3, [pc, #212]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	4b35      	ldr	r3, [pc, #212]	@ (800402c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6892      	ldr	r2, [r2, #8]
 8003f5c:	0211      	lsls	r1, r2, #8
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68d2      	ldr	r2, [r2, #12]
 8003f62:	06d2      	lsls	r2, r2, #27
 8003f64:	4311      	orrs	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6852      	ldr	r2, [r2, #4]
 8003f6a:	3a01      	subs	r2, #1
 8003f6c:	0112      	lsls	r2, r2, #4
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	492d      	ldr	r1, [pc, #180]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	610b      	str	r3, [r1, #16]
 8003f76:	e02d      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d115      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	4b2b      	ldr	r3, [pc, #172]	@ (8004030 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6892      	ldr	r2, [r2, #8]
 8003f8a:	0211      	lsls	r1, r2, #8
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6912      	ldr	r2, [r2, #16]
 8003f90:	0852      	lsrs	r2, r2, #1
 8003f92:	3a01      	subs	r2, #1
 8003f94:	0552      	lsls	r2, r2, #21
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6852      	ldr	r2, [r2, #4]
 8003f9c:	3a01      	subs	r2, #1
 8003f9e:	0112      	lsls	r2, r2, #4
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	4921      	ldr	r1, [pc, #132]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	610b      	str	r3, [r1, #16]
 8003fa8:	e014      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003faa:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	4b21      	ldr	r3, [pc, #132]	@ (8004034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6892      	ldr	r2, [r2, #8]
 8003fb6:	0211      	lsls	r1, r2, #8
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6952      	ldr	r2, [r2, #20]
 8003fbc:	0852      	lsrs	r2, r2, #1
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0652      	lsls	r2, r2, #25
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6852      	ldr	r2, [r2, #4]
 8003fc8:	3a01      	subs	r2, #1
 8003fca:	0112      	lsls	r2, r2, #4
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	4916      	ldr	r1, [pc, #88]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fd4:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fd ffbe 	bl	8001f60 <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fe6:	e009      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fe8:	f7fd ffba 	bl	8001f60 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d902      	bls.n	8003ffc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	73fb      	strb	r3, [r7, #15]
          break;
 8003ffa:	e005      	b.n	8004008 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ef      	beq.n	8003fe8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800400e:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	4904      	ldr	r1, [pc, #16]	@ (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004018:	4313      	orrs	r3, r2
 800401a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	07ff800f 	.word	0x07ff800f
 8004030:	ff9f800f 	.word	0xff9f800f
 8004034:	f9ff800f 	.word	0xf9ff800f

08004038 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004046:	4b72      	ldr	r3, [pc, #456]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00e      	beq.n	8004070 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004052:	4b6f      	ldr	r3, [pc, #444]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0203 	and.w	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d103      	bne.n	800406a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
       ||
 8004066:	2b00      	cmp	r3, #0
 8004068:	d142      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
 800406e:	e03f      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d018      	beq.n	80040aa <RCCEx_PLLSAI2_Config+0x72>
 8004078:	2b03      	cmp	r3, #3
 800407a:	d825      	bhi.n	80040c8 <RCCEx_PLLSAI2_Config+0x90>
 800407c:	2b01      	cmp	r3, #1
 800407e:	d002      	beq.n	8004086 <RCCEx_PLLSAI2_Config+0x4e>
 8004080:	2b02      	cmp	r3, #2
 8004082:	d009      	beq.n	8004098 <RCCEx_PLLSAI2_Config+0x60>
 8004084:	e020      	b.n	80040c8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004086:	4b62      	ldr	r3, [pc, #392]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11d      	bne.n	80040ce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004096:	e01a      	b.n	80040ce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004098:	4b5d      	ldr	r3, [pc, #372]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a8:	e013      	b.n	80040d2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040aa:	4b59      	ldr	r3, [pc, #356]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040b6:	4b56      	ldr	r3, [pc, #344]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040c6:	e006      	b.n	80040d6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      break;
 80040cc:	e004      	b.n	80040d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040ce:	bf00      	nop
 80040d0:	e002      	b.n	80040d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040d2:	bf00      	nop
 80040d4:	e000      	b.n	80040d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80040de:	4b4c      	ldr	r3, [pc, #304]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4949      	ldr	r1, [pc, #292]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 8086 	bne.w	8004204 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040f8:	4b45      	ldr	r3, [pc, #276]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a44      	ldr	r2, [pc, #272]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7fd ff2c 	bl	8001f60 <HAL_GetTick>
 8004108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800410a:	e009      	b.n	8004120 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800410c:	f7fd ff28 	bl	8001f60 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d902      	bls.n	8004120 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	73fb      	strb	r3, [r7, #15]
        break;
 800411e:	e005      	b.n	800412c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004120:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ef      	bne.n	800410c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d168      	bne.n	8004204 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d113      	bne.n	8004160 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004138:	4b35      	ldr	r3, [pc, #212]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	4b35      	ldr	r3, [pc, #212]	@ (8004214 <RCCEx_PLLSAI2_Config+0x1dc>)
 800413e:	4013      	ands	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6892      	ldr	r2, [r2, #8]
 8004144:	0211      	lsls	r1, r2, #8
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68d2      	ldr	r2, [r2, #12]
 800414a:	06d2      	lsls	r2, r2, #27
 800414c:	4311      	orrs	r1, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6852      	ldr	r2, [r2, #4]
 8004152:	3a01      	subs	r2, #1
 8004154:	0112      	lsls	r2, r2, #4
 8004156:	430a      	orrs	r2, r1
 8004158:	492d      	ldr	r1, [pc, #180]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	614b      	str	r3, [r1, #20]
 800415e:	e02d      	b.n	80041bc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d115      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004166:	4b2a      	ldr	r3, [pc, #168]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	4b2b      	ldr	r3, [pc, #172]	@ (8004218 <RCCEx_PLLSAI2_Config+0x1e0>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6892      	ldr	r2, [r2, #8]
 8004172:	0211      	lsls	r1, r2, #8
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6912      	ldr	r2, [r2, #16]
 8004178:	0852      	lsrs	r2, r2, #1
 800417a:	3a01      	subs	r2, #1
 800417c:	0552      	lsls	r2, r2, #21
 800417e:	4311      	orrs	r1, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6852      	ldr	r2, [r2, #4]
 8004184:	3a01      	subs	r2, #1
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	430a      	orrs	r2, r1
 800418a:	4921      	ldr	r1, [pc, #132]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	614b      	str	r3, [r1, #20]
 8004190:	e014      	b.n	80041bc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004192:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	4b21      	ldr	r3, [pc, #132]	@ (800421c <RCCEx_PLLSAI2_Config+0x1e4>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6892      	ldr	r2, [r2, #8]
 800419e:	0211      	lsls	r1, r2, #8
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6952      	ldr	r2, [r2, #20]
 80041a4:	0852      	lsrs	r2, r2, #1
 80041a6:	3a01      	subs	r2, #1
 80041a8:	0652      	lsls	r2, r2, #25
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6852      	ldr	r2, [r2, #4]
 80041b0:	3a01      	subs	r2, #1
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4916      	ldr	r1, [pc, #88]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041bc:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd feca 	bl	8001f60 <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041ce:	e009      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d0:	f7fd fec6 	bl	8001f60 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	73fb      	strb	r3, [r7, #15]
          break;
 80041e2:	e005      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0ef      	beq.n	80041d0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	4904      	ldr	r1, [pc, #16]	@ (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004200:	4313      	orrs	r3, r2
 8004202:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
 8004214:	07ff800f 	.word	0x07ff800f
 8004218:	ff9f800f 	.word	0xff9f800f
 800421c:	f9ff800f 	.word	0xf9ff800f

08004220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e049      	b.n	80042c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd fc7e 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f000 fa9a 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d001      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e04f      	b.n	8004388 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a23      	ldr	r2, [pc, #140]	@ (8004394 <HAL_TIM_Base_Start_IT+0xc4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01d      	beq.n	8004346 <HAL_TIM_Base_Start_IT+0x76>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004312:	d018      	beq.n	8004346 <HAL_TIM_Base_Start_IT+0x76>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1f      	ldr	r2, [pc, #124]	@ (8004398 <HAL_TIM_Base_Start_IT+0xc8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_TIM_Base_Start_IT+0x76>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1e      	ldr	r2, [pc, #120]	@ (800439c <HAL_TIM_Base_Start_IT+0xcc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIM_Base_Start_IT+0x76>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1c      	ldr	r2, [pc, #112]	@ (80043a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_TIM_Base_Start_IT+0x76>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1b      	ldr	r2, [pc, #108]	@ (80043a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIM_Base_Start_IT+0x76>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d115      	bne.n	8004372 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <HAL_TIM_Base_Start_IT+0xdc>)
 800434e:	4013      	ands	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b06      	cmp	r3, #6
 8004356:	d015      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0xb4>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800435e:	d011      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	e008      	b.n	8004384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e000      	b.n	8004386 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40013400 	.word	0x40013400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	00010007 	.word	0x00010007

080043b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0202 	mvn.w	r2, #2
 80043e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f9ad 	bl	800475a <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f99f 	bl	8004746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f9b0 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0204 	mvn.w	r2, #4
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f987 	bl	800475a <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f979 	bl	8004746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f98a 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0208 	mvn.w	r2, #8
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2204      	movs	r2, #4
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f961 	bl	800475a <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f953 	bl	8004746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f964 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2208      	movs	r2, #8
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f93b 	bl	800475a <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f92d 	bl	8004746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f93e 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0201 	mvn.w	r2, #1
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fd02 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00c      	beq.n	8004540 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 faf2 	bl	8004b24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800455c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 faea 	bl	8004b38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00c      	beq.n	8004588 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8fd 	bl	8004782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0220 	mvn.w	r2, #32
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fab2 	bl	8004b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_TIM_ConfigClockSource+0x1c>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e0b6      	b.n	800473e <HAL_TIM_ConfigClockSource+0x18a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800460c:	d03e      	beq.n	800468c <HAL_TIM_ConfigClockSource+0xd8>
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004612:	f200 8087 	bhi.w	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461a:	f000 8086 	beq.w	800472a <HAL_TIM_ConfigClockSource+0x176>
 800461e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004622:	d87f      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004624:	2b70      	cmp	r3, #112	@ 0x70
 8004626:	d01a      	beq.n	800465e <HAL_TIM_ConfigClockSource+0xaa>
 8004628:	2b70      	cmp	r3, #112	@ 0x70
 800462a:	d87b      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 800462c:	2b60      	cmp	r3, #96	@ 0x60
 800462e:	d050      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x11e>
 8004630:	2b60      	cmp	r3, #96	@ 0x60
 8004632:	d877      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004634:	2b50      	cmp	r3, #80	@ 0x50
 8004636:	d03c      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0xfe>
 8004638:	2b50      	cmp	r3, #80	@ 0x50
 800463a:	d873      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 800463c:	2b40      	cmp	r3, #64	@ 0x40
 800463e:	d058      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x13e>
 8004640:	2b40      	cmp	r3, #64	@ 0x40
 8004642:	d86f      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004644:	2b30      	cmp	r3, #48	@ 0x30
 8004646:	d064      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x15e>
 8004648:	2b30      	cmp	r3, #48	@ 0x30
 800464a:	d86b      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 800464c:	2b20      	cmp	r3, #32
 800464e:	d060      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x15e>
 8004650:	2b20      	cmp	r3, #32
 8004652:	d867      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d05c      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x15e>
 8004658:	2b10      	cmp	r3, #16
 800465a:	d05a      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x15e>
 800465c:	e062      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800466e:	f000 f9a7 	bl	80049c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	609a      	str	r2, [r3, #8]
      break;
 800468a:	e04f      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800469c:	f000 f990 	bl	80049c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046ae:	609a      	str	r2, [r3, #8]
      break;
 80046b0:	e03c      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046be:	461a      	mov	r2, r3
 80046c0:	f000 f904 	bl	80048cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2150      	movs	r1, #80	@ 0x50
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f95d 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 80046d0:	e02c      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046de:	461a      	mov	r2, r3
 80046e0:	f000 f923 	bl	800492a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2160      	movs	r1, #96	@ 0x60
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f94d 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 80046f0:	e01c      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	461a      	mov	r2, r3
 8004700:	f000 f8e4 	bl	80048cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2140      	movs	r1, #64	@ 0x40
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f93d 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8004710:	e00c      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f000 f934 	bl	800498a <TIM_ITRx_SetConfig>
      break;
 8004722:	e003      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
      break;
 8004728:	e000      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800472a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a40      	ldr	r2, [pc, #256]	@ (80048ac <TIM_Base_SetConfig+0x114>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b6:	d00f      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a3d      	ldr	r2, [pc, #244]	@ (80048b0 <TIM_Base_SetConfig+0x118>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00b      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a3c      	ldr	r2, [pc, #240]	@ (80048b4 <TIM_Base_SetConfig+0x11c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d007      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a3b      	ldr	r2, [pc, #236]	@ (80048b8 <TIM_Base_SetConfig+0x120>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d003      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a3a      	ldr	r2, [pc, #232]	@ (80048bc <TIM_Base_SetConfig+0x124>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d108      	bne.n	80047ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2f      	ldr	r2, [pc, #188]	@ (80048ac <TIM_Base_SetConfig+0x114>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01f      	beq.n	8004832 <TIM_Base_SetConfig+0x9a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f8:	d01b      	beq.n	8004832 <TIM_Base_SetConfig+0x9a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2c      	ldr	r2, [pc, #176]	@ (80048b0 <TIM_Base_SetConfig+0x118>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d017      	beq.n	8004832 <TIM_Base_SetConfig+0x9a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a2b      	ldr	r2, [pc, #172]	@ (80048b4 <TIM_Base_SetConfig+0x11c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <TIM_Base_SetConfig+0x9a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a2a      	ldr	r2, [pc, #168]	@ (80048b8 <TIM_Base_SetConfig+0x120>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00f      	beq.n	8004832 <TIM_Base_SetConfig+0x9a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a29      	ldr	r2, [pc, #164]	@ (80048bc <TIM_Base_SetConfig+0x124>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00b      	beq.n	8004832 <TIM_Base_SetConfig+0x9a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a28      	ldr	r2, [pc, #160]	@ (80048c0 <TIM_Base_SetConfig+0x128>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <TIM_Base_SetConfig+0x9a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a27      	ldr	r2, [pc, #156]	@ (80048c4 <TIM_Base_SetConfig+0x12c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_Base_SetConfig+0x9a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a26      	ldr	r2, [pc, #152]	@ (80048c8 <TIM_Base_SetConfig+0x130>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a10      	ldr	r2, [pc, #64]	@ (80048ac <TIM_Base_SetConfig+0x114>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00f      	beq.n	8004890 <TIM_Base_SetConfig+0xf8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a12      	ldr	r2, [pc, #72]	@ (80048bc <TIM_Base_SetConfig+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00b      	beq.n	8004890 <TIM_Base_SetConfig+0xf8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <TIM_Base_SetConfig+0x128>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_Base_SetConfig+0xf8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a10      	ldr	r2, [pc, #64]	@ (80048c4 <TIM_Base_SetConfig+0x12c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0xf8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a0f      	ldr	r2, [pc, #60]	@ (80048c8 <TIM_Base_SetConfig+0x130>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d103      	bne.n	8004898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	615a      	str	r2, [r3, #20]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40013400 	.word	0x40013400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400
 80048c8:	40014800 	.word	0x40014800

080048cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 030a 	bic.w	r3, r3, #10
 8004908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b087      	sub	sp, #28
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f023 0210 	bic.w	r2, r3, #16
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	031b      	lsls	r3, r3, #12
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f043 0307 	orr.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e068      	b.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2d      	ldr	r2, [pc, #180]	@ (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a8a:	d018      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1b      	ldr	r2, [pc, #108]	@ (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a14      	ldr	r2, [pc, #80]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10c      	bne.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40014000 	.word	0x40014000

08004b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e042      	b.n	8004be4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc ff3b 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2224      	movs	r2, #36	@ 0x24
 8004b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0201 	bic.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 ff42 	bl	8005a20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fc43 	bl	8005428 <UART_SetConfig>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e01b      	b.n	8004be4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 ffc1 	bl	8005b64 <UART_CheckIdleState>
 8004be2:	4603      	mov	r3, r0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	@ 0x28
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d17b      	bne.n	8004cfe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_UART_Transmit+0x26>
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e074      	b.n	8004d00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2221      	movs	r2, #33	@ 0x21
 8004c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c26:	f7fd f99b 	bl	8001f60 <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c44:	d108      	bne.n	8004c58 <HAL_UART_Transmit+0x6c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	e003      	b.n	8004c60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c60:	e030      	b.n	8004cc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2180      	movs	r1, #128	@ 0x80
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f001 f823 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e03d      	b.n	8004d00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10b      	bne.n	8004ca2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	881a      	ldrh	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c96:	b292      	uxth	r2, r2
 8004c98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	3302      	adds	r3, #2
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	e007      	b.n	8004cb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1c8      	bne.n	8004c62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2140      	movs	r1, #64	@ 0x40
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 ffec 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e006      	b.n	8004d00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	@ 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d137      	bne.n	8004d90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_UART_Receive_IT+0x24>
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e030      	b.n	8004d92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a18      	ldr	r2, [pc, #96]	@ (8004d9c <HAL_UART_Receive_IT+0x94>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d01f      	beq.n	8004d80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d018      	beq.n	8004d80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	623b      	str	r3, [r7, #32]
 8004d6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	69f9      	ldr	r1, [r7, #28]
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e6      	bne.n	8004d4e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	461a      	mov	r2, r3
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fffe 	bl	8005d88 <UART_Start_Receive_IT>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	e000      	b.n	8004d92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3728      	adds	r7, #40	@ 0x28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40008000 	.word	0x40008000

08004da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b0ba      	sub	sp, #232	@ 0xe8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004dca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004dce:	4013      	ands	r3, r2
 8004dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11b      	bne.n	8004e14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d015      	beq.n	8004e14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d009      	beq.n	8004e14 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 82e3 	beq.w	80053d0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
      }
      return;
 8004e12:	e2dd      	b.n	80053d0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8004e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8123 	beq.w	8005064 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e22:	4b8d      	ldr	r3, [pc, #564]	@ (8005058 <HAL_UART_IRQHandler+0x2b8>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800505c <HAL_UART_IRQHandler+0x2bc>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8116 	beq.w	8005064 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d011      	beq.n	8004e68 <HAL_UART_IRQHandler+0xc8>
 8004e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00b      	beq.n	8004e68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2201      	movs	r2, #1
 8004e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d011      	beq.n	8004e98 <HAL_UART_IRQHandler+0xf8>
 8004e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00b      	beq.n	8004e98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2202      	movs	r2, #2
 8004e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8e:	f043 0204 	orr.w	r2, r3, #4
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d011      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x128>
 8004ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	f043 0202 	orr.w	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d017      	beq.n	8004f04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ee0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8005058 <HAL_UART_IRQHandler+0x2b8>)
 8004ee6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	f043 0208 	orr.w	r2, r3, #8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d012      	beq.n	8004f36 <HAL_UART_IRQHandler+0x196>
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00c      	beq.n	8004f36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8249 	beq.w	80053d4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d013      	beq.n	8004f76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8a:	2b40      	cmp	r3, #64	@ 0x40
 8004f8c:	d005      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d054      	beq.n	8005044 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 f816 	bl	8005fcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	d146      	bne.n	800503c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1d9      	bne.n	8004fae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005000:	2b00      	cmp	r3, #0
 8005002:	d017      	beq.n	8005034 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500a:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <HAL_UART_IRQHandler+0x2c0>)
 800500c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005014:	4618      	mov	r0, r3
 8005016:	f7fd f91c 	bl	8002252 <HAL_DMA_Abort_IT>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d019      	beq.n	8005054 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800502e:	4610      	mov	r0, r2
 8005030:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005032:	e00f      	b.n	8005054 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f9e1 	bl	80053fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503a:	e00b      	b.n	8005054 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f9dd 	bl	80053fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005042:	e007      	b.n	8005054 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f9d9 	bl	80053fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005052:	e1bf      	b.n	80053d4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	bf00      	nop
    return;
 8005056:	e1bd      	b.n	80053d4 <HAL_UART_IRQHandler+0x634>
 8005058:	10000001 	.word	0x10000001
 800505c:	04000120 	.word	0x04000120
 8005060:	08006099 	.word	0x08006099

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005068:	2b01      	cmp	r3, #1
 800506a:	f040 8153 	bne.w	8005314 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 814c 	beq.w	8005314 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8145 	beq.w	8005314 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2210      	movs	r2, #16
 8005090:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	f040 80bb 	bne.w	8005218 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 818f 	beq.w	80053d8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f080 8187 	bcs.w	80053d8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f040 8087 	bne.w	80051f6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005112:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005116:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800511e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800512a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1da      	bne.n	80050e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3308      	adds	r3, #8
 8005152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005156:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800515a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800515e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005168:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e1      	bne.n	8005132 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800517e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005192:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005194:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005198:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e3      	bne.n	800516e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c4:	f023 0310 	bic.w	r3, r3, #16
 80051c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e4      	bne.n	80051b4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fc ffd2 	bl	800219a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005208:	b29b      	uxth	r3, r3
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	b29b      	uxth	r3, r3
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f8fd 	bl	8005410 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005216:	e0df      	b.n	80053d8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005224:	b29b      	uxth	r3, r3
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80d1 	beq.w	80053dc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800523a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80cc 	beq.w	80053dc <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005258:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	461a      	mov	r2, r3
 8005262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005266:	647b      	str	r3, [r7, #68]	@ 0x44
 8005268:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800526c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e4      	bne.n	8005244 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3308      	adds	r3, #8
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	623b      	str	r3, [r7, #32]
   return(result);
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80052a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e1      	bne.n	800527a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0310 	bic.w	r3, r3, #16
 80052de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052ec:	61fb      	str	r3, [r7, #28]
 80052ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	69b9      	ldr	r1, [r7, #24]
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	617b      	str	r3, [r7, #20]
   return(result);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e4      	bne.n	80052ca <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f87f 	bl	8005410 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005312:	e063      	b.n	80053dc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00e      	beq.n	800533e <HAL_UART_IRQHandler+0x59e>
 8005320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005324:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005334:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 fc14 	bl	8006b64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800533c:	e051      	b.n	80053e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d014      	beq.n	8005374 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800534a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800534e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	d105      	bne.n	8005362 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800535a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03a      	beq.n	80053e0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	4798      	blx	r3
    }
    return;
 8005372:	e035      	b.n	80053e0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <HAL_UART_IRQHandler+0x5f4>
 8005380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fe99 	bl	80060c4 <UART_EndTransmit_IT>
    return;
 8005392:	e026      	b.n	80053e2 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005398:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_UART_IRQHandler+0x614>
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 fbed 	bl	8006b8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053b2:	e016      	b.n	80053e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <HAL_UART_IRQHandler+0x642>
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	da0c      	bge.n	80053e2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f001 fbd5 	bl	8006b78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053ce:	e008      	b.n	80053e2 <HAL_UART_IRQHandler+0x642>
      return;
 80053d0:	bf00      	nop
 80053d2:	e006      	b.n	80053e2 <HAL_UART_IRQHandler+0x642>
    return;
 80053d4:	bf00      	nop
 80053d6:	e004      	b.n	80053e2 <HAL_UART_IRQHandler+0x642>
      return;
 80053d8:	bf00      	nop
 80053da:	e002      	b.n	80053e2 <HAL_UART_IRQHandler+0x642>
      return;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_UART_IRQHandler+0x642>
    return;
 80053e0:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80053e2:	37e8      	adds	r7, #232	@ 0xe8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800542c:	b08c      	sub	sp, #48	@ 0x30
 800542e:	af00      	add	r7, sp, #0
 8005430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	431a      	orrs	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	431a      	orrs	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4313      	orrs	r3, r2
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4baa      	ldr	r3, [pc, #680]	@ (8005700 <UART_SetConfig+0x2d8>)
 8005458:	4013      	ands	r3, r2
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005460:	430b      	orrs	r3, r1
 8005462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a9f      	ldr	r2, [pc, #636]	@ (8005704 <UART_SetConfig+0x2dc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005490:	4313      	orrs	r3, r2
 8005492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800549e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b2:	f023 010f 	bic.w	r1, r3, #15
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a90      	ldr	r2, [pc, #576]	@ (8005708 <UART_SetConfig+0x2e0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d125      	bne.n	8005518 <UART_SetConfig+0xf0>
 80054cc:	4b8f      	ldr	r3, [pc, #572]	@ (800570c <UART_SetConfig+0x2e4>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d81a      	bhi.n	8005510 <UART_SetConfig+0xe8>
 80054da:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <UART_SetConfig+0xb8>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	080054f1 	.word	0x080054f1
 80054e4:	08005501 	.word	0x08005501
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	08005509 	.word	0x08005509
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f6:	e116      	b.n	8005726 <UART_SetConfig+0x2fe>
 80054f8:	2302      	movs	r3, #2
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fe:	e112      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005506:	e10e      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800550e:	e10a      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005516:	e106      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a7c      	ldr	r2, [pc, #496]	@ (8005710 <UART_SetConfig+0x2e8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d138      	bne.n	8005594 <UART_SetConfig+0x16c>
 8005522:	4b7a      	ldr	r3, [pc, #488]	@ (800570c <UART_SetConfig+0x2e4>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005528:	f003 030c 	and.w	r3, r3, #12
 800552c:	2b0c      	cmp	r3, #12
 800552e:	d82d      	bhi.n	800558c <UART_SetConfig+0x164>
 8005530:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <UART_SetConfig+0x110>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800556d 	.word	0x0800556d
 800553c:	0800558d 	.word	0x0800558d
 8005540:	0800558d 	.word	0x0800558d
 8005544:	0800558d 	.word	0x0800558d
 8005548:	0800557d 	.word	0x0800557d
 800554c:	0800558d 	.word	0x0800558d
 8005550:	0800558d 	.word	0x0800558d
 8005554:	0800558d 	.word	0x0800558d
 8005558:	08005575 	.word	0x08005575
 800555c:	0800558d 	.word	0x0800558d
 8005560:	0800558d 	.word	0x0800558d
 8005564:	0800558d 	.word	0x0800558d
 8005568:	08005585 	.word	0x08005585
 800556c:	2300      	movs	r3, #0
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005572:	e0d8      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005574:	2302      	movs	r3, #2
 8005576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557a:	e0d4      	b.n	8005726 <UART_SetConfig+0x2fe>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005582:	e0d0      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558a:	e0cc      	b.n	8005726 <UART_SetConfig+0x2fe>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e0c8      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a5e      	ldr	r2, [pc, #376]	@ (8005714 <UART_SetConfig+0x2ec>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d125      	bne.n	80055ea <UART_SetConfig+0x1c2>
 800559e:	4b5b      	ldr	r3, [pc, #364]	@ (800570c <UART_SetConfig+0x2e4>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055a8:	2b30      	cmp	r3, #48	@ 0x30
 80055aa:	d016      	beq.n	80055da <UART_SetConfig+0x1b2>
 80055ac:	2b30      	cmp	r3, #48	@ 0x30
 80055ae:	d818      	bhi.n	80055e2 <UART_SetConfig+0x1ba>
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d00a      	beq.n	80055ca <UART_SetConfig+0x1a2>
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d814      	bhi.n	80055e2 <UART_SetConfig+0x1ba>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <UART_SetConfig+0x19a>
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d008      	beq.n	80055d2 <UART_SetConfig+0x1aa>
 80055c0:	e00f      	b.n	80055e2 <UART_SetConfig+0x1ba>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c8:	e0ad      	b.n	8005726 <UART_SetConfig+0x2fe>
 80055ca:	2302      	movs	r3, #2
 80055cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d0:	e0a9      	b.n	8005726 <UART_SetConfig+0x2fe>
 80055d2:	2304      	movs	r3, #4
 80055d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d8:	e0a5      	b.n	8005726 <UART_SetConfig+0x2fe>
 80055da:	2308      	movs	r3, #8
 80055dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e0:	e0a1      	b.n	8005726 <UART_SetConfig+0x2fe>
 80055e2:	2310      	movs	r3, #16
 80055e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e8:	e09d      	b.n	8005726 <UART_SetConfig+0x2fe>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005718 <UART_SetConfig+0x2f0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d125      	bne.n	8005640 <UART_SetConfig+0x218>
 80055f4:	4b45      	ldr	r3, [pc, #276]	@ (800570c <UART_SetConfig+0x2e4>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005600:	d016      	beq.n	8005630 <UART_SetConfig+0x208>
 8005602:	2bc0      	cmp	r3, #192	@ 0xc0
 8005604:	d818      	bhi.n	8005638 <UART_SetConfig+0x210>
 8005606:	2b80      	cmp	r3, #128	@ 0x80
 8005608:	d00a      	beq.n	8005620 <UART_SetConfig+0x1f8>
 800560a:	2b80      	cmp	r3, #128	@ 0x80
 800560c:	d814      	bhi.n	8005638 <UART_SetConfig+0x210>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <UART_SetConfig+0x1f0>
 8005612:	2b40      	cmp	r3, #64	@ 0x40
 8005614:	d008      	beq.n	8005628 <UART_SetConfig+0x200>
 8005616:	e00f      	b.n	8005638 <UART_SetConfig+0x210>
 8005618:	2300      	movs	r3, #0
 800561a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800561e:	e082      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005620:	2302      	movs	r3, #2
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005626:	e07e      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005628:	2304      	movs	r3, #4
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562e:	e07a      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005630:	2308      	movs	r3, #8
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005636:	e076      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005638:	2310      	movs	r3, #16
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563e:	e072      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a35      	ldr	r2, [pc, #212]	@ (800571c <UART_SetConfig+0x2f4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d12a      	bne.n	80056a0 <UART_SetConfig+0x278>
 800564a:	4b30      	ldr	r3, [pc, #192]	@ (800570c <UART_SetConfig+0x2e4>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005650:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005658:	d01a      	beq.n	8005690 <UART_SetConfig+0x268>
 800565a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800565e:	d81b      	bhi.n	8005698 <UART_SetConfig+0x270>
 8005660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005664:	d00c      	beq.n	8005680 <UART_SetConfig+0x258>
 8005666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800566a:	d815      	bhi.n	8005698 <UART_SetConfig+0x270>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <UART_SetConfig+0x250>
 8005670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005674:	d008      	beq.n	8005688 <UART_SetConfig+0x260>
 8005676:	e00f      	b.n	8005698 <UART_SetConfig+0x270>
 8005678:	2300      	movs	r3, #0
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567e:	e052      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005680:	2302      	movs	r3, #2
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005686:	e04e      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005688:	2304      	movs	r3, #4
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568e:	e04a      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005690:	2308      	movs	r3, #8
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005696:	e046      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005698:	2310      	movs	r3, #16
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569e:	e042      	b.n	8005726 <UART_SetConfig+0x2fe>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <UART_SetConfig+0x2dc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d13a      	bne.n	8005720 <UART_SetConfig+0x2f8>
 80056aa:	4b18      	ldr	r3, [pc, #96]	@ (800570c <UART_SetConfig+0x2e4>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056b8:	d01a      	beq.n	80056f0 <UART_SetConfig+0x2c8>
 80056ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056be:	d81b      	bhi.n	80056f8 <UART_SetConfig+0x2d0>
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056c4:	d00c      	beq.n	80056e0 <UART_SetConfig+0x2b8>
 80056c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ca:	d815      	bhi.n	80056f8 <UART_SetConfig+0x2d0>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <UART_SetConfig+0x2b0>
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d4:	d008      	beq.n	80056e8 <UART_SetConfig+0x2c0>
 80056d6:	e00f      	b.n	80056f8 <UART_SetConfig+0x2d0>
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056de:	e022      	b.n	8005726 <UART_SetConfig+0x2fe>
 80056e0:	2302      	movs	r3, #2
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e01e      	b.n	8005726 <UART_SetConfig+0x2fe>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e01a      	b.n	8005726 <UART_SetConfig+0x2fe>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f6:	e016      	b.n	8005726 <UART_SetConfig+0x2fe>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fe:	e012      	b.n	8005726 <UART_SetConfig+0x2fe>
 8005700:	cfff69f3 	.word	0xcfff69f3
 8005704:	40008000 	.word	0x40008000
 8005708:	40013800 	.word	0x40013800
 800570c:	40021000 	.word	0x40021000
 8005710:	40004400 	.word	0x40004400
 8005714:	40004800 	.word	0x40004800
 8005718:	40004c00 	.word	0x40004c00
 800571c:	40005000 	.word	0x40005000
 8005720:	2310      	movs	r3, #16
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4aae      	ldr	r2, [pc, #696]	@ (80059e4 <UART_SetConfig+0x5bc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	f040 8097 	bne.w	8005860 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005732:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005736:	2b08      	cmp	r3, #8
 8005738:	d823      	bhi.n	8005782 <UART_SetConfig+0x35a>
 800573a:	a201      	add	r2, pc, #4	@ (adr r2, 8005740 <UART_SetConfig+0x318>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005765 	.word	0x08005765
 8005744:	08005783 	.word	0x08005783
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005783 	.word	0x08005783
 8005750:	08005773 	.word	0x08005773
 8005754:	08005783 	.word	0x08005783
 8005758:	08005783 	.word	0x08005783
 800575c:	08005783 	.word	0x08005783
 8005760:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005764:	f7fd ff58 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 8005768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800576a:	e010      	b.n	800578e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800576c:	4b9e      	ldr	r3, [pc, #632]	@ (80059e8 <UART_SetConfig+0x5c0>)
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005770:	e00d      	b.n	800578e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005772:	f7fd feb9 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8005776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005778:	e009      	b.n	800578e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005780:	e005      	b.n	800578e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800578c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8130 	beq.w	80059f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	4a94      	ldr	r2, [pc, #592]	@ (80059ec <UART_SetConfig+0x5c4>)
 800579c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d305      	bcc.n	80057c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d903      	bls.n	80057ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057cc:	e113      	b.n	80059f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	2200      	movs	r2, #0
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	60fa      	str	r2, [r7, #12]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	4a84      	ldr	r2, [pc, #528]	@ (80059ec <UART_SetConfig+0x5c4>)
 80057dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2200      	movs	r2, #0
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057f0:	f7fb fa02 	bl	8000bf8 <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4610      	mov	r0, r2
 80057fa:	4619      	mov	r1, r3
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	020b      	lsls	r3, r1, #8
 8005806:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800580a:	0202      	lsls	r2, r0, #8
 800580c:	6979      	ldr	r1, [r7, #20]
 800580e:	6849      	ldr	r1, [r1, #4]
 8005810:	0849      	lsrs	r1, r1, #1
 8005812:	2000      	movs	r0, #0
 8005814:	460c      	mov	r4, r1
 8005816:	4605      	mov	r5, r0
 8005818:	eb12 0804 	adds.w	r8, r2, r4
 800581c:	eb43 0905 	adc.w	r9, r3, r5
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	469a      	mov	sl, r3
 8005828:	4693      	mov	fp, r2
 800582a:	4652      	mov	r2, sl
 800582c:	465b      	mov	r3, fp
 800582e:	4640      	mov	r0, r8
 8005830:	4649      	mov	r1, r9
 8005832:	f7fb f9e1 	bl	8000bf8 <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4613      	mov	r3, r2
 800583c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005844:	d308      	bcc.n	8005858 <UART_SetConfig+0x430>
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800584c:	d204      	bcs.n	8005858 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a3a      	ldr	r2, [r7, #32]
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	e0ce      	b.n	80059f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800585e:	e0ca      	b.n	80059f6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005868:	d166      	bne.n	8005938 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800586a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800586e:	2b08      	cmp	r3, #8
 8005870:	d827      	bhi.n	80058c2 <UART_SetConfig+0x49a>
 8005872:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <UART_SetConfig+0x450>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058a5 	.word	0x080058a5
 8005880:	080058ad 	.word	0x080058ad
 8005884:	080058c3 	.word	0x080058c3
 8005888:	080058b3 	.word	0x080058b3
 800588c:	080058c3 	.word	0x080058c3
 8005890:	080058c3 	.word	0x080058c3
 8005894:	080058c3 	.word	0x080058c3
 8005898:	080058bb 	.word	0x080058bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800589c:	f7fd febc 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 80058a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058a2:	e014      	b.n	80058ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a4:	f7fd fece 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 80058a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058aa:	e010      	b.n	80058ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ac:	4b4e      	ldr	r3, [pc, #312]	@ (80059e8 <UART_SetConfig+0x5c0>)
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058b0:	e00d      	b.n	80058ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b2:	f7fd fe19 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 80058b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058b8:	e009      	b.n	80058ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058c0:	e005      	b.n	80058ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8090 	beq.w	80059f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	4a44      	ldr	r2, [pc, #272]	@ (80059ec <UART_SetConfig+0x5c4>)
 80058dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e0:	461a      	mov	r2, r3
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e8:	005a      	lsls	r2, r3, #1
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	441a      	add	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	d916      	bls.n	8005930 <UART_SetConfig+0x508>
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005908:	d212      	bcs.n	8005930 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f023 030f 	bic.w	r3, r3, #15
 8005912:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	b29b      	uxth	r3, r3
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	b29a      	uxth	r2, r3
 8005920:	8bfb      	ldrh	r3, [r7, #30]
 8005922:	4313      	orrs	r3, r2
 8005924:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	8bfa      	ldrh	r2, [r7, #30]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e062      	b.n	80059f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005936:	e05e      	b.n	80059f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005938:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800593c:	2b08      	cmp	r3, #8
 800593e:	d828      	bhi.n	8005992 <UART_SetConfig+0x56a>
 8005940:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <UART_SetConfig+0x520>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800596d 	.word	0x0800596d
 800594c:	08005975 	.word	0x08005975
 8005950:	0800597d 	.word	0x0800597d
 8005954:	08005993 	.word	0x08005993
 8005958:	08005983 	.word	0x08005983
 800595c:	08005993 	.word	0x08005993
 8005960:	08005993 	.word	0x08005993
 8005964:	08005993 	.word	0x08005993
 8005968:	0800598b 	.word	0x0800598b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7fd fe54 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 8005970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005972:	e014      	b.n	800599e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005974:	f7fd fe66 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8005978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800597a:	e010      	b.n	800599e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800597c:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <UART_SetConfig+0x5c0>)
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005980:	e00d      	b.n	800599e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005982:	f7fd fdb1 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8005986:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005988:	e009      	b.n	800599e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005990:	e005      	b.n	800599e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800599c:	bf00      	nop
    }

    if (pclk != 0U)
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d028      	beq.n	80059f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	4a10      	ldr	r2, [pc, #64]	@ (80059ec <UART_SetConfig+0x5c4>)
 80059aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ae:	461a      	mov	r2, r3
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	085b      	lsrs	r3, r3, #1
 80059bc:	441a      	add	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	2b0f      	cmp	r3, #15
 80059cc:	d910      	bls.n	80059f0 <UART_SetConfig+0x5c8>
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d4:	d20c      	bcs.n	80059f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	b29a      	uxth	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60da      	str	r2, [r3, #12]
 80059e0:	e009      	b.n	80059f6 <UART_SetConfig+0x5ce>
 80059e2:	bf00      	nop
 80059e4:	40008000 	.word	0x40008000
 80059e8:	00f42400 	.word	0x00f42400
 80059ec:	08009888 	.word	0x08009888
      }
      else
      {
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3730      	adds	r7, #48	@ 0x30
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01a      	beq.n	8005b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b1e:	d10a      	bne.n	8005b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	605a      	str	r2, [r3, #4]
  }
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b098      	sub	sp, #96	@ 0x60
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b74:	f7fc f9f4 	bl	8001f60 <HAL_GetTick>
 8005b78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d12f      	bne.n	8005be8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b90:	2200      	movs	r2, #0
 8005b92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f88e 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d022      	beq.n	8005be8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e6      	bne.n	8005ba2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e063      	b.n	8005cb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d149      	bne.n	8005c8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f857 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d03c      	beq.n	8005c8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c62:	61fa      	str	r2, [r7, #28]
 8005c64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	69b9      	ldr	r1, [r7, #24]
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e012      	b.n	8005cb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3758      	adds	r7, #88	@ 0x58
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc8:	e049      	b.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d045      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd2:	f7fc f945 	bl	8001f60 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e048      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d031      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d110      	bne.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f95b 	bl	8005fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e029      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d38:	d111      	bne.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f941 	bl	8005fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e00f      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4013      	ands	r3, r2
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d0a6      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b0a3      	sub	sp, #140	@ 0x8c
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dba:	d10e      	bne.n	8005dda <UART_Start_Receive_IT+0x52>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <UART_Start_Receive_IT+0x48>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005dca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dce:	e02d      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	22ff      	movs	r2, #255	@ 0xff
 8005dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dd8:	e028      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10d      	bne.n	8005dfe <UART_Start_Receive_IT+0x76>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <UART_Start_Receive_IT+0x6c>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	22ff      	movs	r2, #255	@ 0xff
 8005dee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005df2:	e01b      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	227f      	movs	r2, #127	@ 0x7f
 8005df8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dfc:	e016      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e06:	d10d      	bne.n	8005e24 <UART_Start_Receive_IT+0x9c>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <UART_Start_Receive_IT+0x92>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	227f      	movs	r2, #127	@ 0x7f
 8005e14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e18:	e008      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	223f      	movs	r2, #63	@ 0x3f
 8005e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e22:	e003      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2222      	movs	r2, #34	@ 0x22
 8005e38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005e4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005e60:	673a      	str	r2, [r7, #112]	@ 0x70
 8005e62:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005e66:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005e6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e3      	bne.n	8005e3c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e7c:	d14f      	bne.n	8005f1e <UART_Start_Receive_IT+0x196>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005e84:	88fa      	ldrh	r2, [r7, #6]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d349      	bcc.n	8005f1e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e92:	d107      	bne.n	8005ea4 <UART_Start_Receive_IT+0x11c>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d103      	bne.n	8005ea4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4a47      	ldr	r2, [pc, #284]	@ (8005fbc <UART_Start_Receive_IT+0x234>)
 8005ea0:	675a      	str	r2, [r3, #116]	@ 0x74
 8005ea2:	e002      	b.n	8005eaa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a46      	ldr	r2, [pc, #280]	@ (8005fc0 <UART_Start_Receive_IT+0x238>)
 8005ea8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01a      	beq.n	8005ee8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ed6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005eda:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e4      	bne.n	8005eb2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e5      	bne.n	8005ee8 <UART_Start_Receive_IT+0x160>
 8005f1c:	e046      	b.n	8005fac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f26:	d107      	bne.n	8005f38 <UART_Start_Receive_IT+0x1b0>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4a24      	ldr	r2, [pc, #144]	@ (8005fc4 <UART_Start_Receive_IT+0x23c>)
 8005f34:	675a      	str	r2, [r3, #116]	@ 0x74
 8005f36:	e002      	b.n	8005f3e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a23      	ldr	r2, [pc, #140]	@ (8005fc8 <UART_Start_Receive_IT+0x240>)
 8005f3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d019      	beq.n	8005f7a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005f5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f66:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e6      	bne.n	8005f46 <UART_Start_Receive_IT+0x1be>
 8005f78:	e018      	b.n	8005fac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	613b      	str	r3, [r7, #16]
   return(result);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f043 0320 	orr.w	r3, r3, #32
 8005f8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	69f9      	ldr	r1, [r7, #28]
 8005f9e:	6a3a      	ldr	r2, [r7, #32]
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e6      	bne.n	8005f7a <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	378c      	adds	r7, #140	@ 0x8c
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	080067f9 	.word	0x080067f9
 8005fc0:	08006495 	.word	0x08006495
 8005fc4:	080062d9 	.word	0x080062d9
 8005fc8:	0800611d 	.word	0x0800611d

08005fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b095      	sub	sp, #84	@ 0x54
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ff8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e6      	bne.n	8005fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	61fb      	str	r3, [r7, #28]
   return(result);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800602a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800602c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e3      	bne.n	8006006 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006042:	2b01      	cmp	r3, #1
 8006044:	d118      	bne.n	8006078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	60bb      	str	r3, [r7, #8]
   return(result);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f023 0310 	bic.w	r3, r3, #16
 800605a:	647b      	str	r3, [r7, #68]	@ 0x44
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6979      	ldr	r1, [r7, #20]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	613b      	str	r3, [r7, #16]
   return(result);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e6      	bne.n	8006046 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800608c:	bf00      	nop
 800608e:	3754      	adds	r7, #84	@ 0x54
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff f9a0 	bl	80053fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6979      	ldr	r1, [r7, #20]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	613b      	str	r3, [r7, #16]
   return(result);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e6      	bne.n	80060cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff f96b 	bl	80053e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006112:	bf00      	nop
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b09c      	sub	sp, #112	@ 0x70
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800612a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006134:	2b22      	cmp	r3, #34	@ 0x22
 8006136:	f040 80be 	bne.w	80062b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006140:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006144:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006148:	b2d9      	uxtb	r1, r3
 800614a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800614e:	b2da      	uxtb	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006154:	400a      	ands	r2, r1
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 80a3 	bne.w	80062ca <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e6      	bne.n	8006184 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3308      	adds	r3, #8
 80061bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80061d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80061d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e5      	bne.n	80061b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a34      	ldr	r2, [pc, #208]	@ (80062d4 <UART_RxISR_8BIT+0x1b8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d01f      	beq.n	8006248 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	623b      	str	r3, [r7, #32]
   return(result);
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800622a:	663b      	str	r3, [r7, #96]	@ 0x60
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006234:	633b      	str	r3, [r7, #48]	@ 0x30
 8006236:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800623a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e6      	bne.n	8006216 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624c:	2b01      	cmp	r3, #1
 800624e:	d12e      	bne.n	80062ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	60fb      	str	r3, [r7, #12]
   return(result);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0310 	bic.w	r3, r3, #16
 800626a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	69b9      	ldr	r1, [r7, #24]
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	617b      	str	r3, [r7, #20]
   return(result);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e6      	bne.n	8006256 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b10      	cmp	r3, #16
 8006294:	d103      	bne.n	800629e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2210      	movs	r2, #16
 800629c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff f8b2 	bl	8005410 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062ac:	e00d      	b.n	80062ca <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fa fe5c 	bl	8000f6c <HAL_UART_RxCpltCallback>
}
 80062b4:	e009      	b.n	80062ca <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	8b1b      	ldrh	r3, [r3, #24]
 80062bc:	b29a      	uxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0208 	orr.w	r2, r2, #8
 80062c6:	b292      	uxth	r2, r2
 80062c8:	831a      	strh	r2, [r3, #24]
}
 80062ca:	bf00      	nop
 80062cc:	3770      	adds	r7, #112	@ 0x70
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40008000 	.word	0x40008000

080062d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b09c      	sub	sp, #112	@ 0x70
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80062e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062f0:	2b22      	cmp	r3, #34	@ 0x22
 80062f2:	f040 80be 	bne.w	8006472 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006304:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006306:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800630a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800630e:	4013      	ands	r3, r2
 8006310:	b29a      	uxth	r2, r3
 8006312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006314:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631a:	1c9a      	adds	r2, r3, #2
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	f040 80a3 	bne.w	8006486 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800634e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006354:	667b      	str	r3, [r7, #100]	@ 0x64
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800635e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006360:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006364:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800636c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e6      	bne.n	8006340 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	663b      	str	r3, [r7, #96]	@ 0x60
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006392:	643a      	str	r2, [r7, #64]	@ 0x40
 8006394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a34      	ldr	r2, [pc, #208]	@ (8006490 <UART_RxISR_16BIT+0x1b8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d01f      	beq.n	8006404 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d018      	beq.n	8006404 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e6      	bne.n	80063d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d12e      	bne.n	800646a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f023 0310 	bic.w	r3, r3, #16
 8006426:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6979      	ldr	r1, [r7, #20]
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	613b      	str	r3, [r7, #16]
   return(result);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b10      	cmp	r3, #16
 8006450:	d103      	bne.n	800645a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2210      	movs	r2, #16
 8006458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fe ffd4 	bl	8005410 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006468:	e00d      	b.n	8006486 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fa fd7e 	bl	8000f6c <HAL_UART_RxCpltCallback>
}
 8006470:	e009      	b.n	8006486 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	8b1b      	ldrh	r3, [r3, #24]
 8006478:	b29a      	uxth	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0208 	orr.w	r2, r2, #8
 8006482:	b292      	uxth	r2, r2
 8006484:	831a      	strh	r2, [r3, #24]
}
 8006486:	bf00      	nop
 8006488:	3770      	adds	r7, #112	@ 0x70
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40008000 	.word	0x40008000

08006494 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b0ac      	sub	sp, #176	@ 0xb0
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80064a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064ca:	2b22      	cmp	r3, #34	@ 0x22
 80064cc:	f040 8182 	bne.w	80067d4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80064d6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064da:	e125      	b.n	8006728 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064e2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80064ea:	b2d9      	uxtb	r1, r3
 80064ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f6:	400a      	ands	r2, r1
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b00      	cmp	r3, #0
 800652c:	d053      	beq.n	80065d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800652e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d011      	beq.n	800655e <UART_RxISR_8BIT_FIFOEN+0xca>
 800653a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800653e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2201      	movs	r2, #1
 800654c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006554:	f043 0201 	orr.w	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800655e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d011      	beq.n	800658e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800656a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2202      	movs	r2, #2
 800657c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006584:	f043 0204 	orr.w	r2, r3, #4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800658e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006592:	f003 0304 	and.w	r3, r3, #4
 8006596:	2b00      	cmp	r3, #0
 8006598:	d011      	beq.n	80065be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800659a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2204      	movs	r2, #4
 80065ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b4:	f043 0202 	orr.w	r2, r3, #2
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d006      	beq.n	80065d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fe ff17 	bl	80053fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 80a2 	bne.w	8006728 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80065f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006606:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006608:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800660c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e4      	bne.n	80065e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3308      	adds	r3, #8
 8006620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800662a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800662c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006642:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006644:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006648:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e1      	bne.n	800661a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a60      	ldr	r2, [pc, #384]	@ (80067f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d021      	beq.n	80066b8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01a      	beq.n	80066b8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006692:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80066a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80066a6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e4      	bne.n	8006682 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d130      	bne.n	8006722 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	f023 0310 	bic.w	r3, r3, #16
 80066da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e4      	bne.n	80066c6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b10      	cmp	r3, #16
 8006708:	d103      	bne.n	8006712 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2210      	movs	r2, #16
 8006710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fe fe78 	bl	8005410 <HAL_UARTEx_RxEventCallback>
 8006720:	e002      	b.n	8006728 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fa fc22 	bl	8000f6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006728:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800672c:	2b00      	cmp	r3, #0
 800672e:	d006      	beq.n	800673e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	f47f aecf 	bne.w	80064dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006744:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006748:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800674c:	2b00      	cmp	r3, #0
 800674e:	d04b      	beq.n	80067e8 <UART_RxISR_8BIT_FIFOEN+0x354>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006756:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800675a:	429a      	cmp	r2, r3
 800675c:	d244      	bcs.n	80067e8 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	61fb      	str	r3, [r7, #28]
   return(result);
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3308      	adds	r3, #8
 800677e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e3      	bne.n	800675e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a16      	ldr	r2, [pc, #88]	@ (80067f4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800679a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f043 0320 	orr.w	r3, r3, #32
 80067b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6979      	ldr	r1, [r7, #20]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	613b      	str	r3, [r7, #16]
   return(result);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e4      	bne.n	800679c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067d2:	e009      	b.n	80067e8 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	8b1b      	ldrh	r3, [r3, #24]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0208 	orr.w	r2, r2, #8
 80067e4:	b292      	uxth	r2, r2
 80067e6:	831a      	strh	r2, [r3, #24]
}
 80067e8:	bf00      	nop
 80067ea:	37b0      	adds	r7, #176	@ 0xb0
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40008000 	.word	0x40008000
 80067f4:	0800611d 	.word	0x0800611d

080067f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b0ae      	sub	sp, #184	@ 0xb8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006806:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800682e:	2b22      	cmp	r3, #34	@ 0x22
 8006830:	f040 8186 	bne.w	8006b40 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800683a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800683e:	e129      	b.n	8006a94 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006846:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006852:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006856:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800685a:	4013      	ands	r3, r2
 800685c:	b29a      	uxth	r2, r3
 800685e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006862:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006868:	1c9a      	adds	r2, r3, #2
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800688a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b00      	cmp	r3, #0
 8006894:	d053      	beq.n	800693e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d011      	beq.n	80068c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80068a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2201      	movs	r2, #1
 80068b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068bc:	f043 0201 	orr.w	r2, r3, #1
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d011      	beq.n	80068f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80068d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2202      	movs	r2, #2
 80068e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ec:	f043 0204 	orr.w	r2, r3, #4
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2204      	movs	r2, #4
 8006914:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691c:	f043 0202 	orr.w	r2, r3, #2
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692c:	2b00      	cmp	r3, #0
 800692e:	d006      	beq.n	800693e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fe fd63 	bl	80053fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	f040 80a4 	bne.w	8006a94 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800695a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800695c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800696e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006972:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006976:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e2      	bne.n	800694c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80069ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e1      	bne.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a60      	ldr	r2, [pc, #384]	@ (8006b5c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d021      	beq.n	8006a24 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d01a      	beq.n	8006a24 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a12:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e4      	bne.n	80069ee <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d130      	bne.n	8006a8e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a42:	f023 0310 	bic.w	r3, r3, #16
 8006a46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e4      	bne.n	8006a32 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d103      	bne.n	8006a7e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fe fcc2 	bl	8005410 <HAL_UARTEx_RxEventCallback>
 8006a8c:	e002      	b.n	8006a94 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fa fa6c 	bl	8000f6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a94:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006a9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f47f aecb 	bne.w	8006840 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ab0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ab4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d04b      	beq.n	8006b54 <UART_RxISR_16BIT_FIFOEN+0x35c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ac2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d244      	bcs.n	8006b54 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3308      	adds	r3, #8
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e3      	bne.n	8006aca <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006b06:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f043 0320 	orr.w	r3, r3, #32
 8006b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b2a:	61fb      	str	r3, [r7, #28]
 8006b2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	69b9      	ldr	r1, [r7, #24]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	617b      	str	r3, [r7, #20]
   return(result);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e4      	bne.n	8006b08 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b3e:	e009      	b.n	8006b54 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	8b1b      	ldrh	r3, [r3, #24]
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0208 	orr.w	r2, r2, #8
 8006b50:	b292      	uxth	r2, r2
 8006b52:	831a      	strh	r2, [r3, #24]
}
 8006b54:	bf00      	nop
 8006b56:	37b8      	adds	r7, #184	@ 0xb8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40008000 	.word	0x40008000
 8006b60:	080062d9 	.word	0x080062d9

08006b64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e027      	b.n	8006c06 <HAL_UARTEx_DisableFifoMode+0x66>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2224      	movs	r2, #36	@ 0x24
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006be4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e02d      	b.n	8006c86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2224      	movs	r2, #36	@ 0x24
 8006c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f850 	bl	8006d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e02d      	b.n	8006d02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2224      	movs	r2, #36	@ 0x24
 8006cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0201 	bic.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f812 	bl	8006d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d108      	bne.n	8006d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d2c:	e031      	b.n	8006d92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d2e:	2308      	movs	r3, #8
 8006d30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d32:	2308      	movs	r3, #8
 8006d34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	0e5b      	lsrs	r3, r3, #25
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	0f5b      	lsrs	r3, r3, #29
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	7b3a      	ldrb	r2, [r7, #12]
 8006d5a:	4911      	ldr	r1, [pc, #68]	@ (8006da0 <UARTEx_SetNbDataToProcess+0x94>)
 8006d5c:	5c8a      	ldrb	r2, [r1, r2]
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d62:	7b3a      	ldrb	r2, [r7, #12]
 8006d64:	490f      	ldr	r1, [pc, #60]	@ (8006da4 <UARTEx_SetNbDataToProcess+0x98>)
 8006d66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	7b7a      	ldrb	r2, [r7, #13]
 8006d78:	4909      	ldr	r1, [pc, #36]	@ (8006da0 <UARTEx_SetNbDataToProcess+0x94>)
 8006d7a:	5c8a      	ldrb	r2, [r1, r2]
 8006d7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d80:	7b7a      	ldrb	r2, [r7, #13]
 8006d82:	4908      	ldr	r1, [pc, #32]	@ (8006da4 <UARTEx_SetNbDataToProcess+0x98>)
 8006d84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d92:	bf00      	nop
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	080098a0 	.word	0x080098a0
 8006da4:	080098a8 	.word	0x080098a8

08006da8 <atoi>:
 8006da8:	220a      	movs	r2, #10
 8006daa:	2100      	movs	r1, #0
 8006dac:	f000 b87a 	b.w	8006ea4 <strtol>

08006db0 <_strtol_l.constprop.0>:
 8006db0:	2b24      	cmp	r3, #36	@ 0x24
 8006db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db6:	4686      	mov	lr, r0
 8006db8:	4690      	mov	r8, r2
 8006dba:	d801      	bhi.n	8006dc0 <_strtol_l.constprop.0+0x10>
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d106      	bne.n	8006dce <_strtol_l.constprop.0+0x1e>
 8006dc0:	f000 fe3c 	bl	8007a3c <__errno>
 8006dc4:	2316      	movs	r3, #22
 8006dc6:	6003      	str	r3, [r0, #0]
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dce:	4834      	ldr	r0, [pc, #208]	@ (8006ea0 <_strtol_l.constprop.0+0xf0>)
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	462a      	mov	r2, r5
 8006dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dd8:	5d06      	ldrb	r6, [r0, r4]
 8006dda:	f016 0608 	ands.w	r6, r6, #8
 8006dde:	d1f8      	bne.n	8006dd2 <_strtol_l.constprop.0+0x22>
 8006de0:	2c2d      	cmp	r4, #45	@ 0x2d
 8006de2:	d12d      	bne.n	8006e40 <_strtol_l.constprop.0+0x90>
 8006de4:	782c      	ldrb	r4, [r5, #0]
 8006de6:	2601      	movs	r6, #1
 8006de8:	1c95      	adds	r5, r2, #2
 8006dea:	f033 0210 	bics.w	r2, r3, #16
 8006dee:	d109      	bne.n	8006e04 <_strtol_l.constprop.0+0x54>
 8006df0:	2c30      	cmp	r4, #48	@ 0x30
 8006df2:	d12a      	bne.n	8006e4a <_strtol_l.constprop.0+0x9a>
 8006df4:	782a      	ldrb	r2, [r5, #0]
 8006df6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006dfa:	2a58      	cmp	r2, #88	@ 0x58
 8006dfc:	d125      	bne.n	8006e4a <_strtol_l.constprop.0+0x9a>
 8006dfe:	786c      	ldrb	r4, [r5, #1]
 8006e00:	2310      	movs	r3, #16
 8006e02:	3502      	adds	r5, #2
 8006e04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006e08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	fbbc f9f3 	udiv	r9, ip, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	fb03 ca19 	mls	sl, r3, r9, ip
 8006e18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006e1c:	2f09      	cmp	r7, #9
 8006e1e:	d81b      	bhi.n	8006e58 <_strtol_l.constprop.0+0xa8>
 8006e20:	463c      	mov	r4, r7
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	dd27      	ble.n	8006e76 <_strtol_l.constprop.0+0xc6>
 8006e26:	1c57      	adds	r7, r2, #1
 8006e28:	d007      	beq.n	8006e3a <_strtol_l.constprop.0+0x8a>
 8006e2a:	4581      	cmp	r9, r0
 8006e2c:	d320      	bcc.n	8006e70 <_strtol_l.constprop.0+0xc0>
 8006e2e:	d101      	bne.n	8006e34 <_strtol_l.constprop.0+0x84>
 8006e30:	45a2      	cmp	sl, r4
 8006e32:	db1d      	blt.n	8006e70 <_strtol_l.constprop.0+0xc0>
 8006e34:	fb00 4003 	mla	r0, r0, r3, r4
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e3e:	e7eb      	b.n	8006e18 <_strtol_l.constprop.0+0x68>
 8006e40:	2c2b      	cmp	r4, #43	@ 0x2b
 8006e42:	bf04      	itt	eq
 8006e44:	782c      	ldrbeq	r4, [r5, #0]
 8006e46:	1c95      	addeq	r5, r2, #2
 8006e48:	e7cf      	b.n	8006dea <_strtol_l.constprop.0+0x3a>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1da      	bne.n	8006e04 <_strtol_l.constprop.0+0x54>
 8006e4e:	2c30      	cmp	r4, #48	@ 0x30
 8006e50:	bf0c      	ite	eq
 8006e52:	2308      	moveq	r3, #8
 8006e54:	230a      	movne	r3, #10
 8006e56:	e7d5      	b.n	8006e04 <_strtol_l.constprop.0+0x54>
 8006e58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006e5c:	2f19      	cmp	r7, #25
 8006e5e:	d801      	bhi.n	8006e64 <_strtol_l.constprop.0+0xb4>
 8006e60:	3c37      	subs	r4, #55	@ 0x37
 8006e62:	e7de      	b.n	8006e22 <_strtol_l.constprop.0+0x72>
 8006e64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006e68:	2f19      	cmp	r7, #25
 8006e6a:	d804      	bhi.n	8006e76 <_strtol_l.constprop.0+0xc6>
 8006e6c:	3c57      	subs	r4, #87	@ 0x57
 8006e6e:	e7d8      	b.n	8006e22 <_strtol_l.constprop.0+0x72>
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295
 8006e74:	e7e1      	b.n	8006e3a <_strtol_l.constprop.0+0x8a>
 8006e76:	1c53      	adds	r3, r2, #1
 8006e78:	d108      	bne.n	8006e8c <_strtol_l.constprop.0+0xdc>
 8006e7a:	2322      	movs	r3, #34	@ 0x22
 8006e7c:	f8ce 3000 	str.w	r3, [lr]
 8006e80:	4660      	mov	r0, ip
 8006e82:	f1b8 0f00 	cmp.w	r8, #0
 8006e86:	d0a0      	beq.n	8006dca <_strtol_l.constprop.0+0x1a>
 8006e88:	1e69      	subs	r1, r5, #1
 8006e8a:	e006      	b.n	8006e9a <_strtol_l.constprop.0+0xea>
 8006e8c:	b106      	cbz	r6, 8006e90 <_strtol_l.constprop.0+0xe0>
 8006e8e:	4240      	negs	r0, r0
 8006e90:	f1b8 0f00 	cmp.w	r8, #0
 8006e94:	d099      	beq.n	8006dca <_strtol_l.constprop.0+0x1a>
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d1f6      	bne.n	8006e88 <_strtol_l.constprop.0+0xd8>
 8006e9a:	f8c8 1000 	str.w	r1, [r8]
 8006e9e:	e794      	b.n	8006dca <_strtol_l.constprop.0+0x1a>
 8006ea0:	080098b1 	.word	0x080098b1

08006ea4 <strtol>:
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	460a      	mov	r2, r1
 8006ea8:	4601      	mov	r1, r0
 8006eaa:	4802      	ldr	r0, [pc, #8]	@ (8006eb4 <strtol+0x10>)
 8006eac:	6800      	ldr	r0, [r0, #0]
 8006eae:	f7ff bf7f 	b.w	8006db0 <_strtol_l.constprop.0>
 8006eb2:	bf00      	nop
 8006eb4:	20000018 	.word	0x20000018

08006eb8 <__cvt>:
 8006eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	ec57 6b10 	vmov	r6, r7, d0
 8006ec0:	2f00      	cmp	r7, #0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	bfbb      	ittet	lt
 8006eca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006ece:	461f      	movlt	r7, r3
 8006ed0:	2300      	movge	r3, #0
 8006ed2:	232d      	movlt	r3, #45	@ 0x2d
 8006ed4:	700b      	strb	r3, [r1, #0]
 8006ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ed8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006edc:	4691      	mov	r9, r2
 8006ede:	f023 0820 	bic.w	r8, r3, #32
 8006ee2:	bfbc      	itt	lt
 8006ee4:	4632      	movlt	r2, r6
 8006ee6:	4616      	movlt	r6, r2
 8006ee8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006eec:	d005      	beq.n	8006efa <__cvt+0x42>
 8006eee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ef2:	d100      	bne.n	8006ef6 <__cvt+0x3e>
 8006ef4:	3401      	adds	r4, #1
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	e000      	b.n	8006efc <__cvt+0x44>
 8006efa:	2103      	movs	r1, #3
 8006efc:	ab03      	add	r3, sp, #12
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	ab02      	add	r3, sp, #8
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	ec47 6b10 	vmov	d0, r6, r7
 8006f08:	4653      	mov	r3, sl
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	f000 fe54 	bl	8007bb8 <_dtoa_r>
 8006f10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f14:	4605      	mov	r5, r0
 8006f16:	d119      	bne.n	8006f4c <__cvt+0x94>
 8006f18:	f019 0f01 	tst.w	r9, #1
 8006f1c:	d00e      	beq.n	8006f3c <__cvt+0x84>
 8006f1e:	eb00 0904 	add.w	r9, r0, r4
 8006f22:	2200      	movs	r2, #0
 8006f24:	2300      	movs	r3, #0
 8006f26:	4630      	mov	r0, r6
 8006f28:	4639      	mov	r1, r7
 8006f2a:	f7f9 fdf5 	bl	8000b18 <__aeabi_dcmpeq>
 8006f2e:	b108      	cbz	r0, 8006f34 <__cvt+0x7c>
 8006f30:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f34:	2230      	movs	r2, #48	@ 0x30
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	454b      	cmp	r3, r9
 8006f3a:	d31e      	bcc.n	8006f7a <__cvt+0xc2>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f40:	1b5b      	subs	r3, r3, r5
 8006f42:	4628      	mov	r0, r5
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	b004      	add	sp, #16
 8006f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f50:	eb00 0904 	add.w	r9, r0, r4
 8006f54:	d1e5      	bne.n	8006f22 <__cvt+0x6a>
 8006f56:	7803      	ldrb	r3, [r0, #0]
 8006f58:	2b30      	cmp	r3, #48	@ 0x30
 8006f5a:	d10a      	bne.n	8006f72 <__cvt+0xba>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2300      	movs	r3, #0
 8006f60:	4630      	mov	r0, r6
 8006f62:	4639      	mov	r1, r7
 8006f64:	f7f9 fdd8 	bl	8000b18 <__aeabi_dcmpeq>
 8006f68:	b918      	cbnz	r0, 8006f72 <__cvt+0xba>
 8006f6a:	f1c4 0401 	rsb	r4, r4, #1
 8006f6e:	f8ca 4000 	str.w	r4, [sl]
 8006f72:	f8da 3000 	ldr.w	r3, [sl]
 8006f76:	4499      	add	r9, r3
 8006f78:	e7d3      	b.n	8006f22 <__cvt+0x6a>
 8006f7a:	1c59      	adds	r1, r3, #1
 8006f7c:	9103      	str	r1, [sp, #12]
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	e7d9      	b.n	8006f36 <__cvt+0x7e>

08006f82 <__exponent>:
 8006f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f84:	2900      	cmp	r1, #0
 8006f86:	bfba      	itte	lt
 8006f88:	4249      	neglt	r1, r1
 8006f8a:	232d      	movlt	r3, #45	@ 0x2d
 8006f8c:	232b      	movge	r3, #43	@ 0x2b
 8006f8e:	2909      	cmp	r1, #9
 8006f90:	7002      	strb	r2, [r0, #0]
 8006f92:	7043      	strb	r3, [r0, #1]
 8006f94:	dd29      	ble.n	8006fea <__exponent+0x68>
 8006f96:	f10d 0307 	add.w	r3, sp, #7
 8006f9a:	461d      	mov	r5, r3
 8006f9c:	270a      	movs	r7, #10
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fa4:	fb07 1416 	mls	r4, r7, r6, r1
 8006fa8:	3430      	adds	r4, #48	@ 0x30
 8006faa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006fae:	460c      	mov	r4, r1
 8006fb0:	2c63      	cmp	r4, #99	@ 0x63
 8006fb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	dcf1      	bgt.n	8006f9e <__exponent+0x1c>
 8006fba:	3130      	adds	r1, #48	@ 0x30
 8006fbc:	1e94      	subs	r4, r2, #2
 8006fbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fc2:	1c41      	adds	r1, r0, #1
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	42ab      	cmp	r3, r5
 8006fc8:	d30a      	bcc.n	8006fe0 <__exponent+0x5e>
 8006fca:	f10d 0309 	add.w	r3, sp, #9
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	42ac      	cmp	r4, r5
 8006fd2:	bf88      	it	hi
 8006fd4:	2300      	movhi	r3, #0
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	4403      	add	r3, r0
 8006fda:	1a18      	subs	r0, r3, r0
 8006fdc:	b003      	add	sp, #12
 8006fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006fe4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006fe8:	e7ed      	b.n	8006fc6 <__exponent+0x44>
 8006fea:	2330      	movs	r3, #48	@ 0x30
 8006fec:	3130      	adds	r1, #48	@ 0x30
 8006fee:	7083      	strb	r3, [r0, #2]
 8006ff0:	70c1      	strb	r1, [r0, #3]
 8006ff2:	1d03      	adds	r3, r0, #4
 8006ff4:	e7f1      	b.n	8006fda <__exponent+0x58>
	...

08006ff8 <_printf_float>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	b08d      	sub	sp, #52	@ 0x34
 8006ffe:	460c      	mov	r4, r1
 8007000:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007004:	4616      	mov	r6, r2
 8007006:	461f      	mov	r7, r3
 8007008:	4605      	mov	r5, r0
 800700a:	f000 fccd 	bl	80079a8 <_localeconv_r>
 800700e:	6803      	ldr	r3, [r0, #0]
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	4618      	mov	r0, r3
 8007014:	f7f9 f954 	bl	80002c0 <strlen>
 8007018:	2300      	movs	r3, #0
 800701a:	930a      	str	r3, [sp, #40]	@ 0x28
 800701c:	f8d8 3000 	ldr.w	r3, [r8]
 8007020:	9005      	str	r0, [sp, #20]
 8007022:	3307      	adds	r3, #7
 8007024:	f023 0307 	bic.w	r3, r3, #7
 8007028:	f103 0208 	add.w	r2, r3, #8
 800702c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007030:	f8d4 b000 	ldr.w	fp, [r4]
 8007034:	f8c8 2000 	str.w	r2, [r8]
 8007038:	e9d3 8900 	ldrd	r8, r9, [r3]
 800703c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007040:	9307      	str	r3, [sp, #28]
 8007042:	f8cd 8018 	str.w	r8, [sp, #24]
 8007046:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800704a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800704e:	4b9c      	ldr	r3, [pc, #624]	@ (80072c0 <_printf_float+0x2c8>)
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	f7f9 fd92 	bl	8000b7c <__aeabi_dcmpun>
 8007058:	bb70      	cbnz	r0, 80070b8 <_printf_float+0xc0>
 800705a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800705e:	4b98      	ldr	r3, [pc, #608]	@ (80072c0 <_printf_float+0x2c8>)
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	f7f9 fd6c 	bl	8000b40 <__aeabi_dcmple>
 8007068:	bb30      	cbnz	r0, 80070b8 <_printf_float+0xc0>
 800706a:	2200      	movs	r2, #0
 800706c:	2300      	movs	r3, #0
 800706e:	4640      	mov	r0, r8
 8007070:	4649      	mov	r1, r9
 8007072:	f7f9 fd5b 	bl	8000b2c <__aeabi_dcmplt>
 8007076:	b110      	cbz	r0, 800707e <_printf_float+0x86>
 8007078:	232d      	movs	r3, #45	@ 0x2d
 800707a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800707e:	4a91      	ldr	r2, [pc, #580]	@ (80072c4 <_printf_float+0x2cc>)
 8007080:	4b91      	ldr	r3, [pc, #580]	@ (80072c8 <_printf_float+0x2d0>)
 8007082:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007086:	bf94      	ite	ls
 8007088:	4690      	movls	r8, r2
 800708a:	4698      	movhi	r8, r3
 800708c:	2303      	movs	r3, #3
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	f02b 0304 	bic.w	r3, fp, #4
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	f04f 0900 	mov.w	r9, #0
 800709a:	9700      	str	r7, [sp, #0]
 800709c:	4633      	mov	r3, r6
 800709e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f9d2 	bl	800744c <_printf_common>
 80070a8:	3001      	adds	r0, #1
 80070aa:	f040 808d 	bne.w	80071c8 <_printf_float+0x1d0>
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	b00d      	add	sp, #52	@ 0x34
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b8:	4642      	mov	r2, r8
 80070ba:	464b      	mov	r3, r9
 80070bc:	4640      	mov	r0, r8
 80070be:	4649      	mov	r1, r9
 80070c0:	f7f9 fd5c 	bl	8000b7c <__aeabi_dcmpun>
 80070c4:	b140      	cbz	r0, 80070d8 <_printf_float+0xe0>
 80070c6:	464b      	mov	r3, r9
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bfbc      	itt	lt
 80070cc:	232d      	movlt	r3, #45	@ 0x2d
 80070ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070d2:	4a7e      	ldr	r2, [pc, #504]	@ (80072cc <_printf_float+0x2d4>)
 80070d4:	4b7e      	ldr	r3, [pc, #504]	@ (80072d0 <_printf_float+0x2d8>)
 80070d6:	e7d4      	b.n	8007082 <_printf_float+0x8a>
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80070de:	9206      	str	r2, [sp, #24]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	d13b      	bne.n	800715c <_printf_float+0x164>
 80070e4:	2306      	movs	r3, #6
 80070e6:	6063      	str	r3, [r4, #4]
 80070e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80070ec:	2300      	movs	r3, #0
 80070ee:	6022      	str	r2, [r4, #0]
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80070f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80070f8:	ab09      	add	r3, sp, #36	@ 0x24
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	6861      	ldr	r1, [r4, #4]
 80070fe:	ec49 8b10 	vmov	d0, r8, r9
 8007102:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007106:	4628      	mov	r0, r5
 8007108:	f7ff fed6 	bl	8006eb8 <__cvt>
 800710c:	9b06      	ldr	r3, [sp, #24]
 800710e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007110:	2b47      	cmp	r3, #71	@ 0x47
 8007112:	4680      	mov	r8, r0
 8007114:	d129      	bne.n	800716a <_printf_float+0x172>
 8007116:	1cc8      	adds	r0, r1, #3
 8007118:	db02      	blt.n	8007120 <_printf_float+0x128>
 800711a:	6863      	ldr	r3, [r4, #4]
 800711c:	4299      	cmp	r1, r3
 800711e:	dd41      	ble.n	80071a4 <_printf_float+0x1ac>
 8007120:	f1aa 0a02 	sub.w	sl, sl, #2
 8007124:	fa5f fa8a 	uxtb.w	sl, sl
 8007128:	3901      	subs	r1, #1
 800712a:	4652      	mov	r2, sl
 800712c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007130:	9109      	str	r1, [sp, #36]	@ 0x24
 8007132:	f7ff ff26 	bl	8006f82 <__exponent>
 8007136:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007138:	1813      	adds	r3, r2, r0
 800713a:	2a01      	cmp	r2, #1
 800713c:	4681      	mov	r9, r0
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	dc02      	bgt.n	8007148 <_printf_float+0x150>
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	07d2      	lsls	r2, r2, #31
 8007146:	d501      	bpl.n	800714c <_printf_float+0x154>
 8007148:	3301      	adds	r3, #1
 800714a:	6123      	str	r3, [r4, #16]
 800714c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0a2      	beq.n	800709a <_printf_float+0xa2>
 8007154:	232d      	movs	r3, #45	@ 0x2d
 8007156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800715a:	e79e      	b.n	800709a <_printf_float+0xa2>
 800715c:	9a06      	ldr	r2, [sp, #24]
 800715e:	2a47      	cmp	r2, #71	@ 0x47
 8007160:	d1c2      	bne.n	80070e8 <_printf_float+0xf0>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1c0      	bne.n	80070e8 <_printf_float+0xf0>
 8007166:	2301      	movs	r3, #1
 8007168:	e7bd      	b.n	80070e6 <_printf_float+0xee>
 800716a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800716e:	d9db      	bls.n	8007128 <_printf_float+0x130>
 8007170:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007174:	d118      	bne.n	80071a8 <_printf_float+0x1b0>
 8007176:	2900      	cmp	r1, #0
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	dd0b      	ble.n	8007194 <_printf_float+0x19c>
 800717c:	6121      	str	r1, [r4, #16]
 800717e:	b913      	cbnz	r3, 8007186 <_printf_float+0x18e>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	07d0      	lsls	r0, r2, #31
 8007184:	d502      	bpl.n	800718c <_printf_float+0x194>
 8007186:	3301      	adds	r3, #1
 8007188:	440b      	add	r3, r1
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800718e:	f04f 0900 	mov.w	r9, #0
 8007192:	e7db      	b.n	800714c <_printf_float+0x154>
 8007194:	b913      	cbnz	r3, 800719c <_printf_float+0x1a4>
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	07d2      	lsls	r2, r2, #31
 800719a:	d501      	bpl.n	80071a0 <_printf_float+0x1a8>
 800719c:	3302      	adds	r3, #2
 800719e:	e7f4      	b.n	800718a <_printf_float+0x192>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e7f2      	b.n	800718a <_printf_float+0x192>
 80071a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80071a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071aa:	4299      	cmp	r1, r3
 80071ac:	db05      	blt.n	80071ba <_printf_float+0x1c2>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	6121      	str	r1, [r4, #16]
 80071b2:	07d8      	lsls	r0, r3, #31
 80071b4:	d5ea      	bpl.n	800718c <_printf_float+0x194>
 80071b6:	1c4b      	adds	r3, r1, #1
 80071b8:	e7e7      	b.n	800718a <_printf_float+0x192>
 80071ba:	2900      	cmp	r1, #0
 80071bc:	bfd4      	ite	le
 80071be:	f1c1 0202 	rsble	r2, r1, #2
 80071c2:	2201      	movgt	r2, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	e7e0      	b.n	800718a <_printf_float+0x192>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	055a      	lsls	r2, r3, #21
 80071cc:	d407      	bmi.n	80071de <_printf_float+0x1e6>
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	4642      	mov	r2, r8
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	d12b      	bne.n	8007234 <_printf_float+0x23c>
 80071dc:	e767      	b.n	80070ae <_printf_float+0xb6>
 80071de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071e2:	f240 80dd 	bls.w	80073a0 <_printf_float+0x3a8>
 80071e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071ea:	2200      	movs	r2, #0
 80071ec:	2300      	movs	r3, #0
 80071ee:	f7f9 fc93 	bl	8000b18 <__aeabi_dcmpeq>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d033      	beq.n	800725e <_printf_float+0x266>
 80071f6:	4a37      	ldr	r2, [pc, #220]	@ (80072d4 <_printf_float+0x2dc>)
 80071f8:	2301      	movs	r3, #1
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	f43f af54 	beq.w	80070ae <_printf_float+0xb6>
 8007206:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800720a:	4543      	cmp	r3, r8
 800720c:	db02      	blt.n	8007214 <_printf_float+0x21c>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	07d8      	lsls	r0, r3, #31
 8007212:	d50f      	bpl.n	8007234 <_printf_float+0x23c>
 8007214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007218:	4631      	mov	r1, r6
 800721a:	4628      	mov	r0, r5
 800721c:	47b8      	blx	r7
 800721e:	3001      	adds	r0, #1
 8007220:	f43f af45 	beq.w	80070ae <_printf_float+0xb6>
 8007224:	f04f 0900 	mov.w	r9, #0
 8007228:	f108 38ff 	add.w	r8, r8, #4294967295
 800722c:	f104 0a1a 	add.w	sl, r4, #26
 8007230:	45c8      	cmp	r8, r9
 8007232:	dc09      	bgt.n	8007248 <_printf_float+0x250>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	079b      	lsls	r3, r3, #30
 8007238:	f100 8103 	bmi.w	8007442 <_printf_float+0x44a>
 800723c:	68e0      	ldr	r0, [r4, #12]
 800723e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007240:	4298      	cmp	r0, r3
 8007242:	bfb8      	it	lt
 8007244:	4618      	movlt	r0, r3
 8007246:	e734      	b.n	80070b2 <_printf_float+0xba>
 8007248:	2301      	movs	r3, #1
 800724a:	4652      	mov	r2, sl
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f af2b 	beq.w	80070ae <_printf_float+0xb6>
 8007258:	f109 0901 	add.w	r9, r9, #1
 800725c:	e7e8      	b.n	8007230 <_printf_float+0x238>
 800725e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	dc39      	bgt.n	80072d8 <_printf_float+0x2e0>
 8007264:	4a1b      	ldr	r2, [pc, #108]	@ (80072d4 <_printf_float+0x2dc>)
 8007266:	2301      	movs	r3, #1
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f af1d 	beq.w	80070ae <_printf_float+0xb6>
 8007274:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007278:	ea59 0303 	orrs.w	r3, r9, r3
 800727c:	d102      	bne.n	8007284 <_printf_float+0x28c>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	07d9      	lsls	r1, r3, #31
 8007282:	d5d7      	bpl.n	8007234 <_printf_float+0x23c>
 8007284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	f43f af0d 	beq.w	80070ae <_printf_float+0xb6>
 8007294:	f04f 0a00 	mov.w	sl, #0
 8007298:	f104 0b1a 	add.w	fp, r4, #26
 800729c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729e:	425b      	negs	r3, r3
 80072a0:	4553      	cmp	r3, sl
 80072a2:	dc01      	bgt.n	80072a8 <_printf_float+0x2b0>
 80072a4:	464b      	mov	r3, r9
 80072a6:	e793      	b.n	80071d0 <_printf_float+0x1d8>
 80072a8:	2301      	movs	r3, #1
 80072aa:	465a      	mov	r2, fp
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f aefb 	beq.w	80070ae <_printf_float+0xb6>
 80072b8:	f10a 0a01 	add.w	sl, sl, #1
 80072bc:	e7ee      	b.n	800729c <_printf_float+0x2a4>
 80072be:	bf00      	nop
 80072c0:	7fefffff 	.word	0x7fefffff
 80072c4:	080099b1 	.word	0x080099b1
 80072c8:	080099b5 	.word	0x080099b5
 80072cc:	080099b9 	.word	0x080099b9
 80072d0:	080099bd 	.word	0x080099bd
 80072d4:	080099c1 	.word	0x080099c1
 80072d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072de:	4553      	cmp	r3, sl
 80072e0:	bfa8      	it	ge
 80072e2:	4653      	movge	r3, sl
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	4699      	mov	r9, r3
 80072e8:	dc36      	bgt.n	8007358 <_printf_float+0x360>
 80072ea:	f04f 0b00 	mov.w	fp, #0
 80072ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072f2:	f104 021a 	add.w	r2, r4, #26
 80072f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072f8:	9306      	str	r3, [sp, #24]
 80072fa:	eba3 0309 	sub.w	r3, r3, r9
 80072fe:	455b      	cmp	r3, fp
 8007300:	dc31      	bgt.n	8007366 <_printf_float+0x36e>
 8007302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007304:	459a      	cmp	sl, r3
 8007306:	dc3a      	bgt.n	800737e <_printf_float+0x386>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	07da      	lsls	r2, r3, #31
 800730c:	d437      	bmi.n	800737e <_printf_float+0x386>
 800730e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007310:	ebaa 0903 	sub.w	r9, sl, r3
 8007314:	9b06      	ldr	r3, [sp, #24]
 8007316:	ebaa 0303 	sub.w	r3, sl, r3
 800731a:	4599      	cmp	r9, r3
 800731c:	bfa8      	it	ge
 800731e:	4699      	movge	r9, r3
 8007320:	f1b9 0f00 	cmp.w	r9, #0
 8007324:	dc33      	bgt.n	800738e <_printf_float+0x396>
 8007326:	f04f 0800 	mov.w	r8, #0
 800732a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800732e:	f104 0b1a 	add.w	fp, r4, #26
 8007332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007334:	ebaa 0303 	sub.w	r3, sl, r3
 8007338:	eba3 0309 	sub.w	r3, r3, r9
 800733c:	4543      	cmp	r3, r8
 800733e:	f77f af79 	ble.w	8007234 <_printf_float+0x23c>
 8007342:	2301      	movs	r3, #1
 8007344:	465a      	mov	r2, fp
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	f43f aeae 	beq.w	80070ae <_printf_float+0xb6>
 8007352:	f108 0801 	add.w	r8, r8, #1
 8007356:	e7ec      	b.n	8007332 <_printf_float+0x33a>
 8007358:	4642      	mov	r2, r8
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	d1c2      	bne.n	80072ea <_printf_float+0x2f2>
 8007364:	e6a3      	b.n	80070ae <_printf_float+0xb6>
 8007366:	2301      	movs	r3, #1
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	9206      	str	r2, [sp, #24]
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f ae9c 	beq.w	80070ae <_printf_float+0xb6>
 8007376:	9a06      	ldr	r2, [sp, #24]
 8007378:	f10b 0b01 	add.w	fp, fp, #1
 800737c:	e7bb      	b.n	80072f6 <_printf_float+0x2fe>
 800737e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	d1c0      	bne.n	800730e <_printf_float+0x316>
 800738c:	e68f      	b.n	80070ae <_printf_float+0xb6>
 800738e:	9a06      	ldr	r2, [sp, #24]
 8007390:	464b      	mov	r3, r9
 8007392:	4442      	add	r2, r8
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	d1c3      	bne.n	8007326 <_printf_float+0x32e>
 800739e:	e686      	b.n	80070ae <_printf_float+0xb6>
 80073a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073a4:	f1ba 0f01 	cmp.w	sl, #1
 80073a8:	dc01      	bgt.n	80073ae <_printf_float+0x3b6>
 80073aa:	07db      	lsls	r3, r3, #31
 80073ac:	d536      	bpl.n	800741c <_printf_float+0x424>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4642      	mov	r2, r8
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b8      	blx	r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	f43f ae78 	beq.w	80070ae <_printf_float+0xb6>
 80073be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	f43f ae70 	beq.w	80070ae <_printf_float+0xb6>
 80073ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073d2:	2200      	movs	r2, #0
 80073d4:	2300      	movs	r3, #0
 80073d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073da:	f7f9 fb9d 	bl	8000b18 <__aeabi_dcmpeq>
 80073de:	b9c0      	cbnz	r0, 8007412 <_printf_float+0x41a>
 80073e0:	4653      	mov	r3, sl
 80073e2:	f108 0201 	add.w	r2, r8, #1
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d10c      	bne.n	800740a <_printf_float+0x412>
 80073f0:	e65d      	b.n	80070ae <_printf_float+0xb6>
 80073f2:	2301      	movs	r3, #1
 80073f4:	465a      	mov	r2, fp
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f ae56 	beq.w	80070ae <_printf_float+0xb6>
 8007402:	f108 0801 	add.w	r8, r8, #1
 8007406:	45d0      	cmp	r8, sl
 8007408:	dbf3      	blt.n	80073f2 <_printf_float+0x3fa>
 800740a:	464b      	mov	r3, r9
 800740c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007410:	e6df      	b.n	80071d2 <_printf_float+0x1da>
 8007412:	f04f 0800 	mov.w	r8, #0
 8007416:	f104 0b1a 	add.w	fp, r4, #26
 800741a:	e7f4      	b.n	8007406 <_printf_float+0x40e>
 800741c:	2301      	movs	r3, #1
 800741e:	4642      	mov	r2, r8
 8007420:	e7e1      	b.n	80073e6 <_printf_float+0x3ee>
 8007422:	2301      	movs	r3, #1
 8007424:	464a      	mov	r2, r9
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	f43f ae3e 	beq.w	80070ae <_printf_float+0xb6>
 8007432:	f108 0801 	add.w	r8, r8, #1
 8007436:	68e3      	ldr	r3, [r4, #12]
 8007438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800743a:	1a5b      	subs	r3, r3, r1
 800743c:	4543      	cmp	r3, r8
 800743e:	dcf0      	bgt.n	8007422 <_printf_float+0x42a>
 8007440:	e6fc      	b.n	800723c <_printf_float+0x244>
 8007442:	f04f 0800 	mov.w	r8, #0
 8007446:	f104 0919 	add.w	r9, r4, #25
 800744a:	e7f4      	b.n	8007436 <_printf_float+0x43e>

0800744c <_printf_common>:
 800744c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	4616      	mov	r6, r2
 8007452:	4698      	mov	r8, r3
 8007454:	688a      	ldr	r2, [r1, #8]
 8007456:	690b      	ldr	r3, [r1, #16]
 8007458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800745c:	4293      	cmp	r3, r2
 800745e:	bfb8      	it	lt
 8007460:	4613      	movlt	r3, r2
 8007462:	6033      	str	r3, [r6, #0]
 8007464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007468:	4607      	mov	r7, r0
 800746a:	460c      	mov	r4, r1
 800746c:	b10a      	cbz	r2, 8007472 <_printf_common+0x26>
 800746e:	3301      	adds	r3, #1
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	0699      	lsls	r1, r3, #26
 8007476:	bf42      	ittt	mi
 8007478:	6833      	ldrmi	r3, [r6, #0]
 800747a:	3302      	addmi	r3, #2
 800747c:	6033      	strmi	r3, [r6, #0]
 800747e:	6825      	ldr	r5, [r4, #0]
 8007480:	f015 0506 	ands.w	r5, r5, #6
 8007484:	d106      	bne.n	8007494 <_printf_common+0x48>
 8007486:	f104 0a19 	add.w	sl, r4, #25
 800748a:	68e3      	ldr	r3, [r4, #12]
 800748c:	6832      	ldr	r2, [r6, #0]
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	42ab      	cmp	r3, r5
 8007492:	dc26      	bgt.n	80074e2 <_printf_common+0x96>
 8007494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007498:	6822      	ldr	r2, [r4, #0]
 800749a:	3b00      	subs	r3, #0
 800749c:	bf18      	it	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	0692      	lsls	r2, r2, #26
 80074a2:	d42b      	bmi.n	80074fc <_printf_common+0xb0>
 80074a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074a8:	4641      	mov	r1, r8
 80074aa:	4638      	mov	r0, r7
 80074ac:	47c8      	blx	r9
 80074ae:	3001      	adds	r0, #1
 80074b0:	d01e      	beq.n	80074f0 <_printf_common+0xa4>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	6922      	ldr	r2, [r4, #16]
 80074b6:	f003 0306 	and.w	r3, r3, #6
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	bf02      	ittt	eq
 80074be:	68e5      	ldreq	r5, [r4, #12]
 80074c0:	6833      	ldreq	r3, [r6, #0]
 80074c2:	1aed      	subeq	r5, r5, r3
 80074c4:	68a3      	ldr	r3, [r4, #8]
 80074c6:	bf0c      	ite	eq
 80074c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074cc:	2500      	movne	r5, #0
 80074ce:	4293      	cmp	r3, r2
 80074d0:	bfc4      	itt	gt
 80074d2:	1a9b      	subgt	r3, r3, r2
 80074d4:	18ed      	addgt	r5, r5, r3
 80074d6:	2600      	movs	r6, #0
 80074d8:	341a      	adds	r4, #26
 80074da:	42b5      	cmp	r5, r6
 80074dc:	d11a      	bne.n	8007514 <_printf_common+0xc8>
 80074de:	2000      	movs	r0, #0
 80074e0:	e008      	b.n	80074f4 <_printf_common+0xa8>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4652      	mov	r2, sl
 80074e6:	4641      	mov	r1, r8
 80074e8:	4638      	mov	r0, r7
 80074ea:	47c8      	blx	r9
 80074ec:	3001      	adds	r0, #1
 80074ee:	d103      	bne.n	80074f8 <_printf_common+0xac>
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f8:	3501      	adds	r5, #1
 80074fa:	e7c6      	b.n	800748a <_printf_common+0x3e>
 80074fc:	18e1      	adds	r1, r4, r3
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	2030      	movs	r0, #48	@ 0x30
 8007502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007506:	4422      	add	r2, r4
 8007508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800750c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007510:	3302      	adds	r3, #2
 8007512:	e7c7      	b.n	80074a4 <_printf_common+0x58>
 8007514:	2301      	movs	r3, #1
 8007516:	4622      	mov	r2, r4
 8007518:	4641      	mov	r1, r8
 800751a:	4638      	mov	r0, r7
 800751c:	47c8      	blx	r9
 800751e:	3001      	adds	r0, #1
 8007520:	d0e6      	beq.n	80074f0 <_printf_common+0xa4>
 8007522:	3601      	adds	r6, #1
 8007524:	e7d9      	b.n	80074da <_printf_common+0x8e>
	...

08007528 <_printf_i>:
 8007528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	7e0f      	ldrb	r7, [r1, #24]
 800752e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007530:	2f78      	cmp	r7, #120	@ 0x78
 8007532:	4691      	mov	r9, r2
 8007534:	4680      	mov	r8, r0
 8007536:	460c      	mov	r4, r1
 8007538:	469a      	mov	sl, r3
 800753a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800753e:	d807      	bhi.n	8007550 <_printf_i+0x28>
 8007540:	2f62      	cmp	r7, #98	@ 0x62
 8007542:	d80a      	bhi.n	800755a <_printf_i+0x32>
 8007544:	2f00      	cmp	r7, #0
 8007546:	f000 80d2 	beq.w	80076ee <_printf_i+0x1c6>
 800754a:	2f58      	cmp	r7, #88	@ 0x58
 800754c:	f000 80b9 	beq.w	80076c2 <_printf_i+0x19a>
 8007550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007558:	e03a      	b.n	80075d0 <_printf_i+0xa8>
 800755a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800755e:	2b15      	cmp	r3, #21
 8007560:	d8f6      	bhi.n	8007550 <_printf_i+0x28>
 8007562:	a101      	add	r1, pc, #4	@ (adr r1, 8007568 <_printf_i+0x40>)
 8007564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007568:	080075c1 	.word	0x080075c1
 800756c:	080075d5 	.word	0x080075d5
 8007570:	08007551 	.word	0x08007551
 8007574:	08007551 	.word	0x08007551
 8007578:	08007551 	.word	0x08007551
 800757c:	08007551 	.word	0x08007551
 8007580:	080075d5 	.word	0x080075d5
 8007584:	08007551 	.word	0x08007551
 8007588:	08007551 	.word	0x08007551
 800758c:	08007551 	.word	0x08007551
 8007590:	08007551 	.word	0x08007551
 8007594:	080076d5 	.word	0x080076d5
 8007598:	080075ff 	.word	0x080075ff
 800759c:	0800768f 	.word	0x0800768f
 80075a0:	08007551 	.word	0x08007551
 80075a4:	08007551 	.word	0x08007551
 80075a8:	080076f7 	.word	0x080076f7
 80075ac:	08007551 	.word	0x08007551
 80075b0:	080075ff 	.word	0x080075ff
 80075b4:	08007551 	.word	0x08007551
 80075b8:	08007551 	.word	0x08007551
 80075bc:	08007697 	.word	0x08007697
 80075c0:	6833      	ldr	r3, [r6, #0]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6032      	str	r2, [r6, #0]
 80075c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075d0:	2301      	movs	r3, #1
 80075d2:	e09d      	b.n	8007710 <_printf_i+0x1e8>
 80075d4:	6833      	ldr	r3, [r6, #0]
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	1d19      	adds	r1, r3, #4
 80075da:	6031      	str	r1, [r6, #0]
 80075dc:	0606      	lsls	r6, r0, #24
 80075de:	d501      	bpl.n	80075e4 <_printf_i+0xbc>
 80075e0:	681d      	ldr	r5, [r3, #0]
 80075e2:	e003      	b.n	80075ec <_printf_i+0xc4>
 80075e4:	0645      	lsls	r5, r0, #25
 80075e6:	d5fb      	bpl.n	80075e0 <_printf_i+0xb8>
 80075e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	da03      	bge.n	80075f8 <_printf_i+0xd0>
 80075f0:	232d      	movs	r3, #45	@ 0x2d
 80075f2:	426d      	negs	r5, r5
 80075f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075f8:	4859      	ldr	r0, [pc, #356]	@ (8007760 <_printf_i+0x238>)
 80075fa:	230a      	movs	r3, #10
 80075fc:	e011      	b.n	8007622 <_printf_i+0xfa>
 80075fe:	6821      	ldr	r1, [r4, #0]
 8007600:	6833      	ldr	r3, [r6, #0]
 8007602:	0608      	lsls	r0, r1, #24
 8007604:	f853 5b04 	ldr.w	r5, [r3], #4
 8007608:	d402      	bmi.n	8007610 <_printf_i+0xe8>
 800760a:	0649      	lsls	r1, r1, #25
 800760c:	bf48      	it	mi
 800760e:	b2ad      	uxthmi	r5, r5
 8007610:	2f6f      	cmp	r7, #111	@ 0x6f
 8007612:	4853      	ldr	r0, [pc, #332]	@ (8007760 <_printf_i+0x238>)
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	bf14      	ite	ne
 8007618:	230a      	movne	r3, #10
 800761a:	2308      	moveq	r3, #8
 800761c:	2100      	movs	r1, #0
 800761e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007622:	6866      	ldr	r6, [r4, #4]
 8007624:	60a6      	str	r6, [r4, #8]
 8007626:	2e00      	cmp	r6, #0
 8007628:	bfa2      	ittt	ge
 800762a:	6821      	ldrge	r1, [r4, #0]
 800762c:	f021 0104 	bicge.w	r1, r1, #4
 8007630:	6021      	strge	r1, [r4, #0]
 8007632:	b90d      	cbnz	r5, 8007638 <_printf_i+0x110>
 8007634:	2e00      	cmp	r6, #0
 8007636:	d04b      	beq.n	80076d0 <_printf_i+0x1a8>
 8007638:	4616      	mov	r6, r2
 800763a:	fbb5 f1f3 	udiv	r1, r5, r3
 800763e:	fb03 5711 	mls	r7, r3, r1, r5
 8007642:	5dc7      	ldrb	r7, [r0, r7]
 8007644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007648:	462f      	mov	r7, r5
 800764a:	42bb      	cmp	r3, r7
 800764c:	460d      	mov	r5, r1
 800764e:	d9f4      	bls.n	800763a <_printf_i+0x112>
 8007650:	2b08      	cmp	r3, #8
 8007652:	d10b      	bne.n	800766c <_printf_i+0x144>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	07df      	lsls	r7, r3, #31
 8007658:	d508      	bpl.n	800766c <_printf_i+0x144>
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	4299      	cmp	r1, r3
 8007660:	bfde      	ittt	le
 8007662:	2330      	movle	r3, #48	@ 0x30
 8007664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007668:	f106 36ff 	addle.w	r6, r6, #4294967295
 800766c:	1b92      	subs	r2, r2, r6
 800766e:	6122      	str	r2, [r4, #16]
 8007670:	f8cd a000 	str.w	sl, [sp]
 8007674:	464b      	mov	r3, r9
 8007676:	aa03      	add	r2, sp, #12
 8007678:	4621      	mov	r1, r4
 800767a:	4640      	mov	r0, r8
 800767c:	f7ff fee6 	bl	800744c <_printf_common>
 8007680:	3001      	adds	r0, #1
 8007682:	d14a      	bne.n	800771a <_printf_i+0x1f2>
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	b004      	add	sp, #16
 800768a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f043 0320 	orr.w	r3, r3, #32
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	4833      	ldr	r0, [pc, #204]	@ (8007764 <_printf_i+0x23c>)
 8007698:	2778      	movs	r7, #120	@ 0x78
 800769a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	6831      	ldr	r1, [r6, #0]
 80076a2:	061f      	lsls	r7, r3, #24
 80076a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80076a8:	d402      	bmi.n	80076b0 <_printf_i+0x188>
 80076aa:	065f      	lsls	r7, r3, #25
 80076ac:	bf48      	it	mi
 80076ae:	b2ad      	uxthmi	r5, r5
 80076b0:	6031      	str	r1, [r6, #0]
 80076b2:	07d9      	lsls	r1, r3, #31
 80076b4:	bf44      	itt	mi
 80076b6:	f043 0320 	orrmi.w	r3, r3, #32
 80076ba:	6023      	strmi	r3, [r4, #0]
 80076bc:	b11d      	cbz	r5, 80076c6 <_printf_i+0x19e>
 80076be:	2310      	movs	r3, #16
 80076c0:	e7ac      	b.n	800761c <_printf_i+0xf4>
 80076c2:	4827      	ldr	r0, [pc, #156]	@ (8007760 <_printf_i+0x238>)
 80076c4:	e7e9      	b.n	800769a <_printf_i+0x172>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	f023 0320 	bic.w	r3, r3, #32
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	e7f6      	b.n	80076be <_printf_i+0x196>
 80076d0:	4616      	mov	r6, r2
 80076d2:	e7bd      	b.n	8007650 <_printf_i+0x128>
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	6825      	ldr	r5, [r4, #0]
 80076d8:	6961      	ldr	r1, [r4, #20]
 80076da:	1d18      	adds	r0, r3, #4
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	062e      	lsls	r6, r5, #24
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0x1c0>
 80076e4:	6019      	str	r1, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0x1c6>
 80076e8:	0668      	lsls	r0, r5, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0x1bc>
 80076ec:	8019      	strh	r1, [r3, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	4616      	mov	r6, r2
 80076f4:	e7bc      	b.n	8007670 <_printf_i+0x148>
 80076f6:	6833      	ldr	r3, [r6, #0]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	6032      	str	r2, [r6, #0]
 80076fc:	681e      	ldr	r6, [r3, #0]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	2100      	movs	r1, #0
 8007702:	4630      	mov	r0, r6
 8007704:	f7f8 fd8c 	bl	8000220 <memchr>
 8007708:	b108      	cbz	r0, 800770e <_printf_i+0x1e6>
 800770a:	1b80      	subs	r0, r0, r6
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	6863      	ldr	r3, [r4, #4]
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	2300      	movs	r3, #0
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007718:	e7aa      	b.n	8007670 <_printf_i+0x148>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	4632      	mov	r2, r6
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d0ad      	beq.n	8007684 <_printf_i+0x15c>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	d413      	bmi.n	8007756 <_printf_i+0x22e>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	4298      	cmp	r0, r3
 8007734:	bfb8      	it	lt
 8007736:	4618      	movlt	r0, r3
 8007738:	e7a6      	b.n	8007688 <_printf_i+0x160>
 800773a:	2301      	movs	r3, #1
 800773c:	4632      	mov	r2, r6
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d09d      	beq.n	8007684 <_printf_i+0x15c>
 8007748:	3501      	adds	r5, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	42ab      	cmp	r3, r5
 8007752:	dcf2      	bgt.n	800773a <_printf_i+0x212>
 8007754:	e7eb      	b.n	800772e <_printf_i+0x206>
 8007756:	2500      	movs	r5, #0
 8007758:	f104 0619 	add.w	r6, r4, #25
 800775c:	e7f5      	b.n	800774a <_printf_i+0x222>
 800775e:	bf00      	nop
 8007760:	080099c3 	.word	0x080099c3
 8007764:	080099d4 	.word	0x080099d4

08007768 <std>:
 8007768:	2300      	movs	r3, #0
 800776a:	b510      	push	{r4, lr}
 800776c:	4604      	mov	r4, r0
 800776e:	e9c0 3300 	strd	r3, r3, [r0]
 8007772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007776:	6083      	str	r3, [r0, #8]
 8007778:	8181      	strh	r1, [r0, #12]
 800777a:	6643      	str	r3, [r0, #100]	@ 0x64
 800777c:	81c2      	strh	r2, [r0, #14]
 800777e:	6183      	str	r3, [r0, #24]
 8007780:	4619      	mov	r1, r3
 8007782:	2208      	movs	r2, #8
 8007784:	305c      	adds	r0, #92	@ 0x5c
 8007786:	f000 f906 	bl	8007996 <memset>
 800778a:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <std+0x58>)
 800778c:	6263      	str	r3, [r4, #36]	@ 0x24
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <std+0x5c>)
 8007790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007792:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <std+0x60>)
 8007794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <std+0x64>)
 8007798:	6323      	str	r3, [r4, #48]	@ 0x30
 800779a:	4b0d      	ldr	r3, [pc, #52]	@ (80077d0 <std+0x68>)
 800779c:	6224      	str	r4, [r4, #32]
 800779e:	429c      	cmp	r4, r3
 80077a0:	d006      	beq.n	80077b0 <std+0x48>
 80077a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077a6:	4294      	cmp	r4, r2
 80077a8:	d002      	beq.n	80077b0 <std+0x48>
 80077aa:	33d0      	adds	r3, #208	@ 0xd0
 80077ac:	429c      	cmp	r4, r3
 80077ae:	d105      	bne.n	80077bc <std+0x54>
 80077b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f000 b96a 	b.w	8007a90 <__retarget_lock_init_recursive>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	08007911 	.word	0x08007911
 80077c4:	08007933 	.word	0x08007933
 80077c8:	0800796b 	.word	0x0800796b
 80077cc:	0800798f 	.word	0x0800798f
 80077d0:	200005e0 	.word	0x200005e0

080077d4 <stdio_exit_handler>:
 80077d4:	4a02      	ldr	r2, [pc, #8]	@ (80077e0 <stdio_exit_handler+0xc>)
 80077d6:	4903      	ldr	r1, [pc, #12]	@ (80077e4 <stdio_exit_handler+0x10>)
 80077d8:	4803      	ldr	r0, [pc, #12]	@ (80077e8 <stdio_exit_handler+0x14>)
 80077da:	f000 b869 	b.w	80078b0 <_fwalk_sglue>
 80077de:	bf00      	nop
 80077e0:	2000000c 	.word	0x2000000c
 80077e4:	080093d1 	.word	0x080093d1
 80077e8:	2000001c 	.word	0x2000001c

080077ec <cleanup_stdio>:
 80077ec:	6841      	ldr	r1, [r0, #4]
 80077ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <cleanup_stdio+0x34>)
 80077f0:	4299      	cmp	r1, r3
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	d001      	beq.n	80077fc <cleanup_stdio+0x10>
 80077f8:	f001 fdea 	bl	80093d0 <_fflush_r>
 80077fc:	68a1      	ldr	r1, [r4, #8]
 80077fe:	4b09      	ldr	r3, [pc, #36]	@ (8007824 <cleanup_stdio+0x38>)
 8007800:	4299      	cmp	r1, r3
 8007802:	d002      	beq.n	800780a <cleanup_stdio+0x1e>
 8007804:	4620      	mov	r0, r4
 8007806:	f001 fde3 	bl	80093d0 <_fflush_r>
 800780a:	68e1      	ldr	r1, [r4, #12]
 800780c:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <cleanup_stdio+0x3c>)
 800780e:	4299      	cmp	r1, r3
 8007810:	d004      	beq.n	800781c <cleanup_stdio+0x30>
 8007812:	4620      	mov	r0, r4
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007818:	f001 bdda 	b.w	80093d0 <_fflush_r>
 800781c:	bd10      	pop	{r4, pc}
 800781e:	bf00      	nop
 8007820:	200005e0 	.word	0x200005e0
 8007824:	20000648 	.word	0x20000648
 8007828:	200006b0 	.word	0x200006b0

0800782c <global_stdio_init.part.0>:
 800782c:	b510      	push	{r4, lr}
 800782e:	4b0b      	ldr	r3, [pc, #44]	@ (800785c <global_stdio_init.part.0+0x30>)
 8007830:	4c0b      	ldr	r4, [pc, #44]	@ (8007860 <global_stdio_init.part.0+0x34>)
 8007832:	4a0c      	ldr	r2, [pc, #48]	@ (8007864 <global_stdio_init.part.0+0x38>)
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	4620      	mov	r0, r4
 8007838:	2200      	movs	r2, #0
 800783a:	2104      	movs	r1, #4
 800783c:	f7ff ff94 	bl	8007768 <std>
 8007840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007844:	2201      	movs	r2, #1
 8007846:	2109      	movs	r1, #9
 8007848:	f7ff ff8e 	bl	8007768 <std>
 800784c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007850:	2202      	movs	r2, #2
 8007852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007856:	2112      	movs	r1, #18
 8007858:	f7ff bf86 	b.w	8007768 <std>
 800785c:	20000718 	.word	0x20000718
 8007860:	200005e0 	.word	0x200005e0
 8007864:	080077d5 	.word	0x080077d5

08007868 <__sfp_lock_acquire>:
 8007868:	4801      	ldr	r0, [pc, #4]	@ (8007870 <__sfp_lock_acquire+0x8>)
 800786a:	f000 b912 	b.w	8007a92 <__retarget_lock_acquire_recursive>
 800786e:	bf00      	nop
 8007870:	20000721 	.word	0x20000721

08007874 <__sfp_lock_release>:
 8007874:	4801      	ldr	r0, [pc, #4]	@ (800787c <__sfp_lock_release+0x8>)
 8007876:	f000 b90d 	b.w	8007a94 <__retarget_lock_release_recursive>
 800787a:	bf00      	nop
 800787c:	20000721 	.word	0x20000721

08007880 <__sinit>:
 8007880:	b510      	push	{r4, lr}
 8007882:	4604      	mov	r4, r0
 8007884:	f7ff fff0 	bl	8007868 <__sfp_lock_acquire>
 8007888:	6a23      	ldr	r3, [r4, #32]
 800788a:	b11b      	cbz	r3, 8007894 <__sinit+0x14>
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007890:	f7ff bff0 	b.w	8007874 <__sfp_lock_release>
 8007894:	4b04      	ldr	r3, [pc, #16]	@ (80078a8 <__sinit+0x28>)
 8007896:	6223      	str	r3, [r4, #32]
 8007898:	4b04      	ldr	r3, [pc, #16]	@ (80078ac <__sinit+0x2c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f5      	bne.n	800788c <__sinit+0xc>
 80078a0:	f7ff ffc4 	bl	800782c <global_stdio_init.part.0>
 80078a4:	e7f2      	b.n	800788c <__sinit+0xc>
 80078a6:	bf00      	nop
 80078a8:	080077ed 	.word	0x080077ed
 80078ac:	20000718 	.word	0x20000718

080078b0 <_fwalk_sglue>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	4607      	mov	r7, r0
 80078b6:	4688      	mov	r8, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	2600      	movs	r6, #0
 80078bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078c0:	f1b9 0901 	subs.w	r9, r9, #1
 80078c4:	d505      	bpl.n	80078d2 <_fwalk_sglue+0x22>
 80078c6:	6824      	ldr	r4, [r4, #0]
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	d1f7      	bne.n	80078bc <_fwalk_sglue+0xc>
 80078cc:	4630      	mov	r0, r6
 80078ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d907      	bls.n	80078e8 <_fwalk_sglue+0x38>
 80078d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078dc:	3301      	adds	r3, #1
 80078de:	d003      	beq.n	80078e8 <_fwalk_sglue+0x38>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4638      	mov	r0, r7
 80078e4:	47c0      	blx	r8
 80078e6:	4306      	orrs	r6, r0
 80078e8:	3568      	adds	r5, #104	@ 0x68
 80078ea:	e7e9      	b.n	80078c0 <_fwalk_sglue+0x10>

080078ec <iprintf>:
 80078ec:	b40f      	push	{r0, r1, r2, r3}
 80078ee:	b507      	push	{r0, r1, r2, lr}
 80078f0:	4906      	ldr	r1, [pc, #24]	@ (800790c <iprintf+0x20>)
 80078f2:	ab04      	add	r3, sp, #16
 80078f4:	6808      	ldr	r0, [r1, #0]
 80078f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078fa:	6881      	ldr	r1, [r0, #8]
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	f001 fbcb 	bl	8009098 <_vfiprintf_r>
 8007902:	b003      	add	sp, #12
 8007904:	f85d eb04 	ldr.w	lr, [sp], #4
 8007908:	b004      	add	sp, #16
 800790a:	4770      	bx	lr
 800790c:	20000018 	.word	0x20000018

08007910 <__sread>:
 8007910:	b510      	push	{r4, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	f000 f86c 	bl	80079f4 <_read_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	bfab      	itete	ge
 8007920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007922:	89a3      	ldrhlt	r3, [r4, #12]
 8007924:	181b      	addge	r3, r3, r0
 8007926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800792a:	bfac      	ite	ge
 800792c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800792e:	81a3      	strhlt	r3, [r4, #12]
 8007930:	bd10      	pop	{r4, pc}

08007932 <__swrite>:
 8007932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	461f      	mov	r7, r3
 8007938:	898b      	ldrh	r3, [r1, #12]
 800793a:	05db      	lsls	r3, r3, #23
 800793c:	4605      	mov	r5, r0
 800793e:	460c      	mov	r4, r1
 8007940:	4616      	mov	r6, r2
 8007942:	d505      	bpl.n	8007950 <__swrite+0x1e>
 8007944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007948:	2302      	movs	r3, #2
 800794a:	2200      	movs	r2, #0
 800794c:	f000 f840 	bl	80079d0 <_lseek_r>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007956:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	4632      	mov	r2, r6
 800795e:	463b      	mov	r3, r7
 8007960:	4628      	mov	r0, r5
 8007962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	f000 b857 	b.w	8007a18 <_write_r>

0800796a <__sseek>:
 800796a:	b510      	push	{r4, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007972:	f000 f82d 	bl	80079d0 <_lseek_r>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	bf15      	itete	ne
 800797c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800797e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007986:	81a3      	strheq	r3, [r4, #12]
 8007988:	bf18      	it	ne
 800798a:	81a3      	strhne	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__sclose>:
 800798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007992:	f000 b80d 	b.w	80079b0 <_close_r>

08007996 <memset>:
 8007996:	4402      	add	r2, r0
 8007998:	4603      	mov	r3, r0
 800799a:	4293      	cmp	r3, r2
 800799c:	d100      	bne.n	80079a0 <memset+0xa>
 800799e:	4770      	bx	lr
 80079a0:	f803 1b01 	strb.w	r1, [r3], #1
 80079a4:	e7f9      	b.n	800799a <memset+0x4>
	...

080079a8 <_localeconv_r>:
 80079a8:	4800      	ldr	r0, [pc, #0]	@ (80079ac <_localeconv_r+0x4>)
 80079aa:	4770      	bx	lr
 80079ac:	20000158 	.word	0x20000158

080079b0 <_close_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d06      	ldr	r5, [pc, #24]	@ (80079cc <_close_r+0x1c>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	f7fa f9c2 	bl	8001d44 <_close>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_close_r+0x1a>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_close_r+0x1a>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	2000071c 	.word	0x2000071c

080079d0 <_lseek_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	@ (80079f0 <_lseek_r+0x20>)
 80079d4:	4604      	mov	r4, r0
 80079d6:	4608      	mov	r0, r1
 80079d8:	4611      	mov	r1, r2
 80079da:	2200      	movs	r2, #0
 80079dc:	602a      	str	r2, [r5, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7fa f9d7 	bl	8001d92 <_lseek>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_lseek_r+0x1e>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_lseek_r+0x1e>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	2000071c 	.word	0x2000071c

080079f4 <_read_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d07      	ldr	r5, [pc, #28]	@ (8007a14 <_read_r+0x20>)
 80079f8:	4604      	mov	r4, r0
 80079fa:	4608      	mov	r0, r1
 80079fc:	4611      	mov	r1, r2
 80079fe:	2200      	movs	r2, #0
 8007a00:	602a      	str	r2, [r5, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f7fa f965 	bl	8001cd2 <_read>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_read_r+0x1e>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_read_r+0x1e>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	2000071c 	.word	0x2000071c

08007a18 <_write_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d07      	ldr	r5, [pc, #28]	@ (8007a38 <_write_r+0x20>)
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	4608      	mov	r0, r1
 8007a20:	4611      	mov	r1, r2
 8007a22:	2200      	movs	r2, #0
 8007a24:	602a      	str	r2, [r5, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f7fa f970 	bl	8001d0c <_write>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_write_r+0x1e>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_write_r+0x1e>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	2000071c 	.word	0x2000071c

08007a3c <__errno>:
 8007a3c:	4b01      	ldr	r3, [pc, #4]	@ (8007a44 <__errno+0x8>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20000018 	.word	0x20000018

08007a48 <__libc_init_array>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a80 <__libc_init_array+0x38>)
 8007a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8007a84 <__libc_init_array+0x3c>)
 8007a4e:	1b64      	subs	r4, r4, r5
 8007a50:	10a4      	asrs	r4, r4, #2
 8007a52:	2600      	movs	r6, #0
 8007a54:	42a6      	cmp	r6, r4
 8007a56:	d109      	bne.n	8007a6c <__libc_init_array+0x24>
 8007a58:	4d0b      	ldr	r5, [pc, #44]	@ (8007a88 <__libc_init_array+0x40>)
 8007a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a8c <__libc_init_array+0x44>)
 8007a5c:	f001 fec6 	bl	80097ec <_init>
 8007a60:	1b64      	subs	r4, r4, r5
 8007a62:	10a4      	asrs	r4, r4, #2
 8007a64:	2600      	movs	r6, #0
 8007a66:	42a6      	cmp	r6, r4
 8007a68:	d105      	bne.n	8007a76 <__libc_init_array+0x2e>
 8007a6a:	bd70      	pop	{r4, r5, r6, pc}
 8007a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a70:	4798      	blx	r3
 8007a72:	3601      	adds	r6, #1
 8007a74:	e7ee      	b.n	8007a54 <__libc_init_array+0xc>
 8007a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7a:	4798      	blx	r3
 8007a7c:	3601      	adds	r6, #1
 8007a7e:	e7f2      	b.n	8007a66 <__libc_init_array+0x1e>
 8007a80:	08009c28 	.word	0x08009c28
 8007a84:	08009c28 	.word	0x08009c28
 8007a88:	08009c28 	.word	0x08009c28
 8007a8c:	08009c2c 	.word	0x08009c2c

08007a90 <__retarget_lock_init_recursive>:
 8007a90:	4770      	bx	lr

08007a92 <__retarget_lock_acquire_recursive>:
 8007a92:	4770      	bx	lr

08007a94 <__retarget_lock_release_recursive>:
 8007a94:	4770      	bx	lr

08007a96 <strcpy>:
 8007a96:	4603      	mov	r3, r0
 8007a98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a9c:	f803 2b01 	strb.w	r2, [r3], #1
 8007aa0:	2a00      	cmp	r2, #0
 8007aa2:	d1f9      	bne.n	8007a98 <strcpy+0x2>
 8007aa4:	4770      	bx	lr

08007aa6 <quorem>:
 8007aa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	6903      	ldr	r3, [r0, #16]
 8007aac:	690c      	ldr	r4, [r1, #16]
 8007aae:	42a3      	cmp	r3, r4
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	db7e      	blt.n	8007bb2 <quorem+0x10c>
 8007ab4:	3c01      	subs	r4, #1
 8007ab6:	f101 0814 	add.w	r8, r1, #20
 8007aba:	00a3      	lsls	r3, r4, #2
 8007abc:	f100 0514 	add.w	r5, r0, #20
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ad8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007adc:	d32e      	bcc.n	8007b3c <quorem+0x96>
 8007ade:	f04f 0a00 	mov.w	sl, #0
 8007ae2:	46c4      	mov	ip, r8
 8007ae4:	46ae      	mov	lr, r5
 8007ae6:	46d3      	mov	fp, sl
 8007ae8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007aec:	b298      	uxth	r0, r3
 8007aee:	fb06 a000 	mla	r0, r6, r0, sl
 8007af2:	0c02      	lsrs	r2, r0, #16
 8007af4:	0c1b      	lsrs	r3, r3, #16
 8007af6:	fb06 2303 	mla	r3, r6, r3, r2
 8007afa:	f8de 2000 	ldr.w	r2, [lr]
 8007afe:	b280      	uxth	r0, r0
 8007b00:	b292      	uxth	r2, r2
 8007b02:	1a12      	subs	r2, r2, r0
 8007b04:	445a      	add	r2, fp
 8007b06:	f8de 0000 	ldr.w	r0, [lr]
 8007b0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b18:	b292      	uxth	r2, r2
 8007b1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b1e:	45e1      	cmp	r9, ip
 8007b20:	f84e 2b04 	str.w	r2, [lr], #4
 8007b24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b28:	d2de      	bcs.n	8007ae8 <quorem+0x42>
 8007b2a:	9b00      	ldr	r3, [sp, #0]
 8007b2c:	58eb      	ldr	r3, [r5, r3]
 8007b2e:	b92b      	cbnz	r3, 8007b3c <quorem+0x96>
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	3b04      	subs	r3, #4
 8007b34:	429d      	cmp	r5, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	d32f      	bcc.n	8007b9a <quorem+0xf4>
 8007b3a:	613c      	str	r4, [r7, #16]
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f001 f979 	bl	8008e34 <__mcmp>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	db25      	blt.n	8007b92 <quorem+0xec>
 8007b46:	4629      	mov	r1, r5
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b4e:	f8d1 c000 	ldr.w	ip, [r1]
 8007b52:	fa1f fe82 	uxth.w	lr, r2
 8007b56:	fa1f f38c 	uxth.w	r3, ip
 8007b5a:	eba3 030e 	sub.w	r3, r3, lr
 8007b5e:	4403      	add	r3, r0
 8007b60:	0c12      	lsrs	r2, r2, #16
 8007b62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b70:	45c1      	cmp	r9, r8
 8007b72:	f841 3b04 	str.w	r3, [r1], #4
 8007b76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b7a:	d2e6      	bcs.n	8007b4a <quorem+0xa4>
 8007b7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b84:	b922      	cbnz	r2, 8007b90 <quorem+0xea>
 8007b86:	3b04      	subs	r3, #4
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	d30b      	bcc.n	8007ba6 <quorem+0x100>
 8007b8e:	613c      	str	r4, [r7, #16]
 8007b90:	3601      	adds	r6, #1
 8007b92:	4630      	mov	r0, r6
 8007b94:	b003      	add	sp, #12
 8007b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	d1cb      	bne.n	8007b3a <quorem+0x94>
 8007ba2:	3c01      	subs	r4, #1
 8007ba4:	e7c6      	b.n	8007b34 <quorem+0x8e>
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	3b04      	subs	r3, #4
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d1ef      	bne.n	8007b8e <quorem+0xe8>
 8007bae:	3c01      	subs	r4, #1
 8007bb0:	e7ea      	b.n	8007b88 <quorem+0xe2>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e7ee      	b.n	8007b94 <quorem+0xee>
	...

08007bb8 <_dtoa_r>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	69c7      	ldr	r7, [r0, #28]
 8007bbe:	b099      	sub	sp, #100	@ 0x64
 8007bc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007bc4:	ec55 4b10 	vmov	r4, r5, d0
 8007bc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007bca:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bcc:	4683      	mov	fp, r0
 8007bce:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bd2:	b97f      	cbnz	r7, 8007bf4 <_dtoa_r+0x3c>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f000 fdfd 	bl	80087d4 <malloc>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007be0:	b920      	cbnz	r0, 8007bec <_dtoa_r+0x34>
 8007be2:	4ba7      	ldr	r3, [pc, #668]	@ (8007e80 <_dtoa_r+0x2c8>)
 8007be4:	21ef      	movs	r1, #239	@ 0xef
 8007be6:	48a7      	ldr	r0, [pc, #668]	@ (8007e84 <_dtoa_r+0x2cc>)
 8007be8:	f001 fccc 	bl	8009584 <__assert_func>
 8007bec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bf0:	6007      	str	r7, [r0, #0]
 8007bf2:	60c7      	str	r7, [r0, #12]
 8007bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	b159      	cbz	r1, 8007c14 <_dtoa_r+0x5c>
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	604a      	str	r2, [r1, #4]
 8007c00:	2301      	movs	r3, #1
 8007c02:	4093      	lsls	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]
 8007c06:	4658      	mov	r0, fp
 8007c08:	f000 feda 	bl	80089c0 <_Bfree>
 8007c0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	1e2b      	subs	r3, r5, #0
 8007c16:	bfb9      	ittee	lt
 8007c18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c1c:	9303      	strlt	r3, [sp, #12]
 8007c1e:	2300      	movge	r3, #0
 8007c20:	6033      	strge	r3, [r6, #0]
 8007c22:	9f03      	ldr	r7, [sp, #12]
 8007c24:	4b98      	ldr	r3, [pc, #608]	@ (8007e88 <_dtoa_r+0x2d0>)
 8007c26:	bfbc      	itt	lt
 8007c28:	2201      	movlt	r2, #1
 8007c2a:	6032      	strlt	r2, [r6, #0]
 8007c2c:	43bb      	bics	r3, r7
 8007c2e:	d112      	bne.n	8007c56 <_dtoa_r+0x9e>
 8007c30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c3c:	4323      	orrs	r3, r4
 8007c3e:	f000 854d 	beq.w	80086dc <_dtoa_r+0xb24>
 8007c42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e9c <_dtoa_r+0x2e4>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 854f 	beq.w	80086ec <_dtoa_r+0xb34>
 8007c4e:	f10a 0303 	add.w	r3, sl, #3
 8007c52:	f000 bd49 	b.w	80086e8 <_dtoa_r+0xb30>
 8007c56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	ec51 0b17 	vmov	r0, r1, d7
 8007c60:	2300      	movs	r3, #0
 8007c62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c66:	f7f8 ff57 	bl	8000b18 <__aeabi_dcmpeq>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	b158      	cbz	r0, 8007c86 <_dtoa_r+0xce>
 8007c6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c70:	2301      	movs	r3, #1
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c76:	b113      	cbz	r3, 8007c7e <_dtoa_r+0xc6>
 8007c78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c7a:	4b84      	ldr	r3, [pc, #528]	@ (8007e8c <_dtoa_r+0x2d4>)
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ea0 <_dtoa_r+0x2e8>
 8007c82:	f000 bd33 	b.w	80086ec <_dtoa_r+0xb34>
 8007c86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c8a:	aa16      	add	r2, sp, #88	@ 0x58
 8007c8c:	a917      	add	r1, sp, #92	@ 0x5c
 8007c8e:	4658      	mov	r0, fp
 8007c90:	f001 f980 	bl	8008f94 <__d2b>
 8007c94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c98:	4681      	mov	r9, r0
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	d077      	beq.n	8007d8e <_dtoa_r+0x1d6>
 8007c9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ca0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007cb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007cb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007cb8:	4619      	mov	r1, r3
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4b74      	ldr	r3, [pc, #464]	@ (8007e90 <_dtoa_r+0x2d8>)
 8007cbe:	f7f8 fb0b 	bl	80002d8 <__aeabi_dsub>
 8007cc2:	a369      	add	r3, pc, #420	@ (adr r3, 8007e68 <_dtoa_r+0x2b0>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fcbe 	bl	8000648 <__aeabi_dmul>
 8007ccc:	a368      	add	r3, pc, #416	@ (adr r3, 8007e70 <_dtoa_r+0x2b8>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 fb03 	bl	80002dc <__adddf3>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4630      	mov	r0, r6
 8007cda:	460d      	mov	r5, r1
 8007cdc:	f7f8 fc4a 	bl	8000574 <__aeabi_i2d>
 8007ce0:	a365      	add	r3, pc, #404	@ (adr r3, 8007e78 <_dtoa_r+0x2c0>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 fcaf 	bl	8000648 <__aeabi_dmul>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 faf3 	bl	80002dc <__adddf3>
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	f7f8 ff55 	bl	8000ba8 <__aeabi_d2iz>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4607      	mov	r7, r0
 8007d02:	2300      	movs	r3, #0
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 ff10 	bl	8000b2c <__aeabi_dcmplt>
 8007d0c:	b140      	cbz	r0, 8007d20 <_dtoa_r+0x168>
 8007d0e:	4638      	mov	r0, r7
 8007d10:	f7f8 fc30 	bl	8000574 <__aeabi_i2d>
 8007d14:	4622      	mov	r2, r4
 8007d16:	462b      	mov	r3, r5
 8007d18:	f7f8 fefe 	bl	8000b18 <__aeabi_dcmpeq>
 8007d1c:	b900      	cbnz	r0, 8007d20 <_dtoa_r+0x168>
 8007d1e:	3f01      	subs	r7, #1
 8007d20:	2f16      	cmp	r7, #22
 8007d22:	d851      	bhi.n	8007dc8 <_dtoa_r+0x210>
 8007d24:	4b5b      	ldr	r3, [pc, #364]	@ (8007e94 <_dtoa_r+0x2dc>)
 8007d26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d32:	f7f8 fefb 	bl	8000b2c <__aeabi_dcmplt>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d048      	beq.n	8007dcc <_dtoa_r+0x214>
 8007d3a:	3f01      	subs	r7, #1
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d42:	1b9b      	subs	r3, r3, r6
 8007d44:	1e5a      	subs	r2, r3, #1
 8007d46:	bf44      	itt	mi
 8007d48:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d4c:	2300      	movmi	r3, #0
 8007d4e:	9208      	str	r2, [sp, #32]
 8007d50:	bf54      	ite	pl
 8007d52:	f04f 0800 	movpl.w	r8, #0
 8007d56:	9308      	strmi	r3, [sp, #32]
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	db39      	blt.n	8007dd0 <_dtoa_r+0x218>
 8007d5c:	9b08      	ldr	r3, [sp, #32]
 8007d5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d60:	443b      	add	r3, r7
 8007d62:	9308      	str	r3, [sp, #32]
 8007d64:	2300      	movs	r3, #0
 8007d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d864      	bhi.n	8007e38 <_dtoa_r+0x280>
 8007d6e:	2b05      	cmp	r3, #5
 8007d70:	bfc4      	itt	gt
 8007d72:	3b04      	subgt	r3, #4
 8007d74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d78:	f1a3 0302 	sub.w	r3, r3, #2
 8007d7c:	bfcc      	ite	gt
 8007d7e:	2400      	movgt	r4, #0
 8007d80:	2401      	movle	r4, #1
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d863      	bhi.n	8007e4e <_dtoa_r+0x296>
 8007d86:	e8df f003 	tbb	[pc, r3]
 8007d8a:	372a      	.short	0x372a
 8007d8c:	5535      	.short	0x5535
 8007d8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d92:	441e      	add	r6, r3
 8007d94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	bfc1      	itttt	gt
 8007d9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007da0:	409f      	lslgt	r7, r3
 8007da2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007da6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007daa:	bfd6      	itet	le
 8007dac:	f1c3 0320 	rsble	r3, r3, #32
 8007db0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007db4:	fa04 f003 	lslle.w	r0, r4, r3
 8007db8:	f7f8 fbcc 	bl	8000554 <__aeabi_ui2d>
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007dc2:	3e01      	subs	r6, #1
 8007dc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007dc6:	e777      	b.n	8007cb8 <_dtoa_r+0x100>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e7b8      	b.n	8007d3e <_dtoa_r+0x186>
 8007dcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007dce:	e7b7      	b.n	8007d40 <_dtoa_r+0x188>
 8007dd0:	427b      	negs	r3, r7
 8007dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	eba8 0807 	sub.w	r8, r8, r7
 8007dda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ddc:	e7c4      	b.n	8007d68 <_dtoa_r+0x1b0>
 8007dde:	2300      	movs	r3, #0
 8007de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc35      	bgt.n	8007e54 <_dtoa_r+0x29c>
 8007de8:	2301      	movs	r3, #1
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	9307      	str	r3, [sp, #28]
 8007dee:	461a      	mov	r2, r3
 8007df0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007df2:	e00b      	b.n	8007e0c <_dtoa_r+0x254>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7f3      	b.n	8007de0 <_dtoa_r+0x228>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	9307      	str	r3, [sp, #28]
 8007e08:	bfb8      	it	lt
 8007e0a:	2301      	movlt	r3, #1
 8007e0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e10:	2100      	movs	r1, #0
 8007e12:	2204      	movs	r2, #4
 8007e14:	f102 0514 	add.w	r5, r2, #20
 8007e18:	429d      	cmp	r5, r3
 8007e1a:	d91f      	bls.n	8007e5c <_dtoa_r+0x2a4>
 8007e1c:	6041      	str	r1, [r0, #4]
 8007e1e:	4658      	mov	r0, fp
 8007e20:	f000 fd8e 	bl	8008940 <_Balloc>
 8007e24:	4682      	mov	sl, r0
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d13c      	bne.n	8007ea4 <_dtoa_r+0x2ec>
 8007e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007e98 <_dtoa_r+0x2e0>)
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e32:	e6d8      	b.n	8007be6 <_dtoa_r+0x2e>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e7e0      	b.n	8007dfa <_dtoa_r+0x242>
 8007e38:	2401      	movs	r4, #1
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	9307      	str	r3, [sp, #28]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2312      	movs	r3, #18
 8007e4c:	e7d0      	b.n	8007df0 <_dtoa_r+0x238>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e52:	e7f5      	b.n	8007e40 <_dtoa_r+0x288>
 8007e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	e7d7      	b.n	8007e0c <_dtoa_r+0x254>
 8007e5c:	3101      	adds	r1, #1
 8007e5e:	0052      	lsls	r2, r2, #1
 8007e60:	e7d8      	b.n	8007e14 <_dtoa_r+0x25c>
 8007e62:	bf00      	nop
 8007e64:	f3af 8000 	nop.w
 8007e68:	636f4361 	.word	0x636f4361
 8007e6c:	3fd287a7 	.word	0x3fd287a7
 8007e70:	8b60c8b3 	.word	0x8b60c8b3
 8007e74:	3fc68a28 	.word	0x3fc68a28
 8007e78:	509f79fb 	.word	0x509f79fb
 8007e7c:	3fd34413 	.word	0x3fd34413
 8007e80:	080099f2 	.word	0x080099f2
 8007e84:	08009a09 	.word	0x08009a09
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	080099c2 	.word	0x080099c2
 8007e90:	3ff80000 	.word	0x3ff80000
 8007e94:	08009b00 	.word	0x08009b00
 8007e98:	08009a61 	.word	0x08009a61
 8007e9c:	080099ee 	.word	0x080099ee
 8007ea0:	080099c1 	.word	0x080099c1
 8007ea4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ea8:	6018      	str	r0, [r3, #0]
 8007eaa:	9b07      	ldr	r3, [sp, #28]
 8007eac:	2b0e      	cmp	r3, #14
 8007eae:	f200 80a4 	bhi.w	8007ffa <_dtoa_r+0x442>
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	f000 80a1 	beq.w	8007ffa <_dtoa_r+0x442>
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	dd33      	ble.n	8007f24 <_dtoa_r+0x36c>
 8007ebc:	4bad      	ldr	r3, [pc, #692]	@ (8008174 <_dtoa_r+0x5bc>)
 8007ebe:	f007 020f 	and.w	r2, r7, #15
 8007ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec6:	ed93 7b00 	vldr	d7, [r3]
 8007eca:	05f8      	lsls	r0, r7, #23
 8007ecc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ed0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ed4:	d516      	bpl.n	8007f04 <_dtoa_r+0x34c>
 8007ed6:	4ba8      	ldr	r3, [pc, #672]	@ (8008178 <_dtoa_r+0x5c0>)
 8007ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007edc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ee0:	f7f8 fcdc 	bl	800089c <__aeabi_ddiv>
 8007ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee8:	f004 040f 	and.w	r4, r4, #15
 8007eec:	2603      	movs	r6, #3
 8007eee:	4da2      	ldr	r5, [pc, #648]	@ (8008178 <_dtoa_r+0x5c0>)
 8007ef0:	b954      	cbnz	r4, 8007f08 <_dtoa_r+0x350>
 8007ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007efa:	f7f8 fccf 	bl	800089c <__aeabi_ddiv>
 8007efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f02:	e028      	b.n	8007f56 <_dtoa_r+0x39e>
 8007f04:	2602      	movs	r6, #2
 8007f06:	e7f2      	b.n	8007eee <_dtoa_r+0x336>
 8007f08:	07e1      	lsls	r1, r4, #31
 8007f0a:	d508      	bpl.n	8007f1e <_dtoa_r+0x366>
 8007f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f14:	f7f8 fb98 	bl	8000648 <__aeabi_dmul>
 8007f18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	1064      	asrs	r4, r4, #1
 8007f20:	3508      	adds	r5, #8
 8007f22:	e7e5      	b.n	8007ef0 <_dtoa_r+0x338>
 8007f24:	f000 80d2 	beq.w	80080cc <_dtoa_r+0x514>
 8007f28:	427c      	negs	r4, r7
 8007f2a:	4b92      	ldr	r3, [pc, #584]	@ (8008174 <_dtoa_r+0x5bc>)
 8007f2c:	4d92      	ldr	r5, [pc, #584]	@ (8008178 <_dtoa_r+0x5c0>)
 8007f2e:	f004 020f 	and.w	r2, r4, #15
 8007f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f3e:	f7f8 fb83 	bl	8000648 <__aeabi_dmul>
 8007f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f46:	1124      	asrs	r4, r4, #4
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2602      	movs	r6, #2
 8007f4c:	2c00      	cmp	r4, #0
 8007f4e:	f040 80b2 	bne.w	80080b6 <_dtoa_r+0x4fe>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1d3      	bne.n	8007efe <_dtoa_r+0x346>
 8007f56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 80b7 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f62:	4b86      	ldr	r3, [pc, #536]	@ (800817c <_dtoa_r+0x5c4>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fddf 	bl	8000b2c <__aeabi_dcmplt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f000 80ae 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 80aa 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f7c:	9b00      	ldr	r3, [sp, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd37      	ble.n	8007ff2 <_dtoa_r+0x43a>
 8007f82:	1e7b      	subs	r3, r7, #1
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	4620      	mov	r0, r4
 8007f88:	4b7d      	ldr	r3, [pc, #500]	@ (8008180 <_dtoa_r+0x5c8>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7f8 fb5b 	bl	8000648 <__aeabi_dmul>
 8007f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f96:	9c00      	ldr	r4, [sp, #0]
 8007f98:	3601      	adds	r6, #1
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7f8 faea 	bl	8000574 <__aeabi_i2d>
 8007fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa4:	f7f8 fb50 	bl	8000648 <__aeabi_dmul>
 8007fa8:	4b76      	ldr	r3, [pc, #472]	@ (8008184 <_dtoa_r+0x5cc>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	f7f8 f996 	bl	80002dc <__adddf3>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	f040 808d 	bne.w	80080d6 <_dtoa_r+0x51e>
 8007fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc0:	4b71      	ldr	r3, [pc, #452]	@ (8008188 <_dtoa_r+0x5d0>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f7f8 f988 	bl	80002d8 <__aeabi_dsub>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4633      	mov	r3, r6
 8007fd4:	f7f8 fdc8 	bl	8000b68 <__aeabi_dcmpgt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f040 828b 	bne.w	80084f4 <_dtoa_r+0x93c>
 8007fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fe8:	f7f8 fda0 	bl	8000b2c <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 8128 	bne.w	8008242 <_dtoa_r+0x68a>
 8007ff2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ff6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ffa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f2c0 815a 	blt.w	80082b6 <_dtoa_r+0x6fe>
 8008002:	2f0e      	cmp	r7, #14
 8008004:	f300 8157 	bgt.w	80082b6 <_dtoa_r+0x6fe>
 8008008:	4b5a      	ldr	r3, [pc, #360]	@ (8008174 <_dtoa_r+0x5bc>)
 800800a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800800e:	ed93 7b00 	vldr	d7, [r3]
 8008012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008014:	2b00      	cmp	r3, #0
 8008016:	ed8d 7b00 	vstr	d7, [sp]
 800801a:	da03      	bge.n	8008024 <_dtoa_r+0x46c>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f340 8101 	ble.w	8008226 <_dtoa_r+0x66e>
 8008024:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008028:	4656      	mov	r6, sl
 800802a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fc33 	bl	800089c <__aeabi_ddiv>
 8008036:	f7f8 fdb7 	bl	8000ba8 <__aeabi_d2iz>
 800803a:	4680      	mov	r8, r0
 800803c:	f7f8 fa9a 	bl	8000574 <__aeabi_i2d>
 8008040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008044:	f7f8 fb00 	bl	8000648 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008054:	f7f8 f940 	bl	80002d8 <__aeabi_dsub>
 8008058:	f806 4b01 	strb.w	r4, [r6], #1
 800805c:	9d07      	ldr	r5, [sp, #28]
 800805e:	eba6 040a 	sub.w	r4, r6, sl
 8008062:	42a5      	cmp	r5, r4
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	f040 8117 	bne.w	800829a <_dtoa_r+0x6e2>
 800806c:	f7f8 f936 	bl	80002dc <__adddf3>
 8008070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	f7f8 fd76 	bl	8000b68 <__aeabi_dcmpgt>
 800807c:	2800      	cmp	r0, #0
 800807e:	f040 80f9 	bne.w	8008274 <_dtoa_r+0x6bc>
 8008082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 fd45 	bl	8000b18 <__aeabi_dcmpeq>
 800808e:	b118      	cbz	r0, 8008098 <_dtoa_r+0x4e0>
 8008090:	f018 0f01 	tst.w	r8, #1
 8008094:	f040 80ee 	bne.w	8008274 <_dtoa_r+0x6bc>
 8008098:	4649      	mov	r1, r9
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fc90 	bl	80089c0 <_Bfree>
 80080a0:	2300      	movs	r3, #0
 80080a2:	7033      	strb	r3, [r6, #0]
 80080a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080a6:	3701      	adds	r7, #1
 80080a8:	601f      	str	r7, [r3, #0]
 80080aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 831d 	beq.w	80086ec <_dtoa_r+0xb34>
 80080b2:	601e      	str	r6, [r3, #0]
 80080b4:	e31a      	b.n	80086ec <_dtoa_r+0xb34>
 80080b6:	07e2      	lsls	r2, r4, #31
 80080b8:	d505      	bpl.n	80080c6 <_dtoa_r+0x50e>
 80080ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080be:	f7f8 fac3 	bl	8000648 <__aeabi_dmul>
 80080c2:	3601      	adds	r6, #1
 80080c4:	2301      	movs	r3, #1
 80080c6:	1064      	asrs	r4, r4, #1
 80080c8:	3508      	adds	r5, #8
 80080ca:	e73f      	b.n	8007f4c <_dtoa_r+0x394>
 80080cc:	2602      	movs	r6, #2
 80080ce:	e742      	b.n	8007f56 <_dtoa_r+0x39e>
 80080d0:	9c07      	ldr	r4, [sp, #28]
 80080d2:	9704      	str	r7, [sp, #16]
 80080d4:	e761      	b.n	8007f9a <_dtoa_r+0x3e2>
 80080d6:	4b27      	ldr	r3, [pc, #156]	@ (8008174 <_dtoa_r+0x5bc>)
 80080d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080e2:	4454      	add	r4, sl
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d053      	beq.n	8008190 <_dtoa_r+0x5d8>
 80080e8:	4928      	ldr	r1, [pc, #160]	@ (800818c <_dtoa_r+0x5d4>)
 80080ea:	2000      	movs	r0, #0
 80080ec:	f7f8 fbd6 	bl	800089c <__aeabi_ddiv>
 80080f0:	4633      	mov	r3, r6
 80080f2:	462a      	mov	r2, r5
 80080f4:	f7f8 f8f0 	bl	80002d8 <__aeabi_dsub>
 80080f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080fc:	4656      	mov	r6, sl
 80080fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008102:	f7f8 fd51 	bl	8000ba8 <__aeabi_d2iz>
 8008106:	4605      	mov	r5, r0
 8008108:	f7f8 fa34 	bl	8000574 <__aeabi_i2d>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008114:	f7f8 f8e0 	bl	80002d8 <__aeabi_dsub>
 8008118:	3530      	adds	r5, #48	@ 0x30
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008122:	f806 5b01 	strb.w	r5, [r6], #1
 8008126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800812a:	f7f8 fcff 	bl	8000b2c <__aeabi_dcmplt>
 800812e:	2800      	cmp	r0, #0
 8008130:	d171      	bne.n	8008216 <_dtoa_r+0x65e>
 8008132:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008136:	4911      	ldr	r1, [pc, #68]	@ (800817c <_dtoa_r+0x5c4>)
 8008138:	2000      	movs	r0, #0
 800813a:	f7f8 f8cd 	bl	80002d8 <__aeabi_dsub>
 800813e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008142:	f7f8 fcf3 	bl	8000b2c <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f040 8095 	bne.w	8008276 <_dtoa_r+0x6be>
 800814c:	42a6      	cmp	r6, r4
 800814e:	f43f af50 	beq.w	8007ff2 <_dtoa_r+0x43a>
 8008152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008156:	4b0a      	ldr	r3, [pc, #40]	@ (8008180 <_dtoa_r+0x5c8>)
 8008158:	2200      	movs	r2, #0
 800815a:	f7f8 fa75 	bl	8000648 <__aeabi_dmul>
 800815e:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <_dtoa_r+0x5c8>)
 8008160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008164:	2200      	movs	r2, #0
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	f7f8 fa6d 	bl	8000648 <__aeabi_dmul>
 800816e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008172:	e7c4      	b.n	80080fe <_dtoa_r+0x546>
 8008174:	08009b00 	.word	0x08009b00
 8008178:	08009ad8 	.word	0x08009ad8
 800817c:	3ff00000 	.word	0x3ff00000
 8008180:	40240000 	.word	0x40240000
 8008184:	401c0000 	.word	0x401c0000
 8008188:	40140000 	.word	0x40140000
 800818c:	3fe00000 	.word	0x3fe00000
 8008190:	4631      	mov	r1, r6
 8008192:	4628      	mov	r0, r5
 8008194:	f7f8 fa58 	bl	8000648 <__aeabi_dmul>
 8008198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800819c:	9415      	str	r4, [sp, #84]	@ 0x54
 800819e:	4656      	mov	r6, sl
 80081a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a4:	f7f8 fd00 	bl	8000ba8 <__aeabi_d2iz>
 80081a8:	4605      	mov	r5, r0
 80081aa:	f7f8 f9e3 	bl	8000574 <__aeabi_i2d>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b6:	f7f8 f88f 	bl	80002d8 <__aeabi_dsub>
 80081ba:	3530      	adds	r5, #48	@ 0x30
 80081bc:	f806 5b01 	strb.w	r5, [r6], #1
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	d124      	bne.n	800821a <_dtoa_r+0x662>
 80081d0:	4bac      	ldr	r3, [pc, #688]	@ (8008484 <_dtoa_r+0x8cc>)
 80081d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081d6:	f7f8 f881 	bl	80002dc <__adddf3>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e2:	f7f8 fcc1 	bl	8000b68 <__aeabi_dcmpgt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d145      	bne.n	8008276 <_dtoa_r+0x6be>
 80081ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081ee:	49a5      	ldr	r1, [pc, #660]	@ (8008484 <_dtoa_r+0x8cc>)
 80081f0:	2000      	movs	r0, #0
 80081f2:	f7f8 f871 	bl	80002d8 <__aeabi_dsub>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fe:	f7f8 fc95 	bl	8000b2c <__aeabi_dcmplt>
 8008202:	2800      	cmp	r0, #0
 8008204:	f43f aef5 	beq.w	8007ff2 <_dtoa_r+0x43a>
 8008208:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800820a:	1e73      	subs	r3, r6, #1
 800820c:	9315      	str	r3, [sp, #84]	@ 0x54
 800820e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008212:	2b30      	cmp	r3, #48	@ 0x30
 8008214:	d0f8      	beq.n	8008208 <_dtoa_r+0x650>
 8008216:	9f04      	ldr	r7, [sp, #16]
 8008218:	e73e      	b.n	8008098 <_dtoa_r+0x4e0>
 800821a:	4b9b      	ldr	r3, [pc, #620]	@ (8008488 <_dtoa_r+0x8d0>)
 800821c:	f7f8 fa14 	bl	8000648 <__aeabi_dmul>
 8008220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008224:	e7bc      	b.n	80081a0 <_dtoa_r+0x5e8>
 8008226:	d10c      	bne.n	8008242 <_dtoa_r+0x68a>
 8008228:	4b98      	ldr	r3, [pc, #608]	@ (800848c <_dtoa_r+0x8d4>)
 800822a:	2200      	movs	r2, #0
 800822c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008230:	f7f8 fa0a 	bl	8000648 <__aeabi_dmul>
 8008234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008238:	f7f8 fc8c 	bl	8000b54 <__aeabi_dcmpge>
 800823c:	2800      	cmp	r0, #0
 800823e:	f000 8157 	beq.w	80084f0 <_dtoa_r+0x938>
 8008242:	2400      	movs	r4, #0
 8008244:	4625      	mov	r5, r4
 8008246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008248:	43db      	mvns	r3, r3
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	4656      	mov	r6, sl
 800824e:	2700      	movs	r7, #0
 8008250:	4621      	mov	r1, r4
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fbb4 	bl	80089c0 <_Bfree>
 8008258:	2d00      	cmp	r5, #0
 800825a:	d0dc      	beq.n	8008216 <_dtoa_r+0x65e>
 800825c:	b12f      	cbz	r7, 800826a <_dtoa_r+0x6b2>
 800825e:	42af      	cmp	r7, r5
 8008260:	d003      	beq.n	800826a <_dtoa_r+0x6b2>
 8008262:	4639      	mov	r1, r7
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fbab 	bl	80089c0 <_Bfree>
 800826a:	4629      	mov	r1, r5
 800826c:	4658      	mov	r0, fp
 800826e:	f000 fba7 	bl	80089c0 <_Bfree>
 8008272:	e7d0      	b.n	8008216 <_dtoa_r+0x65e>
 8008274:	9704      	str	r7, [sp, #16]
 8008276:	4633      	mov	r3, r6
 8008278:	461e      	mov	r6, r3
 800827a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800827e:	2a39      	cmp	r2, #57	@ 0x39
 8008280:	d107      	bne.n	8008292 <_dtoa_r+0x6da>
 8008282:	459a      	cmp	sl, r3
 8008284:	d1f8      	bne.n	8008278 <_dtoa_r+0x6c0>
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	3201      	adds	r2, #1
 800828a:	9204      	str	r2, [sp, #16]
 800828c:	2230      	movs	r2, #48	@ 0x30
 800828e:	f88a 2000 	strb.w	r2, [sl]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	3201      	adds	r2, #1
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	e7bd      	b.n	8008216 <_dtoa_r+0x65e>
 800829a:	4b7b      	ldr	r3, [pc, #492]	@ (8008488 <_dtoa_r+0x8d0>)
 800829c:	2200      	movs	r2, #0
 800829e:	f7f8 f9d3 	bl	8000648 <__aeabi_dmul>
 80082a2:	2200      	movs	r2, #0
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	f7f8 fc35 	bl	8000b18 <__aeabi_dcmpeq>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f aebb 	beq.w	800802a <_dtoa_r+0x472>
 80082b4:	e6f0      	b.n	8008098 <_dtoa_r+0x4e0>
 80082b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	f000 80db 	beq.w	8008474 <_dtoa_r+0x8bc>
 80082be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c0:	2a01      	cmp	r2, #1
 80082c2:	f300 80bf 	bgt.w	8008444 <_dtoa_r+0x88c>
 80082c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80082c8:	2a00      	cmp	r2, #0
 80082ca:	f000 80b7 	beq.w	800843c <_dtoa_r+0x884>
 80082ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082d4:	4646      	mov	r6, r8
 80082d6:	9a08      	ldr	r2, [sp, #32]
 80082d8:	2101      	movs	r1, #1
 80082da:	441a      	add	r2, r3
 80082dc:	4658      	mov	r0, fp
 80082de:	4498      	add	r8, r3
 80082e0:	9208      	str	r2, [sp, #32]
 80082e2:	f000 fc21 	bl	8008b28 <__i2b>
 80082e6:	4605      	mov	r5, r0
 80082e8:	b15e      	cbz	r6, 8008302 <_dtoa_r+0x74a>
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd08      	ble.n	8008302 <_dtoa_r+0x74a>
 80082f0:	42b3      	cmp	r3, r6
 80082f2:	9a08      	ldr	r2, [sp, #32]
 80082f4:	bfa8      	it	ge
 80082f6:	4633      	movge	r3, r6
 80082f8:	eba8 0803 	sub.w	r8, r8, r3
 80082fc:	1af6      	subs	r6, r6, r3
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008304:	b1f3      	cbz	r3, 8008344 <_dtoa_r+0x78c>
 8008306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 80b7 	beq.w	800847c <_dtoa_r+0x8c4>
 800830e:	b18c      	cbz	r4, 8008334 <_dtoa_r+0x77c>
 8008310:	4629      	mov	r1, r5
 8008312:	4622      	mov	r2, r4
 8008314:	4658      	mov	r0, fp
 8008316:	f000 fcc7 	bl	8008ca8 <__pow5mult>
 800831a:	464a      	mov	r2, r9
 800831c:	4601      	mov	r1, r0
 800831e:	4605      	mov	r5, r0
 8008320:	4658      	mov	r0, fp
 8008322:	f000 fc17 	bl	8008b54 <__multiply>
 8008326:	4649      	mov	r1, r9
 8008328:	9004      	str	r0, [sp, #16]
 800832a:	4658      	mov	r0, fp
 800832c:	f000 fb48 	bl	80089c0 <_Bfree>
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	4699      	mov	r9, r3
 8008334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008336:	1b1a      	subs	r2, r3, r4
 8008338:	d004      	beq.n	8008344 <_dtoa_r+0x78c>
 800833a:	4649      	mov	r1, r9
 800833c:	4658      	mov	r0, fp
 800833e:	f000 fcb3 	bl	8008ca8 <__pow5mult>
 8008342:	4681      	mov	r9, r0
 8008344:	2101      	movs	r1, #1
 8008346:	4658      	mov	r0, fp
 8008348:	f000 fbee 	bl	8008b28 <__i2b>
 800834c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800834e:	4604      	mov	r4, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 81cf 	beq.w	80086f4 <_dtoa_r+0xb3c>
 8008356:	461a      	mov	r2, r3
 8008358:	4601      	mov	r1, r0
 800835a:	4658      	mov	r0, fp
 800835c:	f000 fca4 	bl	8008ca8 <__pow5mult>
 8008360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008362:	2b01      	cmp	r3, #1
 8008364:	4604      	mov	r4, r0
 8008366:	f300 8095 	bgt.w	8008494 <_dtoa_r+0x8dc>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 8087 	bne.w	8008480 <_dtoa_r+0x8c8>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 8089 	bne.w	8008490 <_dtoa_r+0x8d8>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008384:	0d1b      	lsrs	r3, r3, #20
 8008386:	051b      	lsls	r3, r3, #20
 8008388:	b12b      	cbz	r3, 8008396 <_dtoa_r+0x7de>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	3301      	adds	r3, #1
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	f108 0801 	add.w	r8, r8, #1
 8008394:	2301      	movs	r3, #1
 8008396:	930a      	str	r3, [sp, #40]	@ 0x28
 8008398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 81b0 	beq.w	8008700 <_dtoa_r+0xb48>
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a6:	6918      	ldr	r0, [r3, #16]
 80083a8:	f000 fb72 	bl	8008a90 <__hi0bits>
 80083ac:	f1c0 0020 	rsb	r0, r0, #32
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	4418      	add	r0, r3
 80083b4:	f010 001f 	ands.w	r0, r0, #31
 80083b8:	d077      	beq.n	80084aa <_dtoa_r+0x8f2>
 80083ba:	f1c0 0320 	rsb	r3, r0, #32
 80083be:	2b04      	cmp	r3, #4
 80083c0:	dd6b      	ble.n	800849a <_dtoa_r+0x8e2>
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	f1c0 001c 	rsb	r0, r0, #28
 80083c8:	4403      	add	r3, r0
 80083ca:	4480      	add	r8, r0
 80083cc:	4406      	add	r6, r0
 80083ce:	9308      	str	r3, [sp, #32]
 80083d0:	f1b8 0f00 	cmp.w	r8, #0
 80083d4:	dd05      	ble.n	80083e2 <_dtoa_r+0x82a>
 80083d6:	4649      	mov	r1, r9
 80083d8:	4642      	mov	r2, r8
 80083da:	4658      	mov	r0, fp
 80083dc:	f000 fcbe 	bl	8008d5c <__lshift>
 80083e0:	4681      	mov	r9, r0
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd05      	ble.n	80083f4 <_dtoa_r+0x83c>
 80083e8:	4621      	mov	r1, r4
 80083ea:	461a      	mov	r2, r3
 80083ec:	4658      	mov	r0, fp
 80083ee:	f000 fcb5 	bl	8008d5c <__lshift>
 80083f2:	4604      	mov	r4, r0
 80083f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d059      	beq.n	80084ae <_dtoa_r+0x8f6>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4648      	mov	r0, r9
 80083fe:	f000 fd19 	bl	8008e34 <__mcmp>
 8008402:	2800      	cmp	r0, #0
 8008404:	da53      	bge.n	80084ae <_dtoa_r+0x8f6>
 8008406:	1e7b      	subs	r3, r7, #1
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	4649      	mov	r1, r9
 800840c:	2300      	movs	r3, #0
 800840e:	220a      	movs	r2, #10
 8008410:	4658      	mov	r0, fp
 8008412:	f000 faf7 	bl	8008a04 <__multadd>
 8008416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008418:	4681      	mov	r9, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 8172 	beq.w	8008704 <_dtoa_r+0xb4c>
 8008420:	2300      	movs	r3, #0
 8008422:	4629      	mov	r1, r5
 8008424:	220a      	movs	r2, #10
 8008426:	4658      	mov	r0, fp
 8008428:	f000 faec 	bl	8008a04 <__multadd>
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	4605      	mov	r5, r0
 8008432:	dc67      	bgt.n	8008504 <_dtoa_r+0x94c>
 8008434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008436:	2b02      	cmp	r3, #2
 8008438:	dc41      	bgt.n	80084be <_dtoa_r+0x906>
 800843a:	e063      	b.n	8008504 <_dtoa_r+0x94c>
 800843c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800843e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008442:	e746      	b.n	80082d2 <_dtoa_r+0x71a>
 8008444:	9b07      	ldr	r3, [sp, #28]
 8008446:	1e5c      	subs	r4, r3, #1
 8008448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800844a:	42a3      	cmp	r3, r4
 800844c:	bfbf      	itttt	lt
 800844e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008450:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008452:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008454:	1ae3      	sublt	r3, r4, r3
 8008456:	bfb4      	ite	lt
 8008458:	18d2      	addlt	r2, r2, r3
 800845a:	1b1c      	subge	r4, r3, r4
 800845c:	9b07      	ldr	r3, [sp, #28]
 800845e:	bfbc      	itt	lt
 8008460:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008462:	2400      	movlt	r4, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	bfb5      	itete	lt
 8008468:	eba8 0603 	sublt.w	r6, r8, r3
 800846c:	9b07      	ldrge	r3, [sp, #28]
 800846e:	2300      	movlt	r3, #0
 8008470:	4646      	movge	r6, r8
 8008472:	e730      	b.n	80082d6 <_dtoa_r+0x71e>
 8008474:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008476:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008478:	4646      	mov	r6, r8
 800847a:	e735      	b.n	80082e8 <_dtoa_r+0x730>
 800847c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800847e:	e75c      	b.n	800833a <_dtoa_r+0x782>
 8008480:	2300      	movs	r3, #0
 8008482:	e788      	b.n	8008396 <_dtoa_r+0x7de>
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	40240000 	.word	0x40240000
 800848c:	40140000 	.word	0x40140000
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	e780      	b.n	8008396 <_dtoa_r+0x7de>
 8008494:	2300      	movs	r3, #0
 8008496:	930a      	str	r3, [sp, #40]	@ 0x28
 8008498:	e782      	b.n	80083a0 <_dtoa_r+0x7e8>
 800849a:	d099      	beq.n	80083d0 <_dtoa_r+0x818>
 800849c:	9a08      	ldr	r2, [sp, #32]
 800849e:	331c      	adds	r3, #28
 80084a0:	441a      	add	r2, r3
 80084a2:	4498      	add	r8, r3
 80084a4:	441e      	add	r6, r3
 80084a6:	9208      	str	r2, [sp, #32]
 80084a8:	e792      	b.n	80083d0 <_dtoa_r+0x818>
 80084aa:	4603      	mov	r3, r0
 80084ac:	e7f6      	b.n	800849c <_dtoa_r+0x8e4>
 80084ae:	9b07      	ldr	r3, [sp, #28]
 80084b0:	9704      	str	r7, [sp, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	dc20      	bgt.n	80084f8 <_dtoa_r+0x940>
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	dd1e      	ble.n	80084fc <_dtoa_r+0x944>
 80084be:	9b00      	ldr	r3, [sp, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f47f aec0 	bne.w	8008246 <_dtoa_r+0x68e>
 80084c6:	4621      	mov	r1, r4
 80084c8:	2205      	movs	r2, #5
 80084ca:	4658      	mov	r0, fp
 80084cc:	f000 fa9a 	bl	8008a04 <__multadd>
 80084d0:	4601      	mov	r1, r0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4648      	mov	r0, r9
 80084d6:	f000 fcad 	bl	8008e34 <__mcmp>
 80084da:	2800      	cmp	r0, #0
 80084dc:	f77f aeb3 	ble.w	8008246 <_dtoa_r+0x68e>
 80084e0:	4656      	mov	r6, sl
 80084e2:	2331      	movs	r3, #49	@ 0x31
 80084e4:	f806 3b01 	strb.w	r3, [r6], #1
 80084e8:	9b04      	ldr	r3, [sp, #16]
 80084ea:	3301      	adds	r3, #1
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	e6ae      	b.n	800824e <_dtoa_r+0x696>
 80084f0:	9c07      	ldr	r4, [sp, #28]
 80084f2:	9704      	str	r7, [sp, #16]
 80084f4:	4625      	mov	r5, r4
 80084f6:	e7f3      	b.n	80084e0 <_dtoa_r+0x928>
 80084f8:	9b07      	ldr	r3, [sp, #28]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8104 	beq.w	800870c <_dtoa_r+0xb54>
 8008504:	2e00      	cmp	r6, #0
 8008506:	dd05      	ble.n	8008514 <_dtoa_r+0x95c>
 8008508:	4629      	mov	r1, r5
 800850a:	4632      	mov	r2, r6
 800850c:	4658      	mov	r0, fp
 800850e:	f000 fc25 	bl	8008d5c <__lshift>
 8008512:	4605      	mov	r5, r0
 8008514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d05a      	beq.n	80085d0 <_dtoa_r+0xa18>
 800851a:	6869      	ldr	r1, [r5, #4]
 800851c:	4658      	mov	r0, fp
 800851e:	f000 fa0f 	bl	8008940 <_Balloc>
 8008522:	4606      	mov	r6, r0
 8008524:	b928      	cbnz	r0, 8008532 <_dtoa_r+0x97a>
 8008526:	4b84      	ldr	r3, [pc, #528]	@ (8008738 <_dtoa_r+0xb80>)
 8008528:	4602      	mov	r2, r0
 800852a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800852e:	f7ff bb5a 	b.w	8007be6 <_dtoa_r+0x2e>
 8008532:	692a      	ldr	r2, [r5, #16]
 8008534:	3202      	adds	r2, #2
 8008536:	0092      	lsls	r2, r2, #2
 8008538:	f105 010c 	add.w	r1, r5, #12
 800853c:	300c      	adds	r0, #12
 800853e:	f001 f813 	bl	8009568 <memcpy>
 8008542:	2201      	movs	r2, #1
 8008544:	4631      	mov	r1, r6
 8008546:	4658      	mov	r0, fp
 8008548:	f000 fc08 	bl	8008d5c <__lshift>
 800854c:	f10a 0301 	add.w	r3, sl, #1
 8008550:	9307      	str	r3, [sp, #28]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	4453      	add	r3, sl
 8008556:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	462f      	mov	r7, r5
 8008560:	930a      	str	r3, [sp, #40]	@ 0x28
 8008562:	4605      	mov	r5, r0
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	4621      	mov	r1, r4
 8008568:	3b01      	subs	r3, #1
 800856a:	4648      	mov	r0, r9
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	f7ff fa9a 	bl	8007aa6 <quorem>
 8008572:	4639      	mov	r1, r7
 8008574:	9002      	str	r0, [sp, #8]
 8008576:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800857a:	4648      	mov	r0, r9
 800857c:	f000 fc5a 	bl	8008e34 <__mcmp>
 8008580:	462a      	mov	r2, r5
 8008582:	9008      	str	r0, [sp, #32]
 8008584:	4621      	mov	r1, r4
 8008586:	4658      	mov	r0, fp
 8008588:	f000 fc70 	bl	8008e6c <__mdiff>
 800858c:	68c2      	ldr	r2, [r0, #12]
 800858e:	4606      	mov	r6, r0
 8008590:	bb02      	cbnz	r2, 80085d4 <_dtoa_r+0xa1c>
 8008592:	4601      	mov	r1, r0
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fc4d 	bl	8008e34 <__mcmp>
 800859a:	4602      	mov	r2, r0
 800859c:	4631      	mov	r1, r6
 800859e:	4658      	mov	r0, fp
 80085a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085a2:	f000 fa0d 	bl	80089c0 <_Bfree>
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085aa:	9e07      	ldr	r6, [sp, #28]
 80085ac:	ea43 0102 	orr.w	r1, r3, r2
 80085b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b2:	4319      	orrs	r1, r3
 80085b4:	d110      	bne.n	80085d8 <_dtoa_r+0xa20>
 80085b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085ba:	d029      	beq.n	8008610 <_dtoa_r+0xa58>
 80085bc:	9b08      	ldr	r3, [sp, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd02      	ble.n	80085c8 <_dtoa_r+0xa10>
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80085c8:	9b00      	ldr	r3, [sp, #0]
 80085ca:	f883 8000 	strb.w	r8, [r3]
 80085ce:	e63f      	b.n	8008250 <_dtoa_r+0x698>
 80085d0:	4628      	mov	r0, r5
 80085d2:	e7bb      	b.n	800854c <_dtoa_r+0x994>
 80085d4:	2201      	movs	r2, #1
 80085d6:	e7e1      	b.n	800859c <_dtoa_r+0x9e4>
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	db04      	blt.n	80085e8 <_dtoa_r+0xa30>
 80085de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085e0:	430b      	orrs	r3, r1
 80085e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085e4:	430b      	orrs	r3, r1
 80085e6:	d120      	bne.n	800862a <_dtoa_r+0xa72>
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	dded      	ble.n	80085c8 <_dtoa_r+0xa10>
 80085ec:	4649      	mov	r1, r9
 80085ee:	2201      	movs	r2, #1
 80085f0:	4658      	mov	r0, fp
 80085f2:	f000 fbb3 	bl	8008d5c <__lshift>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4681      	mov	r9, r0
 80085fa:	f000 fc1b 	bl	8008e34 <__mcmp>
 80085fe:	2800      	cmp	r0, #0
 8008600:	dc03      	bgt.n	800860a <_dtoa_r+0xa52>
 8008602:	d1e1      	bne.n	80085c8 <_dtoa_r+0xa10>
 8008604:	f018 0f01 	tst.w	r8, #1
 8008608:	d0de      	beq.n	80085c8 <_dtoa_r+0xa10>
 800860a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800860e:	d1d8      	bne.n	80085c2 <_dtoa_r+0xa0a>
 8008610:	9a00      	ldr	r2, [sp, #0]
 8008612:	2339      	movs	r3, #57	@ 0x39
 8008614:	7013      	strb	r3, [r2, #0]
 8008616:	4633      	mov	r3, r6
 8008618:	461e      	mov	r6, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008620:	2a39      	cmp	r2, #57	@ 0x39
 8008622:	d052      	beq.n	80086ca <_dtoa_r+0xb12>
 8008624:	3201      	adds	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e612      	b.n	8008250 <_dtoa_r+0x698>
 800862a:	2a00      	cmp	r2, #0
 800862c:	dd07      	ble.n	800863e <_dtoa_r+0xa86>
 800862e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008632:	d0ed      	beq.n	8008610 <_dtoa_r+0xa58>
 8008634:	9a00      	ldr	r2, [sp, #0]
 8008636:	f108 0301 	add.w	r3, r8, #1
 800863a:	7013      	strb	r3, [r2, #0]
 800863c:	e608      	b.n	8008250 <_dtoa_r+0x698>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	9a07      	ldr	r2, [sp, #28]
 8008642:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008648:	4293      	cmp	r3, r2
 800864a:	d028      	beq.n	800869e <_dtoa_r+0xae6>
 800864c:	4649      	mov	r1, r9
 800864e:	2300      	movs	r3, #0
 8008650:	220a      	movs	r2, #10
 8008652:	4658      	mov	r0, fp
 8008654:	f000 f9d6 	bl	8008a04 <__multadd>
 8008658:	42af      	cmp	r7, r5
 800865a:	4681      	mov	r9, r0
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	f04f 020a 	mov.w	r2, #10
 8008664:	4639      	mov	r1, r7
 8008666:	4658      	mov	r0, fp
 8008668:	d107      	bne.n	800867a <_dtoa_r+0xac2>
 800866a:	f000 f9cb 	bl	8008a04 <__multadd>
 800866e:	4607      	mov	r7, r0
 8008670:	4605      	mov	r5, r0
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	e774      	b.n	8008564 <_dtoa_r+0x9ac>
 800867a:	f000 f9c3 	bl	8008a04 <__multadd>
 800867e:	4629      	mov	r1, r5
 8008680:	4607      	mov	r7, r0
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	4658      	mov	r0, fp
 8008688:	f000 f9bc 	bl	8008a04 <__multadd>
 800868c:	4605      	mov	r5, r0
 800868e:	e7f0      	b.n	8008672 <_dtoa_r+0xaba>
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	bfcc      	ite	gt
 8008696:	461e      	movgt	r6, r3
 8008698:	2601      	movle	r6, #1
 800869a:	4456      	add	r6, sl
 800869c:	2700      	movs	r7, #0
 800869e:	4649      	mov	r1, r9
 80086a0:	2201      	movs	r2, #1
 80086a2:	4658      	mov	r0, fp
 80086a4:	f000 fb5a 	bl	8008d5c <__lshift>
 80086a8:	4621      	mov	r1, r4
 80086aa:	4681      	mov	r9, r0
 80086ac:	f000 fbc2 	bl	8008e34 <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	dcb0      	bgt.n	8008616 <_dtoa_r+0xa5e>
 80086b4:	d102      	bne.n	80086bc <_dtoa_r+0xb04>
 80086b6:	f018 0f01 	tst.w	r8, #1
 80086ba:	d1ac      	bne.n	8008616 <_dtoa_r+0xa5e>
 80086bc:	4633      	mov	r3, r6
 80086be:	461e      	mov	r6, r3
 80086c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c4:	2a30      	cmp	r2, #48	@ 0x30
 80086c6:	d0fa      	beq.n	80086be <_dtoa_r+0xb06>
 80086c8:	e5c2      	b.n	8008250 <_dtoa_r+0x698>
 80086ca:	459a      	cmp	sl, r3
 80086cc:	d1a4      	bne.n	8008618 <_dtoa_r+0xa60>
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	3301      	adds	r3, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	2331      	movs	r3, #49	@ 0x31
 80086d6:	f88a 3000 	strb.w	r3, [sl]
 80086da:	e5b9      	b.n	8008250 <_dtoa_r+0x698>
 80086dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800873c <_dtoa_r+0xb84>
 80086e2:	b11b      	cbz	r3, 80086ec <_dtoa_r+0xb34>
 80086e4:	f10a 0308 	add.w	r3, sl, #8
 80086e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	4650      	mov	r0, sl
 80086ee:	b019      	add	sp, #100	@ 0x64
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	f77f ae37 	ble.w	800836a <_dtoa_r+0x7b2>
 80086fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008700:	2001      	movs	r0, #1
 8008702:	e655      	b.n	80083b0 <_dtoa_r+0x7f8>
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f77f aed6 	ble.w	80084b8 <_dtoa_r+0x900>
 800870c:	4656      	mov	r6, sl
 800870e:	4621      	mov	r1, r4
 8008710:	4648      	mov	r0, r9
 8008712:	f7ff f9c8 	bl	8007aa6 <quorem>
 8008716:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800871a:	f806 8b01 	strb.w	r8, [r6], #1
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	eba6 020a 	sub.w	r2, r6, sl
 8008724:	4293      	cmp	r3, r2
 8008726:	ddb3      	ble.n	8008690 <_dtoa_r+0xad8>
 8008728:	4649      	mov	r1, r9
 800872a:	2300      	movs	r3, #0
 800872c:	220a      	movs	r2, #10
 800872e:	4658      	mov	r0, fp
 8008730:	f000 f968 	bl	8008a04 <__multadd>
 8008734:	4681      	mov	r9, r0
 8008736:	e7ea      	b.n	800870e <_dtoa_r+0xb56>
 8008738:	08009a61 	.word	0x08009a61
 800873c:	080099e5 	.word	0x080099e5

08008740 <_free_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4605      	mov	r5, r0
 8008744:	2900      	cmp	r1, #0
 8008746:	d041      	beq.n	80087cc <_free_r+0x8c>
 8008748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874c:	1f0c      	subs	r4, r1, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb8      	it	lt
 8008752:	18e4      	addlt	r4, r4, r3
 8008754:	f000 f8e8 	bl	8008928 <__malloc_lock>
 8008758:	4a1d      	ldr	r2, [pc, #116]	@ (80087d0 <_free_r+0x90>)
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	b933      	cbnz	r3, 800876c <_free_r+0x2c>
 800875e:	6063      	str	r3, [r4, #4]
 8008760:	6014      	str	r4, [r2, #0]
 8008762:	4628      	mov	r0, r5
 8008764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008768:	f000 b8e4 	b.w	8008934 <__malloc_unlock>
 800876c:	42a3      	cmp	r3, r4
 800876e:	d908      	bls.n	8008782 <_free_r+0x42>
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	1821      	adds	r1, r4, r0
 8008774:	428b      	cmp	r3, r1
 8008776:	bf01      	itttt	eq
 8008778:	6819      	ldreq	r1, [r3, #0]
 800877a:	685b      	ldreq	r3, [r3, #4]
 800877c:	1809      	addeq	r1, r1, r0
 800877e:	6021      	streq	r1, [r4, #0]
 8008780:	e7ed      	b.n	800875e <_free_r+0x1e>
 8008782:	461a      	mov	r2, r3
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b10b      	cbz	r3, 800878c <_free_r+0x4c>
 8008788:	42a3      	cmp	r3, r4
 800878a:	d9fa      	bls.n	8008782 <_free_r+0x42>
 800878c:	6811      	ldr	r1, [r2, #0]
 800878e:	1850      	adds	r0, r2, r1
 8008790:	42a0      	cmp	r0, r4
 8008792:	d10b      	bne.n	80087ac <_free_r+0x6c>
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	4401      	add	r1, r0
 8008798:	1850      	adds	r0, r2, r1
 800879a:	4283      	cmp	r3, r0
 800879c:	6011      	str	r1, [r2, #0]
 800879e:	d1e0      	bne.n	8008762 <_free_r+0x22>
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	6053      	str	r3, [r2, #4]
 80087a6:	4408      	add	r0, r1
 80087a8:	6010      	str	r0, [r2, #0]
 80087aa:	e7da      	b.n	8008762 <_free_r+0x22>
 80087ac:	d902      	bls.n	80087b4 <_free_r+0x74>
 80087ae:	230c      	movs	r3, #12
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	e7d6      	b.n	8008762 <_free_r+0x22>
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	1821      	adds	r1, r4, r0
 80087b8:	428b      	cmp	r3, r1
 80087ba:	bf04      	itt	eq
 80087bc:	6819      	ldreq	r1, [r3, #0]
 80087be:	685b      	ldreq	r3, [r3, #4]
 80087c0:	6063      	str	r3, [r4, #4]
 80087c2:	bf04      	itt	eq
 80087c4:	1809      	addeq	r1, r1, r0
 80087c6:	6021      	streq	r1, [r4, #0]
 80087c8:	6054      	str	r4, [r2, #4]
 80087ca:	e7ca      	b.n	8008762 <_free_r+0x22>
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	20000728 	.word	0x20000728

080087d4 <malloc>:
 80087d4:	4b02      	ldr	r3, [pc, #8]	@ (80087e0 <malloc+0xc>)
 80087d6:	4601      	mov	r1, r0
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	f000 b825 	b.w	8008828 <_malloc_r>
 80087de:	bf00      	nop
 80087e0:	20000018 	.word	0x20000018

080087e4 <sbrk_aligned>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008824 <sbrk_aligned+0x40>)
 80087e8:	460c      	mov	r4, r1
 80087ea:	6831      	ldr	r1, [r6, #0]
 80087ec:	4605      	mov	r5, r0
 80087ee:	b911      	cbnz	r1, 80087f6 <sbrk_aligned+0x12>
 80087f0:	f000 feaa 	bl	8009548 <_sbrk_r>
 80087f4:	6030      	str	r0, [r6, #0]
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 fea5 	bl	8009548 <_sbrk_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d103      	bne.n	800880a <sbrk_aligned+0x26>
 8008802:	f04f 34ff 	mov.w	r4, #4294967295
 8008806:	4620      	mov	r0, r4
 8008808:	bd70      	pop	{r4, r5, r6, pc}
 800880a:	1cc4      	adds	r4, r0, #3
 800880c:	f024 0403 	bic.w	r4, r4, #3
 8008810:	42a0      	cmp	r0, r4
 8008812:	d0f8      	beq.n	8008806 <sbrk_aligned+0x22>
 8008814:	1a21      	subs	r1, r4, r0
 8008816:	4628      	mov	r0, r5
 8008818:	f000 fe96 	bl	8009548 <_sbrk_r>
 800881c:	3001      	adds	r0, #1
 800881e:	d1f2      	bne.n	8008806 <sbrk_aligned+0x22>
 8008820:	e7ef      	b.n	8008802 <sbrk_aligned+0x1e>
 8008822:	bf00      	nop
 8008824:	20000724 	.word	0x20000724

08008828 <_malloc_r>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	1ccd      	adds	r5, r1, #3
 800882e:	f025 0503 	bic.w	r5, r5, #3
 8008832:	3508      	adds	r5, #8
 8008834:	2d0c      	cmp	r5, #12
 8008836:	bf38      	it	cc
 8008838:	250c      	movcc	r5, #12
 800883a:	2d00      	cmp	r5, #0
 800883c:	4606      	mov	r6, r0
 800883e:	db01      	blt.n	8008844 <_malloc_r+0x1c>
 8008840:	42a9      	cmp	r1, r5
 8008842:	d904      	bls.n	800884e <_malloc_r+0x26>
 8008844:	230c      	movs	r3, #12
 8008846:	6033      	str	r3, [r6, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008924 <_malloc_r+0xfc>
 8008852:	f000 f869 	bl	8008928 <__malloc_lock>
 8008856:	f8d8 3000 	ldr.w	r3, [r8]
 800885a:	461c      	mov	r4, r3
 800885c:	bb44      	cbnz	r4, 80088b0 <_malloc_r+0x88>
 800885e:	4629      	mov	r1, r5
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff ffbf 	bl	80087e4 <sbrk_aligned>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	4604      	mov	r4, r0
 800886a:	d158      	bne.n	800891e <_malloc_r+0xf6>
 800886c:	f8d8 4000 	ldr.w	r4, [r8]
 8008870:	4627      	mov	r7, r4
 8008872:	2f00      	cmp	r7, #0
 8008874:	d143      	bne.n	80088fe <_malloc_r+0xd6>
 8008876:	2c00      	cmp	r4, #0
 8008878:	d04b      	beq.n	8008912 <_malloc_r+0xea>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	4639      	mov	r1, r7
 800887e:	4630      	mov	r0, r6
 8008880:	eb04 0903 	add.w	r9, r4, r3
 8008884:	f000 fe60 	bl	8009548 <_sbrk_r>
 8008888:	4581      	cmp	r9, r0
 800888a:	d142      	bne.n	8008912 <_malloc_r+0xea>
 800888c:	6821      	ldr	r1, [r4, #0]
 800888e:	1a6d      	subs	r5, r5, r1
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff ffa6 	bl	80087e4 <sbrk_aligned>
 8008898:	3001      	adds	r0, #1
 800889a:	d03a      	beq.n	8008912 <_malloc_r+0xea>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	442b      	add	r3, r5
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	f8d8 3000 	ldr.w	r3, [r8]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	bb62      	cbnz	r2, 8008904 <_malloc_r+0xdc>
 80088aa:	f8c8 7000 	str.w	r7, [r8]
 80088ae:	e00f      	b.n	80088d0 <_malloc_r+0xa8>
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	1b52      	subs	r2, r2, r5
 80088b4:	d420      	bmi.n	80088f8 <_malloc_r+0xd0>
 80088b6:	2a0b      	cmp	r2, #11
 80088b8:	d917      	bls.n	80088ea <_malloc_r+0xc2>
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	42a3      	cmp	r3, r4
 80088be:	6025      	str	r5, [r4, #0]
 80088c0:	bf18      	it	ne
 80088c2:	6059      	strne	r1, [r3, #4]
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	bf08      	it	eq
 80088c8:	f8c8 1000 	streq.w	r1, [r8]
 80088cc:	5162      	str	r2, [r4, r5]
 80088ce:	604b      	str	r3, [r1, #4]
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 f82f 	bl	8008934 <__malloc_unlock>
 80088d6:	f104 000b 	add.w	r0, r4, #11
 80088da:	1d23      	adds	r3, r4, #4
 80088dc:	f020 0007 	bic.w	r0, r0, #7
 80088e0:	1ac2      	subs	r2, r0, r3
 80088e2:	bf1c      	itt	ne
 80088e4:	1a1b      	subne	r3, r3, r0
 80088e6:	50a3      	strne	r3, [r4, r2]
 80088e8:	e7af      	b.n	800884a <_malloc_r+0x22>
 80088ea:	6862      	ldr	r2, [r4, #4]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	bf0c      	ite	eq
 80088f0:	f8c8 2000 	streq.w	r2, [r8]
 80088f4:	605a      	strne	r2, [r3, #4]
 80088f6:	e7eb      	b.n	80088d0 <_malloc_r+0xa8>
 80088f8:	4623      	mov	r3, r4
 80088fa:	6864      	ldr	r4, [r4, #4]
 80088fc:	e7ae      	b.n	800885c <_malloc_r+0x34>
 80088fe:	463c      	mov	r4, r7
 8008900:	687f      	ldr	r7, [r7, #4]
 8008902:	e7b6      	b.n	8008872 <_malloc_r+0x4a>
 8008904:	461a      	mov	r2, r3
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	42a3      	cmp	r3, r4
 800890a:	d1fb      	bne.n	8008904 <_malloc_r+0xdc>
 800890c:	2300      	movs	r3, #0
 800890e:	6053      	str	r3, [r2, #4]
 8008910:	e7de      	b.n	80088d0 <_malloc_r+0xa8>
 8008912:	230c      	movs	r3, #12
 8008914:	6033      	str	r3, [r6, #0]
 8008916:	4630      	mov	r0, r6
 8008918:	f000 f80c 	bl	8008934 <__malloc_unlock>
 800891c:	e794      	b.n	8008848 <_malloc_r+0x20>
 800891e:	6005      	str	r5, [r0, #0]
 8008920:	e7d6      	b.n	80088d0 <_malloc_r+0xa8>
 8008922:	bf00      	nop
 8008924:	20000728 	.word	0x20000728

08008928 <__malloc_lock>:
 8008928:	4801      	ldr	r0, [pc, #4]	@ (8008930 <__malloc_lock+0x8>)
 800892a:	f7ff b8b2 	b.w	8007a92 <__retarget_lock_acquire_recursive>
 800892e:	bf00      	nop
 8008930:	20000720 	.word	0x20000720

08008934 <__malloc_unlock>:
 8008934:	4801      	ldr	r0, [pc, #4]	@ (800893c <__malloc_unlock+0x8>)
 8008936:	f7ff b8ad 	b.w	8007a94 <__retarget_lock_release_recursive>
 800893a:	bf00      	nop
 800893c:	20000720 	.word	0x20000720

08008940 <_Balloc>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	69c6      	ldr	r6, [r0, #28]
 8008944:	4604      	mov	r4, r0
 8008946:	460d      	mov	r5, r1
 8008948:	b976      	cbnz	r6, 8008968 <_Balloc+0x28>
 800894a:	2010      	movs	r0, #16
 800894c:	f7ff ff42 	bl	80087d4 <malloc>
 8008950:	4602      	mov	r2, r0
 8008952:	61e0      	str	r0, [r4, #28]
 8008954:	b920      	cbnz	r0, 8008960 <_Balloc+0x20>
 8008956:	4b18      	ldr	r3, [pc, #96]	@ (80089b8 <_Balloc+0x78>)
 8008958:	4818      	ldr	r0, [pc, #96]	@ (80089bc <_Balloc+0x7c>)
 800895a:	216b      	movs	r1, #107	@ 0x6b
 800895c:	f000 fe12 	bl	8009584 <__assert_func>
 8008960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008964:	6006      	str	r6, [r0, #0]
 8008966:	60c6      	str	r6, [r0, #12]
 8008968:	69e6      	ldr	r6, [r4, #28]
 800896a:	68f3      	ldr	r3, [r6, #12]
 800896c:	b183      	cbz	r3, 8008990 <_Balloc+0x50>
 800896e:	69e3      	ldr	r3, [r4, #28]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008976:	b9b8      	cbnz	r0, 80089a8 <_Balloc+0x68>
 8008978:	2101      	movs	r1, #1
 800897a:	fa01 f605 	lsl.w	r6, r1, r5
 800897e:	1d72      	adds	r2, r6, #5
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	4620      	mov	r0, r4
 8008984:	f000 fe1c 	bl	80095c0 <_calloc_r>
 8008988:	b160      	cbz	r0, 80089a4 <_Balloc+0x64>
 800898a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800898e:	e00e      	b.n	80089ae <_Balloc+0x6e>
 8008990:	2221      	movs	r2, #33	@ 0x21
 8008992:	2104      	movs	r1, #4
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fe13 	bl	80095c0 <_calloc_r>
 800899a:	69e3      	ldr	r3, [r4, #28]
 800899c:	60f0      	str	r0, [r6, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e4      	bne.n	800896e <_Balloc+0x2e>
 80089a4:	2000      	movs	r0, #0
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	6802      	ldr	r2, [r0, #0]
 80089aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ae:	2300      	movs	r3, #0
 80089b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089b4:	e7f7      	b.n	80089a6 <_Balloc+0x66>
 80089b6:	bf00      	nop
 80089b8:	080099f2 	.word	0x080099f2
 80089bc:	08009a72 	.word	0x08009a72

080089c0 <_Bfree>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	69c6      	ldr	r6, [r0, #28]
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b976      	cbnz	r6, 80089e8 <_Bfree+0x28>
 80089ca:	2010      	movs	r0, #16
 80089cc:	f7ff ff02 	bl	80087d4 <malloc>
 80089d0:	4602      	mov	r2, r0
 80089d2:	61e8      	str	r0, [r5, #28]
 80089d4:	b920      	cbnz	r0, 80089e0 <_Bfree+0x20>
 80089d6:	4b09      	ldr	r3, [pc, #36]	@ (80089fc <_Bfree+0x3c>)
 80089d8:	4809      	ldr	r0, [pc, #36]	@ (8008a00 <_Bfree+0x40>)
 80089da:	218f      	movs	r1, #143	@ 0x8f
 80089dc:	f000 fdd2 	bl	8009584 <__assert_func>
 80089e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089e4:	6006      	str	r6, [r0, #0]
 80089e6:	60c6      	str	r6, [r0, #12]
 80089e8:	b13c      	cbz	r4, 80089fa <_Bfree+0x3a>
 80089ea:	69eb      	ldr	r3, [r5, #28]
 80089ec:	6862      	ldr	r2, [r4, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f4:	6021      	str	r1, [r4, #0]
 80089f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	080099f2 	.word	0x080099f2
 8008a00:	08009a72 	.word	0x08009a72

08008a04 <__multadd>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	690d      	ldr	r5, [r1, #16]
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	461e      	mov	r6, r3
 8008a10:	f101 0c14 	add.w	ip, r1, #20
 8008a14:	2000      	movs	r0, #0
 8008a16:	f8dc 3000 	ldr.w	r3, [ip]
 8008a1a:	b299      	uxth	r1, r3
 8008a1c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a20:	0c1e      	lsrs	r6, r3, #16
 8008a22:	0c0b      	lsrs	r3, r1, #16
 8008a24:	fb02 3306 	mla	r3, r2, r6, r3
 8008a28:	b289      	uxth	r1, r1
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a30:	4285      	cmp	r5, r0
 8008a32:	f84c 1b04 	str.w	r1, [ip], #4
 8008a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a3a:	dcec      	bgt.n	8008a16 <__multadd+0x12>
 8008a3c:	b30e      	cbz	r6, 8008a82 <__multadd+0x7e>
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	dc19      	bgt.n	8008a78 <__multadd+0x74>
 8008a44:	6861      	ldr	r1, [r4, #4]
 8008a46:	4638      	mov	r0, r7
 8008a48:	3101      	adds	r1, #1
 8008a4a:	f7ff ff79 	bl	8008940 <_Balloc>
 8008a4e:	4680      	mov	r8, r0
 8008a50:	b928      	cbnz	r0, 8008a5e <__multadd+0x5a>
 8008a52:	4602      	mov	r2, r0
 8008a54:	4b0c      	ldr	r3, [pc, #48]	@ (8008a88 <__multadd+0x84>)
 8008a56:	480d      	ldr	r0, [pc, #52]	@ (8008a8c <__multadd+0x88>)
 8008a58:	21ba      	movs	r1, #186	@ 0xba
 8008a5a:	f000 fd93 	bl	8009584 <__assert_func>
 8008a5e:	6922      	ldr	r2, [r4, #16]
 8008a60:	3202      	adds	r2, #2
 8008a62:	f104 010c 	add.w	r1, r4, #12
 8008a66:	0092      	lsls	r2, r2, #2
 8008a68:	300c      	adds	r0, #12
 8008a6a:	f000 fd7d 	bl	8009568 <memcpy>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7ff ffa5 	bl	80089c0 <_Bfree>
 8008a76:	4644      	mov	r4, r8
 8008a78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a7c:	3501      	adds	r5, #1
 8008a7e:	615e      	str	r6, [r3, #20]
 8008a80:	6125      	str	r5, [r4, #16]
 8008a82:	4620      	mov	r0, r4
 8008a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a88:	08009a61 	.word	0x08009a61
 8008a8c:	08009a72 	.word	0x08009a72

08008a90 <__hi0bits>:
 8008a90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a94:	4603      	mov	r3, r0
 8008a96:	bf36      	itet	cc
 8008a98:	0403      	lslcc	r3, r0, #16
 8008a9a:	2000      	movcs	r0, #0
 8008a9c:	2010      	movcc	r0, #16
 8008a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aa2:	bf3c      	itt	cc
 8008aa4:	021b      	lslcc	r3, r3, #8
 8008aa6:	3008      	addcc	r0, #8
 8008aa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aac:	bf3c      	itt	cc
 8008aae:	011b      	lslcc	r3, r3, #4
 8008ab0:	3004      	addcc	r0, #4
 8008ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ab6:	bf3c      	itt	cc
 8008ab8:	009b      	lslcc	r3, r3, #2
 8008aba:	3002      	addcc	r0, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	db05      	blt.n	8008acc <__hi0bits+0x3c>
 8008ac0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ac4:	f100 0001 	add.w	r0, r0, #1
 8008ac8:	bf08      	it	eq
 8008aca:	2020      	moveq	r0, #32
 8008acc:	4770      	bx	lr

08008ace <__lo0bits>:
 8008ace:	6803      	ldr	r3, [r0, #0]
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	f013 0007 	ands.w	r0, r3, #7
 8008ad6:	d00b      	beq.n	8008af0 <__lo0bits+0x22>
 8008ad8:	07d9      	lsls	r1, r3, #31
 8008ada:	d421      	bmi.n	8008b20 <__lo0bits+0x52>
 8008adc:	0798      	lsls	r0, r3, #30
 8008ade:	bf49      	itett	mi
 8008ae0:	085b      	lsrmi	r3, r3, #1
 8008ae2:	089b      	lsrpl	r3, r3, #2
 8008ae4:	2001      	movmi	r0, #1
 8008ae6:	6013      	strmi	r3, [r2, #0]
 8008ae8:	bf5c      	itt	pl
 8008aea:	6013      	strpl	r3, [r2, #0]
 8008aec:	2002      	movpl	r0, #2
 8008aee:	4770      	bx	lr
 8008af0:	b299      	uxth	r1, r3
 8008af2:	b909      	cbnz	r1, 8008af8 <__lo0bits+0x2a>
 8008af4:	0c1b      	lsrs	r3, r3, #16
 8008af6:	2010      	movs	r0, #16
 8008af8:	b2d9      	uxtb	r1, r3
 8008afa:	b909      	cbnz	r1, 8008b00 <__lo0bits+0x32>
 8008afc:	3008      	adds	r0, #8
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	0719      	lsls	r1, r3, #28
 8008b02:	bf04      	itt	eq
 8008b04:	091b      	lsreq	r3, r3, #4
 8008b06:	3004      	addeq	r0, #4
 8008b08:	0799      	lsls	r1, r3, #30
 8008b0a:	bf04      	itt	eq
 8008b0c:	089b      	lsreq	r3, r3, #2
 8008b0e:	3002      	addeq	r0, #2
 8008b10:	07d9      	lsls	r1, r3, #31
 8008b12:	d403      	bmi.n	8008b1c <__lo0bits+0x4e>
 8008b14:	085b      	lsrs	r3, r3, #1
 8008b16:	f100 0001 	add.w	r0, r0, #1
 8008b1a:	d003      	beq.n	8008b24 <__lo0bits+0x56>
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	4770      	bx	lr
 8008b20:	2000      	movs	r0, #0
 8008b22:	4770      	bx	lr
 8008b24:	2020      	movs	r0, #32
 8008b26:	4770      	bx	lr

08008b28 <__i2b>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	f7ff ff07 	bl	8008940 <_Balloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	b928      	cbnz	r0, 8008b42 <__i2b+0x1a>
 8008b36:	4b05      	ldr	r3, [pc, #20]	@ (8008b4c <__i2b+0x24>)
 8008b38:	4805      	ldr	r0, [pc, #20]	@ (8008b50 <__i2b+0x28>)
 8008b3a:	f240 1145 	movw	r1, #325	@ 0x145
 8008b3e:	f000 fd21 	bl	8009584 <__assert_func>
 8008b42:	2301      	movs	r3, #1
 8008b44:	6144      	str	r4, [r0, #20]
 8008b46:	6103      	str	r3, [r0, #16]
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	bf00      	nop
 8008b4c:	08009a61 	.word	0x08009a61
 8008b50:	08009a72 	.word	0x08009a72

08008b54 <__multiply>:
 8008b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b58:	4614      	mov	r4, r2
 8008b5a:	690a      	ldr	r2, [r1, #16]
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	bfa8      	it	ge
 8008b62:	4623      	movge	r3, r4
 8008b64:	460f      	mov	r7, r1
 8008b66:	bfa4      	itt	ge
 8008b68:	460c      	movge	r4, r1
 8008b6a:	461f      	movge	r7, r3
 8008b6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b74:	68a3      	ldr	r3, [r4, #8]
 8008b76:	6861      	ldr	r1, [r4, #4]
 8008b78:	eb0a 0609 	add.w	r6, sl, r9
 8008b7c:	42b3      	cmp	r3, r6
 8008b7e:	b085      	sub	sp, #20
 8008b80:	bfb8      	it	lt
 8008b82:	3101      	addlt	r1, #1
 8008b84:	f7ff fedc 	bl	8008940 <_Balloc>
 8008b88:	b930      	cbnz	r0, 8008b98 <__multiply+0x44>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4b44      	ldr	r3, [pc, #272]	@ (8008ca0 <__multiply+0x14c>)
 8008b8e:	4845      	ldr	r0, [pc, #276]	@ (8008ca4 <__multiply+0x150>)
 8008b90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b94:	f000 fcf6 	bl	8009584 <__assert_func>
 8008b98:	f100 0514 	add.w	r5, r0, #20
 8008b9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4543      	cmp	r3, r8
 8008ba6:	d321      	bcc.n	8008bec <__multiply+0x98>
 8008ba8:	f107 0114 	add.w	r1, r7, #20
 8008bac:	f104 0214 	add.w	r2, r4, #20
 8008bb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008bb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008bb8:	9302      	str	r3, [sp, #8]
 8008bba:	1b13      	subs	r3, r2, r4
 8008bbc:	3b15      	subs	r3, #21
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	f104 0715 	add.w	r7, r4, #21
 8008bc8:	42ba      	cmp	r2, r7
 8008bca:	bf38      	it	cc
 8008bcc:	2304      	movcc	r3, #4
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	9b02      	ldr	r3, [sp, #8]
 8008bd2:	9103      	str	r1, [sp, #12]
 8008bd4:	428b      	cmp	r3, r1
 8008bd6:	d80c      	bhi.n	8008bf2 <__multiply+0x9e>
 8008bd8:	2e00      	cmp	r6, #0
 8008bda:	dd03      	ble.n	8008be4 <__multiply+0x90>
 8008bdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d05b      	beq.n	8008c9c <__multiply+0x148>
 8008be4:	6106      	str	r6, [r0, #16]
 8008be6:	b005      	add	sp, #20
 8008be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bec:	f843 2b04 	str.w	r2, [r3], #4
 8008bf0:	e7d8      	b.n	8008ba4 <__multiply+0x50>
 8008bf2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bf6:	f1ba 0f00 	cmp.w	sl, #0
 8008bfa:	d024      	beq.n	8008c46 <__multiply+0xf2>
 8008bfc:	f104 0e14 	add.w	lr, r4, #20
 8008c00:	46a9      	mov	r9, r5
 8008c02:	f04f 0c00 	mov.w	ip, #0
 8008c06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c0a:	f8d9 3000 	ldr.w	r3, [r9]
 8008c0e:	fa1f fb87 	uxth.w	fp, r7
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008c1c:	f8d9 7000 	ldr.w	r7, [r9]
 8008c20:	4463      	add	r3, ip
 8008c22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c26:	fb0a c70b 	mla	r7, sl, fp, ip
 8008c2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c34:	4572      	cmp	r2, lr
 8008c36:	f849 3b04 	str.w	r3, [r9], #4
 8008c3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c3e:	d8e2      	bhi.n	8008c06 <__multiply+0xb2>
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	f845 c003 	str.w	ip, [r5, r3]
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c4c:	3104      	adds	r1, #4
 8008c4e:	f1b9 0f00 	cmp.w	r9, #0
 8008c52:	d021      	beq.n	8008c98 <__multiply+0x144>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	f104 0c14 	add.w	ip, r4, #20
 8008c5a:	46ae      	mov	lr, r5
 8008c5c:	f04f 0a00 	mov.w	sl, #0
 8008c60:	f8bc b000 	ldrh.w	fp, [ip]
 8008c64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c68:	fb09 770b 	mla	r7, r9, fp, r7
 8008c6c:	4457      	add	r7, sl
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c74:	f84e 3b04 	str.w	r3, [lr], #4
 8008c78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c80:	f8be 3000 	ldrh.w	r3, [lr]
 8008c84:	fb09 330a 	mla	r3, r9, sl, r3
 8008c88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c8c:	4562      	cmp	r2, ip
 8008c8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c92:	d8e5      	bhi.n	8008c60 <__multiply+0x10c>
 8008c94:	9f01      	ldr	r7, [sp, #4]
 8008c96:	51eb      	str	r3, [r5, r7]
 8008c98:	3504      	adds	r5, #4
 8008c9a:	e799      	b.n	8008bd0 <__multiply+0x7c>
 8008c9c:	3e01      	subs	r6, #1
 8008c9e:	e79b      	b.n	8008bd8 <__multiply+0x84>
 8008ca0:	08009a61 	.word	0x08009a61
 8008ca4:	08009a72 	.word	0x08009a72

08008ca8 <__pow5mult>:
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cac:	4615      	mov	r5, r2
 8008cae:	f012 0203 	ands.w	r2, r2, #3
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	d007      	beq.n	8008cc8 <__pow5mult+0x20>
 8008cb8:	4c25      	ldr	r4, [pc, #148]	@ (8008d50 <__pow5mult+0xa8>)
 8008cba:	3a01      	subs	r2, #1
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cc2:	f7ff fe9f 	bl	8008a04 <__multadd>
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	10ad      	asrs	r5, r5, #2
 8008cca:	d03d      	beq.n	8008d48 <__pow5mult+0xa0>
 8008ccc:	69fc      	ldr	r4, [r7, #28]
 8008cce:	b97c      	cbnz	r4, 8008cf0 <__pow5mult+0x48>
 8008cd0:	2010      	movs	r0, #16
 8008cd2:	f7ff fd7f 	bl	80087d4 <malloc>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	61f8      	str	r0, [r7, #28]
 8008cda:	b928      	cbnz	r0, 8008ce8 <__pow5mult+0x40>
 8008cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8008d54 <__pow5mult+0xac>)
 8008cde:	481e      	ldr	r0, [pc, #120]	@ (8008d58 <__pow5mult+0xb0>)
 8008ce0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ce4:	f000 fc4e 	bl	8009584 <__assert_func>
 8008ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cec:	6004      	str	r4, [r0, #0]
 8008cee:	60c4      	str	r4, [r0, #12]
 8008cf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cf8:	b94c      	cbnz	r4, 8008d0e <__pow5mult+0x66>
 8008cfa:	f240 2171 	movw	r1, #625	@ 0x271
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff ff12 	bl	8008b28 <__i2b>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	6003      	str	r3, [r0, #0]
 8008d0e:	f04f 0900 	mov.w	r9, #0
 8008d12:	07eb      	lsls	r3, r5, #31
 8008d14:	d50a      	bpl.n	8008d2c <__pow5mult+0x84>
 8008d16:	4631      	mov	r1, r6
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f7ff ff1a 	bl	8008b54 <__multiply>
 8008d20:	4631      	mov	r1, r6
 8008d22:	4680      	mov	r8, r0
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff fe4b 	bl	80089c0 <_Bfree>
 8008d2a:	4646      	mov	r6, r8
 8008d2c:	106d      	asrs	r5, r5, #1
 8008d2e:	d00b      	beq.n	8008d48 <__pow5mult+0xa0>
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	b938      	cbnz	r0, 8008d44 <__pow5mult+0x9c>
 8008d34:	4622      	mov	r2, r4
 8008d36:	4621      	mov	r1, r4
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ff0b 	bl	8008b54 <__multiply>
 8008d3e:	6020      	str	r0, [r4, #0]
 8008d40:	f8c0 9000 	str.w	r9, [r0]
 8008d44:	4604      	mov	r4, r0
 8008d46:	e7e4      	b.n	8008d12 <__pow5mult+0x6a>
 8008d48:	4630      	mov	r0, r6
 8008d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4e:	bf00      	nop
 8008d50:	08009acc 	.word	0x08009acc
 8008d54:	080099f2 	.word	0x080099f2
 8008d58:	08009a72 	.word	0x08009a72

08008d5c <__lshift>:
 8008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	460c      	mov	r4, r1
 8008d62:	6849      	ldr	r1, [r1, #4]
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	4691      	mov	r9, r2
 8008d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d74:	f108 0601 	add.w	r6, r8, #1
 8008d78:	42b3      	cmp	r3, r6
 8008d7a:	db0b      	blt.n	8008d94 <__lshift+0x38>
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff fddf 	bl	8008940 <_Balloc>
 8008d82:	4605      	mov	r5, r0
 8008d84:	b948      	cbnz	r0, 8008d9a <__lshift+0x3e>
 8008d86:	4602      	mov	r2, r0
 8008d88:	4b28      	ldr	r3, [pc, #160]	@ (8008e2c <__lshift+0xd0>)
 8008d8a:	4829      	ldr	r0, [pc, #164]	@ (8008e30 <__lshift+0xd4>)
 8008d8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d90:	f000 fbf8 	bl	8009584 <__assert_func>
 8008d94:	3101      	adds	r1, #1
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	e7ee      	b.n	8008d78 <__lshift+0x1c>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f100 0114 	add.w	r1, r0, #20
 8008da0:	f100 0210 	add.w	r2, r0, #16
 8008da4:	4618      	mov	r0, r3
 8008da6:	4553      	cmp	r3, sl
 8008da8:	db33      	blt.n	8008e12 <__lshift+0xb6>
 8008daa:	6920      	ldr	r0, [r4, #16]
 8008dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008db0:	f104 0314 	add.w	r3, r4, #20
 8008db4:	f019 091f 	ands.w	r9, r9, #31
 8008db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dc0:	d02b      	beq.n	8008e1a <__lshift+0xbe>
 8008dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008dc6:	468a      	mov	sl, r1
 8008dc8:	2200      	movs	r2, #0
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	fa00 f009 	lsl.w	r0, r0, r9
 8008dd0:	4310      	orrs	r0, r2
 8008dd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dda:	459c      	cmp	ip, r3
 8008ddc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008de0:	d8f3      	bhi.n	8008dca <__lshift+0x6e>
 8008de2:	ebac 0304 	sub.w	r3, ip, r4
 8008de6:	3b15      	subs	r3, #21
 8008de8:	f023 0303 	bic.w	r3, r3, #3
 8008dec:	3304      	adds	r3, #4
 8008dee:	f104 0015 	add.w	r0, r4, #21
 8008df2:	4584      	cmp	ip, r0
 8008df4:	bf38      	it	cc
 8008df6:	2304      	movcc	r3, #4
 8008df8:	50ca      	str	r2, [r1, r3]
 8008dfa:	b10a      	cbz	r2, 8008e00 <__lshift+0xa4>
 8008dfc:	f108 0602 	add.w	r6, r8, #2
 8008e00:	3e01      	subs	r6, #1
 8008e02:	4638      	mov	r0, r7
 8008e04:	612e      	str	r6, [r5, #16]
 8008e06:	4621      	mov	r1, r4
 8008e08:	f7ff fdda 	bl	80089c0 <_Bfree>
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e16:	3301      	adds	r3, #1
 8008e18:	e7c5      	b.n	8008da6 <__lshift+0x4a>
 8008e1a:	3904      	subs	r1, #4
 8008e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e20:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e24:	459c      	cmp	ip, r3
 8008e26:	d8f9      	bhi.n	8008e1c <__lshift+0xc0>
 8008e28:	e7ea      	b.n	8008e00 <__lshift+0xa4>
 8008e2a:	bf00      	nop
 8008e2c:	08009a61 	.word	0x08009a61
 8008e30:	08009a72 	.word	0x08009a72

08008e34 <__mcmp>:
 8008e34:	690a      	ldr	r2, [r1, #16]
 8008e36:	4603      	mov	r3, r0
 8008e38:	6900      	ldr	r0, [r0, #16]
 8008e3a:	1a80      	subs	r0, r0, r2
 8008e3c:	b530      	push	{r4, r5, lr}
 8008e3e:	d10e      	bne.n	8008e5e <__mcmp+0x2a>
 8008e40:	3314      	adds	r3, #20
 8008e42:	3114      	adds	r1, #20
 8008e44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e54:	4295      	cmp	r5, r2
 8008e56:	d003      	beq.n	8008e60 <__mcmp+0x2c>
 8008e58:	d205      	bcs.n	8008e66 <__mcmp+0x32>
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	bd30      	pop	{r4, r5, pc}
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d3f3      	bcc.n	8008e4c <__mcmp+0x18>
 8008e64:	e7fb      	b.n	8008e5e <__mcmp+0x2a>
 8008e66:	2001      	movs	r0, #1
 8008e68:	e7f9      	b.n	8008e5e <__mcmp+0x2a>
	...

08008e6c <__mdiff>:
 8008e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	4689      	mov	r9, r1
 8008e72:	4606      	mov	r6, r0
 8008e74:	4611      	mov	r1, r2
 8008e76:	4648      	mov	r0, r9
 8008e78:	4614      	mov	r4, r2
 8008e7a:	f7ff ffdb 	bl	8008e34 <__mcmp>
 8008e7e:	1e05      	subs	r5, r0, #0
 8008e80:	d112      	bne.n	8008ea8 <__mdiff+0x3c>
 8008e82:	4629      	mov	r1, r5
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7ff fd5b 	bl	8008940 <_Balloc>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <__mdiff+0x2e>
 8008e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f8c <__mdiff+0x120>)
 8008e90:	f240 2137 	movw	r1, #567	@ 0x237
 8008e94:	483e      	ldr	r0, [pc, #248]	@ (8008f90 <__mdiff+0x124>)
 8008e96:	f000 fb75 	bl	8009584 <__assert_func>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	b003      	add	sp, #12
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	bfbc      	itt	lt
 8008eaa:	464b      	movlt	r3, r9
 8008eac:	46a1      	movlt	r9, r4
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008eb4:	bfba      	itte	lt
 8008eb6:	461c      	movlt	r4, r3
 8008eb8:	2501      	movlt	r5, #1
 8008eba:	2500      	movge	r5, #0
 8008ebc:	f7ff fd40 	bl	8008940 <_Balloc>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	b918      	cbnz	r0, 8008ecc <__mdiff+0x60>
 8008ec4:	4b31      	ldr	r3, [pc, #196]	@ (8008f8c <__mdiff+0x120>)
 8008ec6:	f240 2145 	movw	r1, #581	@ 0x245
 8008eca:	e7e3      	b.n	8008e94 <__mdiff+0x28>
 8008ecc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ed0:	6926      	ldr	r6, [r4, #16]
 8008ed2:	60c5      	str	r5, [r0, #12]
 8008ed4:	f109 0310 	add.w	r3, r9, #16
 8008ed8:	f109 0514 	add.w	r5, r9, #20
 8008edc:	f104 0e14 	add.w	lr, r4, #20
 8008ee0:	f100 0b14 	add.w	fp, r0, #20
 8008ee4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ee8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	46d9      	mov	r9, fp
 8008ef0:	f04f 0c00 	mov.w	ip, #0
 8008ef4:	9b01      	ldr	r3, [sp, #4]
 8008ef6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008efa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	fa1f f38a 	uxth.w	r3, sl
 8008f04:	4619      	mov	r1, r3
 8008f06:	b283      	uxth	r3, r0
 8008f08:	1acb      	subs	r3, r1, r3
 8008f0a:	0c00      	lsrs	r0, r0, #16
 8008f0c:	4463      	add	r3, ip
 8008f0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f1c:	4576      	cmp	r6, lr
 8008f1e:	f849 3b04 	str.w	r3, [r9], #4
 8008f22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f26:	d8e5      	bhi.n	8008ef4 <__mdiff+0x88>
 8008f28:	1b33      	subs	r3, r6, r4
 8008f2a:	3b15      	subs	r3, #21
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	3415      	adds	r4, #21
 8008f32:	3304      	adds	r3, #4
 8008f34:	42a6      	cmp	r6, r4
 8008f36:	bf38      	it	cc
 8008f38:	2304      	movcc	r3, #4
 8008f3a:	441d      	add	r5, r3
 8008f3c:	445b      	add	r3, fp
 8008f3e:	461e      	mov	r6, r3
 8008f40:	462c      	mov	r4, r5
 8008f42:	4544      	cmp	r4, r8
 8008f44:	d30e      	bcc.n	8008f64 <__mdiff+0xf8>
 8008f46:	f108 0103 	add.w	r1, r8, #3
 8008f4a:	1b49      	subs	r1, r1, r5
 8008f4c:	f021 0103 	bic.w	r1, r1, #3
 8008f50:	3d03      	subs	r5, #3
 8008f52:	45a8      	cmp	r8, r5
 8008f54:	bf38      	it	cc
 8008f56:	2100      	movcc	r1, #0
 8008f58:	440b      	add	r3, r1
 8008f5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f5e:	b191      	cbz	r1, 8008f86 <__mdiff+0x11a>
 8008f60:	6117      	str	r7, [r2, #16]
 8008f62:	e79d      	b.n	8008ea0 <__mdiff+0x34>
 8008f64:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f68:	46e6      	mov	lr, ip
 8008f6a:	0c08      	lsrs	r0, r1, #16
 8008f6c:	fa1c fc81 	uxtah	ip, ip, r1
 8008f70:	4471      	add	r1, lr
 8008f72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f76:	b289      	uxth	r1, r1
 8008f78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f7c:	f846 1b04 	str.w	r1, [r6], #4
 8008f80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f84:	e7dd      	b.n	8008f42 <__mdiff+0xd6>
 8008f86:	3f01      	subs	r7, #1
 8008f88:	e7e7      	b.n	8008f5a <__mdiff+0xee>
 8008f8a:	bf00      	nop
 8008f8c:	08009a61 	.word	0x08009a61
 8008f90:	08009a72 	.word	0x08009a72

08008f94 <__d2b>:
 8008f94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	460f      	mov	r7, r1
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	ec59 8b10 	vmov	r8, r9, d0
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	f7ff fccd 	bl	8008940 <_Balloc>
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	b930      	cbnz	r0, 8008fb8 <__d2b+0x24>
 8008faa:	4602      	mov	r2, r0
 8008fac:	4b23      	ldr	r3, [pc, #140]	@ (800903c <__d2b+0xa8>)
 8008fae:	4824      	ldr	r0, [pc, #144]	@ (8009040 <__d2b+0xac>)
 8008fb0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fb4:	f000 fae6 	bl	8009584 <__assert_func>
 8008fb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fc0:	b10d      	cbz	r5, 8008fc6 <__d2b+0x32>
 8008fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	f1b8 0300 	subs.w	r3, r8, #0
 8008fcc:	d023      	beq.n	8009016 <__d2b+0x82>
 8008fce:	4668      	mov	r0, sp
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	f7ff fd7c 	bl	8008ace <__lo0bits>
 8008fd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fda:	b1d0      	cbz	r0, 8009012 <__d2b+0x7e>
 8008fdc:	f1c0 0320 	rsb	r3, r0, #32
 8008fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	40c2      	lsrs	r2, r0
 8008fe8:	6163      	str	r3, [r4, #20]
 8008fea:	9201      	str	r2, [sp, #4]
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	61a3      	str	r3, [r4, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	bf0c      	ite	eq
 8008ff4:	2201      	moveq	r2, #1
 8008ff6:	2202      	movne	r2, #2
 8008ff8:	6122      	str	r2, [r4, #16]
 8008ffa:	b1a5      	cbz	r5, 8009026 <__d2b+0x92>
 8008ffc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009000:	4405      	add	r5, r0
 8009002:	603d      	str	r5, [r7, #0]
 8009004:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009008:	6030      	str	r0, [r6, #0]
 800900a:	4620      	mov	r0, r4
 800900c:	b003      	add	sp, #12
 800900e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009012:	6161      	str	r1, [r4, #20]
 8009014:	e7ea      	b.n	8008fec <__d2b+0x58>
 8009016:	a801      	add	r0, sp, #4
 8009018:	f7ff fd59 	bl	8008ace <__lo0bits>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	6163      	str	r3, [r4, #20]
 8009020:	3020      	adds	r0, #32
 8009022:	2201      	movs	r2, #1
 8009024:	e7e8      	b.n	8008ff8 <__d2b+0x64>
 8009026:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800902a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800902e:	6038      	str	r0, [r7, #0]
 8009030:	6918      	ldr	r0, [r3, #16]
 8009032:	f7ff fd2d 	bl	8008a90 <__hi0bits>
 8009036:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800903a:	e7e5      	b.n	8009008 <__d2b+0x74>
 800903c:	08009a61 	.word	0x08009a61
 8009040:	08009a72 	.word	0x08009a72

08009044 <__sfputc_r>:
 8009044:	6893      	ldr	r3, [r2, #8]
 8009046:	3b01      	subs	r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	b410      	push	{r4}
 800904c:	6093      	str	r3, [r2, #8]
 800904e:	da08      	bge.n	8009062 <__sfputc_r+0x1e>
 8009050:	6994      	ldr	r4, [r2, #24]
 8009052:	42a3      	cmp	r3, r4
 8009054:	db01      	blt.n	800905a <__sfputc_r+0x16>
 8009056:	290a      	cmp	r1, #10
 8009058:	d103      	bne.n	8009062 <__sfputc_r+0x1e>
 800905a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800905e:	f000 b9df 	b.w	8009420 <__swbuf_r>
 8009062:	6813      	ldr	r3, [r2, #0]
 8009064:	1c58      	adds	r0, r3, #1
 8009066:	6010      	str	r0, [r2, #0]
 8009068:	7019      	strb	r1, [r3, #0]
 800906a:	4608      	mov	r0, r1
 800906c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009070:	4770      	bx	lr

08009072 <__sfputs_r>:
 8009072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	4614      	mov	r4, r2
 800907a:	18d5      	adds	r5, r2, r3
 800907c:	42ac      	cmp	r4, r5
 800907e:	d101      	bne.n	8009084 <__sfputs_r+0x12>
 8009080:	2000      	movs	r0, #0
 8009082:	e007      	b.n	8009094 <__sfputs_r+0x22>
 8009084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009088:	463a      	mov	r2, r7
 800908a:	4630      	mov	r0, r6
 800908c:	f7ff ffda 	bl	8009044 <__sfputc_r>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d1f3      	bne.n	800907c <__sfputs_r+0xa>
 8009094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009098 <_vfiprintf_r>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	460d      	mov	r5, r1
 800909e:	b09d      	sub	sp, #116	@ 0x74
 80090a0:	4614      	mov	r4, r2
 80090a2:	4698      	mov	r8, r3
 80090a4:	4606      	mov	r6, r0
 80090a6:	b118      	cbz	r0, 80090b0 <_vfiprintf_r+0x18>
 80090a8:	6a03      	ldr	r3, [r0, #32]
 80090aa:	b90b      	cbnz	r3, 80090b0 <_vfiprintf_r+0x18>
 80090ac:	f7fe fbe8 	bl	8007880 <__sinit>
 80090b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090b2:	07d9      	lsls	r1, r3, #31
 80090b4:	d405      	bmi.n	80090c2 <_vfiprintf_r+0x2a>
 80090b6:	89ab      	ldrh	r3, [r5, #12]
 80090b8:	059a      	lsls	r2, r3, #22
 80090ba:	d402      	bmi.n	80090c2 <_vfiprintf_r+0x2a>
 80090bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090be:	f7fe fce8 	bl	8007a92 <__retarget_lock_acquire_recursive>
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	071b      	lsls	r3, r3, #28
 80090c6:	d501      	bpl.n	80090cc <_vfiprintf_r+0x34>
 80090c8:	692b      	ldr	r3, [r5, #16]
 80090ca:	b99b      	cbnz	r3, 80090f4 <_vfiprintf_r+0x5c>
 80090cc:	4629      	mov	r1, r5
 80090ce:	4630      	mov	r0, r6
 80090d0:	f000 f9e4 	bl	800949c <__swsetup_r>
 80090d4:	b170      	cbz	r0, 80090f4 <_vfiprintf_r+0x5c>
 80090d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090d8:	07dc      	lsls	r4, r3, #31
 80090da:	d504      	bpl.n	80090e6 <_vfiprintf_r+0x4e>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	b01d      	add	sp, #116	@ 0x74
 80090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	0598      	lsls	r0, r3, #22
 80090ea:	d4f7      	bmi.n	80090dc <_vfiprintf_r+0x44>
 80090ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ee:	f7fe fcd1 	bl	8007a94 <__retarget_lock_release_recursive>
 80090f2:	e7f3      	b.n	80090dc <_vfiprintf_r+0x44>
 80090f4:	2300      	movs	r3, #0
 80090f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090f8:	2320      	movs	r3, #32
 80090fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009102:	2330      	movs	r3, #48	@ 0x30
 8009104:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80092b4 <_vfiprintf_r+0x21c>
 8009108:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800910c:	f04f 0901 	mov.w	r9, #1
 8009110:	4623      	mov	r3, r4
 8009112:	469a      	mov	sl, r3
 8009114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009118:	b10a      	cbz	r2, 800911e <_vfiprintf_r+0x86>
 800911a:	2a25      	cmp	r2, #37	@ 0x25
 800911c:	d1f9      	bne.n	8009112 <_vfiprintf_r+0x7a>
 800911e:	ebba 0b04 	subs.w	fp, sl, r4
 8009122:	d00b      	beq.n	800913c <_vfiprintf_r+0xa4>
 8009124:	465b      	mov	r3, fp
 8009126:	4622      	mov	r2, r4
 8009128:	4629      	mov	r1, r5
 800912a:	4630      	mov	r0, r6
 800912c:	f7ff ffa1 	bl	8009072 <__sfputs_r>
 8009130:	3001      	adds	r0, #1
 8009132:	f000 80a7 	beq.w	8009284 <_vfiprintf_r+0x1ec>
 8009136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009138:	445a      	add	r2, fp
 800913a:	9209      	str	r2, [sp, #36]	@ 0x24
 800913c:	f89a 3000 	ldrb.w	r3, [sl]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 809f 	beq.w	8009284 <_vfiprintf_r+0x1ec>
 8009146:	2300      	movs	r3, #0
 8009148:	f04f 32ff 	mov.w	r2, #4294967295
 800914c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009150:	f10a 0a01 	add.w	sl, sl, #1
 8009154:	9304      	str	r3, [sp, #16]
 8009156:	9307      	str	r3, [sp, #28]
 8009158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800915c:	931a      	str	r3, [sp, #104]	@ 0x68
 800915e:	4654      	mov	r4, sl
 8009160:	2205      	movs	r2, #5
 8009162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009166:	4853      	ldr	r0, [pc, #332]	@ (80092b4 <_vfiprintf_r+0x21c>)
 8009168:	f7f7 f85a 	bl	8000220 <memchr>
 800916c:	9a04      	ldr	r2, [sp, #16]
 800916e:	b9d8      	cbnz	r0, 80091a8 <_vfiprintf_r+0x110>
 8009170:	06d1      	lsls	r1, r2, #27
 8009172:	bf44      	itt	mi
 8009174:	2320      	movmi	r3, #32
 8009176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800917a:	0713      	lsls	r3, r2, #28
 800917c:	bf44      	itt	mi
 800917e:	232b      	movmi	r3, #43	@ 0x2b
 8009180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009184:	f89a 3000 	ldrb.w	r3, [sl]
 8009188:	2b2a      	cmp	r3, #42	@ 0x2a
 800918a:	d015      	beq.n	80091b8 <_vfiprintf_r+0x120>
 800918c:	9a07      	ldr	r2, [sp, #28]
 800918e:	4654      	mov	r4, sl
 8009190:	2000      	movs	r0, #0
 8009192:	f04f 0c0a 	mov.w	ip, #10
 8009196:	4621      	mov	r1, r4
 8009198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800919c:	3b30      	subs	r3, #48	@ 0x30
 800919e:	2b09      	cmp	r3, #9
 80091a0:	d94b      	bls.n	800923a <_vfiprintf_r+0x1a2>
 80091a2:	b1b0      	cbz	r0, 80091d2 <_vfiprintf_r+0x13a>
 80091a4:	9207      	str	r2, [sp, #28]
 80091a6:	e014      	b.n	80091d2 <_vfiprintf_r+0x13a>
 80091a8:	eba0 0308 	sub.w	r3, r0, r8
 80091ac:	fa09 f303 	lsl.w	r3, r9, r3
 80091b0:	4313      	orrs	r3, r2
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	46a2      	mov	sl, r4
 80091b6:	e7d2      	b.n	800915e <_vfiprintf_r+0xc6>
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	1d19      	adds	r1, r3, #4
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	9103      	str	r1, [sp, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bfbb      	ittet	lt
 80091c4:	425b      	neglt	r3, r3
 80091c6:	f042 0202 	orrlt.w	r2, r2, #2
 80091ca:	9307      	strge	r3, [sp, #28]
 80091cc:	9307      	strlt	r3, [sp, #28]
 80091ce:	bfb8      	it	lt
 80091d0:	9204      	strlt	r2, [sp, #16]
 80091d2:	7823      	ldrb	r3, [r4, #0]
 80091d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80091d6:	d10a      	bne.n	80091ee <_vfiprintf_r+0x156>
 80091d8:	7863      	ldrb	r3, [r4, #1]
 80091da:	2b2a      	cmp	r3, #42	@ 0x2a
 80091dc:	d132      	bne.n	8009244 <_vfiprintf_r+0x1ac>
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	1d1a      	adds	r2, r3, #4
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	9203      	str	r2, [sp, #12]
 80091e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091ea:	3402      	adds	r4, #2
 80091ec:	9305      	str	r3, [sp, #20]
 80091ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092c4 <_vfiprintf_r+0x22c>
 80091f2:	7821      	ldrb	r1, [r4, #0]
 80091f4:	2203      	movs	r2, #3
 80091f6:	4650      	mov	r0, sl
 80091f8:	f7f7 f812 	bl	8000220 <memchr>
 80091fc:	b138      	cbz	r0, 800920e <_vfiprintf_r+0x176>
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	eba0 000a 	sub.w	r0, r0, sl
 8009204:	2240      	movs	r2, #64	@ 0x40
 8009206:	4082      	lsls	r2, r0
 8009208:	4313      	orrs	r3, r2
 800920a:	3401      	adds	r4, #1
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009212:	4829      	ldr	r0, [pc, #164]	@ (80092b8 <_vfiprintf_r+0x220>)
 8009214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009218:	2206      	movs	r2, #6
 800921a:	f7f7 f801 	bl	8000220 <memchr>
 800921e:	2800      	cmp	r0, #0
 8009220:	d03f      	beq.n	80092a2 <_vfiprintf_r+0x20a>
 8009222:	4b26      	ldr	r3, [pc, #152]	@ (80092bc <_vfiprintf_r+0x224>)
 8009224:	bb1b      	cbnz	r3, 800926e <_vfiprintf_r+0x1d6>
 8009226:	9b03      	ldr	r3, [sp, #12]
 8009228:	3307      	adds	r3, #7
 800922a:	f023 0307 	bic.w	r3, r3, #7
 800922e:	3308      	adds	r3, #8
 8009230:	9303      	str	r3, [sp, #12]
 8009232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009234:	443b      	add	r3, r7
 8009236:	9309      	str	r3, [sp, #36]	@ 0x24
 8009238:	e76a      	b.n	8009110 <_vfiprintf_r+0x78>
 800923a:	fb0c 3202 	mla	r2, ip, r2, r3
 800923e:	460c      	mov	r4, r1
 8009240:	2001      	movs	r0, #1
 8009242:	e7a8      	b.n	8009196 <_vfiprintf_r+0xfe>
 8009244:	2300      	movs	r3, #0
 8009246:	3401      	adds	r4, #1
 8009248:	9305      	str	r3, [sp, #20]
 800924a:	4619      	mov	r1, r3
 800924c:	f04f 0c0a 	mov.w	ip, #10
 8009250:	4620      	mov	r0, r4
 8009252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009256:	3a30      	subs	r2, #48	@ 0x30
 8009258:	2a09      	cmp	r2, #9
 800925a:	d903      	bls.n	8009264 <_vfiprintf_r+0x1cc>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0c6      	beq.n	80091ee <_vfiprintf_r+0x156>
 8009260:	9105      	str	r1, [sp, #20]
 8009262:	e7c4      	b.n	80091ee <_vfiprintf_r+0x156>
 8009264:	fb0c 2101 	mla	r1, ip, r1, r2
 8009268:	4604      	mov	r4, r0
 800926a:	2301      	movs	r3, #1
 800926c:	e7f0      	b.n	8009250 <_vfiprintf_r+0x1b8>
 800926e:	ab03      	add	r3, sp, #12
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	462a      	mov	r2, r5
 8009274:	4b12      	ldr	r3, [pc, #72]	@ (80092c0 <_vfiprintf_r+0x228>)
 8009276:	a904      	add	r1, sp, #16
 8009278:	4630      	mov	r0, r6
 800927a:	f7fd febd 	bl	8006ff8 <_printf_float>
 800927e:	4607      	mov	r7, r0
 8009280:	1c78      	adds	r0, r7, #1
 8009282:	d1d6      	bne.n	8009232 <_vfiprintf_r+0x19a>
 8009284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009286:	07d9      	lsls	r1, r3, #31
 8009288:	d405      	bmi.n	8009296 <_vfiprintf_r+0x1fe>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	059a      	lsls	r2, r3, #22
 800928e:	d402      	bmi.n	8009296 <_vfiprintf_r+0x1fe>
 8009290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009292:	f7fe fbff 	bl	8007a94 <__retarget_lock_release_recursive>
 8009296:	89ab      	ldrh	r3, [r5, #12]
 8009298:	065b      	lsls	r3, r3, #25
 800929a:	f53f af1f 	bmi.w	80090dc <_vfiprintf_r+0x44>
 800929e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092a0:	e71e      	b.n	80090e0 <_vfiprintf_r+0x48>
 80092a2:	ab03      	add	r3, sp, #12
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	462a      	mov	r2, r5
 80092a8:	4b05      	ldr	r3, [pc, #20]	@ (80092c0 <_vfiprintf_r+0x228>)
 80092aa:	a904      	add	r1, sp, #16
 80092ac:	4630      	mov	r0, r6
 80092ae:	f7fe f93b 	bl	8007528 <_printf_i>
 80092b2:	e7e4      	b.n	800927e <_vfiprintf_r+0x1e6>
 80092b4:	08009bc8 	.word	0x08009bc8
 80092b8:	08009bd2 	.word	0x08009bd2
 80092bc:	08006ff9 	.word	0x08006ff9
 80092c0:	08009073 	.word	0x08009073
 80092c4:	08009bce 	.word	0x08009bce

080092c8 <__sflush_r>:
 80092c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d0:	0716      	lsls	r6, r2, #28
 80092d2:	4605      	mov	r5, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	d454      	bmi.n	8009382 <__sflush_r+0xba>
 80092d8:	684b      	ldr	r3, [r1, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dc02      	bgt.n	80092e4 <__sflush_r+0x1c>
 80092de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dd48      	ble.n	8009376 <__sflush_r+0xae>
 80092e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	d045      	beq.n	8009376 <__sflush_r+0xae>
 80092ea:	2300      	movs	r3, #0
 80092ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092f0:	682f      	ldr	r7, [r5, #0]
 80092f2:	6a21      	ldr	r1, [r4, #32]
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	d030      	beq.n	800935a <__sflush_r+0x92>
 80092f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	0759      	lsls	r1, r3, #29
 80092fe:	d505      	bpl.n	800930c <__sflush_r+0x44>
 8009300:	6863      	ldr	r3, [r4, #4]
 8009302:	1ad2      	subs	r2, r2, r3
 8009304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009306:	b10b      	cbz	r3, 800930c <__sflush_r+0x44>
 8009308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800930a:	1ad2      	subs	r2, r2, r3
 800930c:	2300      	movs	r3, #0
 800930e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009310:	6a21      	ldr	r1, [r4, #32]
 8009312:	4628      	mov	r0, r5
 8009314:	47b0      	blx	r6
 8009316:	1c43      	adds	r3, r0, #1
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	d106      	bne.n	800932a <__sflush_r+0x62>
 800931c:	6829      	ldr	r1, [r5, #0]
 800931e:	291d      	cmp	r1, #29
 8009320:	d82b      	bhi.n	800937a <__sflush_r+0xb2>
 8009322:	4a2a      	ldr	r2, [pc, #168]	@ (80093cc <__sflush_r+0x104>)
 8009324:	410a      	asrs	r2, r1
 8009326:	07d6      	lsls	r6, r2, #31
 8009328:	d427      	bmi.n	800937a <__sflush_r+0xb2>
 800932a:	2200      	movs	r2, #0
 800932c:	6062      	str	r2, [r4, #4]
 800932e:	04d9      	lsls	r1, r3, #19
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	6022      	str	r2, [r4, #0]
 8009334:	d504      	bpl.n	8009340 <__sflush_r+0x78>
 8009336:	1c42      	adds	r2, r0, #1
 8009338:	d101      	bne.n	800933e <__sflush_r+0x76>
 800933a:	682b      	ldr	r3, [r5, #0]
 800933c:	b903      	cbnz	r3, 8009340 <__sflush_r+0x78>
 800933e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009342:	602f      	str	r7, [r5, #0]
 8009344:	b1b9      	cbz	r1, 8009376 <__sflush_r+0xae>
 8009346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800934a:	4299      	cmp	r1, r3
 800934c:	d002      	beq.n	8009354 <__sflush_r+0x8c>
 800934e:	4628      	mov	r0, r5
 8009350:	f7ff f9f6 	bl	8008740 <_free_r>
 8009354:	2300      	movs	r3, #0
 8009356:	6363      	str	r3, [r4, #52]	@ 0x34
 8009358:	e00d      	b.n	8009376 <__sflush_r+0xae>
 800935a:	2301      	movs	r3, #1
 800935c:	4628      	mov	r0, r5
 800935e:	47b0      	blx	r6
 8009360:	4602      	mov	r2, r0
 8009362:	1c50      	adds	r0, r2, #1
 8009364:	d1c9      	bne.n	80092fa <__sflush_r+0x32>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0c6      	beq.n	80092fa <__sflush_r+0x32>
 800936c:	2b1d      	cmp	r3, #29
 800936e:	d001      	beq.n	8009374 <__sflush_r+0xac>
 8009370:	2b16      	cmp	r3, #22
 8009372:	d11e      	bne.n	80093b2 <__sflush_r+0xea>
 8009374:	602f      	str	r7, [r5, #0]
 8009376:	2000      	movs	r0, #0
 8009378:	e022      	b.n	80093c0 <__sflush_r+0xf8>
 800937a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800937e:	b21b      	sxth	r3, r3
 8009380:	e01b      	b.n	80093ba <__sflush_r+0xf2>
 8009382:	690f      	ldr	r7, [r1, #16]
 8009384:	2f00      	cmp	r7, #0
 8009386:	d0f6      	beq.n	8009376 <__sflush_r+0xae>
 8009388:	0793      	lsls	r3, r2, #30
 800938a:	680e      	ldr	r6, [r1, #0]
 800938c:	bf08      	it	eq
 800938e:	694b      	ldreq	r3, [r1, #20]
 8009390:	600f      	str	r7, [r1, #0]
 8009392:	bf18      	it	ne
 8009394:	2300      	movne	r3, #0
 8009396:	eba6 0807 	sub.w	r8, r6, r7
 800939a:	608b      	str	r3, [r1, #8]
 800939c:	f1b8 0f00 	cmp.w	r8, #0
 80093a0:	dde9      	ble.n	8009376 <__sflush_r+0xae>
 80093a2:	6a21      	ldr	r1, [r4, #32]
 80093a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093a6:	4643      	mov	r3, r8
 80093a8:	463a      	mov	r2, r7
 80093aa:	4628      	mov	r0, r5
 80093ac:	47b0      	blx	r6
 80093ae:	2800      	cmp	r0, #0
 80093b0:	dc08      	bgt.n	80093c4 <__sflush_r+0xfc>
 80093b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	f04f 30ff 	mov.w	r0, #4294967295
 80093c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c4:	4407      	add	r7, r0
 80093c6:	eba8 0800 	sub.w	r8, r8, r0
 80093ca:	e7e7      	b.n	800939c <__sflush_r+0xd4>
 80093cc:	dfbffffe 	.word	0xdfbffffe

080093d0 <_fflush_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	690b      	ldr	r3, [r1, #16]
 80093d4:	4605      	mov	r5, r0
 80093d6:	460c      	mov	r4, r1
 80093d8:	b913      	cbnz	r3, 80093e0 <_fflush_r+0x10>
 80093da:	2500      	movs	r5, #0
 80093dc:	4628      	mov	r0, r5
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	b118      	cbz	r0, 80093ea <_fflush_r+0x1a>
 80093e2:	6a03      	ldr	r3, [r0, #32]
 80093e4:	b90b      	cbnz	r3, 80093ea <_fflush_r+0x1a>
 80093e6:	f7fe fa4b 	bl	8007880 <__sinit>
 80093ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f3      	beq.n	80093da <_fflush_r+0xa>
 80093f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093f4:	07d0      	lsls	r0, r2, #31
 80093f6:	d404      	bmi.n	8009402 <_fflush_r+0x32>
 80093f8:	0599      	lsls	r1, r3, #22
 80093fa:	d402      	bmi.n	8009402 <_fflush_r+0x32>
 80093fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093fe:	f7fe fb48 	bl	8007a92 <__retarget_lock_acquire_recursive>
 8009402:	4628      	mov	r0, r5
 8009404:	4621      	mov	r1, r4
 8009406:	f7ff ff5f 	bl	80092c8 <__sflush_r>
 800940a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800940c:	07da      	lsls	r2, r3, #31
 800940e:	4605      	mov	r5, r0
 8009410:	d4e4      	bmi.n	80093dc <_fflush_r+0xc>
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	059b      	lsls	r3, r3, #22
 8009416:	d4e1      	bmi.n	80093dc <_fflush_r+0xc>
 8009418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800941a:	f7fe fb3b 	bl	8007a94 <__retarget_lock_release_recursive>
 800941e:	e7dd      	b.n	80093dc <_fflush_r+0xc>

08009420 <__swbuf_r>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	460e      	mov	r6, r1
 8009424:	4614      	mov	r4, r2
 8009426:	4605      	mov	r5, r0
 8009428:	b118      	cbz	r0, 8009432 <__swbuf_r+0x12>
 800942a:	6a03      	ldr	r3, [r0, #32]
 800942c:	b90b      	cbnz	r3, 8009432 <__swbuf_r+0x12>
 800942e:	f7fe fa27 	bl	8007880 <__sinit>
 8009432:	69a3      	ldr	r3, [r4, #24]
 8009434:	60a3      	str	r3, [r4, #8]
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	071a      	lsls	r2, r3, #28
 800943a:	d501      	bpl.n	8009440 <__swbuf_r+0x20>
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	b943      	cbnz	r3, 8009452 <__swbuf_r+0x32>
 8009440:	4621      	mov	r1, r4
 8009442:	4628      	mov	r0, r5
 8009444:	f000 f82a 	bl	800949c <__swsetup_r>
 8009448:	b118      	cbz	r0, 8009452 <__swbuf_r+0x32>
 800944a:	f04f 37ff 	mov.w	r7, #4294967295
 800944e:	4638      	mov	r0, r7
 8009450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	6922      	ldr	r2, [r4, #16]
 8009456:	1a98      	subs	r0, r3, r2
 8009458:	6963      	ldr	r3, [r4, #20]
 800945a:	b2f6      	uxtb	r6, r6
 800945c:	4283      	cmp	r3, r0
 800945e:	4637      	mov	r7, r6
 8009460:	dc05      	bgt.n	800946e <__swbuf_r+0x4e>
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f7ff ffb3 	bl	80093d0 <_fflush_r>
 800946a:	2800      	cmp	r0, #0
 800946c:	d1ed      	bne.n	800944a <__swbuf_r+0x2a>
 800946e:	68a3      	ldr	r3, [r4, #8]
 8009470:	3b01      	subs	r3, #1
 8009472:	60a3      	str	r3, [r4, #8]
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	701e      	strb	r6, [r3, #0]
 800947c:	6962      	ldr	r2, [r4, #20]
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	429a      	cmp	r2, r3
 8009482:	d004      	beq.n	800948e <__swbuf_r+0x6e>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	07db      	lsls	r3, r3, #31
 8009488:	d5e1      	bpl.n	800944e <__swbuf_r+0x2e>
 800948a:	2e0a      	cmp	r6, #10
 800948c:	d1df      	bne.n	800944e <__swbuf_r+0x2e>
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff ff9d 	bl	80093d0 <_fflush_r>
 8009496:	2800      	cmp	r0, #0
 8009498:	d0d9      	beq.n	800944e <__swbuf_r+0x2e>
 800949a:	e7d6      	b.n	800944a <__swbuf_r+0x2a>

0800949c <__swsetup_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4b29      	ldr	r3, [pc, #164]	@ (8009544 <__swsetup_r+0xa8>)
 80094a0:	4605      	mov	r5, r0
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	460c      	mov	r4, r1
 80094a6:	b118      	cbz	r0, 80094b0 <__swsetup_r+0x14>
 80094a8:	6a03      	ldr	r3, [r0, #32]
 80094aa:	b90b      	cbnz	r3, 80094b0 <__swsetup_r+0x14>
 80094ac:	f7fe f9e8 	bl	8007880 <__sinit>
 80094b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b4:	0719      	lsls	r1, r3, #28
 80094b6:	d422      	bmi.n	80094fe <__swsetup_r+0x62>
 80094b8:	06da      	lsls	r2, r3, #27
 80094ba:	d407      	bmi.n	80094cc <__swsetup_r+0x30>
 80094bc:	2209      	movs	r2, #9
 80094be:	602a      	str	r2, [r5, #0]
 80094c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ca:	e033      	b.n	8009534 <__swsetup_r+0x98>
 80094cc:	0758      	lsls	r0, r3, #29
 80094ce:	d512      	bpl.n	80094f6 <__swsetup_r+0x5a>
 80094d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094d2:	b141      	cbz	r1, 80094e6 <__swsetup_r+0x4a>
 80094d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094d8:	4299      	cmp	r1, r3
 80094da:	d002      	beq.n	80094e2 <__swsetup_r+0x46>
 80094dc:	4628      	mov	r0, r5
 80094de:	f7ff f92f 	bl	8008740 <_free_r>
 80094e2:	2300      	movs	r3, #0
 80094e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	2300      	movs	r3, #0
 80094f0:	6063      	str	r3, [r4, #4]
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f043 0308 	orr.w	r3, r3, #8
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	b94b      	cbnz	r3, 8009516 <__swsetup_r+0x7a>
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800950c:	d003      	beq.n	8009516 <__swsetup_r+0x7a>
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f8c1 	bl	8009698 <__smakebuf_r>
 8009516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951a:	f013 0201 	ands.w	r2, r3, #1
 800951e:	d00a      	beq.n	8009536 <__swsetup_r+0x9a>
 8009520:	2200      	movs	r2, #0
 8009522:	60a2      	str	r2, [r4, #8]
 8009524:	6962      	ldr	r2, [r4, #20]
 8009526:	4252      	negs	r2, r2
 8009528:	61a2      	str	r2, [r4, #24]
 800952a:	6922      	ldr	r2, [r4, #16]
 800952c:	b942      	cbnz	r2, 8009540 <__swsetup_r+0xa4>
 800952e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009532:	d1c5      	bne.n	80094c0 <__swsetup_r+0x24>
 8009534:	bd38      	pop	{r3, r4, r5, pc}
 8009536:	0799      	lsls	r1, r3, #30
 8009538:	bf58      	it	pl
 800953a:	6962      	ldrpl	r2, [r4, #20]
 800953c:	60a2      	str	r2, [r4, #8]
 800953e:	e7f4      	b.n	800952a <__swsetup_r+0x8e>
 8009540:	2000      	movs	r0, #0
 8009542:	e7f7      	b.n	8009534 <__swsetup_r+0x98>
 8009544:	20000018 	.word	0x20000018

08009548 <_sbrk_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d06      	ldr	r5, [pc, #24]	@ (8009564 <_sbrk_r+0x1c>)
 800954c:	2300      	movs	r3, #0
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	f7f8 fc2a 	bl	8001dac <_sbrk>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_sbrk_r+0x1a>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_sbrk_r+0x1a>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	2000071c 	.word	0x2000071c

08009568 <memcpy>:
 8009568:	440a      	add	r2, r1
 800956a:	4291      	cmp	r1, r2
 800956c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009570:	d100      	bne.n	8009574 <memcpy+0xc>
 8009572:	4770      	bx	lr
 8009574:	b510      	push	{r4, lr}
 8009576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800957a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800957e:	4291      	cmp	r1, r2
 8009580:	d1f9      	bne.n	8009576 <memcpy+0xe>
 8009582:	bd10      	pop	{r4, pc}

08009584 <__assert_func>:
 8009584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009586:	4614      	mov	r4, r2
 8009588:	461a      	mov	r2, r3
 800958a:	4b09      	ldr	r3, [pc, #36]	@ (80095b0 <__assert_func+0x2c>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4605      	mov	r5, r0
 8009590:	68d8      	ldr	r0, [r3, #12]
 8009592:	b954      	cbnz	r4, 80095aa <__assert_func+0x26>
 8009594:	4b07      	ldr	r3, [pc, #28]	@ (80095b4 <__assert_func+0x30>)
 8009596:	461c      	mov	r4, r3
 8009598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800959c:	9100      	str	r1, [sp, #0]
 800959e:	462b      	mov	r3, r5
 80095a0:	4905      	ldr	r1, [pc, #20]	@ (80095b8 <__assert_func+0x34>)
 80095a2:	f000 f841 	bl	8009628 <fiprintf>
 80095a6:	f000 f8d5 	bl	8009754 <abort>
 80095aa:	4b04      	ldr	r3, [pc, #16]	@ (80095bc <__assert_func+0x38>)
 80095ac:	e7f4      	b.n	8009598 <__assert_func+0x14>
 80095ae:	bf00      	nop
 80095b0:	20000018 	.word	0x20000018
 80095b4:	08009c1e 	.word	0x08009c1e
 80095b8:	08009bf0 	.word	0x08009bf0
 80095bc:	08009be3 	.word	0x08009be3

080095c0 <_calloc_r>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	fba1 5402 	umull	r5, r4, r1, r2
 80095c6:	b93c      	cbnz	r4, 80095d8 <_calloc_r+0x18>
 80095c8:	4629      	mov	r1, r5
 80095ca:	f7ff f92d 	bl	8008828 <_malloc_r>
 80095ce:	4606      	mov	r6, r0
 80095d0:	b928      	cbnz	r0, 80095de <_calloc_r+0x1e>
 80095d2:	2600      	movs	r6, #0
 80095d4:	4630      	mov	r0, r6
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	220c      	movs	r2, #12
 80095da:	6002      	str	r2, [r0, #0]
 80095dc:	e7f9      	b.n	80095d2 <_calloc_r+0x12>
 80095de:	462a      	mov	r2, r5
 80095e0:	4621      	mov	r1, r4
 80095e2:	f7fe f9d8 	bl	8007996 <memset>
 80095e6:	e7f5      	b.n	80095d4 <_calloc_r+0x14>

080095e8 <__ascii_mbtowc>:
 80095e8:	b082      	sub	sp, #8
 80095ea:	b901      	cbnz	r1, 80095ee <__ascii_mbtowc+0x6>
 80095ec:	a901      	add	r1, sp, #4
 80095ee:	b142      	cbz	r2, 8009602 <__ascii_mbtowc+0x1a>
 80095f0:	b14b      	cbz	r3, 8009606 <__ascii_mbtowc+0x1e>
 80095f2:	7813      	ldrb	r3, [r2, #0]
 80095f4:	600b      	str	r3, [r1, #0]
 80095f6:	7812      	ldrb	r2, [r2, #0]
 80095f8:	1e10      	subs	r0, r2, #0
 80095fa:	bf18      	it	ne
 80095fc:	2001      	movne	r0, #1
 80095fe:	b002      	add	sp, #8
 8009600:	4770      	bx	lr
 8009602:	4610      	mov	r0, r2
 8009604:	e7fb      	b.n	80095fe <__ascii_mbtowc+0x16>
 8009606:	f06f 0001 	mvn.w	r0, #1
 800960a:	e7f8      	b.n	80095fe <__ascii_mbtowc+0x16>

0800960c <__ascii_wctomb>:
 800960c:	4603      	mov	r3, r0
 800960e:	4608      	mov	r0, r1
 8009610:	b141      	cbz	r1, 8009624 <__ascii_wctomb+0x18>
 8009612:	2aff      	cmp	r2, #255	@ 0xff
 8009614:	d904      	bls.n	8009620 <__ascii_wctomb+0x14>
 8009616:	228a      	movs	r2, #138	@ 0x8a
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	4770      	bx	lr
 8009620:	700a      	strb	r2, [r1, #0]
 8009622:	2001      	movs	r0, #1
 8009624:	4770      	bx	lr
	...

08009628 <fiprintf>:
 8009628:	b40e      	push	{r1, r2, r3}
 800962a:	b503      	push	{r0, r1, lr}
 800962c:	4601      	mov	r1, r0
 800962e:	ab03      	add	r3, sp, #12
 8009630:	4805      	ldr	r0, [pc, #20]	@ (8009648 <fiprintf+0x20>)
 8009632:	f853 2b04 	ldr.w	r2, [r3], #4
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	f7ff fd2d 	bl	8009098 <_vfiprintf_r>
 800963e:	b002      	add	sp, #8
 8009640:	f85d eb04 	ldr.w	lr, [sp], #4
 8009644:	b003      	add	sp, #12
 8009646:	4770      	bx	lr
 8009648:	20000018 	.word	0x20000018

0800964c <__swhatbuf_r>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	460c      	mov	r4, r1
 8009650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009654:	2900      	cmp	r1, #0
 8009656:	b096      	sub	sp, #88	@ 0x58
 8009658:	4615      	mov	r5, r2
 800965a:	461e      	mov	r6, r3
 800965c:	da0d      	bge.n	800967a <__swhatbuf_r+0x2e>
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009664:	f04f 0100 	mov.w	r1, #0
 8009668:	bf14      	ite	ne
 800966a:	2340      	movne	r3, #64	@ 0x40
 800966c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009670:	2000      	movs	r0, #0
 8009672:	6031      	str	r1, [r6, #0]
 8009674:	602b      	str	r3, [r5, #0]
 8009676:	b016      	add	sp, #88	@ 0x58
 8009678:	bd70      	pop	{r4, r5, r6, pc}
 800967a:	466a      	mov	r2, sp
 800967c:	f000 f848 	bl	8009710 <_fstat_r>
 8009680:	2800      	cmp	r0, #0
 8009682:	dbec      	blt.n	800965e <__swhatbuf_r+0x12>
 8009684:	9901      	ldr	r1, [sp, #4]
 8009686:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800968a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800968e:	4259      	negs	r1, r3
 8009690:	4159      	adcs	r1, r3
 8009692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009696:	e7eb      	b.n	8009670 <__swhatbuf_r+0x24>

08009698 <__smakebuf_r>:
 8009698:	898b      	ldrh	r3, [r1, #12]
 800969a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800969c:	079d      	lsls	r5, r3, #30
 800969e:	4606      	mov	r6, r0
 80096a0:	460c      	mov	r4, r1
 80096a2:	d507      	bpl.n	80096b4 <__smakebuf_r+0x1c>
 80096a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	6123      	str	r3, [r4, #16]
 80096ac:	2301      	movs	r3, #1
 80096ae:	6163      	str	r3, [r4, #20]
 80096b0:	b003      	add	sp, #12
 80096b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b4:	ab01      	add	r3, sp, #4
 80096b6:	466a      	mov	r2, sp
 80096b8:	f7ff ffc8 	bl	800964c <__swhatbuf_r>
 80096bc:	9f00      	ldr	r7, [sp, #0]
 80096be:	4605      	mov	r5, r0
 80096c0:	4639      	mov	r1, r7
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff f8b0 	bl	8008828 <_malloc_r>
 80096c8:	b948      	cbnz	r0, 80096de <__smakebuf_r+0x46>
 80096ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ce:	059a      	lsls	r2, r3, #22
 80096d0:	d4ee      	bmi.n	80096b0 <__smakebuf_r+0x18>
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	f043 0302 	orr.w	r3, r3, #2
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	e7e2      	b.n	80096a4 <__smakebuf_r+0xc>
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	6020      	str	r0, [r4, #0]
 80096e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096e6:	81a3      	strh	r3, [r4, #12]
 80096e8:	9b01      	ldr	r3, [sp, #4]
 80096ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096ee:	b15b      	cbz	r3, 8009708 <__smakebuf_r+0x70>
 80096f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096f4:	4630      	mov	r0, r6
 80096f6:	f000 f81d 	bl	8009734 <_isatty_r>
 80096fa:	b128      	cbz	r0, 8009708 <__smakebuf_r+0x70>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	f043 0301 	orr.w	r3, r3, #1
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	431d      	orrs	r5, r3
 800970c:	81a5      	strh	r5, [r4, #12]
 800970e:	e7cf      	b.n	80096b0 <__smakebuf_r+0x18>

08009710 <_fstat_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d07      	ldr	r5, [pc, #28]	@ (8009730 <_fstat_r+0x20>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	4611      	mov	r1, r2
 800971c:	602b      	str	r3, [r5, #0]
 800971e:	f7f8 fb1d 	bl	8001d5c <_fstat>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	d102      	bne.n	800972c <_fstat_r+0x1c>
 8009726:	682b      	ldr	r3, [r5, #0]
 8009728:	b103      	cbz	r3, 800972c <_fstat_r+0x1c>
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	bd38      	pop	{r3, r4, r5, pc}
 800972e:	bf00      	nop
 8009730:	2000071c 	.word	0x2000071c

08009734 <_isatty_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d06      	ldr	r5, [pc, #24]	@ (8009750 <_isatty_r+0x1c>)
 8009738:	2300      	movs	r3, #0
 800973a:	4604      	mov	r4, r0
 800973c:	4608      	mov	r0, r1
 800973e:	602b      	str	r3, [r5, #0]
 8009740:	f7f8 fb1c 	bl	8001d7c <_isatty>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d102      	bne.n	800974e <_isatty_r+0x1a>
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	b103      	cbz	r3, 800974e <_isatty_r+0x1a>
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	2000071c 	.word	0x2000071c

08009754 <abort>:
 8009754:	b508      	push	{r3, lr}
 8009756:	2006      	movs	r0, #6
 8009758:	f000 f82c 	bl	80097b4 <raise>
 800975c:	2001      	movs	r0, #1
 800975e:	f7f8 faad 	bl	8001cbc <_exit>

08009762 <_raise_r>:
 8009762:	291f      	cmp	r1, #31
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4605      	mov	r5, r0
 8009768:	460c      	mov	r4, r1
 800976a:	d904      	bls.n	8009776 <_raise_r+0x14>
 800976c:	2316      	movs	r3, #22
 800976e:	6003      	str	r3, [r0, #0]
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	bd38      	pop	{r3, r4, r5, pc}
 8009776:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009778:	b112      	cbz	r2, 8009780 <_raise_r+0x1e>
 800977a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800977e:	b94b      	cbnz	r3, 8009794 <_raise_r+0x32>
 8009780:	4628      	mov	r0, r5
 8009782:	f000 f831 	bl	80097e8 <_getpid_r>
 8009786:	4622      	mov	r2, r4
 8009788:	4601      	mov	r1, r0
 800978a:	4628      	mov	r0, r5
 800978c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009790:	f000 b818 	b.w	80097c4 <_kill_r>
 8009794:	2b01      	cmp	r3, #1
 8009796:	d00a      	beq.n	80097ae <_raise_r+0x4c>
 8009798:	1c59      	adds	r1, r3, #1
 800979a:	d103      	bne.n	80097a4 <_raise_r+0x42>
 800979c:	2316      	movs	r3, #22
 800979e:	6003      	str	r3, [r0, #0]
 80097a0:	2001      	movs	r0, #1
 80097a2:	e7e7      	b.n	8009774 <_raise_r+0x12>
 80097a4:	2100      	movs	r1, #0
 80097a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097aa:	4620      	mov	r0, r4
 80097ac:	4798      	blx	r3
 80097ae:	2000      	movs	r0, #0
 80097b0:	e7e0      	b.n	8009774 <_raise_r+0x12>
	...

080097b4 <raise>:
 80097b4:	4b02      	ldr	r3, [pc, #8]	@ (80097c0 <raise+0xc>)
 80097b6:	4601      	mov	r1, r0
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	f7ff bfd2 	b.w	8009762 <_raise_r>
 80097be:	bf00      	nop
 80097c0:	20000018 	.word	0x20000018

080097c4 <_kill_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d07      	ldr	r5, [pc, #28]	@ (80097e4 <_kill_r+0x20>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	602b      	str	r3, [r5, #0]
 80097d2:	f7f8 fa63 	bl	8001c9c <_kill>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d102      	bne.n	80097e0 <_kill_r+0x1c>
 80097da:	682b      	ldr	r3, [r5, #0]
 80097dc:	b103      	cbz	r3, 80097e0 <_kill_r+0x1c>
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	bd38      	pop	{r3, r4, r5, pc}
 80097e2:	bf00      	nop
 80097e4:	2000071c 	.word	0x2000071c

080097e8 <_getpid_r>:
 80097e8:	f7f8 ba50 	b.w	8001c8c <_getpid>

080097ec <_init>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	bf00      	nop
 80097f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f2:	bc08      	pop	{r3}
 80097f4:	469e      	mov	lr, r3
 80097f6:	4770      	bx	lr

080097f8 <_fini>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr
